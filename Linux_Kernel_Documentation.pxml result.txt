========================= CLASS #1 =============================
(0) <29> {0} [5513]: <?xml version="1.0" encoding="utf-8" ?> <plainxml>The 802.11 subsystems &amp;ndash; for kernel developers Explaining wireless 802.11 networking in the Linux kernel 2007-2009Johannes BergJohannesBergjohannes@sipsolutions.net This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. These books attempt to give a description of the various subsystems that play a role in 802.11 wireless networking in Linux. Since these books are for kernel developers they attempts to document the structures and functions used in the kernel as well as giving a higher-level overview. The reader is expected to be familiar with the 802.11 standard as published by the IEEE in 802.11-2007 (or possibly later versions). References to this standard will be given as &quot;802.11-2007 8.1.5&quot;. The cfg80211 subsystem Device registration Actions and configuration Scanning and BSS list handling Utility functions Data path helpers Regulatory enforcement infrastructure RFkill integration Test mode The mac80211 subsystem &lt;!-- Generally, this document shall be ordered by increasing complexity. It is important to note that readers should be able to read only the first few sections to get a working driver and only advanced usage should require reading the full document. --&gt;The basic mac80211 driver interface You should read and understand the information contained within this part of the book while implementing a driver. In some chapters, advanced usage is noted, that may be skipped at first. This part of the book only covers station and monitor mode functionality, additional information required to implement the other modes is covered in the second part of the book. Basic hardware handlingTBD This chapter shall contain information on getting a hw struct allocated and registered with mac80211. Since it is required to allocate rates/modes before registering a hw struct, this chapter shall also contain information on setting up the rate/mode structs. Additionally, some discussion about the callbacks and the general programming model should be in here, including the definition of ieee80211_ops which will be referred to a lot. Finally, a discussion of hardware capabilities should be done with references to other parts of the book. &lt;!-- intentionally multiple !F lines to get proper order --&gt; PHY configurationTBD This chapter should describe PHY handling including start/stop callbacks and the various structures used. Virtual interfacesTBD This chapter should describe virtual interface basics that are relevant to the driver (VLANs, MGMT etc are not.) It should explain the use of the add_iface/remove_iface callbacks as well as the interface configuration callbacks. Things related to AP mode should be discussed there. Things related to supporting multiple interfaces should be in the appropriate chapter, a BIG FAT note should be here about this though and the recommendation to allow only a single interface in STA mode at first! Receive and transmit processingwhat should be hereTBD This should describe the receive and transmit paths in mac80211/the drivers as well as transmit status handling. Frame format Packet alignment Calling into mac80211 from interrupts functions/definitions Frame filtering The mac80211 workqueue Advanced driver interface Information contained within this part of the book is of interest only for advanced interaction of mac80211 with drivers to exploit more hardware capabilities and improve performance. LED support Mac80211 supports various ways of blinking LEDs. Wherever possible, device LEDs should be exposed as LED class devices and hooked up to the appropriate trigger, which will then be triggered appropriately by mac80211. Hardware crypto acceleration &lt;!-- intentionally multiple !F lines to get proper order --&gt; Powersave support Beacon filter support Multiple queues and QoS supportTBD Access point mode supportTBDSome parts of the if_conf should be discussed here instead Insert notes about VLAN interfaces with hw crypto here or in the hw crypto chapter. support for powersaving clients Supporting multiple virtual interfacesTBD Note: WDS with identical MAC address should almost always be OK Insert notes about having multiple virtual interfaces with different MAC addresses here, note which configurations are supported by mac80211, add notes about supporting hw crypto with it. Station handlingTODO Hardware scan offloadTBD AggregationTX A-MPDU aggregation RX A-MPDU aggregation Spatial Multiplexing Powersave (SMPS) Rate control interfaceTBD This part of the book describes the rate control algorithm interface and how it relates to mac80211 and drivers. Rate Control APITBD InternalsTBD This part of the book describes mac80211 internals.
(30) <59> {5515} [11201]: Key handlingKey handling basics MORE TBDTBDReceive processingTBDTransmit processingTBDStation info handlingProgramming information STA information lifetime rules Aggregation STA SynchronisationTBDLocking, lots of RCUThe 802.11 subsystems &amp;ndash; for kernel developers Explaining wireless 802.11 networking in the Linux kernel 2007-2009Johannes BergJohannesBergjohannes@sipsolutions.net This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. These books attempt to give a description of the various subsystems that play a role in 802.11 wireless networking in Linux. Since these books are for kernel developers they attempts to document the structures and functions used in the kernel as well as giving a higher-level overview. The reader is expected to be familiar with the 802.11 standard as published by the IEEE in 802.11-2007 (or possibly later versions). References to this standard will be given as &quot;802.11-2007 8.1.5&quot;. The cfg80211 subsystem Device registration Actions and configuration Scanning and BSS list handling Utility functions Data path helpers Regulatory enforcement infrastructure RFkill integration Test mode The mac80211 subsystem &lt;!-- Generally, this document shall be ordered by increasing complexity. It is important to note that readers should be able to read only the first few sections to get a working driver and only advanced usage should require reading the full document. --&gt;The basic mac80211 driver interface You should read and understand the information contained within this part of the book while implementing a driver. In some chapters, advanced usage is noted, that may be skipped at first. This part of the book only covers station and monitor mode functionality, additional information required to implement the other modes is covered in the second part of the book. Basic hardware handlingTBD This chapter shall contain information on getting a hw struct allocated and registered with mac80211. Since it is required to allocate rates/modes before registering a hw struct, this chapter shall also contain information on setting up the rate/mode structs. Additionally, some discussion about the callbacks and the general programming model should be in here, including the definition of ieee80211_ops which will be referred to a lot. Finally, a discussion of hardware capabilities should be done with references to other parts of the book. &lt;!-- intentionally multiple !F lines to get proper order --&gt; PHY configurationTBD This chapter should describe PHY handling including start/stop callbacks and the various structures used. Virtual interfacesTBD This chapter should describe virtual interface basics that are relevant to the driver (VLANs, MGMT etc are not.) It should explain the use of the add_iface/remove_iface callbacks as well as the interface configuration callbacks. Things related to AP mode should be discussed there. Things related to supporting multiple interfaces should be in the appropriate chapter, a BIG FAT note should be here about this though and the recommendation to allow only a single interface in STA mode at first! Receive and transmit processingwhat should be hereTBD This should describe the receive and transmit paths in mac80211/the drivers as well as transmit status handling. Frame format Packet alignment Calling into mac80211 from interrupts functions/definitions Frame filtering The mac80211 workqueue Advanced driver interface Information contained within this part of the book is of interest only for advanced interaction of mac80211 with drivers to exploit more hardware capabilities and improve performance. LED support Mac80211 supports various ways of blinking LEDs. Wherever possible, device LEDs should be exposed as LED class devices and hooked up to the appropriate trigger, which will then be triggered appropriately by mac80211. Hardware crypto acceleration &lt;!-- intentionally multiple !F lines to get proper order --&gt; Powersave support Beacon filter support Multiple queues and QoS supportTBD Access point mode supportTBDSome parts of the if_conf should be discussed here instead Insert notes about VLAN interfaces with hw crypto here or in the hw crypto chapter. support for powersaving clients Supporting multiple virtual interfacesTBD Note: WDS with identical MAC address should almost always be OK Insert notes about having multiple virtual interfaces with different MAC addresses here, note which configurations are supported by mac80211, add notes about supporting hw crypto with it. Station handlingTODO Hardware scan offloadTBD AggregationTX A-MPDU aggregation RX A-MPDU aggregation Spatial Multiplexing Powersave (SMPS) Rate control interfaceTBD This part of the book describes the rate control algorithm interface and how it relates to mac80211 and drivers. Rate Control APITBD InternalsTBD This part of the book describes mac80211 internals.
*****************************************************************
========================= CLASS #2 =============================
(60) <74> {11203} [15111]: Key handlingKey handling basics MORE TBDTBDReceive processingTBDTransmit processingTBDStation info handlingProgramming information STA information lifetime rules Aggregation SynchronisationTBDLocking, lots of RCU&lt;!-- ****************************************************** --&gt;&lt;!-- Header --&gt;&lt;!-- ****************************************************** --&gt;The ALSA Driver API This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This document is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Management of Cards and DevicesCard Management Device Components Module requests and Device File Entries Memory Management Helpers PCM APIPCM Core PCM Format Helpers PCM Memory Management Control/Mixer APIGeneral Control Interface AC97 Codec API Virtual Master Control API MIDI APIRaw MIDI API MPU401-UART API Proc Info APIProc Info Interface Miscellaneous FunctionsHardware-Dependent Devices API Jack Abstraction Layer API ISA DMA Helpers Other Helper Macros Debug objects life timeThomasGleixnertglx@linutronix.de2008Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction debugobjects is a generic infrastructure to track the life time of kernel objects and validate the operations on those. debugobjects is useful to check for the following error patterns: Activation of uninitialized objectsInitialization of active objectsUsage of freed/destroyed objects debugobjects is not changing the data structure of the real object so it can be compiled in with a minimal runtime impact and enabled on demand with a kernel command line option. Howto use debugobjects A kernel subsystem needs to provide a data structure which describes the object type and add calls into the debug code at appropriate places. The data structure to describe the object type needs at minimum the name of the object type. Optional functions can and should be provided to fixup detected problems so the kernel can continue to work and the debug information can be retrieved from a live system instead of hard core debugging with serial consoles and stack trace transcripts from the monitor. The debug calls provided by debugobjects are: debug_object_initdebug_object_init_on_stackdebug_object_activatedebug_object_deactivatedebug_object_destroydebug_object_freedebug_object_assert_init Each of these functions takes the address of the real object and a pointer to the object type specific debug description structure. Each detected error is reported in the statistics and a limited number of errors are printk&#39;ed including a full stack trace. The statistics are available via /sys/kernel/debug/debug_objects/stats.
(2602) <2616> {373064} [376223]: The following people have contributed to this document: Thomas Gleixnertglx@linutronix.de Linux Networking and Network Devices APIs This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Linux NetworkingNetworking Base Types Socket Buffer Functions Socket Filter Generic Network Statistics SUN RPC subsystem&lt;!-- The !D functionality is not perfect, garbage has to be protected by comments --&gt; WiMAX Network device supportDriver Support PHY Support &lt;!-- FIXME: Removed for now since no structured comments in source &lt;sect1&gt;&lt;title&gt;Wireless&lt;/title&gt; X!Enet/core/wireless.c &lt;/sect1&gt; --&gt;RapidIO Subsystem GuideMattPortermporter@kernel.crashing.orgmporter@mvista.com2005MontaVista Software, Inc. This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction RapidIO is a high speed switched fabric interconnect with features aimed at the embedded market. RapidIO provides support for memory-mapped I/O as well as message-based transactions over the switched fabric network. RapidIO has a standardized discovery mechanism not unlike the PCI bus standard that allows simple detection of devices in a network. This documentation is provided for developers intending to support RapidIO on new architectures, write new drivers, or to understand the subsystem internals. Known Bugs and LimitationsBugsNone. ;)LimitationsAccess/management of RapidIO memory regions is not supportedMultiple host enumeration is not supportedRapidIO driver interface Drivers are provided a set of calls in order to interface with the subsystem to gather info on devices, request/map memory region resources, and manage mailboxes/doorbells. Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #3 =============================
(76) <91> {15332} [16959]: Debug functionsDebug object function reference debug_object_init This function is called whenever the initialization function of a real object is called. When the real object is already tracked by debugobjects it is checked, whether the object can be initialized. Initializing is not allowed for active and destroyed objects. When debugobjects detects an error, then it calls the fixup_init function of the object type description structure if provided by the caller. The fixup function can correct the problem before the real initialization of the object happens. E.g. it can deactivate an active object in order to prevent damage to the subsystem. When the real object is not yet tracked by debugobjects, debugobjects allocates a tracker object for the real object and sets the tracker object state to ODEBUG_STATE_INIT. It verifies that the object is not on the callers stack. If it is on the callers stack then a limited number of warnings including a full stack trace is printk&#39;ed. The calling code must use debug_object_init_on_stack() and remove the object before leaving the function which allocated it. See next section. debug_object_init_on_stack This function is called whenever the initialization function of a real object which resides on the stack is called. When the real object is already tracked by debugobjects it is checked, whether the object can be initialized. Initializing is not allowed for active and destroyed objects. When debugobjects detects an error, then it calls the fixup_init function of the object type description structure if provided by the caller.
(99) <114> {17577} [19154]: debug_object_activate This function is called whenever the activation function of a real object is called. When the real object is already tracked by debugobjects it is checked, whether the object can be activated. Activating is not allowed for active and destroyed objects. When debugobjects detects an error, then it calls the fixup_activate function of the object type description structure if provided by the caller. The fixup function can correct the problem before the real activation of the object happens. E.g. it can deactivate an active object in order to prevent damage to the subsystem. When the real object is not yet tracked by debugobjects then the fixup_activate function is called if available. This is necessary to allow the legitimate activation of statically allocated and initialized objects. The fixup function checks whether the object is valid and calls the debug_objects_init() function to initialize the tracking of this object. When the activation is legitimate, then the state of the associated tracker object is set to ODEBUG_STATE_ACTIVE. debug_object_deactivate This function is called whenever the deactivation function of a real object is called. When the real object is tracked by debugobjects it is checked, whether the object can be deactivated. Deactivating is not allowed for untracked or destroyed objects. When the deactivation is legitimate, then the state of the associated tracker object is set to ODEBUG_STATE_INACTIVE. debug_object_destroy This function is called to mark an object destroyed.
*****************************************************************
========================= CLASS #4 =============================
(92) <96> {16960} [17375]: The fixup function can correct the problem before the real initialization of the object happens. E.g. it can deactivate an active object in order to prevent damage to the subsystem. When the real object is not yet tracked by debugobjects debugobjects allocates a tracker object for the real object and sets the tracker object state to ODEBUG_STATE_INIT. It verifies that the object is on the callers stack.
(127) <131> {20294} [20603]: The fixup function can correct the problem before the real free of the object happens. E.g. it can deactivate an active object in order to prevent damage to the subsystem. Note that debug_object_free removes the object from the tracker. Later usage of the object is detected by the other debug checks.
*****************************************************************
========================= CLASS #5 =============================
(103) <103> {18009} [18103]: The fixup function can correct the problem before the real activation of the object happens.
(119) <119> {19635} [19729]: The fixup function can correct the problem before the real destruction of the object happens.
(127) <127> {20294} [20382]: The fixup function can correct the problem before the real free of the object happens.
*****************************************************************
========================= CLASS #6 =============================
(116) <118> {19324} [19634]: When the real object is tracked by debugobjects it is checked, whether the object can be destroyed. Destruction is not allowed for active and destroyed objects. When debugobjects detects an error, then it calls the fixup_destroy function of the object type description structure if provided by the caller.
(124) <126> {20012} [20293]: When the real object is tracked by debugobjects it is checked, whether the object can be freed. Free is not allowed for active objects. When debugobjects detects an error, then it calls the fixup_free function of the object type description structure if provided by the caller.
*****************************************************************
========================= CLASS #7 =============================
(121) <121> {19735} [19815]: it can deactivate an active object in order to prevent damage to the subsystem.
(129) <129> {20388} [20468]: it can deactivate an active object in order to prevent damage to the subsystem.
*****************************************************************
========================= CLASS #8 =============================
(136) <136> {21101} [21266]: Fixup functionsDebug object type description structure fixup_init This function is called from the debug code whenever a problem in debug_object_init is detected.
(141) <141> {21733} [21850]: fixup_activate This function is called from the debug code whenever a problem in debug_object_activate is detected.
(150) <150> {22791} [22906]: fixup_destroy This function is called from the debug code whenever a problem in debug_object_destroy is detected.
(153) <153> {23114} [23223]: fixup_free This function is called from the debug code whenever a problem in debug_object_free is detected.
(157) <157> {23611} [23734]: fixup_assert_init This function is called from the debug code whenever a problem in debug_object_assert_init is detected.
*****************************************************************
========================= CLASS #9 =============================
(142) <145> {21854} [22313]: Called from debug_object_activate when the object state is: ODEBUG_STATE_NOTAVAILABLEODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0. The return value is used to update the statistics. Note that the function needs to call the debug_object_activate() function again after the damage has been repaired in order to keep the state consistent. The activation of statically initialized objects is a special case.
(159) <162> {23881} [24159]: The function returns 1 when the fixup was successful, otherwise 0. The return value is used to update the statistics. Note, this function should make sure debug_object_init() is called before returning. The handling of statically initialized objects is a special case.
*****************************************************************
========================= CLASS #10 =============================
(139) <139> {21523} [21574]: The return value is used to update the statistics.
(143) <143> {22031} [22082]: The return value is used to update the statistics.
(152) <152> {23061} [23112]: The return value is used to update the statistics.
(156) <156> {23558} [23609]: The return value is used to update the statistics.
(160) <160> {23949} [24000]: The return value is used to update the statistics.
*****************************************************************
========================= CLASS #11 =============================
(140) <140> {21578} [21731]: Note, that the function needs to call the debug_object_init() function again, after the damage has been repaired in order to keep the state consistent.
(144) <144> {22086} [22241]: Note that the function needs to call the debug_object_activate() function again after the damage has been repaired in order to keep the state consistent.
*****************************************************************
========================= CLASS #12 =============================
(147) <149> {22468} [22789]: The fixup function needs to check whether this is a legitimate case of a statically initialized object or not. In case it is it calls debug_object_init() and debug_object_activate() to make the object known to the tracker and marked active. In this case the function should return 0 because this is not a real fixup.
(163) <165> {24160} [24431]: The fixup function should check if this is a legitimate case of a statically initialized object or not. In this case only debug_object_init() should be called to make the object known to the tracker. Then the function should return 0 because this is not a real fixup.
*****************************************************************
========================= CLASS #13 =============================
(151) <151> {22910} [23060]: Called from debug_object_destroy when the object state is: ODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
(155) <155> {23377} [23557]: Called from debug_object_free() or debug_check_no_obj_freed() when the object state is: ODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
(159) <159> {23881} [23948]: The function returns 1 when the fixup was successful, otherwise 0.
*****************************************************************
========================= CLASS #14 =============================
(166) <166> {24433} [24482]: Known Bugs And Assumptions None (knock on wood).
(234) <234> {34915} [34948]: Known Bugs And Assumptions None.
(1177) <1177> {165447} [165496]: Known Bugs And Assumptions None (knock on wood).
(2269) <2269> {323456} [323489]: Known Bugs And Assumptions None.
(2391) <2391> {341437} [341470]: Known Bugs And Assumptions None.
*****************************************************************
========================= CLASS #15 =============================
(167) <178> {24484} [27245]: Linux Device Drivers This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Driver BasicsDriver Entry and Exit points Atomic and pointer manipulation Delaying, scheduling, and timer routines Wait queues and Wake events High-resolution timers Workqueues and Kevents Internal Functions Kernel objects manipulation&lt;!-- X!Iinclude/linux/kobject.h --&gt; Kernel utility functions Device Resource Management Device drivers infrastructureThe Basic Device Driver-Model Structures Device Drivers Base &lt;!-- Cannot be included, because attribute_container_add_class_device_adapter and attribute_container_classdev_to_container exceed allowed 44 characters maximum X!Edrivers/base/attribute_container.c --&gt; &lt;!-- X!Edrivers/base/interface.c --&gt; Device Drivers DMA Management Device Drivers Power Management Device Drivers ACPI Support&lt;!-- Internal functions only X!Edrivers/acpi/sleep/main.c X!Edrivers/acpi/sleep/wakeup.c X!Edrivers/acpi/motherboard.c X!Edrivers/acpi/bus.c --&gt; &lt;!-- No correct structured comments X!Edrivers/acpi/pci_bind.c --&gt; Device drivers PnP support &lt;!-- No correct structured comments X!Edrivers/pnp/system.c --&gt; Userspace IO devices Parallel Port Devices Message-based devicesFusion message devices I2O message devices Sound Devices &lt;!-- FIXME: Removed for now since no structured comments in source X!Isound/sound_firmware.c --&gt; 16x50 UART Driver Frame Buffer Library The frame buffer drivers depend heavily on four data structures. These structures are declared in include/linux/fb.h. They are fb_info, fb_var_screeninfo, fb_fix_screeninfo and fb_monospecs. The last three can be made available to and from userland. fb_info defines the current state of a particular video card. Inside fb_info, there exists a fb_ops structure which is a collection of needed functions to make fbdev and fbcon work. fb_info is only visible to the kernel. fb_var_screeninfo is used to describe the features of a video card that are user defined.
(2662) <2673> {382684} [384253]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction This document describes the interfaces available for device drivers that drive s390 based channel attached I/O devices. This includes interfaces for interaction with the hardware and interfaces for interacting with the common driver core. Those interfaces are provided by the s390 common I/O layer. The document assumes a familarity with the technical terms associated with the s390 channel I/O architecture. For a description of this architecture, please refer to the &quot;z/Architecture: Principles of Operation&quot;, IBM publication no. SA22-7832. While most I/O devices on a s390 system are typically driven through the channel I/O mechanism described here, there are various other methods (like the diag interface). These are out of the scope of this document.
*****************************************************************
========================= CLASS #16 =============================
(200) <200> {30031} [30124]: The programming interface is structured around two kinds of driver, and two kinds of device.
(216) <216> {32246} [32339]: The programming interface is structured around two kinds of driver, and two kinds of device.
*****************************************************************
========================= CLASS #17 =============================
(225) <225> {33167} [33331]: Controllers that support I2C can also support most SMBus operations, but SMBus controllers don&#39;t support all the protocol options that an I2C controller will.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #18 =============================
(226) <226> {33333} [33526]: There are functions to perform various SMBus protocol operations, either using I2C primitives or by issuing SMBus commands to i2c_adapter devices which don&#39;t support those I2C operations.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #19 =============================
(901) <912> {125798} [128074]: Linux Filesystems API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. The Linux VFSThe Filesystem types The Directory Cache Inode Handling Registration and Superblocks File Locks Other Functions The proc filesystemsysctl interface proc filesystem interface Events based on file descriptors The Filesystem for Exporting Kernel Objects The debugfs filesystemdebugfs interface The Linux Journalling APIRogerGammansrgammans@computer-surgery.co.ukStephenTweediesct@redhat.com2002Roger GammansThe Linux Journalling APIOverviewDetails The journalling layer is easy to use. You need to first of all create a journal_t data structure. There are two calls to do this dependent on how you decide to allocate the physical media on which the journal resides. The journal_init_inode() call is for journals stored in filesystem inodes, or the journal_init_dev() call can be use for journal stored on a raw device (in a continuous range of blocks). A journal_t is a typedef for a struct pointer, so when you are finally finished make sure you call journal_destroy() on it to free up any used kernel memory. Once you have got your journal_t object you need to &#39;mount&#39; or load the journal file, unless of course you haven&#39;t initialised it yet - in which case you need to call journal_create(). Most of the time however your journal file will already have been created, but before you load it you must call journal_wipe() to empty the journal file. Hang on, you say , what if the filesystem wasn&#39;t cleanly umount()&#39;d .
(2752) <2763> {395495} [397239]: Memory ManagementSH-4Store Queue API SH-5TLB Interfaces Machine Specific Interfacesmach-dreamcast mach-x3proto BussesSuperHyway Maple The Linux Kernel Tracepoint APIJasonBaronjbaron@redhat.comWilliamCohenwcohen@redhat.com This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction Tracepoints are static probe points that are located in strategic points throughout the kernel. &#39;Probes&#39; register/unregister with tracepoints via a callback mechanism. The &#39;probes&#39; are strictly typed functions that are passed a unique set of parameters defined by each tracepoint. From this simple callback mechanism, &#39;probes&#39; can be used to profile, debug, and understand kernel behavior. There are a number of tools that provide a framework for using &#39;probes&#39;. These tools include Systemtap, ftrace, and LTTng. Tracepoints are defined in a number of header files via various macros. Thus, the purpose of this document is to provide a clear accounting of the available tracepoints.
*****************************************************************
========================= CLASS #20 =============================
(968) <974> {135547} [136696]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. 2003-2004David BrownellDavidBrownelldbrownell@users.sourceforge.netIntroductionThis document presents a Linux-USB &quot;Gadget&quot; kernel mode API, for use within peripherals and other USB devices that embed Linux. It provides an overview of the API structure, and shows how that fits into a system development project. This is the first such API released on Linux to address a number of important problems, including: Supports USB 2.0, for high speed devices which can stream data at several dozen megabytes per second. Handles devices with dozens of endpoints just as well as ones with just two fixed-function ones.
(1151) <1157> {161531} [162504]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction The generic interrupt handling layer is designed to provide a complete abstraction of interrupt handling for device drivers. It is able to handle all the different types of interrupt controller hardware. Device drivers use generic API functions to request, enable, disable and free interrupts. The drivers do not have to know anything about interrupt hardware details, so they can be used on different platforms without code changes.
(1243) <1249> {178546} [179545]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. This is the first release of this document as part of the kernel tarball. Introduction Welcome, gentle reader, to Rusty&#39;s Remarkably Unreliable Guide to Linux Kernel Hacking. This document describes the common routines and general requirements for kernel code: its goal is to serve as a primer for Linux kernel development for experienced C programmers. I avoid implementation details: that&#39;s what the code is for, and I ignore whole tracts of useful routines.
(1482) <1488> {207614} [208568]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction Welcome, to Rusty&#39;s Remarkably Unreliable Guide to Kernel Locking issues. This document describes the locking systems in the Linux Kernel in 2.6. With the wide availability of HyperThreading, and preemption in the Linux Kernel, everyone hacking on the kernel needs to know the fundamentals of concurrency and locking for SMP. The Problem With Concurrency (Skip this if you know what a Race Condition is).
(2618) <2624> {377010} [378073]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction This framework is designed to provide a standard kernel interface to control voltage and current regulators. The intention is to allow systems to dynamically control regulator power output in order to save power and prolong battery life. This applies to both voltage regulators (where voltage output is controllable) and current sinks (where current limit is controllable). Note that additional (and currently more complete) documentation is available in the Linux kernel source under Documentation/power/regulator.
*****************************************************************
========================= CLASS #21 =============================
(1220) <1224> {174167} [174859]: See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Data TypesDoubly Linked Lists Basic C Library Functions When writing drivers, you cannot in general use routines which are from the C Library. Some of the functions have been found generally useful and they are listed below. The behaviour of these functions may vary slightly from those defined by ANSI, and these deviations are noted in the text.
(2264) <2268> {322801} [323454]: See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction The generic Reed-Solomon Library provides encoding, decoding and error correction functions. Reed-Solomon codes are used in communication and storage applications to ensure data integrity. This documentation is provided for developers who want to utilize the functions provided by the library.
(4211) <4215> {601414} [602063]: See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction The Z85x30 family synchronous/asynchronous controller chips are used on a large number of cheap network interface cards. The kernel provides a core interface layer that is designed to make it easy to provide WAN services using this chip. The current driver only support synchronous operation.
*****************************************************************
========================= CLASS #22 =============================
(232) <233> {34469} [34913]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction Linux provides an API which abstracts performing IO across all busses and devices, allowing device drivers to be written independently of bus type.
(2388) <2389> {340844} [341300]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction The generic NAND driver supports almost all NAND and AG-AND based chips and connects them to the Memory Technology Devices (MTD) subsystem of the Linux Kernel.
(3010) <3011> {425231} [425661]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. Introduction to USB on LinuxA Universal Serial Bus (USB) is used to connect a host, such as a PC or workstation, to a number of peripheral devices.
(4138) <4139> {587315} [587701]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux. This documentation is based on an article published in Linux Journal Magazine, October 2001, Issue 90.
*****************************************************************
========================= CLASS #23 =============================
(239) <239> {35345} [35445]: This document does not cover how to receive such an address, but assumes you are starting with one.
(3026) <3026> {427869} [427913]: This document does not cover gadget drivers.
*****************************************************************
========================= CLASS #24 =============================
(265) <265> {38018} [38361]: static inline void qla1280_disable_intrs(struct scsi_qla_host *ha) { struct device_reg *reg; reg = ha-&amp;gt;iobase; /* disable risc and host interrupts */ WRT_REG_WORD(&amp;amp;reg-&amp;gt;ictrl, 0); /* * The following read will ensure that the above write * has been received by the device before we return from this * function.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #25 =============================
(266) <266> {38363} [38524]: */ RD_REG_WORD(&amp;amp;reg-&amp;gt;ictrl); ha-&amp;gt;flags.ints_enabled = 0; } In addition to write posting, on some large multiprocessing systems (e.g.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #26 =============================
(272) <272> {39456} [39853]: CPU A: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU A: ... CPU A: writel(newval, ring_ptr); CPU A: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) ... CPU B: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU B: writel(newval2, ring_ptr); CPU B: ... CPU B: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) In the case above, newval2 could be written to ring_ptr before newval.
(273) <273> {39855} [40586]: Fixing it is easy though: CPU A: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU A: ... CPU A: writel(newval, ring_ptr); CPU A: mmiowb(); /* ensure no other writes beat us to the device */ CPU A: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) ... CPU B: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU B: writel(newval2, ring_ptr); CPU B: ... CPU B: mmiowb(); CPU B: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) See tg3.c for a real world example of how to use mmiowb PCI ordering rules also guarantee that PIO read responses arrive after any outstanding DMA writes from that bus, since for some devices the result of a readb call may signal to the driver that a DMA transaction is complete.
*****************************************************************
========================= CLASS #27 =============================
(290) <290> {42151} [42576]: Public Functions Provided Linux DRM Developer&#39;s GuideJesseBarnesInitial versionIntel Corporationjesse.barnes@intel.comLaurentPinchartDriver internalsIdeas on board SPRLlaurent.pinchart@ideasonboard.com2008-20092012Intel CorporationLaurent Pinchart The contents of this file may be used under the terms of the GNU General Public License version 2 (the &quot;GPL&quot;) as distributed in the kernel source COPYING file.
(1928) <1928> {284756} [285020]: Alternatively, the contents of this file may be used under the terms of the GNU General Public License version 2 (the &quot;GPL&quot;) as distributed in the kernel source COPYING file, in which case the provisions of the GPL are applicable instead of the above.
*****************************************************************
========================= CLASS #28 =============================
(324) <324> {46532} [46662]: The information is printed to the kernel log at initialization time and passed to userspace through the DRM_IOCTL_VERSION ioctl.
(333) <333> {47743} [47872]: The DRM core prints it to the kernel log at initialization time and passes it to userspace through the DRM_IOCTL_VERSION ioctl.
*****************************************************************
========================= CLASS #29 =============================
(348) <348> {49953} [50016]: This stat counter system is deprecated and should not be used.
(846) <846> {119633} [119687]: These functions are deprecated and should not be used.
*****************************************************************
========================= CLASS #30 =============================
(356) <356> {50932} [51084]: The operation is optional and must make sure that the interrupt will not get fired by clearing all pending interrupt flags or disabling the interrupt.
(580) <580> {82969} [82995]: The operation is optional.
*****************************************************************
========================= CLASS #31 =============================
(365) <365> {51848} [52010]: It starts by waking up all processes waiting on a vblank interrupt to make sure they don&#39;t hang, and then calls the optional irq_uninstall driver operation.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #32 =============================
(452) <452> {63828} [63969]: Handles don&#39;t take ownership of GEM objects, they only take a reference to the object that will be dropped when the handle is destroyed.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #33 =============================
(469) <469> {66894} [67008]: The mmap system call can&#39;t be used directly to map GEM objects, as they don&#39;t have their own file handle.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #34 =============================
(477) <477> {67736} [67870]: The function allocates a fake offset range from a pool and stores the offset divided by PAGE_SIZE in obj-&amp;gt;map_list.hash.key.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #35 =============================
(479) <479> {67991} [68054]: This can be tested by obj-&amp;gt;map_list.map being non-NULL.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #36 =============================
(480) <480> {68058} [68267]: Once allocated, the fake offset value (obj-&amp;gt;map_list.hash.key &amp;lt;&amp;lt; PAGE_SHIFT) must be passed to the application in a driver-specific way and can then be used as the mmap offset argument.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #37 =============================
(502) <502> {71591} [71883]: This core CPU&amp;lt;-&amp;gt;GPU coherency management is provided by a device-specific ioctl, which evaluates an object&#39;s current domain and performs any necessary flushing or synchronization to put the object into the desired coherency domain (note that the object may be busy, i.e.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #38 =============================
(553) <554> {79075} [79372]: The instance is allocated and zeroed by the driver, possibly as part of a larger structure, and registered with a call to drm_crtc_init with a pointer to CRTC functions. CRTC OperationsSet Configurationint (*set_config)(struct drm_mode_set *set); Apply a new CRTC configuration to the device.
(604) <605> {85603} [85823]: The instance is allocated and zeroed by the driver, possibly as part of a larger structure. Drivers must initialize the struct drm_encoder possible_crtcs and possible_clones fields before registering the encoder.
*****************************************************************
========================= CLASS #39 =============================
(557) <557> {79751} [79807]: This operation is called with the mode config lock held.
(561) <561> {80095} [80153]: This operation is called with the mode config mutex held.
*****************************************************************
========================= CLASS #40 =============================
(574) <574> {81851} [82278]: This can be performed with spin_lock_irqsave(&amp;amp;dev-&amp;gt;event_lock, flags); ... drm_send_vblank_event(dev, pipe, event); spin_unlock_irqrestore(&amp;amp;dev-&amp;gt;event_lock, flags); FIXME: Could drivers that don&#39;t need to wait for rendering to complete just add the event to dev-&amp;gt;vblank_event_list and let the DRM core handle everything, as for &quot;normal&quot; vertical blanking events?
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
(1968) <1968> {290451} [290494]: Most drivers don&#39;t need to define this.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #41 =============================
(575) <575> {82282} [82453]: While waiting for the page flip to complete, the event-&amp;gt;base.link list head can be used freely by the driver to store the pending event in a driver-specific list.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #42 =============================
(577) <579> {82631} [82968]: Miscellaneousvoid (*set_property)(struct drm_crtc *crtc, struct drm_property *property, uint64_t value); Set the value of the given CRTC property to value. See for more information about properties. void (*gamma_set)(struct drm_crtc *crtc, u16 *r, u16 *g, u16 *b, uint32_t start, uint32_t size); Apply a gamma table to the device.
(655) <657> {92679} [92995]: Miscellaneousvoid (*set_property)(struct drm_connector *connector, struct drm_property *property, uint64_t value); Set the value of the given connector property to value. See for more information about properties. void (*destroy)(struct drm_connector *connector); Destroy the connector when not needed anymore.
*****************************************************************
========================= CLASS #43 =============================
(581) <582> {82997} [83086]: void (*destroy)(struct drm_crtc *crtc); Destroy the CRTC when not needed anymore. See .
(598) <599> {84967} [85059]: void (*destroy)(struct drm_plane *plane); Destroy the plane when not needed anymore. See .
(657) <658> {92898} [93002]: void (*destroy)(struct drm_connector *connector); Destroy the connector when not needed anymore. See .
*****************************************************************
========================= CLASS #44 =============================
(583) <583> {83088} [83233]: Planes (struct drm_plane) A plane represents an image source that can be blended with or overlayed on top of a CRTC during the scanout process.
(585) <585> {83372} [83435]: The result is then blended with or overlayed on top of a CRTC.
*****************************************************************
========================= CLASS #45 =============================
(591) <591> {84285} [84375]: Devices that don&#39;t support subpixel plane coordinates can ignore the fractional part.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #46 =============================
(614) <614> {86835} [86983]: void (*set_property)(struct drm_plane *plane, struct drm_property *property, uint64_t value); Set the value of the given plane property to value.
(655) <655> {92679} [92852]: Miscellaneousvoid (*set_property)(struct drm_connector *connector, struct drm_property *property, uint64_t value); Set the value of the given connector property to value.
*****************************************************************
========================= CLASS #47 =============================
(615) <615> {86984} [87027]: See for more information about properties.
(656) <656> {92853} [92896]: See for more information about properties.
(2202) <2202> {315941} [315967]: See for more information.
*****************************************************************
========================= CLASS #48 =============================
(621) <621> {87760} [87829]: interlace_allowed Whether the connector can handle interlaced modes.
(622) <622> {87831} [87895]: doublescan_allowed Whether the connector can handle doublescan.
*****************************************************************
========================= CLASS #49 =============================
(627) <627> {88441} [88516]: DRM_CONNECTOR_POLL_CONNECT Periodically poll the connector for connection.
(628) <628> {88518} [88599]: DRM_CONNECTOR_POLL_DISCONNECT Periodically poll the connector for disconnection.
*****************************************************************
========================= CLASS #50 =============================
(629) <629> {88603} [88679]: Set to 0 for connectors that don&#39;t support connection status discovery.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #51 =============================
(664) <664> {93677} [94359]: Output discovery and initialization example void intel_crt_init(struct drm_device *dev) { struct drm_connector *connector; struct intel_output *intel_output; intel_output = kzalloc(sizeof(struct intel_output), GFP_KERNEL); if (!intel_output) return; connector = &amp;amp;intel_output-&amp;gt;base; drm_connector_init(dev, &amp;amp;intel_output-&amp;gt;base, &amp;amp;intel_crt_connector_funcs, DRM_MODE_CONNECTOR_VGA); drm_encoder_init(dev, &amp;amp;intel_output-&amp;gt;enc, &amp;amp;intel_crt_enc_funcs, DRM_MODE_ENCODER_DAC); drm_mode_connector_attach_encoder(&amp;amp;intel_output-&amp;gt;base, &amp;amp;intel_output-&amp;gt;enc); /* Set up the DDC bus.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #52 =============================
(665) <665> {94360} [95078]: */ intel_output-&amp;gt;ddc_bus = intel_i2c_create(dev, GPIOA, &quot;CRTDDC_A&quot;); if (!intel_output-&amp;gt;ddc_bus) { dev_printk(KERN_ERR, &amp;amp;dev-&amp;gt;pdev-&amp;gt;dev, &quot;DDC bus registration &quot; &quot;failed.\n&quot;); return; } intel_output-&amp;gt;type = INTEL_OUTPUT_ANALOG; connector-&amp;gt;interlace_allowed = 0; connector-&amp;gt;doublescan_allowed = 0; drm_encoder_helper_add(&amp;amp;intel_output-&amp;gt;enc, &amp;amp;intel_crt_helper_funcs); drm_connector_helper_add(connector, &amp;amp;intel_crt_connector_helper_funcs); drm_sysfs_connector_add(connector); } In the example above (taken from the i915 driver), a CRTC, connector and encoder combination is created.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #53 =============================
(692) <695> {99153} [99637]: CRTC Helper Operationsbool (*mode_fixup)(struct drm_crtc *crtc, const struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Let CRTCs adjust the requested mode or reject it completely. This operation returns true if the mode is accepted (possibly after being adjusted) or false if it is rejected. The mode_fixup operation should reject the mode if it can&#39;t reasonably use it. The definition of &quot;reasonable&quot; is currently fuzzy in this context.
(712) <715> {101336} [101843]: Encoder Helper Operationsbool (*mode_fixup)(struct drm_encoder *encoder, const struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Let encoders adjust the requested mode or reject it completely. This operation returns true if the mode is accepted (possibly after being adjusted) or false if it is rejected. See the mode_fixup CRTC helper operation for an explanation of the allowed adjustments. void (*prepare)(struct drm_encoder *encoder); Prepare the encoder for mode setting.
*****************************************************************
========================= CLASS #54 =============================
(698) <698> {99936} [100117]: int (*mode_set_base)(struct drm_crtc *crtc, int x, int y, struct drm_framebuffer *old_fb) Move the CRTC on the current frame buffer (stored in crtc-&amp;gt;fb) to position (x,y).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #55 =============================
(702) <702> {100342} [100454]: FIXME: Why are x and y passed as arguments, as they can be accessed through crtc-&amp;gt;x and crtc-&amp;gt;y?
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #56 =============================
(704) <711> {100532} [101334]: This operation is called after validating the requested mode. Drivers use it to perform device-specific operations required before setting the new mode. int (*mode_set)(struct drm_crtc *crtc, struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode, int x, int y, struct drm_framebuffer *old_fb); Set a new mode, position and frame buffer. Depending on the device requirements, the mode can be stored internally by the driver and applied in the commit operation, or programmed to the hardware immediately. The mode_set operation returns 0 on success or a negative error code if an error occurs. void (*commit)(struct drm_crtc *crtc); Commit a mode. This operation is called after setting the new mode. Upon return the device must use the new mode and be fully operational.
(716) <723> {101844} [102648]: This operation is called after validating the requested mode. Drivers use it to perform device-specific operations required before setting the new mode. void (*mode_set)(struct drm_encoder *encoder, struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Set a new mode. Depending on the device requirements, the mode can be stored internally by the driver and applied in the commit operation, or programmed to the hardware immediately. void (*commit)(struct drm_encoder *encoder); Commit a mode. This operation is called after setting the new mode. Upon return the device must use the new mode and be fully operational. Connector Helper Operationsstruct drm_encoder *(*best_encoder)(struct drm_connector *connector); Return a pointer to the best encoder for the connecter.
*****************************************************************
========================= CLASS #57 =============================
(725) <725> {102747} [102775]: This operation is mandatory.
(727) <727> {103033} [103062]: This operation is mandatory.
(745) <745> {106498} [106526]: This operation is mandatory.
*****************************************************************
========================= CLASS #58 =============================
(732) <732> {103710} [105136]: __u32 clock;Pixel clock frequency in kHz unit__u16 hdisplay, hsync_start, hsync_end, htotal; __u16 vdisplay, vsync_start, vsync_end, vtotal;Horizontal and vertical timing information Active Front Sync Back Region Porch Porch &amp;lt;-----------------------&amp;gt;&amp;lt;----------------&amp;gt;&amp;lt;-------------&amp;gt;&amp;lt;--------------&amp;gt; //////////////////////| ////////////////////// | ////////////////////// |.................. ................ _______________ &amp;lt;----- [hv]display -----&amp;gt; &amp;lt;------------- [hv]sync_start ------------&amp;gt; &amp;lt;--------------------- [hv]sync_end ---------------------&amp;gt; &amp;lt;-------------------------------- [hv]total -----------------------------&amp;gt; __u16 hskew; __u16 vscan;Unknown__u32 flags; Mode flags, a combination of DRM_MODE_FLAG_PHSYNC Horizontal sync is active high DRM_MODE_FLAG_NHSYNC Horizontal sync is active low DRM_MODE_FLAG_PVSYNC Vertical sync is active high DRM_MODE_FLAG_NVSYNC Vertical sync is active low DRM_MODE_FLAG_INTERLACE Mode is interlaced DRM_MODE_FLAG_DBLSCAN Mode uses doublescan DRM_MODE_FLAG_CSYNC Mode uses composite sync DRM_MODE_FLAG_PCSYNC Composite sync is active high DRM_MODE_FLAG_NCSYNC Composite sync is active low DRM_MODE_FLAG_HSKEW hskew provided (not used?)
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #59 =============================
(765) <765> {109451} [109836]: struct drm_property *drm_property_create_range(struct drm_device *dev, int flags, const char *name, uint64_t min, uint64_t max);Create a range property with the given minimum and maximum values.struct drm_property *drm_property_create_enum(struct drm_device *dev, int flags, const char *name, const struct drm_prop_enum_list *props, int num_values);Create an enumerated property.
(766) <766> {109837} [110095]: The props argument points to an array of num_values value-name pairs.struct drm_property *drm_property_create_bitmask(struct drm_device *dev, int flags, const char *name, const struct drm_prop_enum_list *props, int num_values);Create a bitmask property.
(767) <767> {109837} [109908]: The props argument points to an array of num_values value-name pairs.
*****************************************************************
========================= CLASS #60 =============================
(828) <828> {117389} [117468]: .mmap = drm_gem_mmap, No other file operation is supported by the DRM API.
(845) <845> {119606} [119631]: is supported by the core.
*****************************************************************
========================= CLASS #61 =============================
(851) <851> {120246} [120368]: Do drivers that don&#39;t implement (or just don&#39;t use) fbcon compatibility need to call those functions themselves?
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #62 =============================
(857) <857> {120778} [120904]: - crtc and connector .save and .restore operations are only used internally in drivers, should they be removed from the core?
(858) <858> {120906} [121031]: - encoder mid-layer .save and .restore operations are only used internally in drivers, should they be removed from the core?
*****************************************************************
========================= CLASS #63 =============================
(867) <867> {122023} [122094]: The primary node is always created and called card&amp;lt;num&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #64 =============================
(868) <868> {122095} [122195]: Additionally, a currently unused control node, called controlD&amp;lt;num&amp;gt; is also created.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #65 =============================
(879) <879> {123241} [123364]: If a driver advertises render node support, DRM core will create a separate render node called renderD&amp;lt;num&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #66 =============================
(902) <904> {126074} [126592]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(968) <970> {135547} [136065]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(1151) <1153> {161531} [162049]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(1243) <1245> {178546} [179064]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(1482) <1484> {207614} [208132]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2603) <2605> {373452} [373970]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2607) <2609> {374713} [375231]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2618) <2620> {377010} [377528]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2663) <2665> {382937} [383455]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2749) <2751> {394975} [395493]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2753) <2755> {395977} [396495]: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(3233) <3235> {455552} [456257]: This document is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA &lt;!-- ****************************************************** --&gt;&lt;!-- Preface --&gt;&lt;!-- ****************************************************** --&gt;Preface This document describes how to write an ALSA (Advanced Linux Sound Architecture) driver.
*****************************************************************
========================= CLASS #67 =============================
(2385) <2387> {340147} [340840]: --&gt;1.0.02009-09-06mccInitial revisionRemote Controller API &amp;sub-remote_controllers; &amp;sub-media-controller; &amp;sub-gen-errors; &amp;sub-fdl-appendix; MTD NAND Driver Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
(2692) <2694> {386419} [386940]: SCSI Interfaces GuideJamesBottomleyJames.Bottomley@hansenpartnership.comRobLandleyrob@landley.net2007Linux Foundation This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details see the file COPYING in the source distribution of Linux.
(3007) <3009> {424690} [425227]: Linutronix homepage.The Linux-USB Host Side API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
(4135) <4137> {586737} [587311]: Writing USB Device DriversGregKroah-Hartmangreg@kroah.com2001-2002Greg Kroah-Hartman This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
*****************************************************************
========================= CLASS #68 =============================
(995) <995> {139394} [139492]: The &amp;lt;linux/usb/gadget.h&amp;gt; API abstracts the peripheral controller endpoint hardware.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #69 =============================
(1013) <1013> {142396} [142633]: OTG-capable systems will also need to include a standard Linux-USB host side stack, with usbcore, one or more Host Controller Drivers (HCDs), USB Device Drivers to support the OTG &quot;Targeted Peripheral List&quot;, and so forth.
(1139) <1139> {159510} [159601]: Also on the host side, a driver must support the OTG &quot;Targeted Peripheral List&quot;.
*****************************************************************
========================= CLASS #70 =============================
(1077) <1077> {151069} [151268]: USB 2.0 Chapter 9 Types and ConstantsGadget drivers rely on common USB structures and constants defined in the &amp;lt;linux/usb/ch9.h&amp;gt; header file, which is standard in Linux 2.6 kernels.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #71 =============================
(1079) <1079> {151356} [151523]: Core Objects and MethodsThese are declared in &amp;lt;linux/usb/gadget.h&amp;gt;, and are used by gadget drivers to interact with USB peripheral controller drivers.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #72 =============================
(1104) <1104> {154739} [154859]: Support for other controllers is expected to be developed and contributed over time, as this driver framework evolves.
(1126) <1126> {157579} [157703]: Support for other kinds of gadget is expected to be developed and contributed over time, as this driver framework evolves.
*****************************************************************
========================= CLASS #73 =============================
(1140) <1140> {159603} [159703]: That&#39;s just a whitelist, used to reject peripherals not supported with a given Linux OTG host.
(2939) <2939> {414918} [414956]: That&#39;s what uio_pdrv_genirq does.
(3447) <3447> {487654} [487695]: EXPORT_NO_SYMBOLS; That&#39;s all!
*****************************************************************
========================= CLASS #74 =============================
(1150) <1150> {161178} [161527]: &lt;!-- vim:syntax=sgml:sw=4 --&gt;Linux generic IRQ handlingThomasGleixnertglx@linutronix.deIngoMolnarmingo@elte.hu2005-2010Thomas Gleixner2005-2006Ingo Molnar This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2262) <2262> {322334} [322614]: Reed-Solomon Library Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2385) <2385> {340147} [340601]: --&gt;1.0.02009-09-06mccInitial revisionRemote Controller API &amp;sub-remote_controllers; &amp;sub-media-controller; &amp;sub-gen-errors; &amp;sub-fdl-appendix; MTD NAND Driver Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2662) <2662> {382684} [382933]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(2692) <2692> {386419} [386678]: SCSI Interfaces GuideJamesBottomleyJames.Bottomley@hansenpartnership.comRobLandleyrob@landley.net2007Linux Foundation This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2.
(2748) <2748> {394786} [394971]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2752) <2752> {395495} [395973]: Memory ManagementSH-4Store Queue API SH-5TLB Interfaces Machine Specific Interfacesmach-dreamcast mach-x3proto BussesSuperHyway Maple The Linux Kernel Tracepoint APIJasonBaronjbaron@redhat.comWilliamCohenwcohen@redhat.com This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3007) <3007> {424690} [424988]: Linutronix homepage.The Linux-USB Host Side API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3232) <3232> {455259} [455548]: Copyright (c) 2002-2005 Takashi Iwai tiwai@suse.de This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(4135) <4135> {586737} [587072]: Writing USB Device DriversGregKroah-Hartmangreg@kroah.com2001-2002Greg Kroah-Hartman This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
*****************************************************************
========================= CLASS #75 =============================
(1163) <1163> {163487} [163609]: The original general IRQ implementation used hw_interrupt_type structures and their -&amp;gt;ack(), -&amp;gt;end() [etc.]
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #76 =============================
(1181) <1181> {166113} [166253]: Whenever an interrupt triggers, the low-level architecture code calls into the generic interrupt code by calling desc-&amp;gt;handle_irq().
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #77 =============================
(1182) <1182> {166255} [166395]: This high-level IRQ handling function only uses desc-&amp;gt;irq_data.chip primitives referenced by the assigned chip descriptor structure.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #78 =============================
(1186) <1186> {167285} [168038]: The following helper functions are implemented (simplified excerpt): default_enable(struct irq_data *data) { desc-&amp;gt;irq_data.chip-&amp;gt;irq_unmask(data); } default_disable(struct irq_data *data) { if (!delay_disable(data)) desc-&amp;gt;irq_data.chip-&amp;gt;irq_mask(data); } default_ack(struct irq_data *data) { chip-&amp;gt;irq_ack(data); } default_mask_ack(struct irq_data *data) { if (chip-&amp;gt;irq_mask_ack) { chip-&amp;gt;irq_mask_ack(data); } else { chip-&amp;gt;irq_mask(data); chip-&amp;gt;irq_ack(data); } } noop(struct irq_data *data)) { } Default flow handler implementationsDefault Level IRQ flow handler handle_level_irq provides a generic implementation for level-triggered interrupts.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #79 =============================
(1187) <1187> {168042} [168408]: The following control flow is implemented (simplified excerpt): desc-&amp;gt;irq_data.chip-&amp;gt;irq_mask_ack(); handle_irq_event(desc-&amp;gt;action); desc-&amp;gt;irq_data.chip-&amp;gt;irq_unmask(); Default Fast EOI IRQ flow handler handle_fasteoi_irq provides a generic implementation for interrupts, which only need an EOI at the end of the handler.
(1188) <1188> {168412} [168680]: The following control flow is implemented (simplified excerpt): handle_irq_event(desc-&amp;gt;action); desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi(); Default Edge IRQ flow handler handle_edge_irq provides a generic implementation for edge-triggered interrupts.
(1189) <1189> {168684} [169353]: The following control flow is implemented (simplified excerpt): if (desc-&amp;gt;status &amp;amp; running) { desc-&amp;gt;irq_data.chip-&amp;gt;irq_mask_ack(); desc-&amp;gt;status |= pending | masked; return; } desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack(); desc-&amp;gt;status |= running; do { if (desc-&amp;gt;status &amp;amp; masked) desc-&amp;gt;irq_data.chip-&amp;gt;irq_unmask(); desc-&amp;gt;status &amp;amp;= ~pending; handle_irq_event(desc-&amp;gt;action); } while (status &amp;amp; pending); desc-&amp;gt;status &amp;amp;= ~running; Default simple IRQ flow handler handle_simple_irq provides a generic implementation for simple interrupts.
(1191) <1191> {169434} [169649]: The following control flow is implemented (simplified excerpt): handle_irq_event(desc-&amp;gt;action); Default per CPU flow handler handle_percpu_irq provides a generic implementation for per CPU interrupts.
(1193) <1193> {169766} [170239]: The following control flow is implemented (simplified excerpt): if (desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack) desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack(); handle_irq_event(desc-&amp;gt;action); if (desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi) desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi(); EOI Edge IRQ flow handler handle_edge_eoi_irq provides an abnomination of the edge handler which is solely used to tame a badly wreckaged irq controller on powerpc/cell.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #80 =============================
(1212) <1212> {172815} [172895]: The per-irq structure is protected via desc-&amp;gt;lock, by the generic layer.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #81 =============================
(1215) <1215> {173209} [173334]: Structures This chapter contains the autogenerated documentation of the structures which are used in the generic IRQ layer.
(1217) <1217> {173471} [173580]: Internal Functions Provided This chapter contains the autogenerated documentation of the internal functions.
(2307) <2307> {327843} [327974]: Public Functions Provided This chapter contains the autogenerated documentation of the Reed-Solomon functions which are exported.
(2593) <2593> {372053} [372187]: Public Functions Provided This chapter contains the autogenerated documentation of the NAND kernel API functions which are exported.
(2596) <2596> {372340} [372461]: Internal Functions Provided This chapter contains the autogenerated documentation of the NAND driver internal functions.
(2616) <2616> {376121} [376223]: Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #82 =============================
(1216) <1216> {173338} [173467]: Public Functions Provided This chapter contains the autogenerated documentation of the kernel API functions which are exported.
(1217) <1217> {173471} [173580]: Internal Functions Provided This chapter contains the autogenerated documentation of the internal functions.
(2307) <2307> {327843} [327974]: Public Functions Provided This chapter contains the autogenerated documentation of the Reed-Solomon functions which are exported.
(2593) <2593> {372053} [372187]: Public Functions Provided This chapter contains the autogenerated documentation of the NAND kernel API functions which are exported.
(2596) <2596> {372340} [372461]: Internal Functions Provided This chapter contains the autogenerated documentation of the NAND driver internal functions.
(2616) <2616> {376121} [376223]: Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #83 =============================
(1218) <1219> {173584} [174165]: Credits The following people have contributed to this document: Thomas Gleixnertglx@linutronix.deIngo Molnarmingo@elte.hu The Linux Kernel API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
(2262) <2263> {322334} [322799]: Reed-Solomon Library Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*****************************************************************
========================= CLASS #84 =============================
(1221) <1221> {174223} [174502]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(1245) <1245> {178785} [179064]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(1484) <1484> {207853} [208132]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2265) <2265> {322857} [323136]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2388) <2388> {340844} [341123]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2605) <2605> {373691} [373970]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2609) <2609> {374952} [375231]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2620) <2620> {377249} [377528]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2665) <2665> {383176} [383455]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2694) <2694> {386865} [386940]: For more details see the file COPYING in the source distribution of Linux.
(2751) <2751> {395214} [395493]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(2755) <2755> {396216} [396495]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(3010) <3010> {425231} [425510]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(4138) <4138> {587315} [587594]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
(4212) <4212> {601470} [601749]: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
*****************************************************************
========================= CLASS #85 =============================
(1230) <1230> {176412} [176547]: Note that these &quot;clocks&quot; don&#39;t relate to timekeeping or real time clocks (RTCs), each of which have separate frameworks.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #86 =============================
(1242) <1242> {178197} [178542]: Unreliable Guide To Hacking The Linux KernelRustyRussellrusty@rustcorp.com.au2005Rusty Russell This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(1481) <1481> {207282} [207610]: Unreliable Guide To LockingRustyRussellrusty@rustcorp.com.au2003Rusty Russell This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(2262) <2262> {322334} [322614]: Reed-Solomon Library Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2385) <2385> {340147} [340601]: --&gt;1.0.02009-09-06mccInitial revisionRemote Controller API &amp;sub-remote_controllers; &amp;sub-media-controller; &amp;sub-gen-errors; &amp;sub-fdl-appendix; MTD NAND Driver Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2602) <2602> {373064} [373448]: The following people have contributed to this document: Thomas Gleixnertglx@linutronix.de Linux Networking and Network Devices APIs This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(2662) <2662> {382684} [382933]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(2692) <2692> {386419} [386678]: SCSI Interfaces GuideJamesBottomleyJames.Bottomley@hansenpartnership.comRobLandleyrob@landley.net2007Linux Foundation This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2.
(2748) <2748> {394786} [394971]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2752) <2752> {395495} [395973]: Memory ManagementSH-4Store Queue API SH-5TLB Interfaces Machine Specific Interfacesmach-dreamcast mach-x3proto BussesSuperHyway Maple The Linux Kernel Tracepoint APIJasonBaronjbaron@redhat.comWilliamCohenwcohen@redhat.com This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3007) <3007> {424690} [424988]: Linutronix homepage.The Linux-USB Host Side API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3232) <3232> {455259} [455548]: Copyright (c) 2002-2005 Takashi Iwai tiwai@suse.de This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(4135) <4135> {586737} [587072]: Writing USB Device DriversGregKroah-Hartmangreg@kroah.com2001-2002Greg Kroah-Hartman This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
*****************************************************************
========================= CLASS #87 =============================
(1267) <1267> {181701} [181778]: You can tell you are in a hardware interrupt, because in_irq() returns true.
(1748) <1748> {253337} [253392]: in_irq() returns true in a hardware interrupt handler.
*****************************************************************
========================= CLASS #88 =============================
(1268) <1268> {181782} [181868]: Beware that this will return a false positive if interrupts are disabled (see below).
(1279) <1279> {183374} [183454]: Beware that this will return a false positive if a bh lock (see below) is held.
*****************************************************************
========================= CLASS #89 =============================
(1287) <1287> {184372} [184429]: The Linux kernel is portable Let&#39;s keep it that way.
(4073) <4073> {577903} [577925]: Let&#39;s set them up.
*****************************************************************
========================= CLASS #90 =============================
(1292) <1292> {184714} [184920]: ioctls: Not writing a new system call A system call generally looks like this asmlinkage long sys_mycall(int arg) { return 0; } First, in most cases you don&#39;t want to create a new system call.
(1336) <1336> {189645} [189703]: If you don&#39;t know what that is you don&#39;t need it.
(1340) <1340> {189930} [189950]: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #91 =============================
(1308) <1308> {186667} [186824]: Note that some functions may sleep implicitly: common ones are the user space access functions (*_user) and memory allocation functions without GFP_ATOMIC.
(1327) <1327> {188890} [188925]: The functions may sleep implicitly.
*****************************************************************
========================= CLASS #92 =============================
(1356) <1356> {191906} [192077]: There are two major variations of these functions: the pointer variation, such as cpu_to_be32p(), which take a pointer to the given type, and return the converted value.
(3028) <3028> {428011} [428025]: There are two.
*****************************************************************
========================= CLASS #93 =============================
(1462) <1462> {205291} [205315]: \ ((n) &amp;gt; 20000 ?
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #94 =============================
(1465) <1465> {205669} [205962]: */ #define ERR_PTR(err) ((void *)((long)(err))) #define PTR_ERR(ptr) ((long)(ptr)) #define IS_ERR(ptr) ((unsigned long)(ptr) &amp;gt; (unsigned long)(-1000)) arch/x86/include/asm/uaccess_32.h: #define copy_to_user(to,from,n) \ (__builtin_constant_p(n) ?
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #95 =============================
(1502) <1502> {210419} [210515]: Two Main Types of Kernel Locks: Spinlocks and Mutexes There are two main types of kernel locks.
(3028) <3028> {428011} [428025]: There are two.
*****************************************************************
========================= CLASS #96 =============================
(1527) <1527> {213345} [213379]: spin_unlock_bh() does the reverse.
(1550) <1550> {216041} [216076]: spin_unlock_irq() does the reverse.
*****************************************************************
========================= CLASS #97 =============================
(1531) <1531> {213704} [213893]: This works perfectly for UP as well: the spin lock vanishes, and this macro simply becomes local_bh_disable() (include/linux/interrupt.h), which protects you from the softirq being run.
(1553) <1553> {216391} [216583]: This works perfectly for UP as well: the spin lock vanishes, and this macro simply becomes local_irq_disable() (include/asm/smp.h), which protects you from the softirq/tasklet/BH being run.
*****************************************************************
========================= CLASS #98 =============================
(1532) <1532> {213895} [214023]: Locking Between User Context and Tasklets This is exactly the same as above, because tasklets are actually run from a softirq.
(1533) <1533> {214025} [214155]: Locking Between User Context and Timers This, too, is exactly the same as above, because timers are actually run from a softirq.
*****************************************************************
========================= CLASS #99 =============================
(1536) <1536> {214344} [214520]: The Same Tasklet/Timer Since a tasklet is never run on two CPUs at once, you don&#39;t need to worry about your tasklet being reentrant (running twice at once), even on SMP.
(1968) <1968> {290451} [290494]: Most drivers don&#39;t need to define this.
*****************************************************************
========================= CLASS #100 =============================
(1574) <1574> {219768} [219862]: Common Examples Let&#39;s step through a simple example: a cache of number to name mappings.
(4073) <4073> {577903} [577925]: Let&#39;s set them up.
*****************************************************************
========================= CLASS #101 =============================
(1579) <1581> {220211} [222697]: Here&#39;s the code: #include &amp;lt;linux/list.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;linux/string.h&amp;gt; #include &amp;lt;linux/mutex.h&amp;gt; #include &amp;lt;asm/errno.h&amp;gt; struct object { struct list_head list; int id; char name[32]; int popularity; }; /* Protects the cache, cache_num, and the objects within it */ static DEFINE_MUTEX(cache_lock); static LIST_HEAD(cache); static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 /* Must be holding cache_lock */ static struct object *__cache_find(int id) { struct object *i; list_for_each_entry(i, &amp;amp;cache, list) if (i-&amp;gt;id == id) { i-&amp;gt;popularity++; return i; } return NULL; } /* Must be holding cache_lock */ static void __cache_delete(struct object *obj) { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); kfree(obj); cache_num--; } /* Must be holding cache_lock */ static void __cache_add(struct object *obj) { list_add(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); if (++cache_num &amp;gt; MAX_CACHE_SIZE) { struct object *i, *outcast = NULL; list_for_each_entry(i, &amp;amp;cache, list) { if (!outcast || i-&amp;gt;popularity &amp;lt; outcast-&amp;gt;popularity) outcast = i; } __cache_delete(outcast); } } int cache_add(int id, const char *name) { struct object *obj; if ((obj = kmalloc(sizeof(*obj), GFP_KERNEL)) == NULL) return -ENOMEM; strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; mutex_lock(&amp;amp;cache_lock); __cache_add(obj); mutex_unlock(&amp;amp;cache_lock); return 0; } void cache_delete(int id) { mutex_lock(&amp;amp;cache_lock); __cache_delete(__cache_find(id)); mutex_unlock(&amp;amp;cache_lock); } int cache_find(int id, char *name) { struct object *obj; int ret = -ENOENT; mutex_lock(&amp;amp;cache_lock); obj = __cache_find(id); if (obj) { ret = 0; strcpy(name, obj-&amp;gt;name); } mutex_unlock(&amp;amp;cache_lock); return ret; } Note that we always make sure we have the cache_lock when we add, delete, or look up the cache: both the cache infrastructure itself and the contents of the objects are protected by the lock. In this case it&#39;s easy, since we copy the data for the user, and never let them access the objects directly. There is a slight (and common) optimization here: in cache_add we set up the fields of the object before grabbing the lock.
(1586) <1588> {223128} [225130]: --- cache.c.usercontext 2003-12-09 13:58:54.000000000 +1100 +++ cache.c.interrupt 2003-12-09 14:07:49.000000000 +1100 @@ -12,7 +12,7 @@ int popularity; }; -static DEFINE_MUTEX(cache_lock); +static DEFINE_SPINLOCK(cache_lock); static LIST_HEAD(cache); static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 @@ -55,6 +55,7 @@ int cache_add(int id, const char *name) { struct object *obj; + unsigned long flags; if ((obj = kmalloc(sizeof(*obj), GFP_KERNEL)) == NULL) return -ENOMEM; @@ -63,30 +64,33 @@ obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; - mutex_lock(&amp;amp;cache_lock); + spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return 0; } void cache_delete(int id) { - mutex_lock(&amp;amp;cache_lock); + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_delete(__cache_find(id)); - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); } int cache_find(int id, char *name) { struct object *obj; int ret = -ENOENT; + unsigned long flags; - mutex_lock(&amp;amp;cache_lock); + spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); if (obj) { ret = 0; strcpy(name, obj-&amp;gt;name); } - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return ret; } Note that the spin_lock_irqsave will turn off interrupts if they are on, otherwise does nothing (if we are already in an interrupt handler), hence these functions are safe to call from any context. Unfortunately, cache_add calls kmalloc with the GFP_KERNEL flag, which is only legal in user context. I have assumed that cache_add is still only called in user context, otherwise this should become a parameter to cache_add.
(1598) <1600> {226360} [228710]: Here is the code: --- cache.c.interrupt 2003-12-09 14:25:43.000000000 +1100 +++ cache.c.refcnt 2003-12-09 14:33:05.000000000 +1100 @@ -7,6 +7,7 @@ struct object { struct list_head list; + unsigned int refcnt; int id; char name[32]; int popularity; @@ -17,6 +18,35 @@ static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 +static void __object_put(struct object *obj) +{ + if (--obj-&amp;gt;refcnt == 0) + kfree(obj); +} + +static void __object_get(struct object *obj) +{ + obj-&amp;gt;refcnt++; +} + +void object_put(struct object *obj) +{ + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); + __object_put(obj); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); +} + +void object_get(struct object *obj) +{ + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); + __object_get(obj); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); +} + /* Must be holding cache_lock */ static struct object *__cache_find(int id) { @@ -35,6 +65,7 @@ { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); + __object_put(obj); cache_num--; } @@ -63,6 +94,7 @@ strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; + obj-&amp;gt;refcnt = 1; /* The cache holds a reference */ spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); @@ -79,18 +111,15 @@ spin_unlock_irqrestore(&amp;amp;cache_lock, flags); } -int cache_find(int id, char *name) +struct object *cache_find(int id) { struct object *obj; - int ret = -ENOENT; unsigned long flags; spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); - if (obj) { - ret = 0; - strcpy(name, obj-&amp;gt;name); - } + if (obj) + __object_get(obj); spin_unlock_irqrestore(&amp;amp;cache_lock, flags); - return ret; + return obj; } We encapsulate the reference counting in the standard &#39;get&#39; and &#39;put&#39; functions. Now we can return the object itself from cache_find which has the advantage that the user can now sleep holding the object (eg. to copy_to_user to name to userspace).
(1607) <1609> {229560} [232009]: --- cache.c.refcnt 2003-12-09 15:00:35.000000000 +1100 +++ cache.c.refcnt-atomic 2003-12-11 15:49:42.000000000 +1100 @@ -7,7 +7,7 @@ struct object { struct list_head list; - unsigned int refcnt; + atomic_t refcnt; int id; char name[32]; int popularity; @@ -18,33 +18,15 @@ static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 -static void __object_put(struct object *obj) -{ - if (--obj-&amp;gt;refcnt == 0) - kfree(obj); -} - -static void __object_get(struct object *obj) -{ - obj-&amp;gt;refcnt++; -} - void object_put(struct object *obj) { - unsigned long flags; - - spin_lock_irqsave(&amp;amp;cache_lock, flags); - __object_put(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + if (atomic_dec_and_test(&amp;amp;obj-&amp;gt;refcnt)) + kfree(obj); } void object_get(struct object *obj) { - unsigned long flags; - - spin_lock_irqsave(&amp;amp;cache_lock, flags); - __object_get(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + atomic_inc(&amp;amp;obj-&amp;gt;refcnt); } /* Must be holding cache_lock */ @@ -65,7 +47,7 @@ { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); - __object_put(obj); + object_put(obj); cache_num--; } @@ -94,7 +76,7 @@ strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; - obj-&amp;gt;refcnt = 1; /* The cache holds a reference */ + atomic_set(&amp;amp;obj-&amp;gt;refcnt, 1); /* The cache holds a reference */ spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); @@ -119,7 +101,7 @@ spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); if (obj) - __object_get(obj); + object_get(obj); spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return obj; } Protecting The Objects Themselves In these examples, we assumed that the objects (except the reference counts) never changed once they are created. If we wanted to allow the name to change, there are three possibilities: You can make cache_lock non-static, and tell people to grab that lock before changing the name in any object. You can provide a cache_obj_rename which grabs this lock and changes the name for the caller, and tell everyone to use that function.
(1699) <1701> {245267} [246226]: --- cache.c.perobjectlock 2003-12-11 17:15:03.000000000 +1100 +++ cache.c.rcupdate 2003-12-11 17:55:14.000000000 +1100 @@ -1,15 +1,18 @@ #include &amp;lt;linux/list.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;linux/string.h&amp;gt; +#include &amp;lt;linux/rcupdate.h&amp;gt; #include &amp;lt;linux/mutex.h&amp;gt; #include &amp;lt;asm/errno.h&amp;gt; struct object { - /* These two protected by cache_lock. */ + /* This is protected by RCU */ struct list_head list; int popularity; + struct rcu_head rcu; + atomic_t refcnt; /* Doesn&#39;t change once created. */ @@ -40,7 +43,7 @@ { struct object *i; - list_for_each_entry(i, &amp;amp;cache, list) { + list_for_each_entry_rcu(i, &amp;amp;cache, list) { if (i-&amp;gt;id == id) { i-&amp;gt;popularity++; return i; @@ -49,19 +52,25 @@ return NULL; } +/* Final discard done once we know no readers are looking.
(1702) <1704> {246227} [247743]: */ +static void cache_delete_rcu(void *arg) +{ + object_put(arg); +} + /* Must be holding cache_lock */ static void __cache_delete(struct object *obj) { BUG_ON(!obj); - list_del(&amp;amp;obj-&amp;gt;list); - object_put(obj); + list_del_rcu(&amp;amp;obj-&amp;gt;list); cache_num--; + call_rcu(&amp;amp;obj-&amp;gt;rcu, cache_delete_rcu); } /* Must be holding cache_lock */ static void __cache_add(struct object *obj) { - list_add(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); + list_add_rcu(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); if (++cache_num &amp;gt; MAX_CACHE_SIZE) { struct object *i, *outcast = NULL; list_for_each_entry(i, &amp;amp;cache, list) { @@ -104,12 +114,11 @@ struct object *cache_find(int id) { struct object *obj; - unsigned long flags; - spin_lock_irqsave(&amp;amp;cache_lock, flags); + rcu_read_lock(); obj = __cache_find(id); if (obj) object_get(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + rcu_read_unlock(); return obj; } Note that the reader will alter the popularity member in __cache_find(), and now it doesn&#39;t hold a lock. One solution would be to make it an atomic_t, but for this usage, we don&#39;t really care about races: an approximate result is good enough, so I didn&#39;t change it. The result is that cache_find() requires no synchronization with any other functions, so is almost as fast on SMP as it would be on UP.
*****************************************************************
========================= CLASS #102 =============================
(1619) <1619> {233096} [233746]: */ int id; + + spinlock_t lock; /* Protects the name */ char name[32]; - int popularity; }; static DEFINE_SPINLOCK(cache_lock); @@ -77,6 +84,7 @@ obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; atomic_set(&amp;amp;obj-&amp;gt;refcnt, 1); /* The cache holds a reference */ + spin_lock_init(&amp;amp;obj-&amp;gt;lock); spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); Note that I decide that the popularity count should be protected by the cache_lock rather than the per-object lock: this is because it (like the struct list_head inside the object) is logically part of the infrastructure.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #103 =============================
(1620) <1620> {233748} [233856]: This way, I don&#39;t need to grab the lock of every object in __cache_add when seeking the least popular.
(1968) <1968> {290451} [290494]: Most drivers don&#39;t need to define this.
*****************************************************************
========================= CLASS #104 =============================
(1621) <1621> {233860} [234081]: I also decided that the id member is unchangeable, so I don&#39;t need to grab each object lock in __cache_find() to examine the id: the object lock is only used by a caller who wants to read or write the name field.
(1968) <1968> {290451} [290494]: Most drivers don&#39;t need to define this.
*****************************************************************
========================= CLASS #105 =============================
(1635) <1635> {235909} [235937]: There are two problems here.
(3028) <3028> {428011} [428025]: There are two.
*****************************************************************
========================= CLASS #106 =============================
(1637) <1637> {236070} [236406]: Secondly, if the same softirq on another CPU is trying to move another object in the reverse direction, the following could happen: ConsequencesCPU 1CPU 2Grab lock A -&amp;gt; OKGrab lock B -&amp;gt; OKGrab lock B -&amp;gt; spinGrab lock A -&amp;gt; spin The two CPUs will spin forever, waiting for the other to give up their lock.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #107 =============================
(1651) <1651> {237955} [238582]: If you want to destroy the entire collection (say on module removal), you might do the following: /* THIS CODE BAD BAD BAD BAD: IF IT WAS ANY WORSE IT WOULD USE HUNGARIAN NOTATION */ spin_lock_bh(&amp;amp;list_lock); while (list) { struct foo *next = list-&amp;gt;next; del_timer(&amp;amp;list-&amp;gt;timer); kfree(list); list = next; } spin_unlock_bh(&amp;amp;list_lock); Sooner or later, this will crash on SMP, because a timer can have just gone off before the spin_lock_bh(), and it will only get the lock after we spin_unlock_bh(), and then try to free the element (which has already been freed!).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #108 =============================
(1653) <1653> {238693} [239215]: If 0, it means (in this case) that it is currently running, so we can do: retry: spin_lock_bh(&amp;amp;list_lock); while (list) { struct foo *next = list-&amp;gt;next; if (!del_timer(&amp;amp;list-&amp;gt;timer)) { /* Give timer a chance to delete this */ spin_unlock_bh(&amp;amp;list_lock); goto retry; } kfree(list); list = next; } spin_unlock_bh(&amp;amp;list_lock); Another common problem is deleting timers which restart themselves (by calling add_timer() at the end of their timer function).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #109 =============================
(1681) <1681> {242473} [242650]: For example, adding new to a single linked list called list: new-&amp;gt;next = list-&amp;gt;next; wmb(); list-&amp;gt;next = new; The wmb() is a write memory barrier.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #110 =============================
(1686) <1686> {243425} [243600]: list-&amp;gt;next = old-&amp;gt;next; There is list_del_rcu() (include/linux/list.h) which does this (the normal version poisons the old object, which we don&#39;t want).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #111 =============================
(1706) <1706> {247931} [248066]: This is still possible: if you hold the lock, no one can delete the object, so you don&#39;t need to get and put the reference count.
(1968) <1968> {290451} [290494]: Most drivers don&#39;t need to define this.
*****************************************************************
========================= CLASS #112 =============================
(1819) <1819> {261909} [262073]: kgdboc argumentsUsage: kgdboc=[kms][[,]kbd][[,]serial_device][,baud]The order listed above must be observed if you use any of the optional configurations together.
(1821) <1821> {262286} [262382]: The order listed above must be observed if you use any of the optional configurations together.
*****************************************************************
========================= CLASS #113 =============================
(1822) <1822> {262384} [262734]: Using kms + only gdb is generally not a useful combination.Using loadable module or built-inAs a kernel built-in:Use the kernel boot argument: kgdboc=&amp;lt;tty-device&amp;gt;,[baud]As a kernel loadable module:Use the command: modprobe kgdboc kgdboc=&amp;lt;tty-device&amp;gt;,[baud]Here are two examples of how you might format the kgdboc string.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #114 =============================
(1826) <1826> {263042} [263658]: Here are two examples:Enable kgdboc on ttyS0echo ttyS0 &amp;gt; /sys/module/kgdboc/parameters/kgdbocDisable kgdbocecho &quot;&quot; &amp;gt; /sys/module/kgdboc/parameters/kgdbocNOTE: You do not need to specify the baud if you are configuring the console on tty which is already configured or open.More examplesYou can configure kgdboc to use the keyboard, and or a serial device depending on if you are using kdb and or kgdb, in one of the following scenarios.You can configure kgdboc to use the keyboard, and or a serial device depending on if you are using kdb and or kgdb, in one of the following scenarios.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #115 =============================
(1827) <1827> {263660} [264129]: kdb and kgdb over only a serial portkgdboc=&amp;lt;serial_device&amp;gt;[,baud]Example: kgdboc=ttyS0,115200kdb and kgdb with keyboard and a serial portkgdboc=kbd,&amp;lt;serial_device&amp;gt;[,baud]Example: kgdboc=kbd,ttyS0,115200kdb with a keyboardkgdboc=kbdkdb with kernel mode settingkgdboc=kms,kbdkdb with kernel mode setting and kgdb over a serial portkgdboc=kms,kbd,ttyS0,115200 NOTE: Kgdboc does not support interrupting the target via the gdb remote protocol.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #116 =============================
(1844) <1844> {266197} [266241]: There are two ways to activate this feature.
(3028) <3028> {428011} [428025]: There are two.
*****************************************************************
========================= CLASS #117 =============================
(1845) <1845> {266243} [266537]: Activate with the kernel command line option:kgdbconUse sysfs before configuring an I/O driverecho 1 &amp;gt; /sys/module/kgdb/parameters/kgdb_use_con NOTE: If you do this after you configure the kgdb I/O driver, the setting will not take effect until the next point the I/O is reconfigured.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #118 =============================
(1850) <1850> {266966} [267696]: The default behavior is always set to 0.echo -1 &amp;gt; /sys/module/debug_core/parameters/kgdbrebootIgnore the reboot notification entirely.echo 0 &amp;gt; /sys/module/debug_core/parameters/kgdbrebootSend the detach message to any attached debugger client.echo 1 &amp;gt; /sys/module/debug_core/parameters/kgdbrebootEnter the debugger on reboot notify.Using kdb Quick start for kdb on a serial portThis is a quick example of how to use kdb.Boot kernel with arguments: console=ttyS0,115200 kgdboc=ttyS0,115200ORConfigure kgdboc after the kernel booted; assuming you are using a serial port console: echo ttyS0 &amp;gt; /sys/module/kgdboc/parameters/kgdboc Enter the kernel debugger manually or by waiting for an oops or fault.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #119 =============================
(1851) <1851> {267698} [268763]: There are several ways you can enter the kernel debugger manually; all involve using the sysrq-g, which means you must have enabled CONFIG_MAGIC_SYSRQ=y in your kernel config.When logged in as root or with a super user session you can run:echo g &amp;gt; /proc/sysrq-triggerExample using minicom 2.2Press: Control-aPress: fPress: gWhen you have telneted to a terminal server that supports sending a remote breakPress: Control-]Type in:send breakPress: EnterPress: gFrom the kdb prompt you can run the &quot;help&quot; command to see a complete list of the commands that are available.Some useful commands in kdb include: lsmod -- Shows where kernel modules are loadedps -- Displays only the active processesps A -- Shows all the processessummary -- Shows kernel version info and memory usagebt -- Get a backtrace of the current process using dump_stack()dmesg -- View the kernel syslog buffergo -- Continue the system When you are done using kdb you need to consider rebooting the system or using the &quot;go&quot; command to resuming normal kernel execution.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #120 =============================
(1852) <1852> {268765} [269342]: If you have paused the kernel for a lengthy period of time, applications that rely on timely networking or anything to do with real wall clock time could be adversely affected, so you should take this into consideration when using the kernel debugger.Quick start for kdb using a keyboard connected consoleThis is a quick example of how to use kdb with a keyboard.Boot kernel with arguments: kgdboc=kbdORConfigure kgdboc after the kernel booted: echo kbd &amp;gt; /sys/module/kgdboc/parameters/kgdboc Enter the kernel debugger manually or by waiting for an oops or fault.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #121 =============================
(1853) <1853> {269344} [270186]: There are several ways you can enter the kernel debugger manually; all involve using the sysrq-g, which means you must have enabled CONFIG_MAGIC_SYSRQ=y in your kernel config.When logged in as root or with a super user session you can run:echo g &amp;gt; /proc/sysrq-triggerExample using a laptop keyboardPress and hold down: AltPress and hold down: FnPress and release the key with the label: SysRqRelease: FnPress and release: gRelease: AltExample using a PS/2 101-key keyboardPress and hold down: AltPress and release the key with the label: SysRqPress and release: gRelease: AltNow type in a kdb command such as &quot;help&quot;, &quot;dmesg&quot;, &quot;bt&quot; or &quot;go&quot; to continue kernel execution.Using kgdb / gdbIn order to use kgdb you must activate it by passing configuration information to one of the kgdb I/O drivers.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #122 =============================
(1857) <1857> {270469} [270681]: All kgdb I/O drivers can be reconfigured at run time, if CONFIG_SYSFS and CONFIG_MODULES are enabled, by echo&#39;ing a new config string to /sys/module/&amp;lt;driver&amp;gt;/parameter/&amp;lt;option&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #123 =============================
(1861) <1861> {270923} [271244]: Connecting with gdb to a serial portConfigure kgdbocBoot kernel with arguments: kgdboc=ttyS0,115200ORConfigure kgdboc after the kernel booted: echo ttyS0 &amp;gt; /sys/module/kgdboc/parameters/kgdbocStop kernel execution (break into the debugger)In order to connect to gdb via kgdboc, the kernel must first be stopped.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #124 =============================
(1863) <1863> {271449} [272091]: When logged in as root or with a super user session you can run:echo g &amp;gt; /proc/sysrq-triggerExample using minicom 2.2Press: Control-aPress: fPress: gWhen you have telneted to a terminal server that supports sending a remote breakPress: Control-]Type in:send breakPress: EnterPress: g Connect from from gdb Example (using a directly connected port): % gdb ./vmlinux (gdb) set remotebaud 115200 (gdb) target remote /dev/ttyS0 Example (kgdb to a terminal server on TCP port 2012): % gdb ./vmlinux (gdb) target remote 192.168.2.2:2012 Once connected, you can debug a kernel the way you would debug an application program.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #125 =============================
(1867) <1867> {272761} [273056]: The debug core will remember which you used the last time and automatically start in the same mode.Switching between kdb and kgdbSwitching from kgdb to kdb There are two ways to switch from kgdb to kdb: you can use gdb to issue a maintenance packet, or you can blindly type the command $3#33.
(3028) <3028> {428011} [428025]: There are two.
*****************************************************************
========================= CLASS #126 =============================
(1904) <1904> {279951} [280055]: There are a few flags which must be set on every architecture in their &amp;lt;asm/kgdb.h&amp;gt; file.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #127 =============================
(1932) <1932> {285554} [285731]: libATA provides an ATA driver API, class transports for ATA and ATAPI devices, and SCSI&amp;lt;-&amp;gt;ATA translation for ATA devices according to the T10 SAT specification.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #128 =============================
(1935) <1935> {286050} [286160]: FIS-based drivers will hook into the system with -&amp;gt;qc_prep() and -&amp;gt;qc_issue() high-level hooks.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #129 =============================
(1946) <1946> {287477} [287580]: The optional -&amp;gt;mode_filter() hook is called when libata has built a mask of the possible modes.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #130 =============================
(1947) <1947> {287581} [287735]: This is passed to the -&amp;gt;mode_filter() function which should return a mask of valid modes after filtering those unsuitable due to hardware limits.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #131 =============================
(1949) <1949> {287792} [287936]: dev-&amp;gt;pio_mode and dev-&amp;gt;dma_mode are guaranteed to be valid when -&amp;gt;set_piomode() and when -&amp;gt;set_dmamode() is called.
(2021) <2021> {297456} [297514]: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
(2024) <2024> {297693} [297777]: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #132 =============================
(1952) <1952> {288149} [288269]: -&amp;gt;post_set_mode() is called unconditionally, after the SET FEATURES - XFER MODE command completes successfully.
(2021) <2021> {297456} [297514]: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
(2024) <2024> {297693} [297777]: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #133 =============================
(1953) <1953> {288273} [288390]: -&amp;gt;set_piomode() is always called (if present), but -&amp;gt;set_dma_mode() is only called if DMA is possible.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #134 =============================
(1954) <1954> {288392} [288648]: Taskfile read/write void (*sff_tf_load) (struct ata_port *ap, struct ata_taskfile *tf); void (*sff_tf_read) (struct ata_port *ap, struct ata_taskfile *tf); -&amp;gt;tf_load() is called to load the given taskfile into hardware registers / DMA buffers.
(2021) <2021> {297456} [297514]: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
(2024) <2024> {297693} [297777]: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #135 =============================
(1955) <1955> {288650} [288781]: -&amp;gt;tf_read() is called to read the hardware registers / DMA buffers, to obtain the current set of taskfile register values.
(2021) <2021> {297456} [297514]: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
(2024) <2024> {297693} [297777]: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #136 =============================
(1960) <1960> {289272} [289463]: ATA command execute void (*sff_exec_command)(struct ata_port *ap, struct ata_taskfile *tf); causes an ATA command, previously loaded with -&amp;gt;tf_load(), to be initiated in hardware.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #137 =============================
(1961) <1961> {289465} [289548]: Most drivers for taskfile-based hardware use ata_sff_exec_command() for this hook.
(1966) <1966> {290211} [290294]: Most drivers for taskfile-based hardware use ata_sff_check_status() for this hook.
(1971) <1971> {290812} [290893]: Most drivers for taskfile-based hardware use ata_sff_dev_select() for this hook.
*****************************************************************
========================= CLASS #138 =============================
(1963) <1963> {289801} [289903]: This hook may be specified as NULL, in which case libata will assume that atapi dma can be supported.
(2026) <2026> {297861} [297928]: This hook may be specified as NULL, in which case it is not called.
*****************************************************************
========================= CLASS #139 =============================
(1977) <1977> {291613} [292007]: Control PCI IDE BMDMA engine void (*bmdma_setup) (struct ata_queued_cmd *qc); void (*bmdma_start) (struct ata_queued_cmd *qc); void (*bmdma_stop) (struct ata_port *ap); u8 (*bmdma_status) (struct ata_port *ap); When setting up an IDE BMDMA transaction, these hooks arm (-&amp;gt;bmdma_setup), fire (-&amp;gt;bmdma_start), and halt (-&amp;gt;bmdma_stop) the hardware&#39;s DMA engine.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #140 =============================
(1978) <1978> {292009} [292089]: -&amp;gt;bmdma_status is used to read the standard PCI IDE DMA Status register.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #141 =============================
(1988) <1988> {293076} [293223]: -&amp;gt;qc_prep is called after the buffers have been DMA-mapped, and is typically used to populate the hardware&#39;s DMA scatter-gather table.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #142 =============================
(1990) <1990> {293332} [293437]: -&amp;gt;qc_issue is used to make a command active, once the hardware and S/G tables have been prepared.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #143 =============================
(1992) <1992> {293542} [293602]: More advanced drivers implement their own -&amp;gt;qc_issue.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #144 =============================
(1993) <1993> {293606} [293740]: ata_qc_issue_prot() calls -&amp;gt;tf_load(), -&amp;gt;bmdma_setup(), and -&amp;gt;bmdma_start() as necessary to initiate a transfer.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #145 =============================
(1995) <1995> {293878} [293915]: Use -&amp;gt;error_handler() instead.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #146 =============================
(1998) <1998> {294237} [294331]: The optional -&amp;gt;freeze() callback can be used for freezing the port hardware-wise (e.g.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #147 =============================
(2001) <2001> {294512} [294656]: The optional -&amp;gt;thaw() callback is called to perform the opposite of -&amp;gt;freeze(): prepare the port for normal operation once again.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #148 =============================
(2003) <2003> {294704} [294868]: void (*error_handler) (struct ata_port *ap); -&amp;gt;error_handler() is a driver&#39;s hook into probe, hotplug, and recovery and other exceptional conditions.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #149 =============================
(2004) <2004> {294870} [295111]: The primary responsibility of an implementation is to call ata_do_eh() or ata_bmdma_drive_eh() with a set of EH hooks as arguments: &#39;prereset&#39; hook (may be NULL) is called during an EH reset, before any other actions are taken.
(2005) <2005> {295115} [295196]: &#39;postreset&#39; hook (may be NULL) is called after the EH reset is performed.
*****************************************************************
========================= CLASS #150 =============================
(2008) <2008> {295618} [295843]: Hardware interrupt handling irqreturn_t (*irq_handler)(int, void *, struct pt_regs *); void (*irq_clear) (struct ata_port *); -&amp;gt;irq_handler is the interrupt handling routine registered with the system, by libata.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #151 =============================
(2009) <2009> {295845} [295967]: -&amp;gt;irq_clear is called during probe just before the interrupt handler is registered, to be sure hardware is quiet.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #152 =============================
(2014) <2014> {296637} [296729]: Currently only used if -&amp;gt;phy_reset hook called the sata_phy_reset() helper function.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #153 =============================
(2016) <2016> {296800} [297051]: Init and shutdown int (*port_start) (struct ata_port *ap); void (*port_stop) (struct ata_port *ap); void (*host_stop) (struct ata_host_set *host_set); -&amp;gt;port_start() is called just after the data structures for each port are initialized.
(2021) <2021> {297456} [297514]: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
(2024) <2024> {297693} [297777]: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #154 =============================
(2018) <2018> {297166} [297280]: Some drivers also use this entry point as a chance to allocate driver-private memory for ap-&amp;gt;private_data.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #155 =============================
(2039) <2039> {299258} [299351]: One is via qc-&amp;gt;complete_fn() callback and the other is completion qc-&amp;gt;waiting.
(2048) <2048> {300127} [300198]: qc-&amp;gt;complete_fn() callback is used for completion notification.
(2075) <2075> {302312} [302357]: qc-&amp;gt;complete_fn() callback is invoked.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #156 =============================
(2040) <2040> {299353} [299563]: qc-&amp;gt;complete_fn() callback is the asynchronous path used by normal SCSI translated commands and qc-&amp;gt;waiting is the synchronous (issuer sleeps in process context) path used by internal commands.
(2048) <2048> {300127} [300198]: qc-&amp;gt;complete_fn() callback is used for completion notification.
(2075) <2075> {302312} [302357]: qc-&amp;gt;complete_fn() callback is invoked.
(2079) <2079> {302560} [302614]: ap-&amp;gt;active_tag and qc-&amp;gt;tag are poisoned.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #157 =============================
(2042) <2042> {299650} [299748]: SCSI commands All libata drivers use ata_scsi_queuecmd() as hostt-&amp;gt;queuecommand callback.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #158 =============================
(2047) <2047> {300025} [300123]: SCSI midlayer&#39;s completion notification function pointer is stored into qc-&amp;gt;scsidone.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #159 =============================
(2050) <2050> {300288} [300386]: Both functions end up calling qc-&amp;gt;scsidone to notify upper layer when the qc is finished.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #160 =============================
(2052) <2052> {300462} [300599]: Note that SCSI midlayer invokes hostt-&amp;gt;queuecommand while holding host_set lock, so all above occur while holding host_set lock.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #161 =============================
(2074) <2074> {302258} [302308]: ATA_QCFLAG_ACTIVE is clared from qc-&amp;gt;flags.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #162 =============================
(2078) <2078> {302475} [302556]: __ata_qc_complete() is called, which does qc-&amp;gt;flags is cleared to zero.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #163 =============================
(2080) <2080> {302618} [302684]: qc-&amp;gt;waiting is claread &amp;amp; completed (in that order).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #164 =============================
(2081) <2081> {302688} [302756]: qc is deallocated by clearing appropriate bit in ap-&amp;gt;qactive.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #165 =============================
(2087) <2087> {303235} [303393]: If an ATAPI command fails, ata_qc_complete() is invoked with error status, which in turn invokes atapi_qc_complete() via qc-&amp;gt;complete_fn() callback.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #166 =============================
(2088) <2088> {303397} [303513]: This makes atapi_qc_complete() set scmd-&amp;gt;result to SAM_STAT_CHECK_CONDITION, complete the scmd and return 1.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #167 =============================
(2089) <2089> {303515} [303710]: As the sense data is empty but scmd-&amp;gt;result is CHECK CONDITION, SCSI midlayer will invoke EH for the scmd, and returning 1 makes ata_qc_complete() to return without deallocating the qc.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #168 =============================
(2091) <2091> {303776} [303879]: ata_scsi_error() ata_scsi_error() is the current transportt-&amp;gt;eh_strategy_handler() for libata.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #169 =============================
(2099) <2099> {304523} [304617]: Here, we override qc-&amp;gt;scsidone with scsi_finish_command() and calls ata_qc_complete().
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #170 =============================
(2137) <2137> {308316} [308443]: Examples ATA_STATUS doesn&#39;t contain !BSY &amp;amp;&amp;amp; DRDY &amp;amp;&amp;amp; !DRQ while trying to issue a command.
(2138) <2138> {308447} [308501]: !BSY &amp;amp;&amp;amp; !DRQ during PIO data transfer.
*****************************************************************
========================= CLASS #171 =============================
(2152) <2152> {310064} [310232]: !BSY &amp;amp;&amp;amp; ERR(==CHK) &amp;amp;&amp;amp; !ABRT after the last byte of CDB is transferred indicates CHECK CONDITION and doesn&#39;t fall in this category.
(2153) <2153> {310236} [310414]: !BSY &amp;amp;&amp;amp; ERR(==CHK) &amp;amp;&amp;amp; ABRT after the last byte of CDB is transferred *probably* indicates CHECK CONDITION and doesn&#39;t fall in this category.
*****************************************************************
========================= CLASS #172 =============================
(2166) <2166> {312069} [312231]: Media changed / media change requested error &amp;lt;&amp;lt;TODO: fill here&amp;gt;&amp;gt; Address error This is indicated by IDNF bit in the ERROR register.
(2217) <2217> {317008} [317177]: Hotplug and power management exceptions &amp;lt;&amp;lt;TODO: fill here&amp;gt;&amp;gt; EH recovery actions This section discusses several important recovery actions.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #173 =============================
(2205) <2206> {316155} [316291]: This type of errors must be logged as it indicates something is very wrong with the system. Resetting host controller is recommended.
(2209) <2210> {316492} [316572]: This type of errors must be logged. Resetting host controller is recommended.
*****************************************************************
========================= CLASS #174 =============================
(2284) <2288> {324916} [325318]: The databytes are expanded to the given symbol size on the fly. There is no support for encoding continuous bitstreams with a symbol size != 8 at the moment. If it is necessary it should be not a big deal to implement such functionality. /* Parity buffer. Size = number of roots */ uint16_t par[6]; /* Initialize the parity buffer */ memset(par, 0, sizeof(par)); /* Encode 512 byte in data8.
(2294) <2298> {325956} [326443]: The databytes are expanded to the given symbol size on the fly. There is no support for decoding continuous bitstreams with a symbolsize != 8 at the moment. If it is necessary it should be not a big deal to implement such functionality. Decoding with syndrome calculation, direct data correction /* Parity buffer. Size = number of roots */ uint16_t par[6]; uint8_t data[512]; int numerr; /* Receive data */ ..... /* Receive parity */ ..... /* Decode 512 byte in data8.
*****************************************************************
========================= CLASS #175 =============================
(2299) <2300> {326443} [326839]: */ numerr = decode_rs8 (rs_decoder, data8, par, 512, NULL, 0, NULL, 0, NULL); Decoding with syndrome given by hardware decoder, direct data correction /* Parity buffer. Size = number of roots */ uint16_t par[6], syn[6]; uint8_t data[512]; int numerr; /* Receive data */ ..... /* Receive parity */ ..... /* Get syndrome from hardware decoder */ ..... /* Decode 512 byte in data8.
(2303) <2304> {327081} [327339]: /* Parity buffer. Size = number of roots */ uint16_t par[6], syn[6], corr[8]; uint8_t data[512]; int numerr, errpos[8]; /* Receive data */ ..... /* Receive parity */ ..... /* Get syndrome from hardware decoder */ ..... /* Decode 512 byte in data8.
*****************************************************************
========================= CLASS #176 =============================
(2306) <2306> {327631} [327839]: /* Release resources */ free_rs(rs_decoder); Structures This chapter contains the autogenerated documentation of the structures which are used in the Reed-Solomon Library and are relevant for a developer.
(2616) <2616> {376121} [376223]: Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #177 =============================
(2311) <2311> {328315} [328328]: Thanks a lot.
(2601) <2601> {373047} [373060]: Thanks a lot.
*****************************************************************
========================= CLASS #178 =============================
(2346) <2346> {333076} [333196]: The hook calls can also be easily found in the kernel code by looking for the string &quot;security_ops-&amp;gt;&quot;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #179 =============================
(2393) <2393> {341544} [341642]: Each function and struct member has a short description which is marked with an [XXX] identifier.
(2591) <2591> {371895} [371980]: Each struct member has a short description which is marked with an [XXX] identifier.
(2594) <2594> {372188} [372267]: Each function has a short description which is marked with an [XXX] identifier.
(2597) <2597> {372463} [372542]: Each function has a short description which is marked with an [XXX] identifier.
*****************************************************************
========================= CLASS #180 =============================
(2395) <2396> {341710} [341871]: Function identifiers [XXX] The functions are marked with [XXX] identifiers in the short comment. The identifiers explain the usage and scope of the functions.
(2406) <2407> {342841} [343004]: Struct member identifiers [XXX] The struct members are marked with [XXX] identifiers in the comment. The identifiers explain the usage and scope of the members.
*****************************************************************
========================= CLASS #181 =============================
(2398) <2398> {341986} [342076]: They are not replacable and provide functionality which is complete hardware independent.
(2400) <2400> {342180} [342294]: [GENERIC] Generic functions are not replacable and provide functionality which is complete hardware independent.
*****************************************************************
========================= CLASS #182 =============================
(2404) <2405> {342566} [342839]: The board driver can set the functions which should be replaced by board dependent functions before calling nand_scan(). If the function pointer is NULL on entry to nand_scan() then the pointer is set to the default function which is suitable for the detected chip type.
(2411) <2412> {343354} [343627]: The board driver can set the functions which should be replaced by board dependent functions before calling nand_scan(). If the function pointer is NULL on entry to nand_scan() then the pointer is set to the default function which is suitable for the detected chip type.
*****************************************************************
========================= CLASS #183 =============================
(2427) <2427> {345846} [346490]: static void board_hwcontrol(struct mtd_info *mtd, int cmd) { struct nand_chip *this = (struct nand_chip *) mtd-&amp;gt;priv; switch(cmd){ case NAND_CTL_SETCLE: this-&amp;gt;IO_ADDR_W |= CLE_ADRR_BIT; break; case NAND_CTL_CLRCLE: this-&amp;gt;IO_ADDR_W &amp;amp;= ~CLE_ADRR_BIT; break; case NAND_CTL_SETALE: this-&amp;gt;IO_ADDR_W |= ALE_ADRR_BIT; break; case NAND_CTL_CLRALE: this-&amp;gt;IO_ADDR_W &amp;amp;= ~ALE_ADRR_BIT; break; } } Device ready function If the hardware interface has the ready busy pin of the NAND chip connected to a GPIO or other accessible I/O pin, this function is used to read back the state of the pin.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #184 =============================
(2429) <2429> {346632} [346804]: If the hardware interface does not give access to the ready busy pin, then the function must not be defined and the function pointer this-&amp;gt;dev_ready is set to NULL.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #185 =============================
(2435) <2435> {347224} [348759]: static int __init board_init (void) { struct nand_chip *this; int err = 0; /* Allocate memory for MTD device structure and private data */ board_mtd = kzalloc(sizeof(struct mtd_info) + sizeof(struct nand_chip), GFP_KERNEL); if (!board_mtd) { printk (&quot;Unable to allocate NAND MTD device structure.\n&quot;); err = -ENOMEM; goto out; } /* map physical address */ baseaddr = ioremap(CHIP_PHYSICAL_ADDRESS, 1024); if (!baseaddr) { printk(&quot;Ioremap to access NAND chip failed\n&quot;); err = -EIO; goto out_mtd; } /* Get pointer to private data */ this = (struct nand_chip *) (); /* Link the private data with the MTD structure */ board_mtd-&amp;gt;priv = this; /* Set address of NAND IO lines */ this-&amp;gt;IO_ADDR_R = baseaddr; this-&amp;gt;IO_ADDR_W = baseaddr; /* Reference hardware control function */ this-&amp;gt;hwcontrol = board_hwcontrol; /* Set command delay time, see datasheet for correct value */ this-&amp;gt;chip_delay = CHIP_DEPENDEND_COMMAND_DELAY; /* Assign the device ready function, if available */ this-&amp;gt;dev_ready = board_dev_ready; this-&amp;gt;eccmode = NAND_ECC_SOFT; /* Scan to find existence of the device */ if (nand_scan (board_mtd, 1)) { err = -ENXIO; goto out_ior; } add_mtd_partitions(board_mtd, partition_info, NUM_PARTITIONS); goto out; out_ior: iounmap(baseaddr); out_mtd: kfree (board_mtd); out: return err; } module_init(board_init); Exit function The exit function is only neccecary if the driver is compiled as a module.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #186 =============================
(2447) <2447> {350015} [350365]: There is no support for parallel arrays which extend the buswidth.GPIO based example static void board_select_chip (struct mtd_info *mtd, int chip) { /* Deselect all chips, set all nCE pins high */ GPIO(BOARD_NAND_NCE) |= 0xff; if (chip &amp;gt;= 0) GPIO(BOARD_NAND_NCE) &amp;amp;= ~ (1 &amp;lt;&amp;lt; chip); } Address lines based example.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #187 =============================
(2449) <2449> {350438} [351086]: static void board_select_chip (struct mtd_info *mtd, int chip) { struct nand_chip *this = (struct nand_chip *) mtd-&amp;gt;priv; /* Deselect all chips */ this-&amp;gt;IO_ADDR_R &amp;amp;= ~BOARD_NAND_ADDR_MASK; this-&amp;gt;IO_ADDR_W &amp;amp;= ~BOARD_NAND_ADDR_MASK; switch (chip) { case 0: this-&amp;gt;IO_ADDR_R |= BOARD_NAND_ADDR_CHIP0; this-&amp;gt;IO_ADDR_W |= BOARD_NAND_ADDR_CHIP0; break; .... case n: this-&amp;gt;IO_ADDR_R |= BOARD_NAND_ADDR_CHIPn; this-&amp;gt;IO_ADDR_W |= BOARD_NAND_ADDR_CHIPn; break; } } Hardware ECC supportFunctions and constants The nand driver supports three different types of hardware ECC.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #188 =============================
(2450) <2450> {351088} [351165]: NAND_ECC_HW3_256 Hardware ECC generator providing 3 bytes ECC per 256 byte.
(2451) <2451> {351167} [351244]: NAND_ECC_HW3_512 Hardware ECC generator providing 3 bytes ECC per 512 byte.
(2452) <2452> {351246} [351323]: NAND_ECC_HW6_512 Hardware ECC generator providing 6 bytes ECC per 512 byte.
(2453) <2453> {351325} [351402]: NAND_ECC_HW8_512 Hardware ECC generator providing 6 bytes ECC per 512 byte.
*****************************************************************
========================= CLASS #189 =============================
(2552) <2552> {362314} [362577]: The storage sequence is &amp;lt;spare data page 0&amp;gt;&amp;lt;ecc result 0&amp;gt;...&amp;lt;ecc result n&amp;gt; ... &amp;lt;spare data page n&amp;gt;&amp;lt;ecc result 0&amp;gt;...&amp;lt;ecc result n&amp;gt; This is a legacy mode used by YAFFS1.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #190 =============================
(2553) <2553> {362581} [362711]: If the spare area buffer is NULL then only the ECC placement is done according to the given scheme in the nand_oobinfo structure.
(2557) <2557> {363036} [363146]: If the spare area buffer is NULL then only the ECC placement is done according to the default builtin scheme.
*****************************************************************
========================= CLASS #191 =============================
(2559) <2560> {363459} [364059]: This applies only to the first page in a block. In the remaining pages this byte is reserved0x06Autoplace 20x07Autoplace 3512 byte pagesizeOffsetContentComment0x00ECC byte 0Error correction code byte 0 of the lower 256 Byte data in this page0x01ECC byte 1Error correction code byte 1 of the lower 256 Bytes of data in this page0x02ECC byte 2Error correction code byte 2 of the lower 256 Bytes of data in this page0x03ECC byte 3Error correction code byte 0 of the upper 256 Bytes of data in this page0x04reservedreserved0x05Bad block markerIf any bit in this byte is zero, then this block is bad.
(2561) <2562> {364061} [364468]: This applies only to the first page in a block. In the remaining pages this byte is reserved0x06ECC byte 4Error correction code byte 1 of the upper 256 Bytes of data in this page0x07ECC byte 5Error correction code byte 2 of the upper 256 Bytes of data in this page0x08 - 0x0FAutoplace 0 - 72048 byte pagesizeOffsetContentComment0x00Bad block markerIf any bit in this byte is zero, then this block is bad.
(2563) <2564> {364470} [366828]: This applies only to the first page in a block. In the remaining pages this byte is reserved0x01ReservedReserved0x02-0x27Autoplace 0 - 370x28ECC byte 0Error correction code byte 0 of the first 256 Byte data in this page0x29ECC byte 1Error correction code byte 1 of the first 256 Bytes of data in this page0x2AECC byte 2Error correction code byte 2 of the first 256 Bytes data in this page0x2BECC byte 3Error correction code byte 0 of the second 256 Bytes of data in this page0x2CECC byte 4Error correction code byte 1 of the second 256 Bytes of data in this page0x2DECC byte 5Error correction code byte 2 of the second 256 Bytes of data in this page0x2EECC byte 6Error correction code byte 0 of the third 256 Bytes of data in this page0x2FECC byte 7Error correction code byte 1 of the third 256 Bytes of data in this page0x30ECC byte 8Error correction code byte 2 of the third 256 Bytes of data in this page0x31ECC byte 9Error correction code byte 0 of the fourth 256 Bytes of data in this page0x32ECC byte 10Error correction code byte 1 of the fourth 256 Bytes of data in this page0x33ECC byte 11Error correction code byte 2 of the fourth 256 Bytes of data in this page0x34ECC byte 12Error correction code byte 0 of the fifth 256 Bytes of data in this page0x35ECC byte 13Error correction code byte 1 of the fifth 256 Bytes of data in this page0x36ECC byte 14Error correction code byte 2 of the fifth 256 Bytes of data in this page0x37ECC byte 15Error correction code byte 0 of the sixt 256 Bytes of data in this page0x38ECC byte 16Error correction code byte 1 of the sixt 256 Bytes of data in this page0x39ECC byte 17Error correction code byte 2 of the sixt 256 Bytes of data in this page0x3AECC byte 18Error correction code byte 0 of the seventh 256 Bytes of data in this page0x3BECC byte 19Error correction code byte 1 of the seventh 256 Bytes of data in this page0x3CECC byte 20Error correction code byte 2 of the seventh 256 Bytes of data in this page0x3DECC byte 21Error correction code byte 0 of the eighth 256 Bytes of data in this page0x3EECC byte 22Error correction code byte 1 of the eighth 256 Bytes of data in this page0x3FECC byte 23Error correction code byte 2 of the eighth 256 Bytes of data in this pageFilesystem support The NAND driver provides all neccecary functions for a filesystem via the MTD interface.
*****************************************************************
========================= CLASS #192 =============================
(2577) <2577> {368132} [368191]: They are ored together to describe the chip functionality.
(2580) <2580> {368887} [368941]: They are ored together to describe the functionality.
*****************************************************************
========================= CLASS #193 =============================
(2590) <2590> {370748} [371894]: /* Options for the bad block table descriptors */ /* The number of bits used per block in the bbt on the device */ #define NAND_BBT_NRBITS_MSK 0x0000000F #define NAND_BBT_1BIT 0x00000001 #define NAND_BBT_2BIT 0x00000002 #define NAND_BBT_4BIT 0x00000004 #define NAND_BBT_8BIT 0x00000008 /* The bad block table is in the last good block of the device */ #define NAND_BBT_LASTBLOCK 0x00000010 /* The bbt is at the given page, else we must scan for the bbt */ #define NAND_BBT_ABSPAGE 0x00000020 /* bbt is stored per chip on multichip devices */ #define NAND_BBT_PERCHIP 0x00000080 /* bbt has a version counter at offset veroffs */ #define NAND_BBT_VERSION 0x00000100 /* Create a bbt if none axists */ #define NAND_BBT_CREATE 0x00000200 /* Write bbt if neccecary */ #define NAND_BBT_WRITE 0x00001000 /* Read and write back block contents when writing bbt */ #define NAND_BBT_SAVECONTENT 0x00002000 Structures This chapter contains the autogenerated documentation of the structures which are used in the NAND driver and might be relevant for a driver developer.
(2596) <2596> {372340} [372461]: Internal Functions Provided This chapter contains the autogenerated documentation of the NAND driver internal functions.
(2616) <2616> {376121} [376223]: Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #194 =============================
(2592) <2592> {371982} [372049]: See the chapter &quot;Documentation hints&quot; for an explanation.
(2595) <2595> {372269} [372336]: See the chapter &quot;Documentation hints&quot; for an explanation.
(2598) <2598> {372544} [372611]: See the chapter &quot;Documentation hints&quot; for an explanation.
*****************************************************************
========================= CLASS #195 =============================
(2617) <2617> {376225} [377006]: Structures Enumeration and Discovery Driver functionality Device model support Sysfs support PPC32 support Credits The following people have contributed to the RapidIO subsystem directly or indirectly: Matt Portermporter@kernel.crashing.orgRandy Vinsonrvinson@mvista.comDan Malekdan@embeddedalley.com The following people have contributed to this document: Matt Portermporter@kernel.crashing.org Voltage and current regulator APILiamGirdwoodlrg@slimlogic.co.ukMarkBrownWolfson Microelectronicsbroonie@opensource.wolfsonmicro.com2007-2008Wolfson Microelectronics2008Liam Girdwood This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2662) <2662> {382684} [382933]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(2692) <2692> {386419} [386678]: SCSI Interfaces GuideJamesBottomleyJames.Bottomley@hansenpartnership.comRobLandleyrob@landley.net2007Linux Foundation This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2.
(2748) <2748> {394786} [394971]: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
(2752) <2752> {395495} [395973]: Memory ManagementSH-4Store Queue API SH-5TLB Interfaces Machine Specific Interfacesmach-dreamcast mach-x3proto BussesSuperHyway Maple The Linux Kernel Tracepoint APIJasonBaronjbaron@redhat.comWilliamCohenwcohen@redhat.com This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3007) <3007> {424690} [424988]: Linutronix homepage.The Linux-USB Host Side API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(3232) <3232> {455259} [455548]: Copyright (c) 2002-2005 Takashi Iwai tiwai@suse.de This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
(4135) <4135> {586737} [587072]: Writing USB Device DriversGregKroah-Hartmangreg@kroah.com2001-2002Greg Kroah-Hartman This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
*****************************************************************
========================= CLASS #196 =============================
(2785) <2785> {400455} [400989]: Please email me at hjk@hansjkoch.de.&lt;?dbhtml filename=&quot;about.html&quot;?&gt;About UIOIf you use UIO for your card&#39;s driver, here&#39;s what you get:only one small kernel module to write and maintain.develop the main part of your driver in user space, with all the tools and libraries you&#39;re used to.bugs in your driver won&#39;t crash the kernel.updates of your driver can take place without recompiling the kernel.How UIO works Each UIO device is accessed through a device file and several sysfs attribute files.
(2939) <2939> {414918} [414956]: That&#39;s what uio_pdrv_genirq does.
(3447) <3447> {487654} [487695]: EXPORT_NO_SYMBOLS; That&#39;s all!
*****************************************************************
========================= CLASS #197 =============================
(2791) <2791> {401379} [401445]: You can also use select() on /dev/uioX to wait for an interrupt.
(2987) <2987> {420465} [420505]: You can also use select() on /dev/uioX.
*****************************************************************
========================= CLASS #198 =============================
(2834) <2834> {405502} [405791]: To map the memory of mapping N, you have to use N times the page size as your offset: offset = N * getpagesize(); Sometimes there is hardware with memory-like regions that can not be mapped with the technique described here, but there are still ways to access them from userspace.
(2975) <2975> {419330} [419539]: To map the memory of mapping N, you have to use N times the page size as your offset: offset = N * getpagesize(); N starts from zero, so if you&#39;ve got only one memory range to map, set offset = 0.
*****************************************************************
========================= CLASS #199 =============================
(2858) <2859> {407741} [407897]: See the description below for details. struct uio_port port[ MAX_UIO_PORTS_REGIONS ]: Required if you want to pass information about ioports to userspace.
(2861) <2862> {407970} [408029]: See the description below for details. long irq: Required.
*****************************************************************
========================= CLASS #200 =============================
(2871) <2871> {408776} [408844]: int (*open)(struct uio_info *info, struct inode *inode) : Optional.
(2874) <2874> {408954} [409025]: int (*release)(struct uio_info *info, struct inode *inode) : Optional.
*****************************************************************
========================= CLASS #201 =============================
(2880) <2882> {409485} [409741]: For each region, you have to set up a struct uio_mem in the mem[] array. Here&#39;s a description of the fields of struct uio_mem: const char *name: Optional. Set this to help identify the memory region, it will show up in the corresponding sysfs node.
(2902) <2904> {411077} [411285]: For each region, you have to set up a struct uio_port in the port[] array. Here&#39;s a description of the fields of struct uio_port: char *porttype: Required. Set this to one of the predefined constants.
*****************************************************************
========================= CLASS #202 =============================
(2883) <2883> {409743} [409788]: int memtype: Required if the mapping is used.
(2888) <2888> {410003} [410053]: phys_addr_t addr: Required if the mapping is used.
*****************************************************************
========================= CLASS #203 =============================
(2892) <2894> {410225} [410515]: If size is zero, the mapping is considered unused. Note that you must initialize size with zero for all unused mappings. void *internal_addr: If you have to access this memory region from within your kernel module, you will want to map it internally by using something like ioremap().
(2909) <2911> {411527} [411710]: If size is zero, the region is considered unused. Note that you must initialize size with zero for all unused regions. Please do not touch the portio element of struct uio_port!
*****************************************************************
========================= CLASS #204 =============================
(2898) <2899> {410735} [410830]: It is used by the UIO framework to set up sysfs files for this mapping. Simply leave it alone.
(2912) <2913> {411711} [411816]: It is used internally by the UIO framework to set up sysfs files for this region. Simply leave it alone.
*****************************************************************
========================= CLASS #205 =============================
(2933) <2933> {414209} [414346]: You now have to set the .name element of struct platform_device to &quot;uio_pdrv&quot; to use the generic UIO platform device driver.
(2943) <2943> {415206} [415315]: You will set the .name element of struct platform_device to &quot;uio_pdrv_genirq&quot; to use this driver.
(2954) <2954> {416437} [416537]: Set the .name element of struct platform_device to &quot;uio_dmem_genirq&quot; to use this driver.
*****************************************************************
========================= CLASS #206 =============================
(2992) <2992> {421108} [421422]: For example: modprobe uio_pci_generic echo &quot;8086 10f5&quot; &amp;gt; /sys/bus/pci/drivers/uio_pci_generic/new_id If there already is a hardware specific kernel driver for your device, the generic driver still won&#39;t bind to it, in this case if you want to use the generic driver (why would you?)
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #207 =============================
(2993) <2993> {421423} [422028]: you&#39;ll have to manually unbind the hardware specific driver and bind the generic driver, like this: echo -n 0000:00:19.0 &amp;gt; /sys/bus/pci/drivers/e1000e/unbind echo -n 0000:00:19.0 &amp;gt; /sys/bus/pci/drivers/uio_pci_generic/bind You can verify that the device has been bound to the driver by looking for it in sysfs, for example like the following: ls -l /sys/bus/pci/devices/0000:00:19.0/driver Which if successful should print .../0000:00:19.0/driver -&amp;gt; ../../../bus/pci/drivers/uio_pci_generic Note that the generic driver will not bind to old PCI 2.2 devices.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #208 =============================
(3001) <3001> {423045} [424044]: Example code using uio_pci_generic Here is some sample userspace driver code using uio_pci_generic: #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;errno.h&amp;gt; int main() { int uiofd; int configfd; int err; int i; unsigned icount; unsigned char command_high; uiofd = open(&quot;/dev/uio0&quot;, O_RDONLY); if (uiofd &amp;lt; 0) { perror(&quot;uio open:&quot;); return errno; } configfd = open(&quot;/sys/class/uio/uio0/device/config&quot;, O_RDWR); if (configfd &amp;lt; 0) { perror(&quot;config open:&quot;); return errno; } /* Read and cache command value */ err = pread(configfd, &amp;amp;command_high, 1, 5); if (err != 1) { perror(&quot;command config read:&quot;); return errno; } command_high &amp;amp;= ~0x4; for(i = 0;; ++i) { /* Print out a message, for debugging.
(3005) <3005> {424369} [424520]: */ err = pwrite(configfd, &amp;amp;command_high, 1, 5); if (err != 1) { perror(&quot;config write:&quot;); break; } /* Wait for next interrupt.
(3006) <3006> {424521} [424688]: */ err = read(uiofd, &amp;amp;icount, 4); if (err != 4) { perror(&quot;uio read:&quot;); break; } } return errno; } Further information OSADL homepage.
(3325) <3325> {469390} [469682]: #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; where the last one is necessary only when module options are defined in the source file.
(3330) <3330> {470164} [470225]: They have to be included after &amp;lt;sound/core.h&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #209 =============================
(3054) <3054> {431385} [431518]: USB-Standard TypesIn &amp;lt;linux/usb/ch9.h&amp;gt; you will find the USB data types defined in chapter 9 of the USB specification.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #210 =============================
(3097) <3097> {437172} [437439]: That&#39;s the most secure approach for multi-user systems, but for single user systems (&quot;trusted&quot; by that user) it&#39;s more convenient just to grant everyone all access (using the devmode=0666 option) so the driver can start whenever it&#39;s needed.
(3447) <3447> {487654} [487695]: EXPORT_NO_SYMBOLS; That&#39;s all!
*****************************************************************
========================= CLASS #211 =============================
(3099) <3099> {437617} [437708]: (Default: 0)busmode=MMMControls the file mode used for the /proc/bus/usb/BBB directories.
(3102) <3102> {437889} [437978]: (Default: 0)devmode=MMMControls the file mode used for the /proc/bus/usb/BBB/DDD files.
*****************************************************************
========================= CLASS #212 =============================
(3104) <3104> {438070} [438166]: (Default: 0)listgid=NNNNNControls the GID used for the /proc/bus/usb/devices and drivers files.
(3105) <3105> {438168} [438269]: (Default: 0)listmode=MMMControls the file mode used for the /proc/bus/usb/devices and drivers files.
*****************************************************************
========================= CLASS #213 =============================
(3141) <3141> {442921} [443334]: The ioctl() RequestsTo use these ioctls, you need to include the following headers in your userspace program: #include &amp;lt;linux/usb.h&amp;gt; #include &amp;lt;linux/usbdevice_fs.h&amp;gt; #include &amp;lt;asm/byteorder.h&amp;gt; The standard USB device model requests, from &quot;Chapter 9&quot; of the USB 2.0 specification, are automatically included from the &amp;lt;linux/usb/ch9.h&amp;gt; header.
(3325) <3325> {469390} [469682]: #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; where the last one is necessary only when module options are defined in the source file.
(3330) <3330> {470164} [470225]: They have to be included after &amp;lt;sound/core.h&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #214 =============================
(3154) <3154> {444617} [444723]: The ioctl parameter is an integer holding the number of the interface (bInterfaceNumber from descriptor).
(3173) <3173> {447292} [447454]: The ioctl parameter is an integer holding the number of the interface (bInterfaceNumber from descriptor); File modification time is not updated by this request.
(3200) <3200> {450848} [450879]: The ioctl parameter is ignored.
(3202) <3202> {450935} [450989]: File modification time is not updated by this request.
(3211) <3211> {451863} [451917]: File modification time is not updated by this request.
(3227) <3227> {454554} [454632]: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
(3228) <3228> {454636} [454714]: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
(3229) <3229> {454718} [454793]: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
(3230) <3230> {454797} [454878]: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #215 =============================
(3157) <3157> {445017} [445071]: File modification time is not updated by this request.
(3202) <3202> {450935} [450989]: File modification time is not updated by this request.
(3211) <3211> {451863} [451917]: File modification time is not updated by this request.
(3227) <3227> {454554} [454632]: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
(3228) <3228> {454636} [454714]: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
(3229) <3229> {454718} [454793]: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
(3230) <3230> {454797} [454878]: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #216 =============================
(3159) <3159> {445131} [445320]: The ioctl parameter points to a structure like this: struct usbdevfs_connectinfo { unsigned int devnum; unsigned char slow; }; File modification time is not updated by this request.
(3202) <3202> {450935} [450989]: File modification time is not updated by this request.
(3205) <3205> {451210} [451414]: The ioctl parameter is a pointer to a structure like this: struct usbdevfs_setinterface { unsigned int interface; unsigned int altsetting; }; File modification time is not updated by this request.
(3211) <3211> {451863} [451917]: File modification time is not updated by this request.
(3227) <3227> {454554} [454632]: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
(3228) <3228> {454636} [454714]: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
(3229) <3229> {454718} [454793]: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
(3230) <3230> {454797} [454878]: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #217 =============================
(3163) <3163> {445647} [445874]: Parameter is a pointer to this structure, which is modified: struct usbdevfs_getdriver { unsigned int interface; char driver[USBDEVFS_MAXDRIVERNAME + 1]; }; File modification time is not updated by this request.
(3202) <3202> {450935} [450989]: File modification time is not updated by this request.
(3211) <3211> {451863} [451917]: File modification time is not updated by this request.
(3227) <3227> {454554} [454632]: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
(3228) <3228> {454636} [454714]: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
(3229) <3229> {454718} [454793]: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
(3230) <3230> {454797} [454878]: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #218 =============================
(3166) <3166> {446135} [446215]: * &#39;request&#39; becomes the driver-&amp;gt;ioctl() &#39;code&#39; parameter.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #219 =============================
(3167) <3167> {446217} [446369]: * the size of &#39;param&#39; is encoded in &#39;request&#39;, and that data * is copied to or from the driver-&amp;gt;ioctl() &#39;buf&#39; parameter.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #220 =============================
(3168) <3168> {446371} [446680]: */ static int usbdev_ioctl (int fd, int ifno, unsigned request, void *param) { struct usbdevfs_ioctl wrapper; wrapper.ifno = ifno; wrapper.ioctl_code = request; wrapper.data = param; return ioctl (fd, USBDEVFS_IOCTL, &amp;amp;wrapper); } File modification time is not updated by this request.
(3202) <3202> {450935} [450989]: File modification time is not updated by this request.
(3211) <3211> {451863} [451917]: File modification time is not updated by this request.
(3227) <3227> {454554} [454632]: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
(3228) <3228> {454636} [454714]: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
(3229) <3229> {454718} [454793]: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
(3230) <3230> {454797} [454878]: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #221 =============================
(3177) <3177> {447718} [447898]: The ioctl parameter is an integer endpoint number (1 to 15, as identified in the endpoint descriptor), with USB_DIR_IN added if the device&#39;s endpoint sends data to the host.
(3200) <3200> {450848} [450879]: The ioctl parameter is ignored.
*****************************************************************
========================= CLASS #222 =============================
(3185) <3186> {448576} [449106]: The ioctl parameter is a pointer to this structure: struct usbdevfs_bulktransfer { unsigned int ep; unsigned int len; unsigned int timeout; /* in milliseconds */ void *data; }; The &quot;ep&quot; value identifies a bulk endpoint number (1 to 15, as identified in an endpoint descriptor), masked with USB_DIR_IN when referring to an endpoint which sends data to the host from the device. The length of the data buffer is identified by &quot;len&quot;; Recent kernels support requests up to about 128KBytes.
(3189) <3190> {449324} [449644]: The ioctl parameter is an integer endpoint number (1 to 15, as identified in an endpoint descriptor), masked with USB_DIR_IN when referring to an endpoint which sends data to the host from the device. Use this on bulk or interrupt endpoints which have stalled, returning -EPIPE status to a data transfer request.
*****************************************************************
========================= CLASS #223 =============================
(3194) <3194> {450204} [450353]: The bRequestType value is composed by combining a USB_TYPE_* value, a USB_DIR_* value, and a USB_RECIP_* value (from &amp;lt;linux/usb.h&amp;gt;).
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #224 =============================
(3197) <3197> {450674} [450709]: (That&#39;s not usually a problem.)
(3447) <3447> {487654} [487695]: EXPORT_NO_SYMBOLS; That&#39;s all!
*****************************************************************
========================= CLASS #225 =============================
(3203) <3204> {450991} [451208]: Avoid using this call until some usbcore bugs get fixed, since it does not fully synchronize device, interface, and driver (not just usbfs) state. USBDEVFS_SETINTERFACESets the alternate setting for an interface.
(3212) <3213> {451919} [452216]: Avoid using this call until some usbcore bugs get fixed, since it does not fully synchronize device, interface, and driver (not just usbfs) state. Asynchronous I/O SupportAs mentioned above, there are situations where it may be important to initiate concurrent operations from user mode code.
*****************************************************************
========================= CLASS #226 =============================
(3245) <3246> {457164} [457545]: &lt;!-- ****************************************************** --&gt;&lt;!-- File Tree Structure --&gt;&lt;!-- ****************************************************** --&gt;File Tree StructureGeneral The ALSA drivers are provided in two ways. One is the trees provided as a tarball or via cvs from the ALSA&#39;s ftp site, and another is the 2.6 (or later) Linux kernel tree.
(3702) <3703> {527309} [527612]: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc. which are accessed from user-space.
*****************************************************************
========================= CLASS #227 =============================
(3280) <3280> {461078} [461221]: pci directory This directory and its sub-directories hold the top-level card modules for PCI soundcards and the code specific to the PCI BUS.
(3283) <3283> {461417} [461523]: isa directory This directory and its sub-directories hold the top-level card modules for ISA soundcards.
*****************************************************************
========================= CLASS #228 =============================
(3290) <3290> {462065} [462761]: In the ALSA driver tarball, this directory is empty, of course :) &lt;!-- ****************************************************** --&gt;&lt;!-- Basic Flow for PCI Drivers --&gt;&lt;!-- ****************************************************** --&gt;Basic Flow for PCI DriversOutline The minimum flow for PCI soundcards is as follows: define the PCI ID table (see the section PCI Entries ).create probe() callback.create remove() callback.create a pci_driver structure containing the three pointers above.create an init() function just calling the pci_register_driver() to register the pci_driver table defined above.create an exit() function to call the pci_unregister_driver() function.
(3702) <3702> {527309} [527576]: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc.
(3840) <3840> {545286} [545566]: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #229 =============================
(3294) <3299> {463033} [466903]: Basic Flow for PCI Drivers - Example #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; /* module parameters (see &quot;Module Parameters&quot;) */ /* SNDRV_CARDS: maximum number of cards supported by this module */ static int index[SNDRV_CARDS] = SNDRV_DEFAULT_IDX; static char *id[SNDRV_CARDS] = SNDRV_DEFAULT_STR; static bool enable[SNDRV_CARDS] = SNDRV_DEFAULT_ENABLE_PNP; /* definition of the chip-specific record */ struct mychip { struct snd_card *card; /* the rest of the implementation will be in section * &quot;PCI Resource Management&quot; */ }; /* chip-specific destructor * (see &quot;PCI Resource Management&quot;) */ static int snd_mychip_free(struct mychip *chip) { .... /* will be implemented later... */ } /* component-destructor * (see &quot;Management of Cards and Components&quot;) */ static int snd_mychip_dev_free(struct snd_device *device) { return snd_mychip_free(device-&amp;gt;device_data); } /* chip-specific constructor * (see &quot;Management of Cards and Components&quot;) */ static int snd_mychip_create(struct snd_card *card, struct pci_dev *pci, struct mychip **rchip) { struct mychip *chip; int err; static struct snd_device_ops ops = { .dev_free = snd_mychip_dev_free, }; *rchip = NULL; /* check PCI availability here * (see &quot;PCI Resource Management&quot;) */ .... /* allocate a chip-specific data with zero filled */ chip = kzalloc(sizeof(*chip), GFP_KERNEL); if (chip == NULL) return -ENOMEM; chip-&amp;gt;card = card; /* rest of initialization here; will be implemented * later, see &quot;PCI Resource Management&quot; */ .... err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &amp;amp;ops); if (err &amp;lt; 0) { snd_mychip_free(chip); return err; } snd_card_set_dev(card, &amp;amp;pci-&amp;gt;dev); *rchip = chip; return 0; } /* constructor -- see &quot;Constructor&quot; sub-section */ static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { static int dev; struct snd_card *card; struct mychip *chip; int err; /* (1) */ if (dev &amp;gt;= SNDRV_CARDS) return -ENODEV; if (!enable[dev]) { dev++; return -ENOENT; } /* (2) */ err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); if (err &amp;lt; 0) return err; /* (3) */ err = snd_mychip_create(card, pci, &amp;amp;chip); if (err &amp;lt; 0) { snd_card_free(card); return err; } /* (4) */ strcpy(card-&amp;gt;driver, &quot;My Chip&quot;); strcpy(card-&amp;gt;shortname, &quot;My Own Chip 123&quot;); sprintf(card-&amp;gt;longname, &quot;%s at 0x%lx irq %i&quot;, card-&amp;gt;shortname, chip-&amp;gt;ioport, chip-&amp;gt;irq); /* (5) */ .... /* implemented later */ /* (6) */ err = snd_card_register(card); if (err &amp;lt; 0) { snd_card_free(card); return err; } /* (7) */ pci_set_drvdata(pci, card); dev++; return 0; } /* destructor -- see the &quot;Destructor&quot; sub-section */ static void snd_mychip_remove(struct pci_dev *pci) { snd_card_free(pci_get_drvdata(pci)); pci_set_drvdata(pci, NULL); } Constructor The real constructor of PCI drivers is the probe callback. The probe callback and other component-constructors which are called from the probe callback cannot be used with the __init prefix because any PCI device could be a hotplug device. In the probe callback, the following scheme is often used. 1) Check and increment the device index. static int dev; .... if (dev &amp;gt;= SNDRV_CARDS) return -ENODEV; if (!enable[dev]) { dev++; return -ENOENT; } where enable[dev] is the module option. Each time the probe callback is called, check the availability of the device.
(3306) <3311> {467589} [468269]: strcpy(card-&amp;gt;driver, &quot;My Chip&quot;); strcpy(card-&amp;gt;shortname, &quot;My Own Chip 123&quot;); sprintf(card-&amp;gt;longname, &quot;%s at 0x%lx irq %i&quot;, card-&amp;gt;shortname, chip-&amp;gt;ioport, chip-&amp;gt;irq); The driver field holds the minimal ID string of the chip. This is used by alsa-lib&#39;s configurator, so keep it simple but unique. Even the same driver can have different driver IDs to distinguish the functionality of each chip type. The shortname field is a string shown as more verbose name. The longname field contains the information shown in /proc/asound/cards. 5) Create other components, such as mixer, MIDI, etc.
*****************************************************************
========================= CLASS #230 =============================
(3302) <3302> {467018} [467248]: 2) Create a card instance struct snd_card *card; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); The details will be explained in the section Management of Cards and Components.
(3363) <3363> {473478} [473626]: err = snd_card_create(index[dev], id[dev], THIS_MODULE, sizeof(struct mychip), &amp;amp;card); struct mychip is the type of the chip record.
(3724) <3724> {529557} [529620]: The details will be explained in the Access Flags subsection.
*****************************************************************
========================= CLASS #231 =============================
(3304) <3305> {467330} [467587]: struct mychip *chip; .... err = snd_mychip_create(card, pci, &amp;amp;chip); if (err &amp;lt; 0) { snd_card_free(card); return err; } The details will be explained in the section PCI Resource Management. 4) Set the driver ID and name strings.
(3317) <3318> {468474} [468690]: err = snd_card_register(card); if (err &amp;lt; 0) { snd_card_free(card); return err; } Will be explained in the section Management of Cards and Components, too. 7) Set the PCI driver data and return zero.
*****************************************************************
========================= CLASS #232 =============================
(3325) <3325> {469390} [469682]: #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; where the last one is necessary only when module options are defined in the source file.
(3330) <3330> {470164} [470225]: They have to be included after &amp;lt;sound/core.h&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #233 =============================
(3327) <3327> {469783} [469934]: In addition to these headers, you&#39;ll need &amp;lt;linux/interrupt.h&amp;gt; for interrupt handling, and &amp;lt;asm/io.h&amp;gt; for I/O access.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #234 =============================
(3328) <3328> {469935} [470045]: If you use the mdelay() or udelay() functions, you&#39;ll need to include &amp;lt;linux/delay.h&amp;gt; too.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #235 =============================
(3329) <3329> {470049} [470162]: The ALSA interfaces like the PCM and control APIs are defined in other &amp;lt;sound/xxx.h&amp;gt; header files.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #236 =============================
(3331) <3331> {470227} [470516]: &lt;!-- ****************************************************** --&gt;&lt;!-- Management of Cards and Components --&gt;&lt;!-- ****************************************************** --&gt;Management of Cards and ComponentsCard Instance For each soundcard, a card record must be allocated.
(3702) <3702> {527309} [527576]: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc.
(3840) <3840> {545286} [545566]: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #237 =============================
(3338) <3338> {471361} [471460]: The extra_size argument is used to allocate card-&amp;gt;private_data for the chip-specific data.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #238 =============================
(3364) <3364> {473630} [473797]: In return, the allocated record can be accessed as struct mychip *chip = card-&amp;gt;private_data; With this method, you don&#39;t have to allocate twice.
(3421) <3421> {484262} [484299]: You don&#39;t have to stop PCMs, etc.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #239 =============================
(3370) <3370> {474370} [474766]: chip-&amp;gt;card = card; Next, initialize the fields, and register this chip record as a low-level device with a specified ops, static struct snd_device_ops ops = { .dev_free = snd_mychip_dev_free, }; .... snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &amp;amp;ops); snd_mychip_dev_free() is the device-destructor function, which will call the real destructor.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #240 =============================
(3371) <3371> {474770} [474941]: static int snd_mychip_dev_free(struct snd_device *device) { return snd_mychip_free(device-&amp;gt;device_data); } where snd_mychip_free() is the real destructor.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #241 =============================
(3380) <3380> {475625} [475939]: &lt;!-- ****************************************************** --&gt;&lt;!-- PCI Resource Management --&gt;&lt;!-- ****************************************************** --&gt;PCI Resource ManagementFull Code Example In this section, we&#39;ll complete the chip-specific constructor, destructor and PCI entries.
(3702) <3702> {527309} [527576]: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc.
(3840) <3840> {545286} [545566]: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #242 =============================
(3382) <3385> {475980} [479379]: PCI Resource Management Example struct mychip { struct snd_card *card; struct pci_dev *pci; unsigned long port; int irq; }; static int snd_mychip_free(struct mychip *chip) { /* disable hardware here if any */ .... /* (not implemented in this document) */ /* release the irq */ if (chip-&amp;gt;irq &amp;gt;= 0) free_irq(chip-&amp;gt;irq, chip); /* release the I/O ports &amp;amp; memory */ pci_release_regions(chip-&amp;gt;pci); /* disable the PCI entry */ pci_disable_device(chip-&amp;gt;pci); /* release the data */ kfree(chip); return 0; } /* chip-specific constructor */ static int snd_mychip_create(struct snd_card *card, struct pci_dev *pci, struct mychip **rchip) { struct mychip *chip; int err; static struct snd_device_ops ops = { .dev_free = snd_mychip_dev_free, }; *rchip = NULL; /* initialize the PCI entry */ err = pci_enable_device(pci); if (err &amp;lt; 0) return err; /* check PCI availability (28bit DMA) */ if (pci_set_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0 || pci_set_consistent_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0) { printk(KERN_ERR &quot;error to set 28bit mask DMA\n&quot;); pci_disable_device(pci); return -ENXIO; } chip = kzalloc(sizeof(*chip), GFP_KERNEL); if (chip == NULL) { pci_disable_device(pci); return -ENOMEM; } /* initialize the stuff */ chip-&amp;gt;card = card; chip-&amp;gt;pci = pci; chip-&amp;gt;irq = -1; /* (1) PCI resource allocation */ err = pci_request_regions(pci, &quot;My Chip&quot;); if (err &amp;lt; 0) { kfree(chip); pci_disable_device(pci); return err; } chip-&amp;gt;port = pci_resource_start(pci, 0); if (request_irq(pci-&amp;gt;irq, snd_mychip_interrupt, IRQF_SHARED, KBUILD_MODNAME, chip)) { printk(KERN_ERR &quot;cannot grab irq %d\n&quot;, pci-&amp;gt;irq); snd_mychip_free(chip); return -EBUSY; } chip-&amp;gt;irq = pci-&amp;gt;irq; /* (2) initialization of the chip hardware */ .... /* (not implemented in this document) */ err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &amp;amp;ops); if (err &amp;lt; 0) { snd_mychip_free(chip); return err; } snd_card_set_dev(card, &amp;amp;pci-&amp;gt;dev); *rchip = chip; return 0; } /* PCI IDs */ static struct pci_device_id snd_mychip_ids[] = { { PCI_VENDOR_ID_FOO, PCI_DEVICE_ID_BAR, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, .... { 0, } }; MODULE_DEVICE_TABLE(pci, snd_mychip_ids); /* pci_driver definition */ static struct pci_driver driver = { .name = KBUILD_MODNAME, .id_table = snd_mychip_ids, .probe = snd_mychip_probe, .remove = snd_mychip_remove, }; /* module initialization */ static int __init alsa_card_mychip_init(void) { return pci_register_driver(&amp;amp;driver); } /* module clean up */ static void __exit alsa_card_mychip_exit(void) { pci_unregister_driver(&amp;amp;driver); } module_init(alsa_card_mychip_init) module_exit(alsa_card_mychip_exit) EXPORT_NO_SYMBOLS; /* for old kernels only */ Some Hafta&#39;s The allocation of PCI resources is done in the probe() function, and usually an extra xxx_create() function is written for this purpose. In the case of PCI devices, you first have to call the pci_enable_device() function before allocating resources. Also, you need to set the proper PCI DMA mask to limit the accessed I/O range. In some cases, you might need to call pci_set_master() function, too.
(3386) <3389> {479383} [480079]: Suppose the 28bit mask, and the code to be added would be like: err = pci_enable_device(pci); if (err &amp;lt; 0) return err; if (pci_set_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0 || pci_set_consistent_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0) { printk(KERN_ERR &quot;error to set 28bit mask DMA\n&quot;); pci_disable_device(pci); return -ENXIO; } Resource Allocation The allocation of I/O ports and irqs is done via standard kernel functions. Unlike ALSA ver.0.5.x., there are no helpers for that. And these resources must be released in the destructor function (see below). Also, on ALSA 0.9.x, you don&#39;t need to allocate (pseudo-)DMA for PCI like in ALSA 0.5.x.
(3399) <3402> {481285} [481861]: The allocation of an interrupt source is done like this: if (request_irq(pci-&amp;gt;irq, snd_mychip_interrupt, IRQF_SHARED, KBUILD_MODNAME, chip)) { printk(KERN_ERR &quot;cannot grab irq %d\n&quot;, pci-&amp;gt;irq); snd_mychip_free(chip); return -EBUSY; } chip-&amp;gt;irq = pci-&amp;gt;irq; where snd_mychip_interrupt() is the interrupt handler defined later. Note that chip-&amp;gt;irq should be defined only when request_irq() succeeded. On the PCI bus, interrupts can be shared. Thus, IRQF_SHARED is used as the interrupt flag of request_irq().
*****************************************************************
========================= CLASS #243 =============================
(3394) <3394> {480580} [480733]: The port address and its resource pointer can be initialized as null by kzalloc() automatically, so you don&#39;t have to take care of resetting them.
(3421) <3421> {484262} [484299]: You don&#39;t have to stop PCMs, etc.
*****************************************************************
========================= CLASS #244 =============================
(3395) <3395> {480737} [481074]: The allocation of an I/O port is done like this: err = pci_request_regions(pci, &quot;My Chip&quot;); if (err &amp;lt; 0) { kfree(chip); pci_disable_device(pci); return err; } chip-&amp;gt;port = pci_resource_start(pci, 0); &lt;!-- obsolete --&gt; It will reserve the I/O port region of 8 bytes of the given PCI device.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #245 =============================
(3396) <3396> {481075} [481167]: The returned value, chip-&amp;gt;res_port, is allocated via kmalloc() by request_region().
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #246 =============================
(3410) <3410> {482696} [482916]: For the interrupt, do like this: if (chip-&amp;gt;irq &amp;gt;= 0) free_irq(chip-&amp;gt;irq, chip); Since the irq number can start from 0, you should initialize chip-&amp;gt;irq with a negative value (e.g.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #247 =============================
(3413) <3413> {483223} [483385]: pci_release_regions(chip-&amp;gt;pci); When you requested manually via request_region() or request_mem_region, you can release it via release_resource().
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #248 =============================
(3414) <3414> {483387} [483647]: Suppose that you keep the resource pointer returned from request_region() in chip-&amp;gt;res_port, the release procedure looks like: release_and_free_resource(chip-&amp;gt;res_port); Don&#39;t forget to call pci_disable_device() before the end.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #249 =============================
(3424) <3424> {484453} [485314]: You&#39;ll need three fields like the following: struct mychip { .... unsigned long iobase_phys; void __iomem *iobase_virt; }; and the allocation would be like below: if ((err = pci_request_regions(pci, &quot;My Chip&quot;)) &amp;lt; 0) { kfree(chip); return err; } chip-&amp;gt;iobase_phys = pci_resource_start(pci, 0); chip-&amp;gt;iobase_virt = ioremap_nocache(chip-&amp;gt;iobase_phys, pci_resource_len(pci, 0)); and the corresponding destructor would be: static int snd_mychip_free(struct mychip *chip) { .... if (chip-&amp;gt;iobase_virt) iounmap(chip-&amp;gt;iobase_virt); .... pci_release_regions(chip-&amp;gt;pci); .... } Registration of Device Struct At some point, typically after calling snd_device_new(), you need to register the struct device of the chip you&#39;re handling for udev and co.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #250 =============================
(3426) <3426> {485378} [485527]: Simply call like the following: snd_card_set_dev(card, &amp;amp;pci-&amp;gt;dev); so that it stores the PCI&#39;s device pointer to the card.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #251 =============================
(3431) <3431> {485809} [485849]: Let&#39;s finish the missing PCI stuff.
(4073) <4073> {577903} [577925]: Let&#39;s set them up.
*****************************************************************
========================= CLASS #252 =============================
(3448) <3448> {487697} [488036]: &lt;!-- ****************************************************** --&gt;&lt;!-- PCM Interface --&gt;&lt;!-- ****************************************************** --&gt;PCM InterfaceGeneral The PCM middle layer of ALSA is quite powerful and it is only necessary for each driver to implement the low-level functions to access its hardware.
(3702) <3702> {527309} [527576]: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc.
(3840) <3840> {545286} [545566]: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #253 =============================
(3449) <3449> {488040} [488127]: For accessing to the PCM layer, you need to include &amp;lt;sound/pcm.h&amp;gt; first.
(3490) <3490> {499171} [499247]: The definition of runtime instance is found in &amp;lt;sound/pcm.h&amp;gt;.
(3628) <3628> {516224} [516329]: Which action is specified in the second argument, SNDRV_PCM_TRIGGER_XXX in &amp;lt;sound/pcm.h&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
(4006) <4006> {567594} [567645]: The API is provided in &amp;lt;sound/pcm.h&amp;gt;.
(4024) <4024> {569955} [570005]: The API is found in &amp;lt;sound/info.h&amp;gt;.
*****************************************************************
========================= CLASS #254 =============================
(3450) <3450> {488128} [488248]: In addition, &amp;lt;sound/pcm_params.h&amp;gt; might be needed if you access to some functions related with hw_param.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #255 =============================
(3463) <3463> {489331} [494888]: PCM Example Code #include &amp;lt;sound/pcm.h&amp;gt; .... /* hardware definition */ static struct snd_pcm_hardware snd_mychip_playback_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; /* hardware definition */ static struct snd_pcm_hardware snd_mychip_capture_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; /* open callback */ static int snd_mychip_playback_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_playback_hw; /* more hardware-initialization will be done here */ .... return 0; } /* close callback */ static int snd_mychip_playback_close(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); /* the hardware-specific codes will be here */ .... return 0; } /* open callback */ static int snd_mychip_capture_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_capture_hw; /* more hardware-initialization will be done here */ .... return 0; } /* close callback */ static int snd_mychip_capture_close(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); /* the hardware-specific codes will be here */ .... return 0; } /* hw_params callback */ static int snd_mychip_pcm_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *hw_params) { return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(hw_params)); } /* hw_free callback */ static int snd_mychip_pcm_hw_free(struct snd_pcm_substream *substream) { return snd_pcm_lib_free_pages(substream); } /* prepare callback */ static int snd_mychip_pcm_prepare(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; /* set up the hardware with the current configuration * for example... */ mychip_set_sample_format(chip, runtime-&amp;gt;format); mychip_set_sample_rate(chip, runtime-&amp;gt;rate); mychip_set_channels(chip, runtime-&amp;gt;channels); mychip_set_dma_setup(chip, runtime-&amp;gt;dma_addr, chip-&amp;gt;buffer_size, chip-&amp;gt;period_size); return 0; } /* trigger callback */ static int snd_mychip_pcm_trigger(struct snd_pcm_substream *substream, int cmd) { switch (cmd) { case SNDRV_PCM_TRIGGER_START: /* do something to start the PCM engine */ .... break; case SNDRV_PCM_TRIGGER_STOP: /* do something to stop the PCM engine */ .... break; default: return -EINVAL; } } /* pointer callback */ static snd_pcm_uframes_t snd_mychip_pcm_pointer(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); unsigned int current_ptr; /* get the current hardware pointer */ current_ptr = mychip_get_hw_pointer(chip); return current_ptr; } /* operators */ static struct snd_pcm_ops snd_mychip_playback_ops = { .open = snd_mychip_playback_open, .close = snd_mychip_playback_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; /* operators */ static struct snd_pcm_ops snd_mychip_capture_ops = { .open = snd_mychip_capture_open, .close = snd_mychip_capture_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; /* * definitions of capture are omitted here... */ /* create a pcm device */ static int snd_mychip_new_pcm(struct mychip *chip) { struct snd_pcm *pcm; int err; err = snd_pcm_new(chip-&amp;gt;card, &quot;My Chip&quot;, 0, 1, 1, &amp;amp;pcm); if (err &amp;lt; 0) return err; pcm-&amp;gt;private_data = chip; strcpy(pcm-&amp;gt;name, &quot;My Chip&quot;); chip-&amp;gt;pcm = pcm; /* set operators */ snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &amp;amp;snd_mychip_playback_ops); snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &amp;amp;snd_mychip_capture_ops); /* pre-allocation of buffers */ /* NOTE: this may fail */ snd_pcm_lib_preallocate_pages_for_all(pcm, SNDRV_DMA_TYPE_DEV, snd_dma_pci_data(chip-&amp;gt;pci), 64*1024, 64*1024); return 0; } Constructor A pcm instance is allocated by the snd_pcm_new() function.
(3464) <3464> {494889} [495343]: It would be better to create a constructor for pcm, namely, static int snd_mychip_new_pcm(struct mychip *chip) { struct snd_pcm *pcm; int err; err = snd_pcm_new(chip-&amp;gt;card, &quot;My Chip&quot;, 0, 1, 1, &amp;amp;pcm); if (err &amp;lt; 0) return err; pcm-&amp;gt;private_data = chip; strcpy(pcm-&amp;gt;name, &quot;My Chip&quot;); chip-&amp;gt;pcm = pcm; .... return 0; } The snd_pcm_new() function takes four arguments.
(3476) <3476> {496400} [497066]: snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &amp;amp;snd_mychip_playback_ops); snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &amp;amp;snd_mychip_capture_ops); The operators are defined typically like this: static struct snd_pcm_ops snd_mychip_playback_ops = { .open = snd_mychip_pcm_open, .close = snd_mychip_pcm_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; All the callbacks are described in the Operators subsection.
(3490) <3490> {499171} [499247]: The definition of runtime instance is found in &amp;lt;sound/pcm.h&amp;gt;.
(3500) <3500> {503000} [504037]: For example, if the maximum number of channels is 1 only on some chip models, you can still use the same hardware descriptor and change the channels_max later: struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; ... runtime-&amp;gt;hw = snd_mychip_playback_hw; /* common definition */ if (chip-&amp;gt;model == VERY_OLD_ONE) runtime-&amp;gt;hw.channels_max = 1; Typically, you&#39;ll have a hardware descriptor as below: static struct snd_pcm_hardware snd_mychip_playback_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; The info field contains the type and capabilities of this pcm.
(3583) <3583> {511282} [511461]: int xxx() { struct mychip *chip = snd_pcm_substream_chip(substream); .... } The macro reads substream-&amp;gt;private_data, which is a copy of pcm-&amp;gt;private_data.
(3588) <3588> {511952} [512318]: Typically, this is done by like this: static int snd_xxx_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_playback_hw; return 0; } where snd_mychip_playback_hw is the pre-defined hardware description.
(3628) <3628> {516224} [516329]: Which action is specified in the second argument, SNDRV_PCM_TRIGGER_XXX in &amp;lt;sound/pcm.h&amp;gt;.
(3630) <3630> {516409} [516787]: switch (cmd) { case SNDRV_PCM_TRIGGER_START: /* do something to start the PCM engine */ break; case SNDRV_PCM_TRIGGER_STOP: /* do something to stop the PCM engine */ break; default: return -EINVAL; } When the pcm supports the pause operation (given in the info field of the hardware table), the PAUSE_PUSH and PAUSE_RELEASE commands must be handled here, too.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
(4006) <4006> {567594} [567645]: The API is provided in &amp;lt;sound/pcm.h&amp;gt;.
(4024) <4024> {569955} [570005]: The API is found in &amp;lt;sound/info.h&amp;gt;.
*****************************************************************
========================= CLASS #256 =============================
(3466) <3466> {495451} [495524]: The third argument (index, 0 in the above) is the index of this new pcm.
(3879) <3879> {550213} [550263]: The third argument is the index of this component.
*****************************************************************
========================= CLASS #257 =============================
(3475) <3475> {496075} [496394]: When you need to know which substream you are referring to, then it can be obtained from struct snd_pcm_substream data passed to each callback as follows: struct snd_pcm_substream *substream; int index = substream-&amp;gt;number; After the pcm is created, you need to set operators for each pcm stream.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #258 =============================
(3478) <3478> {497151} [497383]: For the pre-allocation, simply call the following: snd_pcm_lib_preallocate_pages_for_all(pcm, SNDRV_DMA_TYPE_DEV, snd_dma_pci_data(chip-&amp;gt;pci), 64*1024, 64*1024); It will allocate a buffer up to 64kB as default.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #259 =============================
(3479) <3479> {497385} [497480]: Buffer management details will be described in the later section Buffer and Memory Management.
(3516) <3516> {505458} [505503]: This will be described in the later section.
(3651) <3651> {518788} [518871]: The detailed will be described in the later section Buffer and Memory Management.
*****************************************************************
========================= CLASS #260 =============================
(3480) <3480> {497484} [497573]: Additionally, you can set some extra information for this pcm in pcm-&amp;gt;info_flags.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #261 =============================
(3481) <3481> {497575} [497728]: The available values are defined as SNDRV_PCM_INFO_XXX in &amp;lt;sound/asound.h&amp;gt;, which is used for the hardware definition (described later).
(3501) <3501> {504038} [504122]: The bit flags are defined in &amp;lt;sound/asound.h&amp;gt; as SNDRV_PCM_INFO_XXX.
(3708) <3708> {527892} [527955]: The control API is defined in &amp;lt;sound/control.h&amp;gt;.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
(3804) <3804> {539678} [539747]: The AC97 codec API is defined in &amp;lt;sound/ac97_codec.h&amp;gt;.
(3842) <3842> {545682} [545749]: The MPU401-UART API is defined in &amp;lt;sound/mpu401.h&amp;gt;.
(3877) <3877> {549627} [549690]: The rawmidi API is defined in &amp;lt;sound/rawmidi.h&amp;gt;.
(3907) <3907> {555908} [555966]: The OPL3 API is defined in &amp;lt;sound/opl3.h&amp;gt;.
(3930) <3930> {558342} [558401]: The hwdep API is defined in &amp;lt;sound/hwdep.h&amp;gt;.
*****************************************************************
========================= CLASS #262 =============================
(3482) <3482> {497729} [497862]: When your soundchip supports only half-duplex, specify like this: pcm-&amp;gt;info_flags = SNDRV_PCM_INFO_HALF_DUPLEX; ...
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #263 =============================
(3487) <3487> {498186} [498929]: In such a case, set the destructor function to pcm-&amp;gt;private_free: PCM Instance with a Destructor static void mychip_pcm_free(struct snd_pcm *pcm) { struct mychip *chip = snd_pcm_chip(pcm); /* free your own data */ kfree(chip-&amp;gt;my_private_pcm_data); /* do what you like else */ .... } static int snd_mychip_new_pcm(struct mychip *chip) { struct snd_pcm *pcm; .... /* allocate your own data */ chip-&amp;gt;my_private_pcm_data = kmalloc(...); /* set the destructor */ pcm-&amp;gt;private_data = chip; pcm-&amp;gt;private_free = mychip_pcm_free; .... } Runtime Pointer - The Chest of PCM Information When the PCM substream is opened, a PCM runtime instance is allocated and assigned to the substream.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #264 =============================
(3488) <3488> {498930} [498988]: This pointer is accessible via substream-&amp;gt;runtime.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #265 =============================
(3499) <3499> {502895} [502998]: That is, in the open callback, you can modify the copied descriptor (runtime-&amp;gt;hw) as you need.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #266 =============================
(3513) <3513> {505145} [505187]: See Power Management section for details.
(3635) <3635> {517278} [517324]: See the Power Management section for details.
*****************************************************************
========================= CLASS #267 =============================
(3549) <3549> {508105} [508252]: period_bytes = frames_to_bytes(runtime, runtime-&amp;gt;period_size); Also, many software parameters (sw_params) are stored in frames, too.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #268 =============================
(3567) <3567> {509461} [509539]: Running Status The running status can be referred via runtime-&amp;gt;status.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #269 =============================
(3569) <3569> {509605} [509706]: For example, you can get the current DMA hardware pointer via runtime-&amp;gt;status-&amp;gt;hw_ptr.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #270 =============================
(3570) <3570> {509710} [509840]: The DMA application pointer can be referred via runtime-&amp;gt;control, which points to the struct snd_pcm_mmap_control record.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #271 =============================
(3572) <3572> {509905} [510009]: Private Data You can allocate a record for the substream and store it in runtime-&amp;gt;private_data.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #272 =============================
(3574) <3574> {510060} [510109]: Don&#39;t mix this with pcm-&amp;gt;private_data.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #273 =============================
(3575) <3575> {510111} [510330]: The pcm-&amp;gt;private_data usually points to the chip instance assigned statically at the creation of PCM, while the runtime-&amp;gt;private_data points to a dynamic data structure created at the PCM open callback.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #274 =============================
(3576) <3576> {510336} [510612]: static int snd_xxx_open(struct snd_pcm_substream *substream) { struct my_pcm_data *data; .... data = kmalloc(sizeof(*data), GFP_KERNEL); substream-&amp;gt;runtime-&amp;gt;private_data = data; .... } The allocated object must be released in the close callback.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #275 =============================
(3586) <3586> {511748} [511878]: open callback static int snd_xxx_open(struct snd_pcm_substream *substream); This is called when a pcm substream is opened.
(3592) <3592> {512547} [512690]: close callback static int snd_xxx_close(struct snd_pcm_substream *substream); Obviously, this is called when a pcm substream is closed.
(3889) <3889> {552508} [552607]: close callback static int snd_xxx_close(struct snd_rawmidi_substream *substream); Guess what.
*****************************************************************
========================= CLASS #276 =============================
(3587) <3587> {511882} [511951]: At least, here you have to initialize the runtime-&amp;gt;hw record.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #277 =============================
(3594) <3594> {512795} [513000]: static int snd_xxx_close(struct snd_pcm_substream *substream) { .... kfree(substream-&amp;gt;runtime-&amp;gt;private_data); .... } ioctl callback This is used for any special call to pcm ioctls.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #278 =============================
(3622) <3622> {515507} [515624]: In this and the following callbacks, you can refer to the values via the runtime record, substream-&amp;gt;runtime.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #279 =============================
(3623) <3623> {515626} [515785]: For example, to get the current rate, format or channels, access to runtime-&amp;gt;rate, runtime-&amp;gt;format or runtime-&amp;gt;channels, respectively.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #280 =============================
(3624) <3624> {515787} [515868]: The physical address of the allocated buffer is set to runtime-&amp;gt;dma_area.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #281 =============================
(3625) <3625> {515870} [515981]: The buffer and period sizes are in runtime-&amp;gt;buffer_size and runtime-&amp;gt;period_size, respectively.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #282 =============================
(3656) <3656> {519192} [519237]: page callback This callback is optional too.
(3903) <3903> {555425} [555451]: This callback is optional.
*****************************************************************
========================= CLASS #283 =============================
(3670) <3672> {520644} [521500]: Typical code would be like: Interrupt Handler Case #1 static irqreturn_t snd_mychip_interrupt(int irq, void *dev_id) { struct mychip *chip = dev_id; spin_lock(&amp;amp;chip-&amp;gt;lock); .... if (pcm_irq_invoked(chip)) { /* call updater, unlock before it */ spin_unlock(&amp;amp;chip-&amp;gt;lock); snd_pcm_period_elapsed(chip-&amp;gt;substream); spin_lock(&amp;amp;chip-&amp;gt;lock); /* acknowledge the interrupt if necessary */ } .... spin_unlock(&amp;amp;chip-&amp;gt;lock); return IRQ_HANDLED; } High frequency timer interrupts This happens when the hardware doesn&#39;t generate interrupts at the period boundary but issues timer interrupts at a fixed timer rate (e.g. es1968 or ymfpci drivers). In this case, you need to check the current hardware position and accumulate the processed sample length at each interrupt.
(3676) <3678> {522363} [523045]: */ if (chip-&amp;gt;size &amp;gt;= runtime-&amp;gt;period_size) { /* reset the accumulator */ chip-&amp;gt;size %= runtime-&amp;gt;period_size; /* call updater */ spin_unlock(&amp;amp;chip-&amp;gt;lock); snd_pcm_period_elapsed(substream); spin_lock(&amp;amp;chip-&amp;gt;lock); } /* acknowledge the interrupt if necessary */ } .... spin_unlock(&amp;amp;chip-&amp;gt;lock); return IRQ_HANDLED; } On calling snd_pcm_period_elapsed() In both cases, even if more than one period are elapsed, you don&#39;t have to call snd_pcm_period_elapsed() many times. Call only once. And the pcm layer will check the current hardware pointer and update to the latest status.
*****************************************************************
========================= CLASS #284 =============================
(3675) <3675> {521661} [522362]: Interrupt Handler Case #2 static irqreturn_t snd_mychip_interrupt(int irq, void *dev_id) { struct mychip *chip = dev_id; spin_lock(&amp;amp;chip-&amp;gt;lock); .... if (pcm_irq_invoked(chip)) { unsigned int last_ptr, size; /* get the current hardware pointer (in frames) */ last_ptr = get_hw_ptr(chip); /* calculate the processed frames since the * last update */ if (last_ptr &amp;lt; chip-&amp;gt;last_ptr) size = runtime-&amp;gt;buffer_size + last_ptr - chip-&amp;gt;last_ptr; else size = last_ptr - chip-&amp;gt;last_ptr; /* remember the last updated point */ chip-&amp;gt;last_ptr = last_ptr; /* accumulate the size */ chip-&amp;gt;size += size; /* over the period boundary?
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #285 =============================
(3695) <3695> {524644} [525159]: Example of Hardware Constraints static unsigned int rates[] = {4000, 10000, 22050, 44100}; static struct snd_pcm_hw_constraint_list constraints_rates = { .count = ARRAY_SIZE(rates), .list = rates, .mask = 0, }; static int snd_mychip_pcm_open(struct snd_pcm_substream *substream) { int err; .... err = snd_pcm_hw_constraint_list(substream-&amp;gt;runtime, 0, SNDRV_PCM_HW_PARAM_RATE, &amp;amp;constraints_rates); if (err &amp;lt; 0) return err; .... } There are many different constraints.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #286 =============================
(3699) <3699> {525478} [526373]: You can build a rule like this: Example of Hardware Constraints for Channels static int hw_rule_channels_by_format(struct snd_pcm_hw_params *params, struct snd_pcm_hw_rule *rule) { struct snd_interval *c = hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS); struct snd_mask *f = hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT); struct snd_interval ch; snd_interval_any(&amp;amp;ch); if (f-&amp;gt;bits[0] == SNDRV_PCM_FMTBIT_S16_LE) { ch.min = ch.max = 1; ch.integer = 1; return snd_interval_refine(c, &amp;amp;ch); } return 0; } Then you need to call this function to add your rule: snd_pcm_hw_rule_add(substream-&amp;gt;runtime, 0, SNDRV_PCM_HW_PARAM_CHANNELS, hw_rule_channels_by_format, NULL, SNDRV_PCM_HW_PARAM_FORMAT, -1); The rule function is called when an application sets the PCM format, and it refines the number of channels accordingly.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #287 =============================
(3701) <3701> {526453} [527307]: Thus you also need to define the inverse rule: Example of Hardware Constraints for Formats static int hw_rule_format_by_channels(struct snd_pcm_hw_params *params, struct snd_pcm_hw_rule *rule) { struct snd_interval *c = hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS); struct snd_mask *f = hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT); struct snd_mask fmt; snd_mask_any(&amp;amp;fmt); /* Init the struct */ if (c-&amp;gt;min &amp;lt; 2) { fmt.bits[0] &amp;amp;= SNDRV_PCM_FMTBIT_S16_LE; return snd_mask_refine(f, &amp;amp;fmt); } return 0; } ...and in the open callback: snd_pcm_hw_rule_add(substream-&amp;gt;runtime, 0, SNDRV_PCM_HW_PARAM_FORMAT, hw_rule_format_by_channels, NULL, SNDRV_PCM_HW_PARAM_CHANNELS, -1); I won&#39;t give more details here, rather I would like to say, Luke, use the source.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #288 =============================
(3762) <3762> {532760} [533171]: For example, for a boolean control with a single element: Example of info callback static int snd_myctl_mono_info(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_info *uinfo) { uinfo-&amp;gt;type = SNDRV_CTL_ELEM_TYPE_BOOLEAN; uinfo-&amp;gt;count = 1; uinfo-&amp;gt;value.integer.min = 0; uinfo-&amp;gt;value.integer.max = 1; return 0; } The type field specifies the type of the control.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #289 =============================
(3770) <3770> {533621} [534286]: static int snd_myctl_enum_info(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_info *uinfo) { static char *texts[4] = { &quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot; }; uinfo-&amp;gt;type = SNDRV_CTL_ELEM_TYPE_ENUMERATED; uinfo-&amp;gt;count = 1; uinfo-&amp;gt;value.enumerated.items = 4; if (uinfo-&amp;gt;value.enumerated.item &amp;gt; 3) uinfo-&amp;gt;value.enumerated.item = 3; strcpy(uinfo-&amp;gt;value.enumerated.name, texts[uinfo-&amp;gt;value.enumerated.item]); return 0; } Some common info callbacks are available for your convenience: snd_ctl_boolean_mono_info() and snd_ctl_boolean_stereo_info().
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #290 =============================
(3773) <3773> {534566} [534922]: For example, Example of get callback static int snd_myctl_get(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol) { struct mychip *chip = snd_kcontrol_chip(kcontrol); ucontrol-&amp;gt;value.integer.value[0] = get_some_value(chip); return 0; } The value field depends on the type of control as well as on the info callback.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #291 =============================
(3775) <3775> {535032} [535650]: The private_value field is set as follows: .private_value = reg | (shift &amp;lt;&amp;lt; 16) | (mask &amp;lt;&amp;lt; 24) and is retrieved in callbacks like static int snd_sbmixer_get_single(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol) { int reg = kcontrol-&amp;gt;private_value &amp;amp; 0xff; int shift = (kcontrol-&amp;gt;private_value &amp;gt;&amp;gt; 16) &amp;amp; 0xff; int mask = (kcontrol-&amp;gt;private_value &amp;gt;&amp;gt; 24) &amp;amp; 0xff; .... } In the get callback, you have to fill all the elements if the control has more than one elements, i.e.
(3776) <3776> {535651} [535668]: count &amp;gt; 1.
*****************************************************************
========================= CLASS #292 =============================
(3792) <3796> {537894} [538903]: Metadata To provide information about the dB values of a mixer control, use on of the DECLARE_TLV_xxx macros from &amp;lt;sound/tlv.h&amp;gt; to define a variable containing this information, set thetlv.p field to point to this variable, and include the SNDRV_CTL_ELEM_ACCESS_TLV_READ flag in the access field; like this: static DECLARE_TLV_DB_SCALE(db_scale_my_control, -4050, 150, 0); static struct snd_kcontrol_new my_control = { ... .access = SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_TLV_READ, ... .tlv.p = db_scale_my_control, }; The DECLARE_TLV_DB_SCALE macro defines information about a mixer control where each step in the control&#39;s value changes the dB value by a constant dB amount. The first parameter is the name of the variable to be defined. The second parameter is the minimum value, in units of 0.01 dB. The third parameter is the step size, in units of 0.01 dB. Set the fourth parameter to 1 if the minimum value actually mutes the control.
(3797) <3801> {538907} [539322]: The DECLARE_TLV_DB_LINEAR macro defines information about a mixer control where the control&#39;s value affects the output linearly. The first parameter is the name of the variable to be defined. The second parameter is the minimum value, in units of 0.01 dB. The third parameter is the maximum value, in units of 0.01 dB. If the minimum value mutes the control, set the second parameter to TLV_DB_GAIN_MUTE.
*****************************************************************
========================= CLASS #293 =============================
(3802) <3802> {539324} [539629]: &lt;!-- ****************************************************** --&gt;&lt;!-- API for AC97 Codec --&gt;&lt;!-- ****************************************************** --&gt;API for AC97 CodecGeneral The ALSA AC97 codec layer is a well-defined one, and you don&#39;t have to write much code to control it.
(3840) <3840> {545286} [545566]: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #294 =============================
(3805) <3805> {539749} [540904]: Full Code ExampleExample of AC97 Interface struct mychip { .... struct snd_ac97 *ac97; .... }; static unsigned short snd_mychip_ac97_read(struct snd_ac97 *ac97, unsigned short reg) { struct mychip *chip = ac97-&amp;gt;private_data; .... /* read a register value here from the codec */ return the_register_value; } static void snd_mychip_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val) { struct mychip *chip = ac97-&amp;gt;private_data; .... /* write the given register value to the codec */ } static int snd_mychip_ac97(struct mychip *chip) { struct snd_ac97_bus *bus; struct snd_ac97_template ac97; int err; static struct snd_ac97_bus_ops ops = { .write = snd_mychip_ac97_write, .read = snd_mychip_ac97_read, }; err = snd_ac97_bus(chip-&amp;gt;card, 0, &amp;amp;ops, NULL, &amp;amp;bus); if (err &amp;lt; 0) return err; memset(&amp;amp;ac97, 0, sizeof(ac97)); ac97.private_data = chip; return snd_ac97_mixer(bus, &amp;amp;ac97, &amp;amp;chip-&amp;gt;ac97); } Constructor To create an ac97 instance, first call snd_ac97_bus with an ac97_bus_ops_t record with callback functions.
(3806) <3806> {540910} [541172]: struct snd_ac97_bus *bus; static struct snd_ac97_bus_ops ops = { .write = snd_mychip_ac97_write, .read = snd_mychip_ac97_read, }; snd_ac97_bus(card, 0, &amp;amp;ops, NULL, &amp;amp;pbus); The bus record is shared among all belonging ac97 instances.
(3808) <3808> {541299} [541555]: struct snd_ac97_template ac97; int err; memset(&amp;amp;ac97, 0, sizeof(ac97)); ac97.private_data = chip; snd_ac97_mixer(bus, &amp;amp;ac97, &amp;amp;chip-&amp;gt;ac97); where chip-&amp;gt;ac97 is a pointer to a newly created ac97_t instance.
(3815) <3815> {542160} [542402]: static unsigned short snd_mychip_ac97_read(struct snd_ac97 *ac97, unsigned short reg) { struct mychip *chip = ac97-&amp;gt;private_data; .... return the_register_value; } Here, the chip can be cast from ac97-&amp;gt;private_data.
(3817) <3817> {542477} [542644]: static void snd_mychip_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val) These callbacks are non-atomic like the control API callbacks.
*****************************************************************
========================= CLASS #295 =============================
(3846) <3847> {545967} [546218]: struct snd_rawmidi *rmidi; snd_mpu401_uart_new(card, 0, MPU401_HW_MPU401, port, info_flags, irq, &amp;amp;rmidi); The first argument is the card pointer, and the second is the index of this component. You can create up to 8 rawmidi devices.
(3879) <3880> {550213} [550305]: The third argument is the index of this component. You can create up to 8 rawmidi devices.
*****************************************************************
========================= CLASS #296 =============================
(3873) <3873> {549045} [549408]: snd_mpu401_uart_interrupt(irq, rmidi-&amp;gt;private_data, regs); &lt;!-- ****************************************************** --&gt;&lt;!-- RawMIDI Interface --&gt;&lt;!-- ****************************************************** --&gt;RawMIDI InterfaceOverview The raw MIDI interface is used for hardware MIDI ports that can be accessed as a byte stream.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #297 =============================
(3905) <3905> {555581} [555863]: &lt;!-- ****************************************************** --&gt;&lt;!-- Miscellaneous Devices --&gt;&lt;!-- ****************************************************** --&gt;Miscellaneous DevicesFM OPL3 The FM OPL3 is still used in many chips (mainly for backward compatibility).
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #298 =============================
(3908) <3908> {555970} [556081]: FM registers can be directly accessed through the direct-FM API, defined in &amp;lt;sound/asound_fm.h&amp;gt;.
(3930) <3930> {558342} [558401]: The hwdep API is defined in &amp;lt;sound/hwdep.h&amp;gt;.
*****************************************************************
========================= CLASS #299 =============================
(3954) <3954> {560952} [561279]: &lt;!-- ****************************************************** --&gt;&lt;!-- Buffer and Memory Management --&gt;&lt;!-- ****************************************************** --&gt;Buffer and Memory ManagementBuffer Types ALSA provides several different buffer allocation functions depending on the bus and the architecture.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #300 =============================
(4021) <4021> {569200} [569797]: The implementation of page callback would be like this: #include &amp;lt;linux/vmalloc.h&amp;gt; /* get the physical page pointer on the given offset */ static struct page *mychip_page(struct snd_pcm_substream *substream, unsigned long offset) { void *pageptr = substream-&amp;gt;runtime-&amp;gt;dma_area + offset; return vmalloc_to_page(pageptr); } &lt;!-- ****************************************************** --&gt;&lt;!-- Proc Interface --&gt;&lt;!-- ****************************************************** --&gt;Proc Interface ALSA provides an easy interface for procfs.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #301 =============================
(4036) <4036> {571655} [571708]: As default, it&#39;s set as read only for all users.
(4073) <4073> {577903} [577925]: Let&#39;s set them up.
*****************************************************************
========================= CLASS #302 =============================
(4045) <4045> {573281} [573586]: &lt;!-- ****************************************************** --&gt;&lt;!-- Power Management --&gt;&lt;!-- ****************************************************** --&gt;Power Management If the chip is supposed to work with suspend/resume functions, you need to add power-management code to the driver.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #303 =============================
(4060) <4060> {575486} [575860]: Retrieve the card and the chip data.Call snd_power_change_state() with SNDRV_CTL_POWER_D3hot to change the power status.Call snd_pcm_suspend_all() to suspend the running PCM streams.If AC97 codecs are used, call snd_ac97_suspend() for each codec.Save the register values if necessary.Stop the hardware if necessary.Disable the PCI device by calling pci_disable_device().
(4063) <4063> {576502} [576549]: Retrieve the card and the chip data.Set up PCI.
*****************************************************************
========================= CLASS #304 =============================
(4062) <4062> {575903} [576498]: A typical code would be like: static int mychip_suspend(struct pci_dev *pci, pm_message_t state) { /* (1) */ struct snd_card *card = pci_get_drvdata(pci); struct mychip *chip = card-&amp;gt;private_data; /* (2) */ snd_power_change_state(card, SNDRV_CTL_POWER_D3hot); /* (3) */ snd_pcm_suspend_all(chip-&amp;gt;pcm); /* (4) */ snd_ac97_suspend(chip-&amp;gt;ac97); /* (5) */ snd_mychip_save_registers(chip); /* (6) */ snd_mychip_stop_hardware(chip); /* (7) */ pci_disable_device(pci); pci_save_state(pci); return 0; } The scheme of the real resume job is as follows.
(4068) <4068> {576917} [577599]: A typical code would be like: static int mychip_resume(struct pci_dev *pci) { /* (1) */ struct snd_card *card = pci_get_drvdata(pci); struct mychip *chip = card-&amp;gt;private_data; /* (2) */ pci_restore_state(pci); pci_enable_device(pci); pci_set_master(pci); /* (3) */ snd_mychip_reinit_chip(chip); /* (4) */ snd_mychip_restore_registers(chip); /* (5) */ snd_ac97_resume(chip-&amp;gt;ac97); /* (6) */ snd_mychip_restart_chip(chip); /* (7) */ snd_power_change_state(card, SNDRV_CTL_POWER_D0); return 0; } As shown in the above, it&#39;s better to save registers after suspending the PCM operations via snd_pcm_suspend_all() or snd_pcm_suspend().
*****************************************************************
========================= CLASS #305 =============================
(4075) <4075> {578117} [578564]: static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { .... struct snd_card *card; struct mychip *chip; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); .... chip = kzalloc(sizeof(*chip), GFP_KERNEL); .... card-&amp;gt;private_data = chip; .... } When you created the chip data with snd_card_create(), it&#39;s anyway accessible via private_data field.
(4076) <4076> {578570} [579043]: static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { .... struct snd_card *card; struct mychip *chip; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, sizeof(struct mychip), &amp;amp;card); .... chip = card-&amp;gt;private_data; .... } If you need a space to save the registers, allocate the buffer for it here, too, since it would be fatal if you cannot allocate a memory in the suspend phase.
*****************************************************************
========================= CLASS #306 =============================
(4079) <4079> {579185} [579643]: static struct pci_driver driver = { .name = KBUILD_MODNAME, .id_table = snd_my_ids, .probe = snd_my_probe, .remove = snd_my_remove, #ifdef CONFIG_PM .suspend = snd_my_suspend, .resume = snd_my_resume, #endif }; &lt;!-- ****************************************************** --&gt;&lt;!-- Module Parameters --&gt;&lt;!-- ****************************************************** --&gt;Module Parameters There are standard module options for ALSA.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #307 =============================
(4087) <4087> {581128} [581550]: MODULE_DESCRIPTION(&quot;My Chip&quot;); MODULE_LICENSE(&quot;GPL&quot;); MODULE_SUPPORTED_DEVICE(&quot;{{Vendor,My Chip Name}}&quot;); &lt;!-- ****************************************************** --&gt;&lt;!-- How To Put Your Driver --&gt;&lt;!-- ****************************************************** --&gt;How To Put Your Driver Into ALSA TreeGeneral So far, you&#39;ve learned how to write the driver codes.
(4113) <4113> {584429} [584699]: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
(4132) <4132> {586270} [586551]: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
*****************************************************************
========================= CLASS #308 =============================
(4108) <4108> {583587} [583678]: Run cvscompile script to re-generate the configure script and build the whole stuff again.
(4112) <4112> {584334} [584425]: Run cvscompile script to re-generate the configure script and build the whole stuff again.
*****************************************************************
========================= CLASS #309 =============================
(4263) <4263> {605999} [606070]: If the checks fail to pass the function returns a non zero error code.
(4321) <4321> {611178} [611224]: This returns a non zero error code on failure.
*****************************************************************
========================= CLASS #310 =============================
(4314) <4314> {610655} [610724]: This mode is activated by calling the z8530_sync_dma_open function.
(4320) <4320> {611120} [611177]: This is activated by calling the z8530_sync_txdma_open .
*****************************************************************
