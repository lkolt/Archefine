<?xml version="1.0" encoding="utf-8" ?>
<plainxml>Subversion Quick-Start Guide If you&#39;re eager to get Subversion up and running (and you
    enjoy learning by experimentation), this appendix will show you how
    to create a repository, import code, and then check it back out
    again as a working copy.  Along the way, we give links to the
    relevant chapters of this book. If you&#39;re new to the entire concept of version control or to
    the  copy-modify-merge  model used by both CVS and
    Subversion, you should read  
    before going any further. Installing Subversion Subversion is built on a portability layer called
      APR the Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      HTTP Server (or,  httpd ) as one of its network
      server programs, its dependence on APR  does
      not  mean that  httpd  is a required
      component.  APR is a standalone library usable by any
      application.  It does mean, however, that Subversion clients and
      servers run on any operating system
      that  httpd  runs on: Windows, Linux, all
      flavors of BSD, Mac OS X, NetWare, and others. The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion&#39;s web site
      ( ) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system&#39;s native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion. Alternatively, you can build Subversion directly from source
      code, though it&#39;s not always an easy task. (If you&#39;re not
      experienced at building open source software packages, you&#39;re
      probably better off downloading a binary distribution instead!)
      From the Subversion web site, download the latest source code
      release.  After unpacking it, follow the instructions in
      the  INSTALL  file to build it. If you&#39;re one of those folks that likes to use bleeding-edge
      software, you can also get the Subversion source code from the
      Subversion repository in which it lives.  Obviously, you&#39;ll need
      to already have a Subversion client on hand to do this.  But
      once you do, you can check out a working copy from
       Note that the URL checked out in the example
      ends not with  subversion , but with a
      subdirectory thereof called  trunk .  See our
      discussion of Subversion&#39;s branching and tagging model for the
      reasoning behind this. : 
$ svn checkout http://svn.apache.org/repos/asf/subversion/trunk subversion
A    subversion/HACKING
A    subversion/INSTALL
A    subversion/README
A    subversion/autogen.sh
A    subversion/build.conf
 
 The preceding command will create a working copy of the
      latest (unreleased) Subversion source code into a subdirectory
      named  subversion  in your current working
      directory.  You can adjust that last argument as you see fit.
      Regardless of what you call the new working copy directory,
      though, after this operation completes, you will now have the
      Subversion source code.  Of course, you will still need to fetch
      a few helper libraries (apr, apr-util, etc.) see the
       INSTALL  file in the top level of the
      working copy for details. High-Speed Tutorial Please make sure your seat backs are in their full,
        upright position and that your tray tables are stored.  Flight
        attendants, prepare for take-off . What follows is a quick tutorial that walks you through some
      basic Subversion configuration and operation.  When you finish
      it, you should have a general understanding of Subversion&#39;s
      typical usage. The examples used in this appendix assume that you have
         svn , the Subversion command-line client,
        and  svnadmin , the administrative tool,
        ready to go on a Unix-like operating system.  (This tutorial
        also works at the Windows command-line prompt, assuming you
        make some obvious tweaks.)  We also assume you are using
        Subversion 1.2 or later (run  svn --version 
        to check). Subversion stores all versioned data in a central
      repository.  To begin, create a new repository: 
$ cd /var/svn
$ svnadmin create repos
$ ls repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
$
 This command creates a Subversion repository in the directory
       /var/svn/repos , creating
      the  repos  directory itself if it doesn&#39;t
      already exist.  This directory contains (among other things) a
      collection of database files.  You won&#39;t see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see
       . Subversion has no concept of a  project.  The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  We discuss the merits of each approach
      in  .
      Either way, the repository manages only files and directories,
      so it&#39;s up to humans to interpret particular directories as
       projects.   So while you might see references to
      projects throughout this book, keep in mind that we&#39;re only ever
      talking about some directory (or collection of directories) in
      the repository. In this example, we assume you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing your data into a single directory called
       myproject  (or whatever you wish).  For
      reasons explained in  , your
      project&#39;s tree structure should contain three top-level
      directories named  branches ,
       tags , and  trunk .  The
       trunk  directory should contain all of your
      data, and the  branches  and
       tags  directories should be empty: 
/tmp/
   myproject/
      branches/
      tags/
      trunk/
         foo.c
         bar.c
         Makefile
          
 The  branches ,  tags ,
      and  trunk  subdirectories aren&#39;t actually
      required by Subversion.  They&#39;re merely a popular convention
      that you&#39;ll most likely want to use later on. Once you have your tree of data ready to go, import it into
      the repository with the  svn import  command
      (see  ): 
$ svn import /tmp/myproject file:///var/svn/repos/myproject \
      -m &quot;initial import&quot;
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
 
Committed revision 1.
$ 
 Now the repository contains this tree of data.  As mentioned
      earlier, you won&#39;t see your files by directly peeking into the
      repository;  they&#39;re all stored within a database.  But the
      repository&#39;s imaginary filesystem now contains a top-level
      directory named  myproject , which in turn
      contains your data. Note that the original  /tmp/myproject 
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  To
      start manipulating repository data, you need to create a new
       working copy  of the data, a sort of private
      workspace.  Ask Subversion to  check out  a working
      copy of the  myproject/trunk  directory in
      the repository: 
$ svn checkout file:///var/svn/repos/myproject/trunk myproject
A    myproject/foo.c
A    myproject/bar.c
A    myproject/Makefile
 
Checked out revision 1.
$
 Now you have a personal copy of part of the repository in a
      new directory named  myproject .  You can edit
      the files in your working copy and then commit those changes
      back into the repository. Enter your working copy and edit a file&#39;s
          contents. Run  svn diff  to see unified diff
          output of your changes. Run  svn commit  to commit the new
          version of your file to the repository. Run  svn update  to bring your working
          copy  up to date  with the repository. For a full tour of all the things you can do with your
      working copy, read  . At this point, you have the option of making your repository
      available to others over a network.  See   to learn about the different sorts of
      server processes available and how to configure them. Subversion for CVS Users This appendix is a guide for CVS users new to Subversion.
    It&#39;s essentially a list of differences between the two systems
    as  viewed from 10,000 feet.   For each section, we
    provide references to relevant chapters when
    possible. Although the goal of Subversion is to take over the current
    and future CVS user base, some new features and design changes
    were required to fix certain  broken  behaviors
    that CVS had.  This means that, as a CVS user, you may need to
    break habits ones that you forgot were odd to begin
    with. Revision Numbers Are Different Now In CVS, revision numbers are per file.  This is because CVS
      stores its data in RCS files; each file has a corresponding RCS
      file in the repository, and the repository is roughly laid out
      according to the structure of your project tree. In Subversion, the repository looks like a single
      filesystem.  Each commit results in an entirely new filesystem
      tree; in essence, the repository is an array of trees.  Each of
      these trees is labeled with a single revision number.  When
      someone talks about  revision 54 , he&#39;s talking
      about a particular tree (and indirectly, the way the filesystem
      looked after the 54th commit). Technically, it&#39;s not valid to talk about  revision 5
      of  foo.c .   Instead, one would say
       foo.c  as it appears in revision
      5.   Also, be careful when making assumptions about the
      evolution of a file.  In CVS, revisions 5 and 6 of
       foo.c  are always different.  In Subversion,
      it&#39;s most likely that  foo.c  did
       not  change between revisions 5 and
      6. Similarly, in CVS, a tag or branch is an annotation on the
      file or on the version information for that individual file,
      whereas in Subversion, a tag or branch is a copy of an entire
      tree (by convention, into the  /branches 
      or  /tags  directories that appear at the top
      level of the repository, beside  /trunk ).  In
      the repository as a whole, many versions of each file may be
      visible: the latest version on each branch, every tagged
      version, and of course the latest version on the trunk
      itself.  So, to refine the terms even further, one would often
      say  foo.c  as it appears in
       /branches/REL1  in revision
      5. For more details on this topic, see  . Directory Versions Subversion tracks tree structures, not just file contents.
      It&#39;s one of the biggest reasons Subversion was written to
      replace CVS. Here&#39;s what this means to you, as a former CVS user: The  svn add  and  svn
          delete  commands work on directories now, just as
          they work on files.  So do  svn copy  and
           svn move .  However, these commands do
           not  cause any kind of immediate change
          in the repository.  Instead, the working items are simply
           scheduled  for addition or deletion.  No
          repository changes happen until you run  svn
          commit . Directories aren&#39;t dumb containers anymore; they have
          revision numbers like files.  (Or more properly, it&#39;s
          correct to talk about  directory
           foo/  in revision 5. ) Let&#39;s talk more about that last point.  Directory versioning
      is a hard problem; because we want to allow mixed-revision
      working copies, there are some limitations on how far we can
      abuse this model. From a theoretical point of view, we define  revision
      5 of directory  foo  to mean a
      specific collection of directory entries and properties.  Now
      suppose we start adding and removing files from
       foo , and then commit.  It would be a lie
      to say that we still have revision 5 of
       foo .  However, if we bumped
       foo &#39;s revision number after the commit,
      that would be a lie too; there may be other changes to
       foo  we haven&#39;t yet received, because we
      haven&#39;t updated yet. Subversion deals with this problem by quietly tracking
      committed adds and deletes in the  .svn 
      area.  When you eventually run  svn update ,
      all accounts are settled with the repository, and the
      directory&#39;s new revision number is set correctly.
       Therefore, only after an update is it truly safe to
      say that you have a  perfect  revision of a
      directory.  Most of the time, your working copy will
      contain  imperfect  directory revisions. Similarly, a problem arises if you attempt to commit
      property changes on a directory.  Normally, the commit would
      bump the working directory&#39;s local revision number.  But again,
      that would be a lie, as there may be adds or deletes that
      the directory doesn&#39;t yet have, because no update has happened.
       Therefore, you are not allowed to commit
      property changes on a directory unless the directory is
      up to date. For more discussion about the limitations of directory
      versioning, see  . More Disconnected Operations In recent years, disk space has become outrageously cheap
      and abundant, but network bandwidth has not.  Therefore, the
      Subversion working copy has been optimized around the scarcer
      resource. The  .svn  administrative directory
      serves the same purpose as the  CVS 
      directory, except that it also stores read-only,
       pristine  copies of your files.  This allows you
      to do many things offline: svn status Shows you any local changes you&#39;ve made (see  ) svn diff Shows you the details of your changes (see  ) svn revert Removes your local changes (see  ) Also, the cached pristine files allow the Subversion client
      to send differences when committing, which CVS cannot do. The last subcommand in the list svn
      revert is new.  It will not only remove local
      changes, but also unschedule operations such as adds and
      deletes.  Although deleting the file and then running  svn
      update  will still work, doing so distorts the true
      purpose of updating.  And, while we&#39;re on this subject Distinction Between Status and Update Subversion attempts to erase a lot of the confusion
      between the  cvs status  and
       cvs update  commands. The  cvs status  command has two purposes:
      first, to show the user any local modifications in the working
      copy, and second, to show the user which files are out of date.
      Unfortunately, because of CVS&#39;s hard-to-read status output, many
      CVS users don&#39;t take advantage of this command at all.  Instead,
      they&#39;ve developed a habit of running  cvs
      update  or  cvs -n update  to quickly
      see their changes.  If users forget to use
      the  -n  option, this has the side effect of
      merging repository changes they may not be ready to deal
      with. Subversion removes this muddle by making the output of
       svn status  easy to read for both humans and
      parsers.  Also,  svn update  prints only
      information about files that are updated,
       not  local modifications. Status svn status  prints all files that have
        local modifications.  By default, the repository is not
        contacted.  While this subcommand accepts a fair number of
        options, the following are the most commonly used ones: -u Contact the repository to determine, and then display,
              out-of-dateness information. -v Show  all  entries under
              version control. -N Run nonrecursively (do not descend into
              subdirectories). The  svn status  command has two output
        formats.  In the default  short  format, local
        modifications look like this: 
$ svn status
M       foo.c
M       bar/baz.c
 If you specify the  --show-updates 
        ( -u ) option, a longer output format is
        used: 
$ svn status -u
M             1047   foo.c
        *     1045   faces.html
        *            bloo.png
M             1050   bar/baz.c
Status against revision:   1066
 In this case, two new columns appear.  The second column
        contains an asterisk if the file or directory is out of date.
        The third column shows the working copy&#39;s revision number of the
        item.  In the previous example, the asterisk indicates that
         faces.html  would be patched if we updated,
        and that  bloo.png  is a newly added file in
        the repository.  (The absence of any revision number next to
         bloo.png  means that it doesn&#39;t yet exist in
        the working copy.) For a more detailed discussion of  svn
        status , including an explanation of the status codes
        shown in the previous example, see
         . Update svn update  updates your working copy,
        and prints only information about files that it updates. Subversion has combined CVS&#39;s  P  and
         U  codes into just  U .  When
        a merge or conflict occurs, Subversion simply prints
         G  or  C , rather than a
        whole sentence about it. For a more detailed discussion of  svn
        update , see  . Branches and Tags Subversion doesn&#39;t distinguish between filesystem space and
       branch  space; branches and tags are ordinary
      directories within the filesystem.  This is probably the single
      biggest mental hurdle that a CVS user will need to cross.  Read
      all about it in  . Since Subversion treats branches and tags as ordinary
        directories, your project&#39;s various lines of development
        probably live in subdirectories of the main project directory.
        So remember to check out using the URL of the subdirectory
        that contains the particular line of development you want, not
        the project&#39;s root URL.  If you make the mistake of checking
        out the root of the project, you may very well wind up with a
        working copy that contains a complete copy of your project&#39;s
        content for each and every one of its branches and tags.
         That is, providing you don&#39;t run out of disk
        space before your checkout finishes. Metadata Properties A new feature of Subversion is that you can attach arbitrary
      metadata (or  properties ) to files and
      directories.  Properties are arbitrary name/value pairs
      associated with files and directories in your working
      copy. To set or get a property name, use the  svn
      propset  and  svn propget 
      subcommands.  To list all properties on an object, use
       svn proplist . For more information, see  . Conflict Resolution CVS marks conflicts with inline  conflict
      markers,  and then prints a  C  during
      an update or merge operation.  Historically, this has caused
      problems, because CVS isn&#39;t doing enough.  Many users forget
      about (or don&#39;t see) the  C  after it whizzes
      by on their terminal.  They often forget that the conflict
      markers are even present, and then accidentally commit files
      containing those conflict markers. Subversion solves this problem in a pair of ways.  First,
      when a conflict occurs in a file, Subversion records the fact
      that the file is in a state of conflict, and won&#39;t allow you to
      commit changes to that file until you explicitly resolve the
      conflict.  Second, Subversion provides interactive conflict
      resolution, which allows you to resolve conflicts as they happen
      instead of having to go back and do so after the update or merge
      operation completes.  See   for more about conflict resolution in Subversion. Binary Files and Translation In the most general sense, Subversion handles binary files
      more gracefully than CVS does.  Because CVS uses RCS, it can
      only store successive full copies of a changing binary file.
      Subversion, however, expresses differences between files using a
      binary differencing algorithm, regardless of whether they
      contain textual or binary data.  That means all files are
      stored differentially (compressed) in the repository. CVS users have to mark binary files with
       -kb  flags to prevent data from being
      garbled (due to keyword expansion and line-ending translations).
      They sometimes forget to do this. Subversion takes the more paranoid route.  First, it never
      performs any kind of keyword or line-ending translation unless
      you explicitly ask it to do so (see
        and
        for more
      details).  By default, Subversion treats all file data as
      literal byte strings, and files are always stored in the
      repository in an untranslated state. Second, Subversion maintains an internal notion of whether a
      file is  text  or  binary  data, but
      this notion is  only  extant in the working
      copy.  During an  svn update , Subversion will
      perform contextual merges on locally modified text files, but
      will not attempt to do so for binary files. To determine whether a contextual merge is possible,
      Subversion examines the  svn:mime-type 
      property.  If the file has no  svn:mime-type 
      property, or has a MIME type that is textual (e.g.,
       text/* ),
      Subversion assumes it is text.  Otherwise, Subversion assumes
      the file is binary.  Subversion also helps users by running a
      binary-detection algorithm in the  svn import 
      and  svn add  commands.  These commands will
      make a good guess and then (possibly) set a binary
       svn:mime-type  property on the file being
      added.  (If Subversion guesses wrong, the user can always remove
      or hand-edit the property.) Versioned Modules Unlike CVS, a Subversion working copy is aware that it has
      checked out a module.  That means if somebody changes the
      definition of a module (e.g., adds or removes components), a
      call to  svn update  will update the working
      copy appropriately, adding and removing components. Subversion defines modules as a list of directories within a
      directory property; see  . Authentication With CVS&#39;s pserver, you are required to log in to the server
      (using the  cvs login  command) before
      performing any read or write operation you sometimes even
      have to log in for anonymous operations.  With a Subversion
      repository using Apache  httpd  or
       svnserve  as the server, you don&#39;t provide any
      authentication credentials at the outset if an operation
      that you perform requires authentication, the server will
      challenge you for your credentials (whether those credentials
      are username and password, a client certificate, or even both).
      So if your repository is world-readable, you will not be
      required to authenticate at all for read operations. As with CVS, Subversion still caches your credentials on
      disk (in your  ~/.subversion/auth/ 
      directory) unless you tell it not to by using the
       --no-auth-cache  option. The exception to this behavior, however, is in the case of
      accessing an  svnserve  server over an SSH
      tunnel, using the  svn+ssh://  URL scheme.  In
      that case, the  ssh  program unconditionally
      demands authentication just to start the tunnel. Converting a Repository from CVS to Subversion Perhaps the most important way to familiarize CVS users with
      Subversion is to let them continue to work on their projects
      using the new system.  And while that can be somewhat
      accomplished using a flat import into a Subversion repository of
      an exported CVS repository, the more thorough solution involves
      transferring not just the latest snapshot of their data, but all
      the history behind it as well, from one system to another.  This
      is an extremely difficult problem to solve; it involves
      deducing changesets in the absence of atomicity and translating
      between the systems&#39; completely orthogonal branching policies,
      among other complications.  Still, a handful of tools claim
      to at least partially support the ability to convert
      existing CVS repositories into Subversion ones. The most popular (and mature) conversion tool is
      cvs2svn ( ), a Python
      program originally created by members of Subversion&#39;s own
      development community.  This tool is meant to run exactly once:
      it scans your CVS repository multiple times and attempts to
      deduce commits, branches, and tags as best it can.  When it
      finishes, the result is either a Subversion repository or a
      portable Subversion dump file representing your code&#39;s history.
      See the web site for detailed instructions and caveats. WebDAV and Autoversioning WebDAV is an extension to HTTP, and it is growing more
    and more popular as a standard for file sharing.  Today&#39;s
    operating systems are becoming extremely web-aware, and many now
    have built-in support for mounting  shares  exported
    by WebDAV servers. If you use Apache as your Subversion network server, to
    some extent you are also running a WebDAV server.  This appendix
    gives some background on the nature of this protocol, how
    Subversion uses it, and how well Subversion interoperates with
    other software that is WebDAV-aware. What Is WebDAV? WebDAV DAV  stands
      for  Distributed Authoring and Versioning.  RFC
      2518 defines a set of concepts and accompanying extension
      methods to HTTP 1.1 that make the Web a more universal
      read/write medium.  The basic idea is that a WebDAV-compliant
      web server can act like a generic file server; clients
      can  mount  shared folders over HTTP that behave
      much like other network filesystems (such as NFS or SMB). The tragedy, though, is that despite the acronym, the RFC
      specification doesn&#39;t actually describe any sort of version
      control.  Basic WebDAV clients and servers assume that only one
      version of each file or directory exists, and that it can be
      repeatedly overwritten. Because RFC 2518 left out versioning concepts, another
      committee was left with the responsibility of writing RFC 3253 a
      few years later.  The new RFC adds versioning concepts to
      WebDAV, placing the  V  back in
       DAV hence the term  DeltaV. 
      WebDAV/DeltaV clients and servers are often called just
       DeltaV  programs, since DeltaV implies the
      existence of basic WebDAV. The original WebDAV standard has been widely successful.
      Every modern computer operating system has a general WebDAV
      client built in (details to follow), and a number of popular
      standalone applications are also able to speak
      WebDAV Microsoft Office, Dreamweaver, and Photoshop, to
      name a few.  On the server end, Apache HTTP Server has been
      able to provide WebDAV services since 1998 and is considered the
      de facto open source standard.  Several other
      commercial WebDAV servers are available, including Microsoft&#39;s own
      IIS. DeltaV, unfortunately, has not been so successful.  It&#39;s
      very difficult to find any DeltaV clients or servers.  The few
      that do exist are relatively unknown commercial products, and
      thus it&#39;s very difficult to test interoperability.  It&#39;s not
      entirely clear as to why DeltaV has remained stagnant.  Some
      opine that the specification is just too complex.  Others argue
      that while WebDAV&#39;s features have mass appeal (even the least
      technical users appreciate network file sharing), its version
      control features just aren&#39;t interesting or necessary for most
      users.  Finally, some believe that DeltaV remains unpopular
      because there&#39;s still no open source server product that
      implements it well. When Subversion was still in its design phase, it seemed
      like a great idea to use Apache as a network server.  It already
      had a module to provide WebDAV services.  DeltaV was a
      relatively new specification.  The hope was that the Subversion
      server module ( mod_dav_svn ) would eventually
      evolve into an open source DeltaV reference implementation.
      Unfortunately, DeltaV has a very specific versioning model that
      doesn&#39;t quite line up with Subversion&#39;s model.  Some concepts
      were mappable; others were not. What does this mean, then? First, the Subversion client is not a fully implemented
      DeltaV client.  It needs certain types of things from the server
      that DeltaV itself cannot provide, and thus is largely dependent
      on a number of Subversion-specific
      HTTP  REPORT  requests that
      only  mod_dav_svn  understands. Second,  mod_dav_svn  is not a
      fully realized DeltaV server.  Many portions of the DeltaV
      specification were irrelevant to Subversion, and thus were left
      unimplemented. A long-held debate in the Subversion developer community
      about whether it was worthfile to remedy either of these
      situations eventually reached closure, with the Subversion
      developers officially deciding to abandon plans to fully support
      DeltaV.  As of Subversion 1.7, Subversion clients and servers
      introduce numerous non-standard simplifications of the DeltaV
      standards The Subversion developers colloquially
      refer to this deviation from the DeltaV standard
      as  HTTPv2 . , with more
      customizations of this sort likely to come.  Those versions of
      Subversion will, of course, continue to provide the same DeltaV
      feature support already present in older releases, but no new
      work will be done to increase coverage of the
      specification Subversion is intentionally moving away from
      strict DeltaV as its primary HTTP-based protocol. Autoversioning WebDAV autoversioning While the Subversion client is not a full DeltaV client, and
      the Subversion server is not a full DeltaV server, there&#39;s still a
      glimmer of WebDAV interoperability to be happy about:
       autoversioning . Autoversioning is an optional feature defined in the DeltaV
      standard.  A typical DeltaV server will reject an ignorant
      WebDAV client attempting to do a  PUT  to a
      file that&#39;s under version control.  To change a
      version-controlled file, the server expects a series of proper
      versioning requests: something like
       MKACTIVITY ,  CHECKOUT ,
       PUT ,  CHECKIN .  But if the
      DeltaV server supports autoversioning, write requests from
      basic WebDAV clients are accepted.  The server behaves as though the
      client  had  issued the proper series of
      versioning requests, performing a commit under the hood.  In
      other words, it allows a DeltaV server to interoperate with
      ordinary WebDAV clients that don&#39;t understand versioning. Because so many operating systems already have integrated
      WebDAV clients, the use case for this feature can be incredibly
      appealing to administrators working with non-technical users.
      Imagine an office of ordinary users running Microsoft Windows or
      Mac OS.  Each user  mounts  the Subversion
      repository, which appears to be an ordinary network folder.
      They use the shared folder as they always do:  open files, edit
      them, and save them.  Meanwhile, the server is automatically
      versioning everything.  Any administrator (or knowledgeable
      user) can still use a Subversion client to search history and
      retrieve older versions of data. This scenario isn&#39;t fiction it&#39;s real and it works.
      To activate autoversioning in  mod_dav_svn ,
      use the  SVNAutoversioning  directive within
      the  httpd.conf   Location 
      block, like so: 
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on
&lt;/Location&gt;
 When Subversion autoversioning is active, write requests
      from WebDAV clients result in automatic commits.  A generic log
      message is automatically generated and attached to each
      revision. Before activating this feature, however, understand what
      you&#39;re getting into.  WebDAV clients tend to do
       many  write requests, resulting in a huge
      number of automatically committed revisions.  For example, when
      saving data, many clients will do a  PUT  of a
      0-byte file (as a way of reserving a name) followed by another
       PUT  with the real file data.  The single
      file-write results in two separate commits.  Also consider that
      many applications auto-save every few minutes, resulting in even
      more commits. If you have a post-commit hook program that sends email, you
      may want to disable email generation either altogether or on
      certain sections of the repository; it depends on whether you
      think the influx of emails will still prove to be valuable
      notifications or not.  Also, a smart post-commit hook program
      can distinguish between a transaction created via autoversioning
      and one created through a normal Subversion commit operation.
      The trick is to look for a revision property
      named  svn:autoversioned .  If present, the
      commit was made by a generic WebDAV client. Another feature that may be a useful complement for
      Subversion&#39;s autoversioning comes from Apache&#39;s
       mod_mime  module.  If a WebDAV client adds a
      new file to the repository, there&#39;s no opportunity for the user
      to set the the  svn:mime-type  property.  This
      might cause the file to appear as a generic icon when viewed
      within a WebDAV shared folder, not having an association with
      any application.  One remedy is to have a sysadmin (or other
      Subversion-knowledgeable person) check out a working copy and
      manually set the  svn:mime-type  property on
      necessary files.  But there&#39;s potentially no end to such cleanup
      tasks.  Instead, you can use the
       ModMimeUsePathInfo  directive in your
      Subversion  &lt;Location&gt;  block: 
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on

  ModMimeUsePathInfo on

&lt;/Location&gt;
 This directive allows  mod_mime  to attempt
      automatic deduction of the MIME type on new files that enter the
      repository via autoversioning.  The module looks at the file&#39;s
      named extension and possibly the contents as well; if the file
      matches some common patterns, the
      file&#39;s  svn:mime-type  property will be set
      automatically. Client Interoperability WebDAV client support All WebDAV clients fall into one of three
      categories standalone applications, file-explorer
      extensions, or filesystem implementations.  These categories
      broadly define the types of WebDAV functionality available to
      users.    gives our
      categorization as well as a quick description of some common pieces of
      WebDAV-enabled software.  You can find more details about these software
      offerings, as well as their general category, in
      the sections that follow. Common WebDAV clients Software Type Windows Mac Linux Description Adobe Photoshop Standalone WebDAV application X Image editing software, allowing direct opening
              from, and writing to, WebDAV URLs cadaver Standalone WebDAV application X X Command-line WebDAV client supporting file
              transfer, tree, and locking operations DAV Explorer Standalone WebDAV application X X X Java GUI tool for exploring WebDAV shares Adobe Dreamweaver Standalone WebDAV application X Web production software able to directly read from
              and write to WebDAV URLs Microsoft Office Standalone WebDAV application X Office productivity suite with several components
              able to directly read from and write to WebDAV
              URLs Microsoft Web Folders File-explorer WebDAV extension X GUI file explorer program able to perform tree
              operations on a WebDAV share GNOME Nautilus File-explorer WebDAV extension X GUI file explorer able to perform tree
              operations on a WebDAV share KDE Konqueror File-explorer WebDAV extension X GUI file explorer able to perform tree
              operations on a WebDAV share Mac OS X WebDAV filesystem implementation X Operating system that has built-in support for mounting
              WebDAV shares. Novell NetDrive WebDAV filesystem implementation X Drive-mapping program for assigning Windows drive
              letters to a mounted remote WebDAV share SRT WebDrive WebDAV filesystem implementation X File transfer software, which, among other things,
              allows the assignment of Windows drive letters to a
              mounted remote WebDAV share davfs2 WebDAV filesystem implementation X Linux filesystem driver that allows you to mount a
              WebDAV share Standalone WebDAV Applications A WebDAV application is a program that speaks WebDAV
        protocols with a WebDAV server.  We&#39;ll cover some of the most
        popular programs with this kind of WebDAV support. Microsoft Office, Dreamweaver, Photoshop On Windows, several well-known applications contain
          integrated WebDAV client functionality, such as Microsoft&#39;s
          Office, WebDAV support was removed from
          Microsoft Access for some reason, but it exists in the rest
          of the Office suite.  Adobe&#39;s Photoshop and
          Dreamweaver programs.  They&#39;re able to directly open and
          save to URLs, and tend to make heavy use of WebDAV locks
          when editing a file. Note that while many of these programs also exist for
          Mac OS X, they do not appear to support WebDAV directly
          on that platform.  In fact, on Mac OS X, the
           File Open  dialog box doesn&#39;t allow
          one to type a path or URL at all.  It&#39;s likely that the
          WebDAV features were deliberately left out of Macintosh
          versions of these programs, since OS X already provides such
          excellent low-level filesystem support for WebDAV. cadaver, DAV Explorer cadaver is a bare-bones Unix command-line program for
          browsing and changing WebDAV shares.  It uses the neon HTTP
          library not surprisingly, since both neon and cadaver
          are written by the same author.  cadaver is free software (GPL
          license) and is available at  . Using cadaver is similar to using a command-line FTP
          program, and thus it&#39;s extremely useful for basic WebDAV
          debugging.  It can be used to upload or download files in a
          pinch, to examine properties, and to copy, move,
          lock, or unlock files: 
$ cadaver http://host/repos
dav:/repos/&gt; ls
Listing collection `/repos/&#39;: succeeded.
Coll: &gt; foobar                                 0  May 10 16:19
      &gt; playwright.el                       2864  May  4 16:18
      &gt; proofbypoem.txt                     1461  May  5 15:09
      &gt; westcoast.jpg                      66737  May  5 15:09

dav:/repos/&gt; put README
Uploading README to `/repos/README&#39;:
Progress: [=============================&gt;] 100.0% of 357 bytes succeeded.

dav:/repos/&gt; get proofbypoem.txt
Downloading `/repos/proofbypoem.txt&#39; to proofbypoem.txt:
Progress: [=============================&gt;] 100.0% of 1461 bytes succeeded.
 DAV Explorer is another standalone WebDAV client, written
          in Java.  It&#39;s under a free Apache-like license and is
          available at  .
          It does everything cadaver does, but has the
          advantages of being portable and being a more user-friendly GUI
          application.  It&#39;s also one of the first clients to support
          the new WebDAV Access Control Protocol (RFC 3744). Of course, DAV Explorer&#39;s ACL support is useless in this
          case, since  mod_dav_svn  doesn&#39;t support
          it.  The fact that both cadaver and DAV Explorer support
          some limited DeltaV commands isn&#39;t particularly useful
          either, since they don&#39;t allow  MKACTIVITY 
          requests.  But it&#39;s not relevant anyway; we&#39;re assuming all
          of these clients are operating against an autoversioning
          repository. File-Explorer WebDAV Extensions Some popular file explorer GUI programs support WebDAV
        extensions that allow a user to browse a DAV share as though it
        was just another directory on the local computer, and to
        perform basic tree editing operations on the items in that
        share.  For example, Windows Explorer is able to browse a
        WebDAV server as a  network place.   Users can
        drag files to and from the desktop, or can rename, copy, or
        delete files in the usual way.  But because it&#39;s only a
        feature of the file explorer, the DAV share isn&#39;t visible to
        ordinary applications.  All DAV interaction must happen
        through the explorer interface. Microsoft Web Folders Microsoft was one of the original backers of the WebDAV
          specification, and first started shipping a client in
          Windows 98, which was known as Web Folders.  This client was
          also shipped in Windows NT 4.0 and Windows 2000. The original Web Folders client was an extension to
          Explorer, the main GUI program used to browse filesystems.  It
          works well enough.  In Windows 98, the feature might need to
          be explicitly installed if Web Folders aren&#39;t already visible
          inside My Computer.  In Windows 2000, simply
          add a new  network place,  enter the URL, and the
          WebDAV share will pop up for browsing. With the release of Windows XP, Microsoft started shipping
          a new implementation of Web Folders, known as the WebDAV
          Mini-Redirector.  The new implementation is a
          filesystem-level client, allowing WebDAV shares to be mounted
          as drive letters.  Unfortunately, this implementation is
          incredibly buggy.  The client usually tries to convert HTTP
          URLs ( http://host/repos ) into UNC share
          notation ( \\host\repos ); it also often
          tries to use Windows Domain authentication to respond to
          basic-auth HTTP challenges, sending usernames as
           HOST\username .  These interoperability
          problems are severe and are documented in numerous places around
          the Web, to the frustration of many users.  Even Greg Stein,
          the original author of Apache&#39;s WebDAV module, bluntly
          states that XP Web Folders simply can&#39;t operate against an Apache
          server. Windows Vista&#39;s initial implementation of Web Folders seems to
          be almost the same as XP&#39;s, so it has the same sort of
          problems.  With luck, Microsoft will remedy these issues in
          a Vista Service Pack. However, there seem to be workarounds for both XP and
          Vista that allow Web Folders to work against Apache.  Users
          have mostly reported success with these techniques, so we&#39;ll
          relay them here. On Windows XP, you have two options.  First, search
          Microsoft&#39;s web site for update KB907306,  Software
          Update for Web Folders.   This may fix all your
          problems.  If it doesn&#39;t, it seems that the original pre-XP
          Web Folders implementation is still buried within the
          system.  You can unearth it by going to Network
          Places and adding a new network place.  When prompted,
          enter the URL of the repository, but  include a
          port number  in the URL.  For
          example, you should enter  http://host/repos  
          as  http://host:80/repos  instead.
          Respond to any authentication prompts with your Subversion
          credentials. On Windows Vista, the same KB907306 update may clear
          everything up.  But there may still be other issues.  Some
          users have reported that Vista considers
          all  http://  connections insecure, and thus
          will always fail any authentication challenges from Apache
          unless the connection happens
          over  https:// .  If you&#39;re unable to connect
          to the Subversion repository via SSL, you can tweak the
          system registry to turn off this behavior.  Just change the
          value of the  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WebClient\Parameters\BasicAuthLevel 
          key from  1  to  2 .  A final warning:  be sure to set up the Web
          Folder to point to the repository&#39;s root directory
          ( / ), rather than some subdirectory
          such as  /trunk .  Vista Web Folders
          seems to work only against repository roots. In general, while these workarounds may function for
          you, you might get a better overall experience using a
          third-party WebDAV client such as WebDrive or NetDrive. Nautilus, Konqueror Nautilus is the official file manager/browser for the
          GNOME desktop ( ), and
          Konqueror is the manager/browser for the KDE desktop ( ).  Both of these applications
          have an explorer-level WebDAV client built in, and they
          operate just fine against an autoversioning repository. In GNOME&#39;s Nautilus, select the  File Open
          location  menu item and enter the URL in the
          dialog box presented.  The repository should then be
          displayed like any other filesystem. In KDE&#39;s Konqueror, you need to use the
           webdav://  scheme when entering the URL in
          the location bar.  If you enter
          an  http://  URL, Konqueror will behave
          like an ordinary web browser.  You&#39;ll likely see the generic
          HTML directory listing produced
          by  mod_dav_svn .  When you enter
           webdav://host/repos  instead of
           http://host/repos , Konqueror becomes a
          WebDAV client and displays the repository as a
          filesystem. WebDAV Filesystem Implementation The WebDAV filesystem implementation is arguably the best
        sort of WebDAV client.  It&#39;s implemented as a low-level
        filesystem module, typically within the operating system&#39;s
        kernel.  This means that the DAV share is mounted like any
        other network filesystem, similar to mounting an NFS share on
        Unix or attaching an SMB share as a drive letter in Windows.
        As a result, this sort of client provides completely
        transparent read/write WebDAV access to all programs.
        Applications aren&#39;t even aware that WebDAV requests are
        happening. WebDrive, NetDrive Both WebDrive and NetDrive are excellent commercial
          products that allow a WebDAV share to be attached as drive
          letters in Windows.  As a result, you can operate on the
          contents of these WebDAV-backed pseudodrives as easily as
          you can against real local hard drives, and in the same
          ways.  You can purchase WebDrive from South River
          Technologies ( ).
          Novell&#39;s NetDrive is freely available online, but requires
          users to have a NetWare license. Mac OS X Apple&#39;s OS X operating system has an integrated
          filesystem-level WebDAV client.  From the Finder, select the
           Go Connect to Server  menu
          item.  Enter a WebDAV URL, and it appears as a disk on the
          desktop, just like any other mounted volume.  You can also
          mount a WebDAV share from the Darwin terminal by using the
           webdav  filesystem type with the
           mount  command: 
$ mount -t webdav http://svn.example.com/repos/project /some/mountpoint
$
 Note that if your  mod_dav_svn  is
          older than version 1.2, OS X will refuse to mount the share
          as read/write; it will appear as read-only.  This is because
          OS X insists on locking support for read/write shares, and
          the ability to lock files first appeared in Subversion
          1.2. Also, OS X&#39;s WebDAV client can sometimes be overly
          sensitive to HTTP redirects.  If OS X is unable to mount the
          repository at all, you may need to enable
          the  BrowserMatch  directive in the Apache
          server&#39;s  httpd.conf : 
BrowserMatch &quot;^WebDAVFS/1.[012]&quot; redirect-carefully
 Linux davfs2 Linux davfs2 is a filesystem module for the Linux
          kernel, whose development is organized at
           .  Once you
          install davfs2, you can mount a WebDAV network share using
          the usual Linux mount command: 
$ mount.davfs http://host/repos /mnt/dav
 Version Control with Subversion [DRAFT] For Subversion 1.8 (Compiled from  ) Ben Collins-Sussman Brian W. Fitzpatrick C. Michael Pilato Tatiana Apandi 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 Ben Collins-Sussman Brian W. Fitzpatrick C. Michael Pilato This work is licensed under the Creative
      Commons Attribution License.  To view a copy of this license,
      visit  
      or send a letter to Creative Commons, 559 Nathan Abbott Way,
      Stanford, California 94305, USA. 

   
   

   Getting to Know Subversion 

     
     
     
     
     
     
     
     
   

   Subversion Command Reference 

     
     
     
     
     
     
     
     
     
     
   

   Appendices 

     
     
     
   

   
   

 Preface Greg Hudson, Subversion developer It is important not to let the perfect become the
      enemy of the good, even when you can agree on what perfect is.
      Doubly so when you can&#39;t.  As unpleasant as it is to be trapped by
      past mistakes, you can&#39;t make any progress by being afraid of your
      own shadow during design. Concurrent Versions System CVS Concurrent Versions System In the world of open source software, the Concurrent
    Versions System (CVS) was the tool of choice for version control
    for many years.  And rightly so.  CVS was open source software
    itself, and its nonrestrictive modus operandi and support for
    networked operation allowed dozens of geographically dispersed
    programmers to share their work.  It fit the collaborative nature
    of the open source world very well.  CVS and its semi-chaotic
    development model have since become cornerstones of open source
    culture. But CVS was not without its flaws, and simply fixing those
    flaws promised to be an enormous effort.  Enter Subversion.
    Subversion was designed to be a successor to CVS, and its
    originators set out to win the hearts of CVS users in two
    ways by creating an open source system with a design
    (and  look and feel ) similar to CVS, and by
    attempting to avoid most of CVS&#39;s noticeable flaws.  While the
    result wasn&#39;t and isn&#39;t the next great evolution in
    version control design, Subversion  is  very
    powerful, very usable, and very flexible. This book is written to document the 1.8 series of the
    Apache  Subversion We&#39;ll refer to it
    simply as  Subversion  throughout this book.  You&#39;ll
    thank us when you realize just how much space that
    saves!  version control system.  We have made
    every attempt to be thorough in our coverage.  However, Subversion
    has a thriving and energetic development community, so already a
    number of features and improvements are planned for future
    versions that may change some of the commands and specific notes
    in this book. What Is Subversion? Subversion version control systems VCS version control systems Subversion is a free/open source  version
      control system  (VCS).  That is, Subversion manages
      files and directories, and the changes made to them, over time.
      This allows you to recover older versions of your data or
      examine the history of how your data changed.  In this regard,
      many people think of a version control system as a sort
      of  time machine. Subversion can operate across networks, which allows it to
      be used by people on different computers.  At some level, the
      ability for various people to modify and manage the same set of
      data from their respective locations fosters collaboration.
      Progress can occur more quickly without a single conduit through
      which all modifications must occur.  And because the work is
      versioned, you need not fear that quality is the trade-off for
      losing that conduit if some incorrect change is made to
      the data, just undo that change. software configuration management SCM software configuration management Some version control systems are
      also  software configuration management 
      (SCM) systems.  These systems are specifically tailored to
      manage trees of source code and have many features that are
      specific to software development such as natively
      understanding programming languages, or supplying tools for
      building software.  Subversion, however, is not one of these
      systems.  It is a general system that can be used to manage
       any  collection of files.  For you, those
      files might be source code for others, anything from
      grocery shopping lists to digital video mixdowns and
      beyond. Is Subversion the Right Tool? If you&#39;re a user or system administrator pondering the use
        of Subversion, the first question you should ask yourself is:
        &quot;Is this the right tool for the job?&quot;  Subversion is a
        fantastic hammer, but be careful not to view every problem as
        a nail. As a first step, you need to decide if version control in
        general is required for your purposes.  If you need to archive
        old versions of files and directories, possibly resurrect
        them, and examine logs of how they&#39;ve changed over time, then
        version control tools can do that.  If you need to collaborate
        with people on documents (usually over a network) and keep
        track of who made which changes, a version control tool can do
        that, too.  In fact, this is why version control tools such as
        Subversion are so often used in software development
        environments working on a development team is an
        inherently social activity where changes to source code files
        are constantly being discussed, made, evaluated, and even
        sometimes unmade.  Version control tools facilitate that sort
        of collaboration. There is cost associated with using version control, too.
        Unless you can outsource the administration of your version
        control system to a third-party, you&#39;ll have the obvious costs
        of performing that administration yourself.  When working with
        the data on a daily basis, you won&#39;t be able to copy, move,
        rename, or delete files the way you usually do.  Instead,
        you&#39;ll have to do all of those things through the version
        control system. Even assuming that you are okay with the cost/benefit
        tradeoff afforded by a version control system, you shouldn&#39;t
        choose to use one merely because it  can 
        do what you want.  Consider whether your needs are better
        addressed by other tools.  For example, because Subversion
        replicates data to all the collaborators involved, a common
        misuse is to treat it as a generic distribution system.
        People will sometimes use Subversion to distribute huge
        collections of photos, digital music, or software packages.
        The problem is that this sort of data usually isn&#39;t changing
        at all.  The collection itself grows over time, but the
        individual files within the collection aren&#39;t being changed.
        In this case, using Subversion is
         overkill. Or as a friend puts
        it,  swatting a fly with a
        Buick.  There are simpler tools that
        efficiently replicate data  without  the
        overhead of tracking changes, such as  rsync 
        or  unison . version control systems centralized Once you&#39;ve decided that you need a version
        control solution, you&#39;ll find no shortage of available
        options.  When Subversion was first designed and released, the
        predominant methodology of version control
        was  centralized version control a
        single remote master storehouse of versioned data with
        individual users operating locally against shallow copies of
        that data&#39;s version history.  Subversion quickly emerged after
        its initial introduction as the clear leader in this field of
        version control, earning widespread adoption and supplanting
        installations of many older version control systems.  It
        continues to hold that prominent position today. version control systems distributed DVCS version control systems, distributed Much has changed since that time, though.  In the
        years since the Subversion project began its life, a newer
        methodology of version control called  distributed
        version control  has likewise garnered widespread
        attention and adoption.  Tools such as Git
        ( ) and Mercurial
        ( ) have risen
        to the tops of the distributed version control system (DVCS)
        ranks.  Distributed version control harnesses the growing
        ubiquity of high-speed network connections and low storage
        costs to offer an approach which differs from the centralized
        model in key ways.  First and most obvious is the fact that
        there is no remote, central storehouse of versioned data.
        Rather, each user keeps and operates against very
        deep complete, in a sense local version history
        data stores.  Collaboration still occurs, but is accomplished
        by trading collections of changes made to versioned items
        directly between users&#39; local data stores, not via a
        centralized master data store.  In fact, any semblance of a
        canonical  master  source of a project&#39;s
        versioned data is by convention only, a status imputed by
        the various collaborators on that project. There are pros and cons to each version control approach.
        Perhaps the two biggest benefits delivered by the DVCS tools
        are incredible performance for day-to-day operations (because
        the primary data store is locally held) and vastly better
        support for merging between branches (because merge algorithms
        serve as the very core of how DVCSes work at all).  The
        downside is that distributed version control is an inherently
        more complicated model, which can present a non-negligible
        challenge to comfortable collaboration.  Also, DVCS tools do
        what they do well in part because of a certain degree of
        control withheld from the user which centalized systems freely
        offer the ability to implement path-based access
        control, the flexibility to update or backdate individual
        versioned data items, etc.  Fortunately, many wise
        organizations have discovered that this needn&#39;t be a religious
        debate, and that Subversion and a DVCS tool such as Git can be
        used together harmoniously within the organization, each
        serving the purposes best suited to the tool. Alas, this book is about Subversion, so we&#39;ll not attempt
        a full comparison of Subversion and other tools.  Readers
        empowered to choose their version control system are
        encouraged to research the available options and make the
        determination that works best for themselves and their fellow
        collaborators.  And if, after doing so, Subversion is the
        chosen tool, there&#39;s  plenty  of detailed
        information about how to use it successfully in the chapters
        that follow! Subversion&#39;s History Subversion history of CollabNet In early 2000, CollabNet,
        Inc. ( ) began seeking
        developers to write a replacement for CVS.  CollabNet
        offered CollabNet Enterprise Edition has since
        been replaced by a new product line called CollabNet
        TeamForge.  a collaboration software suite
        called CollabNet Enterprise Edition (CEE), of which one
        component was version control.  Although CEE used CVS as its
        initial version control system, CVS&#39;s limitations were obvious
        from the beginning, and CollabNet knew it would eventually
        have to find something better.  Unfortunately, CVS had become
        the de facto standard in the open source world largely because
        there  wasn&#39;t  anything better, at least
        not under a free license.  So CollabNet determined to write a
        new version control system from scratch, retaining the basic
        ideas of CVS, but without the bugs and misfeatures. In February 2000, they contacted Karl Fogel, the author of
         Open Source Development with CVS 
        (Coriolis, 1999), and asked if he&#39;d like to work on this new
        project.  Coincidentally, at the time Karl was already
        discussing a design for a new version control system with his
        friend Jim Blandy.  In 1995, the two had started Cyclic
        Software, a company providing CVS support contracts, and
        although they later sold the business, they still used CVS
        every day at their jobs.  Their frustration with CVS had led
        Jim to think carefully about better ways to manage versioned
        data, and he&#39;d already come up with not only the Subversion
        name, but also the basic design of the Subversion data store.
        When CollabNet called, Karl immediately agreed to work on the
        project, and Jim got his employer, Red Hat Software, to
        essentially donate him to the project for an indefinite period
        of time.  CollabNet hired Karl and Ben Collins-Sussman, and
        detailed design work began in May 2000.  With the help of some
        well-placed prods from Brian Behlendorf and Jason Robbins of
        CollabNet, and from Greg Stein (at the time an independent
        developer active in the WebDAV/DeltaV specification process),
        Subversion quickly attracted a community of active developers.
        It turned out that many people had encountered the same
        frustrating experiences with CVS and welcomed the chance to
        finally do something about it. The original design team settled on some simple goals.  They
        didn&#39;t want to break new ground in version control methodology,
        they just wanted to fix CVS.  They decided that Subversion would
        match CVS&#39;s features and preserve the same development model,
        but not duplicate CVS&#39;s most obvious flaws.  And although it did
        not need to be a drop-in replacement for CVS, it should be
        similar enough that any CVS user could make the switch with
        little effort. After 14 months of coding, Subversion became
         self-hosting  on August 31, 2001.  That is,
        Subversion developers stopped using CVS to manage Subversion&#39;s
        own source code and started using Subversion instead. Apache Subversion Subversion While CollabNet started the project, and still
        funds a large chunk of the work (it pays the salaries of a few
        full-time Subversion developers), Subversion is run like most
        open source projects, governed by a loose, transparent set of
        rules that encourage meritocracy.  In 2009, CollabNet worked
        with the Subversion developers towards the goal of integrating
        the Subversion project into the Apache Software Foundation
        (ASF), one of the most well-known collectives of open source
        projects in the world.  Subversion&#39;s technical roots,
        community priorities, and development practices were a perfect
        fit for the ASF, many of whose members were already active
        Subversion contributors.  In early 2010, Subversion was fully
        adopted into the ASF&#39;s family of top-level projects, moved its
        project web presence to
         , and was
        rechristened  Apache Subversion . Subversion&#39;s Architecture Subversion architecture 
        illustrates a  mile-high  view of Subversion&#39;s
        design. Subversion&#39;s architecture On one end is a Subversion repository that holds all of
        your versioned data.  On the other end is your Subversion
        client program, which manages local reflections of portions of
        that versioned data.  Between these extremes are multiple
        routes through a Repository Access (RA) layer, some of which
        go across computer networks and through network servers which
        then access the repository, others of which bypass the network
        altogether and access the repository directly. Subversion&#39;s Components Subversion components Subversion, once installed, has a number of
        different pieces.  The following is a quick overview of what
        you get.  Don&#39;t be alarmed if the brief descriptions leave you
        scratching your head plenty  more
        pages in this book are devoted to alleviating that
        confusion. svn svnversion svnlook svnadmin mod_dav_svn svnserve svndumpfilter svnsync svnrdump svnmucc svn The command-line client program svnversion A program for reporting the state (in terms of
              revisions of the items present) of a working copy svnlook A tool for directly inspecting a Subversion repository svnadmin A tool for creating, tweaking, or repairing a Subversion
              repository mod_dav_svn A plug-in module for the Apache HTTP Server, used to
              make your repository available to others over a
              network svnserve A custom standalone server program, runnable as a
              daemon process or invokable by SSH; another way to make
              your repository available to others over a network svndumpfilter A program for filtering Subversion repository dump
              streams svnsync A program for incrementally mirroring one repository
              to another over a network svnrdump A program for performing repository history dumps
              and loads over a network svnmucc A program for performing multiple repository
              URL-based operations in a single commit and without the
              use of a working copy What&#39;s New in Subversion Subversion history of The first edition of this book was published by
        O&#39;Reilly Media in 2004, shortly after Subversion had reached
        1.0.  Since that time, the Subversion project has continued to
        release new major releases of the software.  Here&#39;s a quick
        summary of major new changes since Subversion 1.0.  Note that
        this is not a complete list; for full details, please visit
        Subversion&#39;s web site at
         . Subversion 1.1 (September 2004) Release 1.1 introduced FSFS, a flat-file repository
              storage option for the repository.  While the Berkeley DB
              backend is still widely used and supported, FSFS has
              since become the default choice for
              newly created repositories due to its low barrier to
              entry and minimal maintenance requirements.  Also in
              this release came the ability to put symbolic links
              under version control, auto-escaping of URLs, and a
              localized user interface. Subversion 1.2 (May 2005) Release 1.2 introduced the ability to create
              server-side locks on files, thus serializing commit
              access to certain resources.  While Subversion is still
              a fundamentally concurrent version control system,
              certain types of binary files (e.g. art assets)
              cannot be merged together.  The locking feature fulfills
              the need to version and protect such resources.  With
              locking also came a complete WebDAV auto-versioning
              implementation, allowing Subversion repositories to be
              mounted as network folders.  Finally, Subversion 1.2
              began using a new, faster binary-differencing algorithm
              to compress and retrieve old versions of files. Subversion 1.3 (December 2005) Release 1.3 brought path-based authorization
              controls to the  svnserve  server,
              matching a feature formerly found only in the Apache
              server.  The Apache server, however, gained some new
              logging features of its own, and Subversion&#39;s API
              bindings to other languages also made great leaps
              forward. Subversion 1.4 (September 2006) Release 1.4 introduced a whole new
              tool svnsync for doing
              one-way repository replication over a network.  Major
              parts of the working copy metadata were revamped to no
              longer use XML (resulting in client-side speed gains),
              while the Berkeley DB repository backend gained the
              ability to automatically recover itself after a server
              crash. Subversion 1.5 (June 2008) Release 1.5 took much longer to finish than prior
              releases, but the headliner feature was gigantic:
              semi-automated tracking of branching and merging.  This
              was a huge boon for users, and pushed Subversion far
              beyond the abilities of CVS and into the ranks of
              commercial competitors such as Perforce and ClearCase.
              Subversion 1.5 also introduced a bevy of other
              user-focused features, such as interactive resolution of
              file conflicts, sparse checkouts, client-side
              management of changelists, powerful new syntax for
              externals definitions, and SASL authentication support for
              the  svnserve  server. Subversion 1.6 (March 2009) Release 1.6 continued to make branching and merging
              more robust by introducing tree conflicts, and offered
              improvements to several other existing features: more
              interactive conflict resolution options; de-telescoping
              and outright exclusion support for sparse checkouts;
              file-based externals definitions; and operational
              logging support for  svnserve  similar
              to what  mod_dav_svn  offered.  Also,
              the command-line client introduced a new shortcut syntax
              for referring to Subversion repository URLs. Subversion 1.7 (October 2011) Release 1.7 was primarily a delivery vehicle for two
              big plumbing overhauls of existing Subversion
              components.  The largest and most impactful of these was
              the so-called  WC-NG a complete
              rewrite of the  libsvn_wc  working copy
              management library.  The second change was the
              introduction of a sleeker HTTP protocol for Subversion
              client/server interaction.  Subversion 1.7 delivered a
              handful of additional features, many bug fixes, and some
              notable performance improvements, too. Subversion 1.8 (not yet released) *shrug* .  Patches (to
              Subversion) welcome. Audience This book is written for computer-literate folk who want to
      use Subversion to manage their data.  While Subversion runs on a
      number of different operating systems, its primary user
      interface is command-line-based.  That command-line tool
      ( svn ), and some additional auxiliary
      programs, are the focus of this book. For consistency, the examples in this book assume that the reader
      is using a Unix-like operating system and is relatively comfortable
      with Unix and command-line interfaces.  That said, the
       svn  program also runs on non-Unix platforms
      such as Microsoft Windows.  With a few minor exceptions, such as
      the use of backward slashes ( \ ) instead of
      forward slashes ( / ) for path separators, the
      input to and output from this tool when run on Windows are
      identical to that of its Unix counterpart. Most readers are probably programmers or system
      administrators who need to track changes to source code.  This
      is the most common use for Subversion, and therefore it is the
      scenario underlying all of the book&#39;s examples.  But Subversion
      can be used to manage changes to any sort of
      information images, music, databases, documentation, and
      so on.  To Subversion, all data is just data. While this book is written with the assumption that the
      reader has never used a version control system, we&#39;ve also tried
      to make it easy for users of CVS (and other systems) to make a
      painless leap into Subversion.  Special sidebars may mention
      other version control systems from time to time, and
        summarizes many of the differences
      between CVS and Subversion. Note also that the source code examples used throughout the
      book are only examples.  While they will compile with the proper
      compiler incantations, they are intended to illustrate a
      particular scenario and not necessarily to serve as examples of good
      programming style or practices. How to Read This Book Technical books always face a certain dilemma: whether to
      cater to  top-down  or to  bottom-up 
      learners.  A top-down learner prefers to read or skim
      documentation, getting a large overview of how the system works;
      only then does she actually start using the software.  A
      bottom-up learner is a  learn by doing 
      person someone who just wants to dive into the software
      and figure it out as she goes, referring to book sections when
      necessary.  Most books tend to be written for one type of person
      or the other, and this book is undoubtedly biased toward
      top-down learners.  (And if you&#39;re actually reading this
      section, you&#39;re probably already a top-down learner yourself!)
      However, if you&#39;re a bottom-up person, don&#39;t despair.  While the
      book may be laid out as a broad survey of Subversion topics, the
      content of each section tends to be heavy with specific examples
      that you can try-by-doing.  For the impatient folks who just
      want to get going, you can jump right to
       . Regardless of your learning style, this book aims to be
      useful to people of widely different backgrounds from
      those with no previous experience in version control to
      experienced system administrators.  Depending on your own
      background, certain chapters may be more or less important to
      you.  The following can be considered a
       recommended reading list  for various types of
      readers: Experienced system administrators The assumption here is that you&#39;ve probably used
            version control before and are dying to get a
            Subversion server up and running ASAP.
              and
              will show you how to
            create your first repository and make it available over
            the network.  After that&#39;s done,
              and
              are the fastest routes to
            learning the Subversion client. New users Your administrator has probably set up Subversion
            already, and you need to learn how to use the client.  If
            you&#39;ve never used a version control system, then
              is a vital introduction to the
            ideas behind version control.   
            is a guided tour of the Subversion client. Advanced users Whether you&#39;re a user or administrator, eventually
            your project will grow larger.  You&#39;re going to want to
            learn how to do more advanced things with Subversion, such
            as how to use Subversion&#39;s property support
            ( ), how to use branches and
            perform merges ( ), how to
            configure runtime options
            ( ), and other things.
            These chapters aren&#39;t critical at first, but be sure to
            read them once you&#39;re comfortable with the basics. Developers Presumably, you&#39;re already familiar with Subversion,
            and now want to either extend it or build new software on
            top of its many APIs.    is
            just for you. The book ends with reference material  is a reference guide for all Subversion
      commands, and the appendixes cover a number of useful topics.
      These are the chapters you&#39;re most likely to come back to
      after you&#39;ve finished the book. Organization of This Book The chapters that follow and their contents are listed
      here: Explains the basics of version control and different
            versioning models, along with Subversion&#39;s repository,
            working copies, and revisions. Walks you through a day in the life of a Subversion
            user.  It demonstrates how to use a Subversion client to
            obtain, modify, and commit data. Covers more complex features that regular users will
            eventually come into contact with, such as versioned
            metadata, file locking, and peg revisions. Discusses branches, merges, and tagging, including
            best practices for branching and merging, common
            use cases, how to undo changes, and how to easily swing
            from one branch to the next. Describes the basics of the Subversion repository,
            how to create, configure, and maintain a repository, and
            the tools you can use to do all of this. Explains how to configure your Subversion server and
            offers different ways to access your repository:
             HTTP , the  svn 
            protocol, and local disk access.  It also covers the details
            of authentication, authorization and anonymous
            access. Explores the Subversion client configuration files,
            the handling of internationalized text, and how to make
            external tools cooperate with Subversion. Describes the internals of Subversion, the
            Subversion filesystem, and the working copy
            administrative areas from a programmer&#39;s point of view.
            It also demonstrates how to use the public APIs to write a
            program that uses Subversion. Explains in great detail every subcommand of
             svn ,  svnadmin , and
             svnlook  with plenty of examples for
            the whole family! For the impatient, a whirlwind explanation of how to
            install Subversion and start using it immediately.  You
            have been warned. Covers the similarities and differences between
            Subversion and CVS, with numerous suggestions on how to
            break all the bad habits you picked up from years of
            using CVS.  Included are descriptions of Subversion
            revision numbers, versioned directories, offline
            operations,  update 
            versus  status , branches, tags, metadata,
            conflict resolution, and authentication. Describes the details of WebDAV and DeltaV and how
            you can configure your Subversion repository to be
            mounted read/write as a DAV share. A copy of the Creative Commons Attribution License,
            under which this book is licensed. This Book Is Free This book started out as bits of documentation written by
      Subversion project developers, which were then coalesced into a
      single work and rewritten.  As such, it has always been under a
      free license (see  ).  In fact,
      the book was written in the public eye, originally as part of
      the Subversion project itself.  This means two things: You will always find the latest version of this book in
          the book&#39;s own Subversion repository. You can make changes to this book and redistribute it
          however you wish it&#39;s under a free license.  Your only
          obligation is to maintain proper attribution to the original
          authors.  Of course, we&#39;d much rather you send feedback and
          patches to the Subversion developer community, instead of 
          distributing your private version of this book. The online home of this book&#39;s development and most of the
      volunteer-driven translation efforts regarding it is
       .  There you can find
      links to the latest releases and tagged versions of the book in
      various formats, as well as instructions for accessing the
      book&#39;s Subversion repository (where its DocBook XML source
      code lives).  Feedback is welcomed encouraged, even.  Please
      submit all comments, complaints, and patches against the book
      sources to  svnbook-dev@red-bean.com . Acknowledgments This book would not be possible (nor very useful) if
      Subversion did not exist.  For that, the authors would like to
      thank Brian Behlendorf and CollabNet for the vision to fund such
      a risky and ambitious new open source project; Jim Blandy for
      the original Subversion name and design we love you, Jim;
      and Karl Fogel for being such a good friend and a great
      community leader, in that order. Oh, and thanks,
      Karl, for being too overworked to write this book
      yourself. Thanks to O&#39;Reilly and the team of professional editors who
      have helped us polish this text at various stages of its
      evolution: Chuck Toporek, Linda Mui, Tatiana Apandi, Mary Brady,
      and Mary Treseler.  Your patience and support has been
      tremendous. Finally, we thank the countless people who contributed to
      this book with informal reviews, suggestions, and patches.  An
      exhaustive listing of those folks&#39; names would be impractical to
      print and maintain here, but may their names live on forever in
      this book&#39;s version control history! Fundamental Concepts This chapter is a short, casual introduction to Subversion and
    its approach to version control.  We begin with a discussion of
    general version control concepts, work our way into the specific
    ideas behind Subversion, and show some simple examples of
    Subversion in use. Even though the examples in this chapter show people sharing
    collections of program source code, keep in mind that Subversion
    can manage any sort of file collection it&#39;s not limited to
    helping computer programmers. Version Control Basics version control systems A version control system (or revision control
      system) is a system that tracks incremental versions (or
      revisions) of files and, in some cases, directories over time.
      Of course, merely tracking the various versions of a user&#39;s (or
      group of users&#39;) files and directories isn&#39;t very interesting in
      itself.  What makes a version control system useful is the fact
      that it allows you to explore the changes which resulted in each
      of those versions and facilitates the arbitrary recall of the
      same. In this section, we&#39;ll introduce some fairly high-level
      version control system components and concepts.  We&#39;ll limit our
      discussion to modern version control systems in today&#39;s
      interconnected world, there is very little point in
      acknowledging version control systems which cannot
      operate across wide-area networks. The Repository repositories repositories filesystem tree version control systems clients At the core of the version control system is a
        repository, which is the central store of that system&#39;s data.
        The repository usually stores information in the form of a
         filesystem tree a hierarchy of
        files and directories.  Any number of
         clients  connect to the repository, and
        then read or write to these files.  By writing data, a client
        makes the information available to others; by reading data,
        the client receives information from others.
          illustrates
        this. A typical client/server system Why is this interesting?  So far, this sounds like the
        definition of a typical file server.  And indeed, the
        repository  is  a kind of file server, but
        it&#39;s not your usual breed.  What makes the repository special
        is that as the files in the repository are changed, the
        repository remembers each version of those files. When a client reads data from the repository, it normally
        sees only the latest version of the filesystem tree.  But what
        makes a version control client interesting is that it also has
        the ability to request previous states of the filesystem from
        the repository.  A version control client can ask historical
        questions such as  What did this directory contain last
        Wednesday?  and  Who was the last person to
        change this file, and what changes did he make? 
        These are the sorts of questions that are at the heart of any
        version control system. The Working Copy working copies A version control system&#39;s value comes from the
        fact that it tracks versions of files and directories, but the
        rest of the software universe doesn&#39;t operate
        on  versions of files and directories .  Most
        software programs understand how to operate only on
        a  single  version of a specific type of
        file.  So how does a version control user interact with an
        abstract and, often, remote repository full of
        multiple versions of various files in a concrete fashion?  How
        does his or her word processing software, presentation
        software, source code editor, web design software, or some
        other program all of which trade in the currency of
        simple data files get access to such files?  The answer
        is found in the version control construct known as
        a  working copy . A working copy is, quite literally, a local copy of a
        particular version of a user&#39;s VCS-managed data upon which
        that user is free to work.  Working copies The
        term  working copy  can be generally applied to
        any one file version&#39;s local instance.  When most folks use
        the term, though, they are referring to a whole directory tree
        containing files and subdirectories managed by the version
        control system.  appear to other software
        just as any other local directory full of files, so those
        programs don&#39;t have to be  version-control-aware 
        in order to read from and write to that data.  The task of
        managing the working copy and communicating changes made to
        its contents to and from the repository falls squarely to the
        version control system&#39;s client software. Versioning Models If the primary mission of a version control system is to
        track the various versions of digital information over time, a
        very close secondary mission in any modern version control
        system is to enable collaborative editing and sharing of that
        data.  But different systems use different strategies to
        achieve this.  It&#39;s important to understand these different
        strategies, for a couple of reasons.  First, it will help you
        compare and contrast existing version control systems, in case
        you encounter other systems similar to Subversion.  Beyond
        that, it will also help you make more effective use of
        Subversion, since Subversion itself supports a couple of
        different ways of working. The problem of file sharing All version control systems have to solve the same
          fundamental problem: how will the system allow users to
          share information, but prevent them from accidentally
          stepping on each other&#39;s feet?  It&#39;s all too easy for users
          to accidentally overwrite each other&#39;s changes in the
          repository. Consider the scenario shown in
           .
          Suppose we have two coworkers, Harry and Sally.  They each
          decide to edit the same repository file at the same time.
          If Harry saves his changes to the repository first, it&#39;s
          possible that (a few moments later) Sally could accidentally
          overwrite them with her own new version of the file.  While
          Harry&#39;s version of the file won&#39;t be lost forever (because
          the system remembers every change), any changes Harry made
           won&#39;t  be present in Sally&#39;s newer version
          of the file, because she never saw Harry&#39;s changes to begin
          with.  Harry&#39;s work is still effectively lost or at
          least missing from the latest version of the file and
          probably by accident.  This is definitely a situation we want
          to avoid! The problem to avoid The lock-modify-unlock solution version control models lock-modify-unlock Many version control systems use a
           lock-modify-unlock  model to address
          the problem of many authors clobbering each other&#39;s work.
          In this model, the repository allows only one person to
          change a file at a time.  This exclusivity policy is managed
          using locks.  Harry must  lock  a file before
          he can begin making changes to it.  If Harry has locked a
          file, Sally cannot also lock it, and therefore cannot make
          any changes to that file.  All she can do is
          wait for Harry to finish his changes, save the file and
          release his lock.  After Harry unlocks the file, Sally
          can take her turn by locking the file.  Then she may read
          the latest version of the file and edit it.
           
          demonstrates this simple solution. The lock-modify-unlock solution The problem with the lock-modify-unlock model is that it&#39;s
          a bit restrictive and often becomes a roadblock for
          users: Locking may cause administrative
              problems. 

              Sometimes Harry will lock a file and then forget about it.
              Meanwhile, because Sally is still waiting to edit the file,
              her hands are tied.  And then Harry goes on vacation.  Now
              Sally has to get an administrator to release Harry&#39;s lock.
              The situation ends up causing a lot of unnecessary delay
              and wasted time. Locking may cause unnecessary
              serialization. 

              What if Harry is editing the beginning of a text file,
              and Sally simply wants to edit the end of the same file?
              These changes don&#39;t overlap at all.  They could easily
              edit the file simultaneously, and no great harm would
              come, assuming the changes were properly merged together.
              There&#39;s no need for them to take turns in this
              situation. Locking may create a false sense of
              security. 

              Suppose Harry locks and edits file A, while Sally
              simultaneously locks and edits file B.  But what if A and
              B depend on one another, and the changes made to each are
              semantically incompatible?  Suddenly A and B don&#39;t work
              together anymore.  The locking system was powerless to
              prevent the problem yet it somehow provided a false
              sense of security.  It&#39;s easy for Harry and Sally to
              imagine that by locking files, each is beginning a safe,
              insulated task, and thus they need not bother discussing
              their incompatible changes early on.  Locking often
              becomes a substitute for real communication. The copy-modify-merge solution version control models copy-modify-merge Subversion, CVS, and many other version control
          systems use a  copy-modify-merge  model
          as an alternative to locking.  In this model, each user&#39;s
          client contacts the project repository and creates a
          personal working copy.  Users then work simultaneously and
          independently, modifying their private copies.  Finally, the
          private copies are merged together into a new, final
          version.  The version control system often assists with the
          merging, but ultimately, a human being is responsible for
          making it happen correctly. out of date Here&#39;s an example.  Say that Harry and Sally
          each create working copies of the same project, copied from
          the repository.  They work concurrently and make changes to
          the same file A within their copies.  Sally saves her
          changes to the repository first.  When Harry attempts to
          save his changes later, the repository informs him that his
          file A is  out of date .  In other
          words, file A in the repository has somehow changed since he
          last copied it.  So Harry asks his client to merge any new
          changes from the repository into his working copy of file A.
          Chances are that Sally&#39;s changes don&#39;t overlap with his own;
          once he has both sets of changes integrated, he saves his
          working copy back to the repository.
            and
            show
          this process. The copy-modify-merge solution The copy-modify-merge solution (continued) conflicts But what if Sally&#39;s changes
           do  overlap with Harry&#39;s changes?  What
          then?  This situation is called a
           conflict , and it&#39;s usually not much
          of a problem.  When Harry asks his client to merge the
          latest repository changes into his working copy, his copy of
          file A is somehow flagged as being in a state of conflict:
          he&#39;ll be able to see both sets of conflicting changes and
          manually choose between them.  Note that software can&#39;t
          automatically resolve conflicts; only humans are capable of
          understanding and making the necessary intelligent choices.
          Once Harry has manually resolved the overlapping
          changes perhaps after a discussion with Sally he
          can safely save the merged file back to the
          repository. The copy-modify-merge model may sound a bit chaotic, but
          in practice, it runs extremely smoothly.  Users can work in
          parallel, never waiting for one another.  When they work on
          the same files, it turns out that most of their concurrent
          changes don&#39;t overlap at all; conflicts are infrequent.  And
          the amount of time it takes to resolve conflicts is usually
          far less than the time lost by a locking system. In the end, it all comes down to one critical factor:
          user communication.  When users communicate poorly, both
          syntactic and semantic conflicts increase.  No system can
          force users to communicate perfectly, and no system can
          detect semantic conflicts.  So there&#39;s no point in being
          lulled into a false sense of security that a locking system
          will somehow prevent conflicts; in practice, locking seems
          to inhibit productivity more than anything else. When Locking Is Necessary While the lock-modify-unlock model is considered
            generally harmful to collaboration, sometimes
            locking is appropriate. The copy-modify-merge model is based on the assumption
            that files are contextually mergeable that is, that the
            majority of the files in the repository are line-based text
            files (such as program source code).  But for files with
            binary formats, such as artwork or sound, it&#39;s often
            impossible to merge conflicting changes.  In these
            situations, it really is necessary for users to take strict
            turns when changing the file.  Without serialized access,
            somebody ends up wasting time on changes that are ultimately
            discarded. While Subversion is primarily a copy-modify-merge
            system, it still recognizes the need to lock an occasional
            file, and thus provides mechanisms for this.  We discuss
            this feature in  . Version Control the Subversion Way We&#39;ve mentioned already that Subversion is a modern,
      network-aware version control system.  As we described in
        (our
      high-level version control overview), a repository serves as the
      core storage mechanism for Subversion&#39;s versioned data, and it&#39;s
      via working copies that users and their software programs
      interact with that data.  In this section, we&#39;ll begin to
      introduce the specific ways in which Subversion implements
      version control. Subversion Repositories Subversion implements the concept of a version control
        repository much as any other modern version control system
        would.  Unlike a working copy, a Subversion repository is an
        abstract entity, able to be operated upon almost exclusively
        by Subversion&#39;s own libraries and tools.  As most of a user&#39;s
        Subversion interactions involve the use of the Subversion
        client and occur in the context of a working copy, we spend
        the majority of this book discussing the Subversion working
        copy and how to manipulate it.  For the finer details of the
        repository, though, check out
         . In Subversion, the client-side object which every user
          of the system has the directory of versioned files,
          along with metadata that enables the system to track them
          and communicate with the server is called
          a  working copy .  Although other version
          control systems use the term  repository  for
          the client-side object, it is both incorrect and a common
          source of confusion to use the term in that way in the
          context of Subversion. Working copies are described later, in
           . Revisions A Subversion client commits (that is, communicates the
        changes made to) any number of files and directories as a
        single atomic transaction.  By atomic transaction, we mean
        simply this: either all of the changes are accepted into the
        repository, or none of them is.  Subversion tries to retain
        this atomicity in the face of program crashes, system crashes,
        network problems, and other users&#39; actions. revisions Each time the repository accepts a commit, this
        creates a new state of the filesystem tree, called a
         revision .  Each revision is assigned a
        unique natural number, one greater than the number assigned to
        the previous revision.  The initial revision of a freshly
        created repository is numbered 0 and consists of nothing but
        an empty root directory. 
        illustrates a nice way to visualize the repository.  Imagine
        an array of revision numbers, starting at 0, stretching from
        left to right.  Each revision number has a filesystem tree
        hanging below it, and each tree is a  snapshot 
        of the way the repository looked after a commit. Tree changes over time Global Revision Numbers revisions global Unlike most version control systems,
          Subversion&#39;s revision numbers apply to  the entire
          repository tree , not individual files.  Each
          revision number selects an entire tree, a particular state
          of the repository after some committed change.  Another way
          to think about it is that revision N represents the state of
          the repository filesystem after the Nth commit.  When
          Subversion users talk about  revision 5 of
           foo.c ,  they really mean
           foo.c  as it appears in revision
          5.  Notice that in general, revisions N and M of a
          file do  not  necessarily differ!  Many
          other version control systems use per-file revision numbers,
          so this concept may seem unusual at first. (Former CVS users
          might want to see   for more
          details.) Addressing the Repository repository URL Subversion client programs use URLs to identify
        versioned files and directories in Subversion repositories.
        For the most part, these URLs use the standard syntax,
        allowing for server names and port numbers to be specified as
        part of the URL. http://svn.example.com/svn/project http://svn.example.com:9834/repos Subversion repository URLs aren&#39;t limited to only
        the  http://  variety.  Because Subversion
        offers several different ways for its clients to communicate
        with its servers, the URLs used to address the repository
        differ subtly depending on which repository access mechanism
        is employed.   
        describes how different URL schemes map to the available
        repository access methods.  For more details about
        Subversion&#39;s server options, see
         . Repository access URLs Schema Access method file:/// Direct repository access (on local disk) http:// Access via WebDAV protocol to Subversion-aware
                Apache server https:// Same as  http:// , but with
                SSL encryption svn:// Access via custom protocol to an
                 svnserve  server svn+ssh:// Same as  svn:// , but through
                an SSH tunnel Subversion&#39;s handling of URLs has some notable nuances.
        For example, URLs containing the  file:// 
        access method (used for local repositories) must, in
        accordance with convention, have either a server name
        of  localhost  or no server name at
        all: file:///var/svn/repos file://localhost/var/svn/repos Also, users of the  file://  scheme on
        Windows platforms will need to use an unofficially
         standard  syntax for accessing repositories
        that are on the same machine, but on a different drive than
        the client&#39;s current working drive.  Either of the two
        following URL path syntaxes will work, where
         X  is the drive on which the repository
        resides: file:///X:/var/svn/repos file:///X|/var/svn/repos Note that a URL uses forward slashes even though the
        native (non-URL) form of a path on Windows uses backslashes.
        Also note that when using
        the  file:/// X |/ 
        form at the command line, you need to quote the URL (wrap it
        in quotation marks) so that the vertical bar character is not
        interpreted as a pipe. You cannot use Subversion&#39;s  file://  URLs
          in a regular web browser the way you can use typical
           file://  URLs.  When you attempt to view
          a  file://  URL in a regular web browser, it
          reads and displays the contents of the file at that location
          by examining the filesystem directly.  However, Subversion&#39;s
          resources exist in a virtual filesystem (see  ), and your browser
          will not understand how to interact with that
          filesystem. The Subversion client will automatically encode URLs as
        necessary, just like a web browser does.  For example, the URL
         http://host/path with space/project/españa 
          which contains both spaces and upper-ASCII characters
          will be automatically interpreted by Subversion as if
        you&#39;d provided
         http://host/path%20with%20space/project/espa%C3%B1a .
        If the URL contains spaces, be sure to place it within
        quotation marks at the command line so that your shell treats
        the whole thing as a single argument to the program. There is one notable exception to Subversion&#39;s handling of
        URLs which also applies to its handling of local paths in many
        contexts, too.  If the final path component of your URL or
        local path contains an at sign ( @ ), you need
        to use a special syntax described in
         in order to make
        Subversion properly address that resource. repository-relative URL caret syntax ^ caret syntax In Subversion 1.6, a new caret ( ^ )
        notation was introduced as a shorthand for  the URL of
        the repository&#39;s root directory .  For example, you can
        use the  ^/tags/bigsandwich/  to refer to the
        URL of the  /tags/bigsandwich  directory in
        the root of the repository.  Such a URL is called a
         repository-relative URL .  Note
        that this URL syntax works only when your current working
        directory is a working copy the command-line client
        knows the repository&#39;s root URL by looking at the working
        copy&#39;s metadata.  Also note that when you wish to refer
        precisely to the root directory of the repository, you must do
        so using  ^/  (with the trailing slash
        character), not merely
         ^ . Subversion Working Copies working copies A Subversion working copy is an ordinary directory
        tree on your local system, containing a collection of files.
        You can edit these files however you wish, and if they&#39;re
        source code files, you can compile your program from them in
        the usual way.  Your working copy is your own private work
        area: Subversion will never incorporate other people&#39;s
        changes, nor make your own changes available to others, until
        you explicitly tell it to do so.  You can even have multiple
        working copies of the same project. After you&#39;ve made some changes to the files in your
        working copy and verified that they work properly, Subversion
        provides you with commands to  publish  your
        changes (by writing to the repository), thereby making them
        available to the other people working with you on your
        project.  If other people publish their own changes,
        Subversion provides you with commands to merge those changes
        into your own working copy (by reading from the repository).
        Notice that the central repository is the broker for
        everybody&#39;s changes in Subversion changes aren&#39;t passed
        directly from working copy to working copy in the typical
        workflow. administrative directory .svn administrative directory A working copy also contains some extra files,
        created and maintained by Subversion, to help it carry out
        these commands.  In particular, each working copy contains a
        subdirectory named  .svn , also known as
        the working copy&#39;s  administrative
        directory .  The files in the administrative
        directory help Subversion recognize which of your versioned
        files contain unpublished changes, and which files are out of
        date with respect to others&#39; work. Prior to version 1.7, Subversion
          maintained  .svn  administrative
          subdirectories in  every  versioned
          directory of your working copy.  Subversion 1.7 offers a
          completely new approach to how working copy metadata is
          stored and maintained, and chief among the visible changes
          to this approach is that each working copy now has only
          one  .svn  subdirectory which is an
          immediate child of the root of that working copy. While  .svn  is the de facto name of
          the Subversion administrative directory, Windows users may
          run into problems with the ASP.NET Web application framework
          disallowing access to directories whose names begin with a
          dot ( . ).  As a special consideration to
          users in such situations, Subversion will instead use
           _svn  as the administrative directory name
          if it finds a variable
          named  SVN_ASP_DOT_NET_HACK  in its
          operating environment.  Throughout this book, any reference
          you find to  .svn  applies also
          to  _svn  when this  ASP.NET
          hack  is in use. How the working copy works For each file in a working directory, Subversion records
          (among other things) two essential pieces of information: revisions working What revision your working file is based on (this is
              called the file&#39;s  working
              revision ) A timestamp recording when the local copy was last
              updated by the repository Given this information, by talking to the repository,
          Subversion can tell which of the following four states a
          working file is in: Unchanged, and current The file is unchanged in the working directory, and
                no changes to that file have been committed to the
                repository since its working revision.  An  svn
                commit  of the file will do nothing, and an
                 svn update  of the file will do
                nothing. Locally changed, and current The file has been changed in the working directory,
                and no changes to that file have been committed to the
                repository since you last updated.  There are local
                changes that have not been committed to the repository;
                thus an  svn commit  of the file will
                succeed in publishing your changes, and an  svn
                update  of the file will do nothing. Unchanged, and out of date The file has not been changed in the working
                directory, but it has been changed in the repository.
                The file should eventually be updated in order to make
                it current with the latest public revision.
                An  svn commit  of the file will do
                nothing, and an
                 svn update  of the file will fold the
                latest changes into your working copy. Locally changed, and out of date The file has been changed both in the working
                directory and in the repository.  An  svn
                commit  of the file will fail with an
                 out-of-date  error.  The file should be
                updated first; an  svn update  command
                will attempt to merge the public changes with the local
                changes.  If Subversion can&#39;t complete the merge in a
                plausible way automatically, it leaves it to the user to
                resolve the conflict. Fundamental working copy interactions A typical Subversion repository often holds the files (or
          source code) for several projects; usually, each project is a
          subdirectory in the repository&#39;s filesystem tree.  In this
          arrangement, a user&#39;s working copy will usually correspond to
          a particular subtree of the repository. For example, suppose you have a repository that contains
          two software projects,  paint  and
           calc .  Each project lives in its own
          top-level subdirectory, as shown in  . The repository&#39;s filesystem svn subcommands checkout checking out working copies creating checking out To get a working copy, you must  check
          out  some subtree of the repository.  (The term
           check out  may sound like it has something to do
          with locking or reserving resources, but it doesn&#39;t; it simply
          creates a working copy of the project for you.)  For example,
          if you check out  /calc , you will get a
          working copy like this: 
$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 56.
$ ls -A calc
Makefile  button.c integer.c .svn/
$
 The list of letter  A s in the left
          margin indicates that Subversion is adding a number of items
          to your working copy.  You now have a personal copy of the
          repository&#39;s  /calc  directory, with one
          additional entry .svn which
          holds the extra information needed by Subversion, as mentioned
          earlier. committing checking in committing Suppose you make changes
          to  button.c .  Since
          the  .svn  directory remembers the file&#39;s
          original modification date and contents, Subversion can tell
          that you&#39;ve changed the file.  However, Subversion does not
          make your changes public until you explicitly tell it to.
          The act of publishing your changes is more commonly known as
           committing  (or  checking
          in ) changes to the repository. svn subcommands commit committing To publish your changes, you can use
          Subversion&#39;s  svn commit  command: 
$ svn commit button.c -m &quot;Fixed a typo in button.c.&quot;
Sending        button.c
Transmitting file data .
Committed revision 57.
$
 Now your changes to  button.c  have
          been committed to the repository, with a note describing your
          change (namely, that you fixed a typo).  If another user
          checks out a working copy of  /calc , she
          will see your changes in the latest version of the
          file. Suppose you have a collaborator, Sally, who checked out a
          working copy of  /calc  at the same time
          you did.  When you commit your change to
           button.c , Sally&#39;s working copy is left
          unchanged; Subversion modifies working copies only at the
          user&#39;s request. svn subcommands update updating working copies updating updating To bring her project up to date, Sally can ask
          Subversion to  update  her working
          copy, by using the  svn update  command.
          This will incorporate your changes into her working copy, as
          well as any others that have been committed since she
          checked it out. 
$ pwd
/home/sally/calc
$ ls -A
Makefile button.c integer.c .svn/
$ svn update
Updating &#39;.&#39;:
U    button.c
Updated to revision 57.
$
 The output from the  svn update  command
          indicates that Subversion updated the contents of
           button.c .  Note that Sally didn&#39;t need to
          specify which files to update; Subversion uses the information
          in the  .svn  directory as well as further
          information in the repository, to decide which files need to
          be brought up to date. Mixed-revision working copies working copies mixed-revision As a general principle, Subversion tries to be
          as flexible as possible.  One special kind of flexibility is
          the ability to have a working copy containing files and
          directories with a mix of different working revision
          numbers.  Subversion working copies do not always correspond
          to any single revision in the repository; they may contain
          files from several different revisions.  For example,
          suppose you check out a working copy from a repository whose
          most recent revision is 4: 
calc/
   Makefile:4
   integer.c:4
   button.c:4
 At the moment, this working directory corresponds exactly
          to revision 4 in the repository.  However, suppose you make a
          change to  button.c , and commit that
          change.  Assuming no other commits have taken place, your
          commit will create revision 5 of the repository, and your
          working copy will now look like this: 
calc/
   Makefile:4
   integer.c:4
   button.c:5
 Suppose that, at this point, Sally commits a change to
           integer.c , creating revision 6.  If you
          use  svn update  to bring your working copy
          up to date, it will look like this: 
calc/
   Makefile:6
   integer.c:6
   button.c:6
 Sally&#39;s change to  integer.c  will
          appear in your working copy, and your change will still be
          present in  button.c .  In this example,
          the text of  Makefile  is identical in
          revisions 4, 5, and 6, but Subversion will mark your working
          copy of  Makefile  with revision 6 to
          indicate that it is still current.  So, after you do a clean
          update at the top of your working copy, it will generally
          correspond to exactly one revision in the repository. Updates and commits are separate One of the fundamental rules of Subversion is that
            a  push  action does not cause
            a  pull  nor vice versa.  Just
            because you&#39;re ready to submit new changes to the repository
            doesn&#39;t mean you&#39;re ready to receive changes that others
            have checked in.  And if you have new changes still in progress,
             svn update  should gracefully merge
            repository changes into your own, rather than forcing you to
            publish them. The main side effect of this rule is that it means a
            working copy has to do extra bookkeeping to track mixed
            revisions as well as be tolerant of the mixture.  It&#39;s made
            more complicated by the fact that directories themselves are
            versioned. For example, suppose you have a working copy entirely
            at revision 10, while others have been committing their
            changes so that the youngest revision in the repository is
            now revision 14.  You edit the file
             foo.html  and then perform
            an  svn commit , which creates revision
            15 in the repository.  After the commit succeeds, many new
            users would expect the working copy to be entirely at
            revision 15, but that&#39;s not the case!  Any number of
            changes might have happened in the repository between
            revisions 10 and 15.  The client knows nothing of those
            changes in the repository, since you haven&#39;t yet
            run  svn update , and  svn
            commit  doesn&#39;t pull down new changes.  If, on
            the other hand,  svn commit  were to
            automatically download the newest changes, it would be
            possible to set the entire working copy to revision
            15 but then we&#39;d be breaking the fundamental rule
            of  push  and  pull  remaining
            separate actions.  Therefore, the only safe thing the
            Subversion client can do is mark the one
            file foo.html as being at
            revision 15.  The rest of the working copy remains at
            revision 10.  Only by running  svn
            update  can the latest changes be downloaded and
            the whole working copy be marked as revision 15. Mixed revisions are normal The fact is,  every time  you run
             svn commit  your working copy ends up
            with some mixture of revisions.  The things you just
            committed are marked as having larger working revisions than
            everything else.  After several commits (with no updates
            in between), your working copy will contain a whole mixture
            of revisions.  Even if you&#39;re the only person using the
            repository, you will still see this phenomenon.  To examine
            your mixture of working revisions, use the  svn
            status  command with the  --verbose 
            ( -v ) option (see
              for more
            information). Often, new users are completely unaware that their
            working copy contains mixed revisions.  This can be
            confusing, because many client commands are sensitive to the
            working revision of the item they&#39;re examining.  For
            example, the  svn log  command is used to
            display the history of changes to a file or directory (see
             ).  When the user
            invokes this command on a working copy object, he expects
            to see the entire history of the object.  But if the
            object&#39;s working revision is quite old (often because
             svn update  hasn&#39;t been run in a long
            time), the history of the  older 
            version of the object is shown. Mixed revisions are useful backdating If your project is sufficiently complex, you&#39;ll
            discover that it&#39;s sometimes nice to
            forcibly  backdate  (or update to a
            revision older than the one you already have) portions of
            your working copy to an earlier revision; you&#39;ll learn how
            to do that in  .  Perhaps you&#39;d
            like to test an earlier version of a submodule contained
            in a subdirectory, or perhaps you&#39;d like to figure out
            when a bug first came into existence in a specific file.
            This is the  time machine  aspect of a
            version control system the feature that allows you
            to move any portion of your working copy forward and
            backward in history. Mixed revisions have limitations However you make use of mixed revisions in your working
            copy, there are limitations to this flexibility. First, you cannot commit the deletion of a file or
            directory that isn&#39;t fully up to date.  If a newer version
            of the item exists in the repository, your attempt to delete
            will be rejected to prevent you from accidentally
            destroying changes you&#39;ve not yet seen. Second, you cannot commit a metadata change to a
            directory unless it&#39;s fully up to date.  You&#39;ll learn about
            attaching  properties  to items in  .  A directory&#39;s working revision
            defines a specific set of entries and properties, and thus
            committing a property change to an out-of-date directory may
            destroy properties you&#39;ve not yet seen. Finally, beginning in Subversion 1.7, you cannot by
            default use a mixed-revision working copy as the target of
            a merge operation.  (This new requirement was introduced
            to prevent common problems which stem from doing so.) Summary We covered a number of fundamental Subversion concepts in
      this chapter: We introduced the notions of the central repository,
          the client working copy, and the array of repository
          revision trees. We saw some simple examples of how two collaborators
          can use Subversion to publish and receive changes from one
          another, using the  copy-modify-merge 
          model. We talked a bit about the way Subversion tracks and
          manages information in a working copy. At this point, you should have a good idea of how Subversion
      works in the most general sense.  Armed with this knowledge, you
      should now be ready to move into the next chapter, which is a
      detailed tour of Subversion&#39;s commands and features. Basic Usage Theory is useful, but its application is just plain fun.
    Let&#39;s move now into the details of using Subversion.  By the time
    you reach the end of this chapter, you will be able to perform all
    the tasks you need to use Subversion in a normal day&#39;s work.
    You&#39;ll start with getting your files into Subversion, followed by
    an initial checkout of your code.  We&#39;ll then walk you through
    making changes and examining those changes.  You&#39;ll also see how
    to bring changes made by others into your working copy, examine
    them, and work through any conflicts that might arise. This chapter will not provide exhaustive coverage
    of all of Subversion&#39;s commands rather, it&#39;s a conversational
    introduction to the most common Subversion tasks that you&#39;ll
    encounter.  This chapter assumes that you&#39;ve read and understood
      and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see  . Also, this chapter assumes that the reader is seeking
    information about how to interact in a basic fashion with an
    existing Subversion repository.  No repository means no working
    copy; no working copy means not much of interest in this chapter.
    There are many Internet sites which offer free or inexpensive
    Subversion repository hosting services.  Or, if you&#39;d prefer to
    set up and administer your own repositories, check out
     .  But don&#39;t expect the
    examples in this chapter to work without the user having access
    to a Subversion repository. Finally, any Subversion operation that contacts the repository
    over a network may potentially require that the user authenticate.
    For the sake of simplicity, our examples throughout this chapter
    avoid demonstrating and discussing authentication.  Be aware that
    if you hope to apply the knowledge herein to an existing,
    real-world Subversion instance, you&#39;ll probably be forced to
    provide at least a username and password to the server.  See
      for a detailed
    description of Subversion&#39;s handling of authentication and client
    credentials. Help! svn subcommands help It goes without saying that this book exists to be a source
      of information and assistance for Subversion users new and old.
      Conveniently, though, the Subversion command-line is
      self-documenting, alleviating the need to grab a book off the
      shelf (wooden, virtual, or otherwise).  The  svn
      help  command is your gateway to that built-in
      documentation: 
$ svn help
Subversion command-line client, version 1.7.0.
Type &#39;svn help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svn --version&#39; to see the program version and RA modules
  or &#39;svn --version --quiet&#39; to see just the version number.

Most subcommands take file and/or directory arguments, recursing
on the directories.  If no arguments are supplied to such a
command, it recurses on the current directory (inclusive) by default.

Available subcommands:
   add
   blame (praise, annotate, ann)
   cat
 
 As described in the previous output, you can ask for help on
      a particular subcommand by running  svn help
       SUBCOMMAND .  Subversion
      will respond with the full usage message for that subcommand,
      including its syntax, options, and behavior: 
$ svn help help
help (?, h): Describe the usage of this program or its subcommands.
usage: help [SUBCOMMAND...]

Global options:
  --username ARG           : specify a username ARG
  --password ARG           : specify a password ARG
 
 Options and Switches and Flags, Oh My! svn options The Subversion command-line client has numerous command
        modifiers.  Some folks refer to such things
        as  switches  or  flags in
        this book, we&#39;ll call them  options .  You&#39;ll
        find the options supported by a given  svn 
        subcommand, plus a set of options which are globally supported
        by all subcommands, listed near the bottom of the built-in
        usage message for that subcommand. Subversion&#39;s options have two distinct forms:  short
        options are a single hyphen followed by a single letter, and
        long options consist of two hyphens followed by several
        letters and hyphens (e.g.,  -s 
        and  --this-is-a-long-option , respectively).
        Every option has at least one long format.  Some, such as
        the  --changelist  option, feature an
        abbreviated long-format alias ( --cl , in this
        case).  Only certain options generally the most-used
        ones have an additional short format.  To maintain
        clarity in this book, we usually use the long form in code
        examples, but when describing options, if there&#39;s a short
        form, we&#39;ll provide the long form (to improve clarity) and the
        short form (to make it easier to remember).  Use the form
        you&#39;re more comfortable with when executing your own
        Subversion commands. Many Unix-based distributions of Subversion include manual
      pages of the sort that can be invoked using
      the  man  program, but those tend to carry only
      pointers to other sources of real help, such as the project&#39;s
      website and to the website which hosts this book.  Also, several
      companies offer Subversion help and support, too, usually via a
      mixture of web-based discussion forums and fee-based consulting.
      And of course, the Internet holds a decade&#39;s worth of
      Subversion-related discussions just begging to be located by
      your favorite search engine.  Subversion help is never too far
      away. Getting Data into Your Repository You can get new files into your Subversion
      repository in two ways:  svn import  and  svn
      add .  We&#39;ll discuss  svn import  now
      and will discuss  svn add  later in this
      chapter when we review a typical day with Subversion. Importing Files and Directories svn subcommands import The  svn import  command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.   svn
        import  doesn&#39;t require a working copy, and your files
        are immediately committed to the repository.  You typically
        use this when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example: 
$ svn import /path/to/mytree \
             http://svn.example.com/svn/repo/some/project \
             -m &quot;Initial import&quot;
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
$
 The previous example copied the contents of the local
        directory  mytree  into the directory
         some/project  in the repository.  Note
        that you didn&#39;t have to create that new directory
        first svn import  does that for you.
        Immediately after the commit, you can see your data in the
        repository: 
$ svn list http://svn.example.com/svn/repo/some/project
bar.c
foo.c
subdir/
$
 Note that after the import is finished, the original local
        directory is  not  converted into a working
        copy.  To begin working on that data in a versioned fashion,
        you still need to create a fresh working copy of that
        tree. Recommended Repository Layout Subversion provides the ultimate flexibility in terms of
        how you arrange your data.  Because it simply versions
        directories and files, and because it ascribes no particular
        meaning to any of those objects, you may arrange the data in
        your repository in any way that you choose.  Unfortunately,
        this flexibility also means that it&#39;s easy to find
        yourself  lost without a roadmap  as you attempt
        to navigate different Subversion repositories which may carry
        completely different and unpredictable arrangements of the
        data within them. trunk tags branches project root To counteract this confusion, we recommend that
        you follow a repository layout convention (established long
        ago, in the nascency of the Subversion project itself) in
        which a handful of strategically named Subversion repository
        directories convey valuable meaning about the data they hold.
        Most projects have a recognizable  main line ,
        or  trunk , of development;
        some  branches , which are divergent
        copies of development lines; and
        some  tags , which are named, stable
        snapshots of a particular line of development.  So we first
        recommend that each project have a
        recognizable  project root  in the
        repository, a directory under which all of the versioned
        information for that project and only that
        project lives.  Secondly, we suggest that each project
        root contain a  trunk  subdirectory for the
        main development line, a
         branches  subdirectory in which specific
        branches (or collections of branches) will be created, and
        a  tags  subdirectory in which specific
        tags (or collections of tags) will be created.  Of course, if
        a repository houses only a single project, the root of the
        repository can serve as the project root, too. Here are some examples: 
$ svn list file:///var/svn/single-project-repo
trunk/
branches/
tags/
$ svn list file:///var/svn/multi-project-repo
project-A/
project-B/
$ svn list file:///var/svn/multi-project-repo/project-A
trunk/
branches/
tags/
$
 We talk much more about tags and branches in
         .  For details and some
        advice on how to set up repositories when you have multiple
        projects, see  .
        Finally, we discuss project roots more in
         . What&#39;s In a Name? Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
         
        tells you how to give Subversion a hint that
         textual  operations don&#39;t make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores. Subversion internally handles certain bits of
        data for example, property names, pathnames, and log
        messages as UTF-8-encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today). In WebDAV exchanges and older versions of some of
        Subversion&#39;s administrative files, paths are used as XML
        attribute values, and property names in XML tag names.  This
        means that pathnames can contain only legal XML (1.0)
        characters, and properties are further limited to ASCII
        characters.  Subversion also prohibits  TAB ,
         CR , and  LF  characters in
        path names to prevent paths from being broken up in diffs or
        in the output of commands such as  svn log 
        or  svn status . While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8 and you don&#39;t use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help to create
         legally correct  versions for internal
        use it will automatically escape illegal
        path characters as needed in URLs that you type. Of course, when it comes to choosing valid path names,
          Subversion isn&#39;t the only limiting factor.  Teams using
          multiple operating systems need to consider the limitations
          placed on path names by those operating systems, too.  For
          example, while Windows disallows the use of colon characters
          in file names, a user on a Linux system can very easily add
          such a file to version control, resulting in a dataset that
          can no longer be checked out on Windows.  Adding multiple
          files to a directory whose names differ only in their letter
          casing will likewise cause problems for users checking out
          working copies onto case-insensitive filesystems.  So, some
          broad awareness of the various limitations introduced by
          different operating systems and filesystems, then, is
          recommended. Creating a Working Copy svn subcommands checkout Most of the time, you will start using a Subversion
      repository by performing a  checkout  of
      your project.  Checking out a directory from a repository
      creates a working copy of that directory on your local machine.
      Unless otherwise specified, this copy contains the youngest
      (that is, most recently created or modified) versions of the
      directory and its children found in the Subversion
      repository: 
$ svn checkout http://svn.example.com/svn/repo/trunk
A    trunk/README
A    trunk/INSTALL
A    trunk/src/main.c
A    trunk/src/header.h
 
Checked out revision 8810.
$
 Although the preceding example checks out the trunk
      directory, you can just as easily check out a deeper
      subdirectory of a repository by specifying that subdirectory&#39;s
      URL as the checkout URL: 
$ svn checkout http://svn.example.com/svn/repo/trunk/src
A    src/main.c
A    src/header.h
A    src/lib/helpers.c
 
Checked out revision 8810.
$
 Since Subversion uses a copy-modify-merge model instead of
      lock-modify-unlock (see  ),
      you can immediately make changes to the files and directories in
      your working copy.  Your working copy is just like any other
      collection of files and directories on your system.  You can
      edit the files inside it, rename it, even delete the entire
      working copy and forget about it. While your working copy is  just like any other
        collection of files and directories on your system, 
        you can edit files at will, but you must tell Subversion
        about  everything else  that you do.  For
        example, if you want to copy or move an item in a working
        copy, you should use  svn copy  or
         svn move  instead of the copy and move
        commands provided by your operating system.  We&#39;ll talk more
        about them later in this chapter. Unless you&#39;re ready to commit the addition of a new file or
      directory or changes to existing ones, there&#39;s no need to
      further notify the Subversion server that you&#39;ve done
      anything. What Is This .svn Directory? The topmost directory of a working copy and prior to
        version 1.7, every versioned subdirectory
        thereof contains a special administrative subdirectory
        named  .svn .  Usually, your operating
        system&#39;s directory listing commands won&#39;t show this
        subdirectory, but it is nevertheless an important directory.
        Whatever you do, don&#39;t delete or change anything in the
        administrative area!  Subversion uses that directory and its
        contents to manage your working copy. Notice that in the previous pair of examples, Subversion
      chose to create a working copy in a directory named for the
      final component of the checkout URL.  This occurs only as a
      convenience to the user when the checkout URL is the only bit of
      information provided to the  svn checkout 
      command.  Subversion&#39;s command-line client gives you additional
      flexibility, though, allowing you to optionally specify the
      local directory name that Subversion should use for the working
      copy it creates.  For example: 
$ svn checkout http://svn.example.com/svn/repo/trunk my-working-copy
A    my-working-copy/README
A    my-working-copy/INSTALL
A    my-working-copy/src/main.c
A    my-working-copy/src/header.h
 
Checked out revision 8810.
$
 If the local directory you specify doesn&#39;t yet
      exist, that&#39;s okay svn checkout  will
      create it for you. Basic Work Cycle Subversion has numerous features, options, bells, and
      whistles, but on a day-to-day basis, odds are that you will use
      only a few of them.  In this section, we&#39;ll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day&#39;s work. The typical work cycle looks like this: Update your working copy.  This
          involves the use of the  svn update 
          command. Make your changes.  The most common
          changes that you&#39;ll make are edits to the contents of your
          existing files.  But sometimes you need to add, remove, copy
          and move files and directories the  svn
          add ,  svn delete ,  svn
          copy , and  svn move  commands
          handle those sorts of structural changes within the working
          copy. Review your changes. 
          The  svn status  and  svn
          diff  commands are critical to reviewing the
          changes you&#39;ve made in your working copy. Fix your mistakes.   Nobody&#39;s
          perfect, so as you review your changes, you may spot
          something that&#39;s not quite right.  Sometimes the easiest way
          to fix a mistake is start all over again from scratch.
          The  svn revert  command restores a file
          or directory to its unmodified state. Resolve any conflicts (merge others&#39;
          changes).   In the time it takes you to make and
          review your changes, others might have made and published
          changes, too.  You&#39;ll want to integrate their changes into
          your working copy to avoid the potential out-of-dateness
          scenarios when you attempt to publish your own.  Again,
          the  svn update  command is the way to do
          this.  If this results in local conflicts, you&#39;ll need to
          resolve those using the  svn resolve 
          command. Publish (commit) your changes. 
          The  svn commit  command transmits your
          changes to the repository where, if they are accepted, they
          create the newest versions of all the things you modified.
          Now others can see your work, too! Update Your Working Copy svn subcommands update When working on a project that is being modified via
        multiple working copies, you&#39;ll want to update your working
        copy to receive any changes committed from other working
        copies since your last update.  These might be changes that
        other members of your project team have made, or they might
        simply be changes you&#39;ve made yourself from a different
        computer.  To protect your data, Subversion won&#39;t
        allow you commit new changes to out-of-date files and
        directories, so it&#39;s best to have the latest versions
        of all your project&#39;s files and directories before making new
        changes of your own. Use  svn update  to bring your working
        copy into sync with the latest revision in the
        repository: 
$ svn update
Updating &#39;.&#39;:
U    foo.c
U    bar.c
Updated to revision 2.
$
 In this case, it appears that someone checked in
        modifications to both  foo.c 
        and  bar.c  since the last time you
        updated, and Subversion has updated your working copy to
        include those changes. When the server sends changes to your working copy via
         svn update , a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up to date.  To find out what these
        letters mean, run  svn help update  or
        see   in
         . Make Your Changes  file changes tree changes Now you can get to work and make changes in your
        working copy.  You can make two kinds of changes to your
        working copy:  file changes 
        and  tree changes .  You don&#39;t need to
        tell Subversion that you intend to change a file; just make
        your changes using your text editor, word processor, graphics
        program, or whatever tool you would normally use.  Subversion
        automatically detects which files have been changed, and in
        addition, it handles binary files just as easily as it handles
        text files and just as efficiently, too.  Tree changes
        are different, and involve changes to a directory&#39;s structure.
        Such changes include adding and removing files, renaming files
        or directories, and copying files or directories to new
        locations.  For tree changes, you use Subversion operations
        to  schedule  files and directories for removal,
        addition, copying, or moving.  These changes may take place
        immediately in your working copy, but no additions or removals
        will happen in the repository until you commit them. Versioning Symbolic Links svmlink svmbolic link symlink On non-Windows platforms, Subversion is able to
          version files of the special type  symbolic
          link  (or  symlink ).  A symlink is
          a file that acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by performing
          operations on the symlink itself. When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
           points.   When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn&#39;t in any way limit the
          usability of working copies on systems such as Windows that
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which the original symlink pointed.  While that file
          can&#39;t be used as a symlink on a Windows system, it also
          won&#39;t prevent Windows users from performing their other
          Subversion-related activities. Here is an overview of the five Subversion subcommands
        that you&#39;ll use most often to make tree changes: svn add FOO svn subcommands add Use this to schedule the file, directory, or
              symbolic link  FOO  to be added to
              the repository.  When you next
              commit,  FOO  will become a child of
              its parent directory.  Note that if
               FOO  is a directory, everything
              underneath  FOO  will be scheduled
              for addition.  If you want only to add
               FOO  itself, pass the
               --depth=empty  option. svn delete FOO svn subcommands delete Use this to schedule the file, directory, or
              symbolic link  FOO  to be deleted
              from the repository.  If  FOO  is a
              file or link, it is immediately deleted from your
              working copy.  If  FOO  is a
              directory, it is not deleted, but Subversion schedules
              it for deletion.  When you commit your
              changes,  FOO  will be entirely
              removed from your working copy and the
              repository. Of course, nothing is ever
              totally deleted from the repository just from
              its  HEAD  revision.  You may continue
              to access the deleted item in previous revisions.
              Should you desire to resurrect the item so that it is
              again present in  HEAD , see
               . svn copy FOO BAR svn subcommands copy Create a new item  BAR  as a
              duplicate of  FOO  and automatically
              schedule  BAR  for addition.  When
               BAR  is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from  FOO ).
               svn copy  does not create intermediate
              directories unless you pass the
               --parents  option. svn move FOO BAR svn subcommands move This command is exactly the same as running
               svn copy FOO BAR; svn delete FOO .
              That is,  BAR  is scheduled for
              addition as a copy of  FOO , and
               FOO  is scheduled for removal.
               svn move  does not create intermediate
              directories unless you pass the
               --parents  option. svn mkdir FOO svn subcommands mkdir This command is exactly the same as running
               mkdir FOO; svn add FOO .  That is,
              a new directory named  FOO  is
              created and scheduled for addition. Changing the Repository Without a Working Copy Subversion  does  offer ways to
          immediately commit tree changes to the repository without an
          explicit commit action.  In particular, specific uses
          of  svn mkdir ,  svn
          copy ,  svn move , and
           svn delete  can operate directly on
          repository URLs as well as on working copy paths.  Of
          course, as previously mentioned,  svn
          import  always makes direct changes to the
          repository. There are pros and cons to performing URL-based
          operations.  One obvious advantage to doing so is speed:
          sometimes, checking out a working copy that you don&#39;t
          already have solely to perform some seemingly simple action
          is an overbearing cost.  A disadvantage is that you are
          generally limited to a single, or single type of, operation
          at a time when operating directly on URLs.  Finally, the
          primary advantage of a working copy is in its utility as a
          sort of  staging area  for changes.  You can
          make sure that the changes you are about to commit make
          sense in the larger scope of your project before committing
          them.  And, of course, these staged changes can be as
          complex or as a simple as they need to be, yet result in but
          a single new revision when committed. Review Your Changes log message Once you&#39;ve finished making changes, you need to commit
        them to the repository, but before you do so, it&#39;s usually a
        good idea to take a look at exactly what you&#39;ve changed.  By
        examining your changes before you commit, you can compose a
        more accurate  log message  (a
        human-readable description of the committed changes stored
        alongside those changes in the repository).  You may also
        discover that you&#39;ve inadvertently changed a file, and that
        you need to undo that change before committing.  Additionally,
        this is a good opportunity to review and scrutinize changes
        before publishing them.  You can see an overview of the
        changes you&#39;ve made by using the  svn status 
        command, and you can dig into the details of those changes by
        using the  svn diff  command. Look Ma! No Network! You can use the commands  svn status ,
           svn diff , and  svn
          revert  without any network access even if your
          repository  is  across the network.  This
          makes it easy to manage and review your changes-in-progress
          when you are working offline or are otherwise unable to
          contact your repository over the network. text-base delta Subversion does this by keeping private caches
          of pristine, unmodified versions of each versioned file
          inside its working copy administrative area (or prior to
          version 1.7, potentially multiple administrative areas).
          This allows Subversion to report and
          revert local modifications to those
          files  without network access .  This
          cache (called the
           text-base ) also allows Subversion to
          send the user&#39;s local modifications during a commit to the
          server as a compressed  delta  (or
           difference ) against the pristine version.
          Having this cache is a tremendous benefit even if you
          have a fast Internet connection, it&#39;s generally much faster
          to send only a file&#39;s changes rather than the whole file to
          the server. See an overview of your changes svn subcommands status To get an overview of your changes, use the
           svn status  command.  You&#39;ll probably use
           svn status  more than any other Subversion
          command. Because the  cvs status  command&#39;s
            output was so noisy, and because  cvs
            update  not only performs an update, but also
            reports the status of your local changes, most CVS users
            have grown accustomed to using  cvs
            update  to report their changes.  In Subversion,
            the update and status reporting facilities are completely
            separate.  See
              for more
            details. If you run  svn status  at the top
          of your working copy with no additional arguments, it will
          detect and report all file and tree changes you&#39;ve
          made. 
$ svn status
?       scratch.c
A       stuff/loot
A       stuff/loot/new.c
D       stuff/old.c
M       bar.c
$
 In its default output mode,  svn
          status  prints seven columns of characters,
          followed by several whitespace characters, followed by a
          file or directory name.  The first column tells the status
          of a file or directory and/or its contents.  Some of the
          most common codes that  svn status 
          displays are: ?      item The file, directory, or symbolic link
                 item  is not under version
                control. A      item The file, directory, or symbolic link
                 item  has been scheduled for
                addition into the repository. C      item The file  item  is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy (and weren&#39;t
                resolved during the update).  You must resolve this
                conflict before committing your changes to the
                repository. D      item The file, directory, or symbolic link
                 item  has been scheduled for
                deletion from the repository. M      item The contents of the file  item 
                have been modified. If you pass a specific path to  svn
          status , you get information about that item
          alone: 
$ svn status stuff/fish.c
D       stuff/fish.c
 svn status  also has a
           --verbose  ( -v ) option,
          which will show you the status of  every 
          item in your working copy, even if it has not been
          changed: 
$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
 This is the  long form  output of
           svn status .  The letters in the first
          column mean the same as before, but the second column shows
          the working revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it. None of the prior invocations to  svn
          status  contact the repository they merely
          report what is known about the working copy items based on
          the records stored in the working copy administrative area
          and on the timestamps and contents of modified files.  But
          sometimes it is useful to see which of the items in your
          working copy have been modified in the repository since the
          last time you updated your working copy.  For
          this,  svn status  offers the
           --show-updates  ( -u )
          option, which contacts the repository and adds information
          about items that are out of date: 
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
 Notice in the previous example the two asterisks: if you
          were to run  svn update  at this point,
          you would receive changes to  README 
          and  trout.c .  This tells you some very
          useful information because one of those items is also
          one that you have locally modified (the
          file  README ), you&#39;ll need to update and
          get the server&#39;s changes for that file before you commit, or
          the repository will reject your commit for being out of
          date.  We discuss this in more detail later. svn status  can display much more
          information about the files and directories in your working
          copy than we&#39;ve shown here for an exhaustive
          description of  svn status  and its output,
          run  svn help status  or see
            in
           . Examine the details of your local modifications svn subcommands diff differences unified diff Another way to examine your changes is with the
           svn diff  command, which displays
          differences in file content.  When you run  svn
          diff  at the top of your working copy with no
          arguments, Subversion will print the changes you&#39;ve made to
          human-readable files in your working copy.  It displays
          those changes in  unified diff  format,
          a format which describes changes as  hunks 
          (or  snippets ) of a file&#39;s content where each
          line of text is prefixed with a single-character code: a
          space, which means the line was unchanged; a minus sign
          ( - ), which means the line was removed
          from the file; or a plus sign ( + ), which
          means the line was added to the file.  In the context
          of  svn diff , those minus-sign- and
          plus-sign-prefixed lines show how the lines looked before
          and after your modifications, respectively. Here&#39;s an example: 
$ svn diff
Index: bar.c
===================================================================
--- bar.c    (revision 3)
+++ bar.c    (working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf(&quot;Sixty-four slices of American Cheese...\n&quot;);
+  printf(&quot;Sixty-five slices of American Cheese...\n&quot;);
 return 0;
 }

Index: README
===================================================================
--- README    (revision 3)
+++ README    (working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c    (revision 1)
+++ stuff/fish.c    (working copy)
-Welcome to the file known as &#39;fish&#39;.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h    (revision 8)
+++ stuff/things/bloo.h    (working copy)
+Here is a new file to describe
+things about bloo.
 svn subcommands patch patches patch file patches The  svn diff  command produces this
          output by comparing your working files against its pristine
          text-base.  Files scheduled for addition are displayed as
          files in which every line was added; files scheduled for
          deletion are displayed as if every line was removed from
          those files.  The output from  svn diff  is
          somewhat compatible with the  patch 
          program more so with the  svn patch 
          subcommand introduced in Subversion 1.7.  Patch processing
          commands such as these read and apply  patch
          files  (or  patches ), which are
          files that describe differences made to one or more files.
          Because of this, you can share the changes you&#39;ve made in
          your working copy with someone else without first committing
          those changes by creating a patch file from the redirected
          output of  svn diff : 
$ svn diff &gt; patchfile
$
 Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
           --diff-cmd  and pass any additional flags
          that it needs via the  --extensions 
          ( -x ) option.  For example, you might want
          Subversion to defer its difference calculation and display
          to the GNU  diff  program, asking that
          program to print local modifications made to the
          file  foo.c  in context diff format
          (another flavor of difference format) while ignoring changes
          made only to the case of the letters used in the file&#39;s
          contents: 
$ svn diff --diff-cmd /usr/bin/diff -x &quot;-i&quot; foo.c
 
$
 Fix Your Mistakes Suppose while viewing the output of  svn
        diff  you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn&#39;t have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.  You could edit the
        file again and unmake all those changes.  You could try to
        find a copy of how the file looked before you changed it, and
        then copy its contents atop your modified version.  You
        could attempt to apply those changes to the file again in
        reverse using  svn patch --reverse-diff 
        or using your operating system&#39;s  patch -R .  
        And there are probably other approaches you could take. svn subcommands revert Fortunately in Subversion, undoing your work and starting
        over from scratch doesn&#39;t require such acrobatics.  Just use
        the  svn revert  command: 
$ svn status README
M       README
$ svn revert README
Reverted &#39;README&#39;
$ svn status README
$
 In this example, Subversion has reverted the file to its
        premodified state by overwriting it with the pristine version
        of the file cached in the text-base area.  But note that
         svn revert  can undo
         any  scheduled operation for
        example, you might decide that you don&#39;t want to add a new
        file after all: 
$ svn status new-file.txt
?       new-file.txt
$ svn add new-file.txt
A         new-file.txt
$ svn revert new-file.txt
Reverted &#39;new-file.txt&#39;
$ svn status new-file.txt
?       new-file.txt
$
 Or perhaps you mistakenly removed a file from version
        control: 
$ svn status README
$ svn delete README
D         README
$ svn revert README
Reverted &#39;README&#39;
$ svn status README
$
 The  svn revert  command offers salvation
        for imperfect people.  It can save you huge amounts of time
        and energy that would otherwise be spent manually unmaking
        changes or, worse, disposing of your working copy and checking
        out a fresh one just to have a clean slate to work with
        again. Resolve Any Conflicts conflicts resolving We&#39;ve already seen how  svn status
        -u  can predict conflicts, but dealing with those
        conflicts is still something that remains to be done.
        Conflicts can occur any time you attempt to merge or integrate
        (in a very general sense) changes from the repository into
        your working copy.  By now you know that  svn
        update  creates exactly that sort of
        scenario that command&#39;s very purpose is to bring your
        working copy up to date with the repository by merging all the
        changes made since your last update into your working copy.
        So how does Subversion report these conflicts to you, and how
        do you deal with them? Suppose you run  svn update  and you
        see this sort of interesting output: 
$ svn update
Updating &#39;.&#39;:
U    INSTALL
G    README
Conflict discovered in &#39;bar.c&#39;.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: 
 The  U  (which stands for
         Updated ) and  G 
        (for  merGed ) codes are no cause for concern;
        those files cleanly absorbed changes from the repository.  A
        file marked with  U  contains
        no local changes but was updated with changes from the
        repository.  One marked with
         G  had local changes to begin
        with, but the changes coming from the repository didn&#39;t
        overlap with those local changes. It&#39;s the next few lines which are interesting.  First,
        Subversion reports to you that in its attempt to merge
        outstanding server changes into the
        file  bar.c , it has detected that some of
        those changes clash with local modifications you&#39;ve made to
        that file in your working copy but have not yet committed.
        Perhaps someone has changed the same line of text you also
        changed.  Whatever the reason, Subversion instantly flags this
        file as being in a state of conflict.  It then asks you what
        you want to do about the problem, allowing you to
        interactively choose an action to take toward resolving the
        conflict.  The most commonly used options are displayed, but
        you can see all of the options by
        typing  s : 
 
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: s

  (e)  edit             - change merged file in an editor
  (df) diff-full        - show all changes made to merged file
  (r)  resolved         - accept merged version of file

  (dc) display-conflict - show all conflicts (ignoring merged version)
  (mc) mine-conflict    - accept my version for all conflicts (same)
  (tc) theirs-conflict  - accept their version for all conflicts (same)

  (mf) mine-full        - accept my version of entire file (even non-conflicts)
  (tf) theirs-full      - accept their version of entire file (same)

  (p)  postpone         - mark the conflict to be resolved later
  (l)  launch           - launch external tool to resolve conflict
  (s)  show all         - show this list

Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options:
 Let&#39;s briefly review each of these options before we go
        into detail on what each option means. (e)  edit Open the file in conflict with your favorite editor,
              as set in the environment variable
               EDITOR . (df) diff-full Display the differences between the base revision
              and the conflicted file itself in unified diff format. (r)  resolved After editing a file, tell
               svn  that you&#39;ve resolved the
              conflicts in the file and that it should accept the
              current contents basically that you&#39;ve
               resolved  the conflict. (dc) display-conflict Display all conflicting regions of the file,
              ignoring changes which were successfully merged. (mc) mine-conflict Discard any newly received changes from the server
              which conflict with your local changes to the file under
              review.  However, accept and merge all non-conflicting
              changes received from the server for that file. (tc) theirs-conflict Discard any local changes which conflict with
              incoming changes from the server for the file under
              review.  However, preserve all non-conflicting local
              changes to that file. (mf) mine-full Discard all newly received changes from the server
              for the file under review, but preserve all your local
              changes for that file. (tf) theirs-full Discard all your local changes to the file under
              review and use only the newly received changes from the
              server for that file. (p)  postpone Leave the file in a conflicted state for you to
              resolve after your update is complete. (l)  launch Launch an external program to perform the conflict
              resolution.  This requires a bit of preparation
              beforehand. (s)  show all Show the list of all possible commands you can use
              in interactive conflict resolution. We&#39;ll cover these commands in more detail now, grouping
        them together by related functionality. Viewing conflict differences interactively conflicts reviewing Before deciding how to attack a conflict
          interactively, odds are that you&#39;d like to see exactly what
          is in conflict.  Two of the commands available at the
          interactive conflict resolution prompt can assist you here.
          The first is the  diff-full  command
          ( df ), which displays all the local
          modifications to the file in question plus any conflict
          regions: 
 
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: df
--- .svn/text-base/sandwich.txt.svn-base      Tue Dec 11 21:33:57 2007
+++ .svn/tmp/tempfile.32.tmp     Tue Dec 11 21:34:33 2007
@@ -1 +1,5 @@
-Just buy a sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
+Go pick up a cheesesteak.
+=======
+Bring me a taco!
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
 
 The first line of the diff content shows the previous
          contents of the working copy (the  BASE 
          revision), the next content line is your change, and the
          last content line is the change that was just received from
          the server ( usually  the
           HEAD  revision). The second command is similar to the first, but
          the  display-conflict 
          ( dc ) command shows only the conflict
          regions, not all the changes made to the file.
          Additionally, this command uses a slightly different display
          format for the conflict regions which allows you to more
          easily compare the file&#39;s contents in those regions as they
          would appear in each of three states: original and unedited;
          with your local changes applied and the server&#39;s conflicting
          changes ignored; and with only the server&#39;s incoming changes
          applied and your local, conflicting changes reverted. After reviewing the information provided by these
          commands, you&#39;re ready to move on to the next action. Resolving conflict differences interactively hook scripts interactive There are several different ways to resolve conflicts
          interactively two of which allow you to selectively
          merge and edit changes, the rest of which allow you to
          simply pick a version of the file and move along. If you wish to choose some combination of your local
          changes, you can use the  edit  command
          ( e ) to manually edit the file with
          conflict markers in a text editor (configured per the
          instructions in  ).  After you&#39;ve edited the file, if you&#39;re satisfied with
          the changes you&#39;ve made, you can tell Subversion that the
          edited file is no longer in conflict by using
          the  resolved  command
          ( r ). Regardless of what your local Unix snob will likely tell
          you, editing the file by hand in your favorite text editor
          is a somewhat low-tech way of remedying conflicts (see
            for a
          walkthrough).  For this reason, Subversion provides
          the  launch  resolution command
          ( l ) to fire up a fancy graphical
          merge tool instead (see
           ). If you decide that you don&#39;t need to merge any changes,
          but just want to accept one version of the file or the
          other, you can either choose your changes (a.k.a.
           mine ) by using the  mine-full 
          command ( mf ) or choose theirs by using the
           theirs-full  command
          ( tf ). Finally, there is also a pair of compromise options
          available.  The  mine-conflict 
          ( mc )
          and  theirs-conflict 
          ( tc ) commands instruct Subversion to
          select your local changes or the server&#39;s incoming changes,
          respectively, as the  winner  for all conflicts
          in the file.  But, unlike the  mine-full 
          and  theirs-full  commands, these commands
          preserve both your local changes and changes received from
          the server in regions of the file where no conflict was
          detected. Postponing conflict resolution hook scripts postponing This may sound like an appropriate section for avoiding
          marital disagreements, but it&#39;s actually still about
          Subversion, so read on.  If you&#39;re doing an update and
          encounter a conflict that you&#39;re not prepared to review or
          resolve, you can type  p  to postpone
          resolving a conflict on a file-by-file basis when you run
           svn update .  If you know in advance
          that you don&#39;t want to resolve any conflicts interactively,
          you can pass the  --non-interactive  option
          to  svn update , and any file in conflict
          will be marked with a  C 
          automatically. The  C 
          (for  Conflicted ) means that the changes from the
          server overlapped with your own, and now you have to
          manually choose between them after the update has completed.
          When you postpone a conflict resolution,
           svn  typically does three things to assist
          you in noticing and resolving that conflict: conflicts conflict markers Subversion prints a  C 
              during the update and remembers that the file is in a
              state of conflict. If Subversion considers the file to be mergeable, it
              places  conflict
              markers special strings of text that
              delimit the  sides  of the
              conflict into the file to visibly demonstrate the
              overlapping areas.  (Subversion uses the
               svn:mime-type  property to decide whether a
              file is capable of contextual, line-based merging.  See
               
              to learn more.) For every conflicted file, Subversion places three
              extra unversioned files in your working copy: filename.mine This is the file as it existed in your working
                    copy before you began the update process.  It
                    contains any local modifications you had made to
                    the file up to that point.  (If Subversion
                    considers the file to be unmergeable,
                    the  .mine  file isn&#39;t created,
                    since it would be identical to the working
                    file.) filename.r OLDREV 
                       This is the file as it existed in the
                     BASE  revision that is,
                    the unmodified revision of the file in your
                    working copy  before  you began
                    the update process where
                     OLDREV  is that base
                    revision number. filename.r NEWREV 
                       This is the file that your Subversion client
                    just received from the server via the update of
                    your working copy, where
                     NEWREV  corresponds to
                    the revision number to which you were updating
                    ( HEAD , unless otherwise
                    requested). For example, Sally makes changes to the file
           sandwich.txt , but does not yet commit
          those changes.  Meanwhile, Harry commits changes to that
          same file.  Sally updates her working copy before committing
          and she gets a conflict, which she postpones: 
$ svn update
Updating &#39;.&#39;:
Conflict discovered in &#39;sandwich.txt&#39;.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    sandwich.txt
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
 At this point, Subversion will  not 
          allow Sally to commit the file
           sandwich.txt  until the three temporary
          files are removed: 
$ svn commit -m &quot;Add a few more things&quot;
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: &#39;/home/sally/svn-work/sandwich.txt&#39; remains in conflict
 If you&#39;ve postponed a conflict, you need to resolve the
          conflict before Subversion will allow you to commit your
          changes.  You&#39;ll do this with the  svn
          resolve  command.  This command accepts
          the  --accept  option, which allows you
          specify your desired approach for resolving the conflict.
          Prior to Subversion 1.8, the  svn resolve 
           required  the use of this option.
          Subversion now allows you to run the  svn
          resolve  command without that option.  When you do
          so, Subversion cranks up its interactive conflict resolution
          mechanism, which you can read about (if you haven&#39;t done so
          already) in the previous section,
           .  We&#39;ll
          take the opportunity in this section, though, to discuss
          the use of the  --accept  option for
          conflict resolution. The  --accept  option to the  svn
          resolve  command instructs Subversion to use one of
          its pre-packaged approaches to conflict resolution.  If
          you want Subversion to resolve the conflict using the
          version of the file that you last checked out before making
          your edits, use  --accept=base .  If you&#39;d
          prefer instead to keep the version that contains only your
          edits, use  --accept=mine-full .  You can also
          select the version that your most recent update pulled from
          the server (discarding your edits entirely) that&#39;s
          done using  --accept=theirs-full .  There
          are other  canned  resolution types, too.  See
            in
            for details. You aren&#39;t limited strictly to all-or-nothing options.
          If you want to pick and choose from your changes and the
          changes that your update fetched from the server, you can
          manually repair the working file, fixing up the conflicted
          text  by hand  (by examining and editing the
          conflict markers within the file), then tell Subversion to
          resolve the conflict by keeping the working file in its
          current state by running  svn resolve  with
          the  --accept=working  option. svn resolve  removes the three
          temporary files and accepts the version of the file that you
          specified.  After the command completes
          successfully and assuming you didn&#39;t interactively
          choose to postpone resolution, of course Subversion no
          longer considers the file to be in a state of
          conflict: 
$ svn resolve --accept working sandwich.txt
Resolved conflicted state of &#39;sandwich.txt&#39;
 Manual conflict resolution hook scripts manual Manually resolving conflicts can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike. Here&#39;s an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
           sandwich.txt  at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you&#39;re going to have to edit
           sandwich.txt  to resolve the conflict.
          First, let&#39;s take a look at the file: 
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
 The strings of less-than signs, equals signs, and
          greater-than signs are conflict markers and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area: 
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
 The text between the second and third sets of conflict
          markers is the text from Sally&#39;s commit: 
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
 Usually you won&#39;t want to just delete the conflict
          markers and Sally&#39;s changes she&#39;s going to be awfully
          surprised when the sandwich arrives and it&#39;s not what she
          wanted.  This is where you pick up the phone or walk across
          the office and explain to Sally that you can&#39;t get
          sauerkraut from an Italian deli. And if you
          ask them for it, they may very well ride you out of town on
          a rail.   Once you&#39;ve agreed on the changes
          you will commit, edit your file and remove the conflict
          markers: 
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
 Now use  svn resolve , and you&#39;re
          ready to commit your changes: 
$ svn resolve --accept working sandwich.txt
Resolved conflicted state of &#39;sandwich.txt&#39;
$ svn commit -m &quot;Go ahead and use my sandwich, discarding Sally&#39;s edits.&quot;
 Naturally, you want to be careful that when using
           svn resolve  you don&#39;t tell Subversion
          that you&#39;ve resolved a conflict when you truly haven&#39;t.
          Once the temporary files are removed, Subversion will let
          you commit the file even if it still contains conflict
          markers. If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copy including your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files. Discarding your changes in favor of a newly fetched
          revision conflicts resolution If you get a conflict and decide that you want
          to throw out your changes, you can run  svn
          resolve --accept theirs-full
           CONFLICTED-PATH  and
          Subversion will discard your edits and remove the temporary
          files: 
$ svn update
Updating &#39;.&#39;:
Conflict discovered in &#39;sandwich.txt&#39;.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    sandwich.txt
Updated to revision 2.
Summary of conflicts:
  Text conflicts: 1
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Resolved conflicted state of &#39;sandwich.txt&#39;
$
 Punting: using svn revert If you decide that you want to throw out your changes
          and start your edits again (whether this occurs after a
          conflict or anytime), just revert your changes: 
$ svn revert sandwich.txt
Reverted &#39;sandwich.txt&#39;
$ ls sandwich.*
sandwich.txt
$
 Note that when you revert a conflicted file, you don&#39;t
          have to use  svn resolve . Commit Your Changes Finally!  Your edits are finished, you&#39;ve merged all
        changes from the server, and you&#39;re ready to commit your
        changes to the repository. The  svn commit  command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a log message describing your change.  Your log
        message will be attached to the new revision you create.  If
        your log message is brief, you may wish to supply it on the
        command line using the  --message 
        ( -m ) option: 
$ svn commit -m &quot;Corrected number of cheese slices.&quot;
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
 However, if you&#39;ve been composing your log message in some
        other text file as you work, you may want to tell Subversion
        to get the message from that file by passing its filename as
        the value of the  --file  ( -F )
        option: 
$ svn commit -F logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
 If you fail to specify either the
         --message  ( -m )
        or  --file  ( -F ) option,
        Subversion will automatically launch your favorite editor (see
        the information on  editor-cmd  in
         ) for
        composing a log message. If you&#39;re in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you&#39;ve already
          saved your commit message, simply delete all the text, save
          again, and then abort: 
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit
a
$
 The repository doesn&#39;t know or care whether your changes make
        any sense as a whole; it checks only to make sure nobody
        else has changed any of the same files that you did when you
        weren&#39;t looking.  If somebody  has  done
        that, the entire commit will fail with a message informing you
        that one or more of your files are out of date: 
$ svn commit -m &quot;Add another rule&quot;
Sending        rules.txt
svn: E155011: Commit failed (details follow):
svn: E155011: File &#39;/home/sally/svn-work/sandwich.txt&#39; is out of date
 
 (The exact wording of this error message depends on the
        network protocol and server you&#39;re using, but the idea is the
        same in all cases.) At this point, you need to run  svn
        update , deal with any merges or conflicts that
        result, and attempt your commit again. That covers the basic work cycle for using Subversion.
        Subversion offers many other features that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we&#39;ve discussed so far in this chapter.  We will,
        however, cover a few more commands that you&#39;ll use fairly
        often. Examining History Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to  peer into  the past instead of
       going into  it. Several commands can provide you with historical data from
      the repository: svn diff Shows line-level details of a particular change svn log Shows you broad information: log messages with date
              and author information attached to revisions and which
              paths changed in each revision svn cat Retrieves a file as it existed in a particular
              revision number and displays it on your screen svn annotate Retrieves a human-readable file as it existed in a
              particular revision number, displaying its contents in a
              tabular form with last-changed information attributed to
              each line of the file. svn list Displays the files in a directory for any given
              revision Examining the Details of Historical Changes We&#39;ve already seen  svn diff 
        before it displays file differences in unified diff
        format; we used it to show the local modifications made to
        our working copy before committing to the repository. In fact, it turns out that there are
         three  distinct uses of  svn
        diff : Examining local changes Comparing your working copy to the repository Comparing repository revisions Examining local changes As we&#39;ve seen, invoking  svn diff  with
          no options will compare your working files to the cached
           pristine  copies in
          the  .svn  area: 
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt    (revision 3)
+++ rules.txt    (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
 Comparing working copy to repository If a single  --revision 
          ( -r ) number is passed, your
          working copy is compared to the specified revision in the
          repository: 
$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt    (revision 3)
+++ rules.txt    (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
 Comparing repository revisions If two revision numbers, separated by a colon, are
          passed via  --revision 
          ( -r ), the two revisions are directly
          compared: 
$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt    (revision 2)
+++ rules.txt    (revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
 A more convenient way of comparing one revision to the
          previous revision is to use the  --change 
          ( -c ) option: 
$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt    (revision 2)
+++ rules.txt    (revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
 Lastly, you can compare repository revisions even when
          you don&#39;t have a working copy on your local machine, just by
          including the appropriate URL on the command line: 
$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
 
$
 Generating a List of Historical Changes To find information about the history of a file or
        directory, use the  svn log 
        command.  svn log  will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision,
        and if it was provided the log message that accompanied
        the commit: 
$ svn log
------------------------------------------------------------------------
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Initial import
------------------------------------------------------------------------
 Note that the log messages are printed in
         reverse chronological order  by default.
        If you wish to see a different range of revisions in a
        particular order or just a single revision, pass the
         --revision  ( -r )
        option: Common log requests Command Description svn log -r 5:19 Display logs for revisions 5 through 19 in
                chronological order svn log -r 19:5 Display logs for revisions 5 through 19 in
                reverse chronological order svn log -r 8 Display logs for revision 8 only You can also examine the log history of a single file or
        directory.  For example: 
$ svn log foo.c
 
$ svn log http://foo.com/svn/trunk/code/foo.c
 
 These will display log messages  only 
        for those revisions in which the named file (or directory)
        changed. Why Does svn log Not Show Me What I
          Just Committed? If you make a commit and immediately type  svn
          log  with no arguments, you may notice that your
          most recent commit doesn&#39;t show up in the list of log
          messages.  This is due to a combination of the behavior of
           svn commit  and the default behavior of
           svn log .  First, when you commit changes
          to the repository,  svn  bumps only the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See
           
          for an explanation of why).   svn log  then
          defaults to fetching the history of the directory at its
          current revision, and thus you don&#39;t see the newly committed
          changes.  The solution here is to either update your working
          copy or explicitly provide a revision number to  svn
          log  by using the  --revision 
          ( -r ) option. If you want even more information about a file or
        directory,  svn log  also takes a
         --verbose  ( -v ) option.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem.  So, in verbose mode,  svn
        log  will include a list of changed paths in a
        revision in its output: 
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
Changed paths:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
 svn log  also takes
        a  --quiet  ( -q ) option, which
        suppresses the body of the log message.  When combined
        with  --verbose  ( -v ), it
        gives just the names of the changed files. Why Does svn log Give Me an Empty
          Response? After working with Subversion for a bit, most users will
          come across something like this: 
$ svn log -r 2
------------------------------------------------------------------------
$
 At first glance, this seems like an error.  But recall
          that while revisions are repository-wide,  svn
          log  operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you&#39;re
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing  svn log  directly at
          the topmost URL of your repository, as in  svn log
          -r 2 ^/ . As of Subversion 1.7, users of the Subversion command-line
        can also take advantage of a special output mode
        for  svn log  which integrates a difference
        report such as is generated by the  svn diff 
        command we introduced earlier.  When you invoke  svn
        log  with the  --diff  option,
        Subversion will append to each revision log chunk in the log
        report a  diff -style difference report.
        This is a very convenient way to see both the high-level, semantic
        changes and the line-based modifications of a revision all at
        the same time! Browsing the Repository Using  svn cat  and  svn
        list , you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don&#39;t even need a working copy to
        use either one. Displaying file contents If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
           svn cat : 
$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
 You can also redirect the output directly into a
          file: 
$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
 Displaying line-by-line change attribution Very similar to the  svn cat  command
          we discussed in the previous section is the  svn
          annotate  command.  This command also displays the
          contents of a versioned file, but it does so using a tabular
          format.  Each line of output shows not only a line of the
          file&#39;s content but also the username, the revision number
          and (optionally) the datestamp of the revision in which that
          line was last modified. When used with a working copy file target,  svn
          annotate  will by default show line-by-line
          attribution of the file as it currently appears in the
          working copy. 
$ svn annotate rules.txt
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     -          - Chew with your mouth closed
     -          - Listen when others are speaking
 Notice that for some lines, there is no attribution
          provided.  In this case, that&#39;s because those lines have
          been modified in the working copy&#39;s version of the file.  In
          this way,  svn annotate  becomes another
          way for you to see which lines in the file you have
          changed.  You can use the  BASE  revision
          keyword (see  ) to
          instead see the unmodified form of the file as it resides
          in your working copy. 
$ svn annotate rules.txt@BASE
     1      harry Be kind to others
     3      sally Freedom = Responsibility
     1      harry Everything in moderation
     1      harry Chew with your mouth open
 The  --verbose (-v)  option causes
           svn annotate  to also include on each line
          the datestamp associated with that line&#39;s reported revision
          number.  (This adds a significant amount of width to each
          line of ouput, so we&#39;ll skip the demonstration here.) As with  svn cat , you can also
          ask  svn annotate  to display previous
          versions of the file.  This can be a handy trick when, after
          finding out who most recently modified a particular line of
          interest in the file, you then wish to see who modified the
          same line prior to that. 
$ svn blame rules.txt -r 2
     1      harry Be kind to others
     1      harry Freedom = Chocolate Ice Cream
     1      harry Everything in moderation
     1      harry Chew with your mouth open
 Unlike the  svn cat  command, the
          functionality of  svn annotate  is tied
          heavily to the idea of  lines  of text in a
          human-readable file.  As such, if you attempt to run the
          command on a file that Subversion has determined is
           not  human-readable (per the file&#39;s
           svn:mime-type  property see   for
          details), you&#39;ll get an error message. 
$ svn annotate images/logo.png
Skipping binary file (use --force to treat as text): &#39;images/logo.png&#39;
$
 As revealed in the error message, you can use
          the  --force  option to disable this check
          and proceed with the annotation as if the file&#39;s contents
          are, in fact, human-readable and line-based.  Naturally, if
          you force Subversion to try to perform line-based annotation
          on a nontextual file, you&#39;ll get what you asked for: a
          screenful of nonsense. 
$ svn annotate images/logo.png --force
     6      harry \211PNG
     6      harry ^Z
     6      harry 
     7      harry \274\361\MI\300\365\353^X\300 
 Depending on your mood at the time you execute this
            command and your reasons for doing so, you may find
            yourself typing  svn blame  
            or  svn praise   instead of
            using the canonical  svn annotate 
            command form.  That&#39;s okay the Subversion developers
            anticipated as much, so those particular command aliases
            work, too! Finally, as with many of Subversion&#39;s informational
          commands, you can also reference files in your  svn
          annotate  command invocations by their repository
          URLs, allowing access to this information even when you
          don&#39;t have ready access to a working copy. Listing versioned directories The  svn list  command shows you what
          files are in a repository directory without actually
          downloading the files to your local machine: 
$ svn list http://svn.example.com/repo/project
README
branches/
tags/
trunk/
 If you want a more detailed listing, pass the
           --verbose  ( -v ) flag to get
          output like this: 
$ svn list -v http://svn.example.com/repo/project
  23351 sally                 Feb 05 13:26 ./
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
 The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the date it was last modified, and the item&#39;s
          name. The  svn list  command with no
            arguments defaults to the  repository
            URL  of the current working
            directory,  not  the local working copy
            directory.  After all, if you want a listing of your local
            directory, you could use just plain
             ls  (or any reasonable non-Unixy
            equivalent). Fetching Older Repository Snapshots In addition to all of the previous commands, you can use
        the  --revision  ( -r ) option
        with  svn update  to take an entire working
        copy  back in time : See?  We told
        you that Subversion was a time
        machine. 
# Make the current directory look like it did in r1729.
$ svn update -r 1729
Updating &#39;.&#39;:
 
$
 Many Subversion newcomers attempt to use the preceding
           svn update  example to  undo 
          committed changes, but this won&#39;t work as you can&#39;t commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See   for a
          description of how to  undo  a commit. If you&#39;d prefer to create a whole new working copy from an
        older snapshot, you can do so by modifying the typical
         svn checkout  command.  As with  svn
        update , you can provide
        the  --revision  ( -r ) option.
        But for reasons that we cover in
         , you might instead want
        to specify the target revision as part of Subversion&#39;s
        expanded URL syntax. 
# Checkout the trunk from r1729.
$ svn checkout http://svn.example.com/svn/repo/trunk@1729 trunk-1729
 
# Checkout the current trunk as it looked in r1729.
$ svn checkout http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
 
$
 Lastly, if you&#39;re building a release and wish to bundle up
        your versioned files and directories, you can use  svn
        export  to create a local copy of all or part of your
        repository without any  .svn 
        administrative directories included.  The basic syntax of this
        subcommand is identical to that of  svn
        checkout : 
# Export the trunk from the latest revision.
$ svn export http://svn.example.com/svn/repo/trunk trunk-export
 
# Export the trunk from r1729.
$ svn export http://svn.example.com/svn/repo/trunk@1729 trunk-1729
 
# Export the current trunk as it looked in r1729. 
$ svn export http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
 
$
 Sometimes You Just Need to Clean Up Now that we&#39;ve covered the day-to-day tasks that you&#39;ll
      frequently use Subversion for, we&#39;ll review a few administrative
      tasks relating to your working copy. Disposing of a Working Copy Subversion doesn&#39;t track either the state or the existence of
        working copies on the server, so there&#39;s no server overhead to
        keeping working copies around.  Likewise, there&#39;s no need to
        let the server know that you&#39;re going to delete a working
        copy. If you&#39;re likely to use a working copy again, there&#39;s
        nothing wrong with just leaving it on disk until you&#39;re ready
        to use it again, at which point all it takes is an
         svn update  to bring it up to date and ready
        for use. However, if you&#39;re definitely not going to use a working
        copy again, you can safely delete the entire thing using
        whatever directory removal capabilities your operating system
        offers.  We recommend that before you do so you
        run  svn status  and review any files
        listed in its output that are prefixed with a
         ?  to make certain that they&#39;re not of
        importance. Recovering from an Interruption When Subversion modifies your working copy either
        your files or its own administrative state it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion logs its intentions in a private  to-do
        list , of sorts.  Next, it performs those actions to
        effect the desired change, holding a lock on the relevant part
        of the working copy while it works.  This prevents other
        Subversion clients from accessing the working copy mid-change.
        Finally, Subversion releases its lock and cleans up its
        private to-do list.  Architecturally, this is similar to a
        journaled filesystem.  If a Subversion operation is
        interrupted (e.g, if the process is killed or if the machine
        crashes), the private to-do list remains on disk.  This allows
        Subversion to return to that list later to complete any
        unfinished operations and return your working copy to a
        consistent state. This is exactly what  svn cleanup  does:
        it searches your working copy and runs any leftover to-do
        items, removing working copy locks as it completes those
        operations.  If Subversion ever tells you that some part of
        your working copy is  locked,  run  svn
        cleanup  to remedy the problem.  The  svn
        status  command will inform you about administrative
        locks in the working copy, too, by displaying
        an  L  next to those locked paths: 
$ svn status
  L     somedir
M       somedir/foo.c
$ svn cleanup
$ svn status
M       somedir/foo.c
 Don&#39;t confuse these working copy administrative locks with
        the user-managed locks that Subversion users create when using
        the lock-modify-unlock model of concurrent version control;
        see the sidebar
          for
        clarification. Dealing with Structural Conflicts So far, we have only talked about conflicts at the level of
      file content.  When you and your collaborators make overlapping
      changes within the same file, Subversion forces you to merge
      those changes before you can commit. Well,
      you  could  mark files containing conflict
      markers as resolved and commit them, if you really wanted to.
      But this is rarely done in practice. tree conflicts conflicts tree tree conflicts But what happens if your collaborators move or
      delete a file that you are still working on?  Maybe there was a
      miscommunication, and one person thinks the file should be
      deleted, while another person still wants to commit changes to
      the file.  Or maybe your collaborators did some refactoring,
      renaming files and moving around directories in the process.  If
      you were still working on these files, those modifications may
      need to be applied to the files at their new location.  Such
      conflicts manifest themselves at the directory tree structure
      level rather than at the file content level, and are known
      as  tree conflicts . Tree conflicts prior to Subversion 1.6 Prior to Subversion 1.6, tree conflicts could yield rather
        unexpected results.  For example, if a file was locally
        modified, but had been renamed in the repository,
        running  svn update  would make Subversion
        carry out the following steps: Check the file to be renamed for local
          modifications. Delete the file at its old location, and if it
          had local modifications, keep an on-disk copy of the file at
          the old location.  This on-disk copy now appears as an
          unversioned file in the working copy. Add the file, as it exists in the repository,
          at its new location. When this situation arises, there is the possibility that
        the user makes a commit without realizing that local
        modifications have been left in a now-unversioned file in the
        working copy, and have not reached the repository.  This gets
        more and more likely (and tedious) if the number of files
        affected by this problem is large. Since Subversion 1.6, this and other similar situations
        are flagged as conflicts in the working copy. As with textual conflicts, tree conflicts prevent a commit
      from being made from the conflicted state, giving the user the
      opportunity to examine the state of the working copy for
      potential problems arising from the tree conflict, and resolving
      any such problems before committing. An Example Tree Conflict Suppose a software project you were working on currently
        looked like this: 
$ svn list -Rv svn://svn.example.com/trunk/
     13 harry                 Sep 06 10:34 ./
     13 harry              27 Sep 06 10:34 COPYING
     13 harry              41 Sep 06 10:32 Makefile
     13 harry              53 Sep 06 10:34 README
     13 harry                 Sep 06 10:32 code/
     13 harry              54 Sep 06 10:32 code/bar.c
     13 harry             130 Sep 06 10:32 code/foo.c
$
 Later, in revision 14, your collaborator Harry renames the file
         bar.c  to  baz.c .
        Unfortunately, you don&#39;t realize this yet.  As it turns out,
        you are busy in your working copy composing a different set of
        changes, some of which also involve modifications
        to  bar.c : 
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c    (revision 13)
+++ code/foo.c    (working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf(&quot;I don&#39;t like being moved around!\n%s&quot;, bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c    (revision 13)
+++ code/bar.c    (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return &quot;Me neither!\n&quot;;
+    return &quot;Well, I do like being moved around!\n&quot;;
 }
$
 You first realize that someone else has
        changed  bar.c  when your own commit
        attempt fails: 
$ svn commit -m &quot;Small fixes&quot;
Sending        code/bar.c
svn: E155011: Commit failed (details follow):
svn: E155011: File &#39;/home/svn/project/code/bar.c&#39; is out of date
svn: E160013: File not found: transaction &#39;14-e&#39;, path &#39;/code/bar.c&#39;
$
 At this point, you need to run  svn update .
        Besides bringing our working copy up to date so that you can
        see Harry&#39;s changes, this also flags a tree conflict so you
        have the opportunity to evaluate and properly resolve it. 
$ svn update
Updating &#39;.&#39;:
   C code/bar.c
A    code/baz.c
U    Makefile
Updated to revision 14.
Summary of conflicts:
  Tree conflicts: 1
$
 In its output,  svn update  signifies tree
        conflicts using a capital C in the fourth output column.
         svn status  reveals additional details of the
        conflict: 
$ svn status
M       code/foo.c
A  +  C code/bar.c
      &gt;   local edit, incoming delete upon update
Summary of conflicts:
  Tree conflicts: 1
$
 Note how  bar.c  is automatically
        scheduled for re-addition in your working copy, which
        simplifies things in case you want to keep the file. Because a move in Subversion is implemented as a copy
        operation followed by a delete operation, and these two
        operations cannot be easily related to one another during an
        update, all Subversion can warn you about is an incoming
        delete operation on a locally modified file.  This delete
        operation  may  be part of a move, or it
        could be a genuine delete operation.  Determining exactly what
        semantic change was made to the repository is
        important you want to know just how your own edits fit
        into the overall trajectory of the project.  So read log
        messages, talk to your collaborators, study the line-based
        differences do whatever you must do to determine
        your best course of action. In this case, Harry&#39;s commit log message tells you what
        you need to know. 
$ svn log -r14 ^/trunk
------------------------------------------------------------------------
r14 | harry | 2011-09-06 10:38:17 -0400 (Tue, 06 Sep 2011) | 1 line
Changed paths:
   M /Makefile
   D /code/bar.c
   A /code/baz.c (from /code/bar.c:13)

Rename bar.c to baz.c, and adjust Makefile accordingly.
------------------------------------------------------------------------
$
 svn info  shows the URLs of the items
        involved in the conflict. The  left  URL
        shows the source of the local side of the conflict, while
        the  right  URL shows the source of the
        incoming side of the conflict. These URLs indicate where you
        should start searching the repository&#39;s history for the change
        which conflicts with your local change. 
$ svn info code/bar.c
Path: code/bar.c
Name: bar.c
URL: http://svn.example.com/svn/repo/trunk/code/bar.c
 
Tree conflict: local edit, incoming delete upon update
  Source  left: (file) ^/trunk/code/bar.c@4
  Source right: (none) ^/trunk/code/bar.c@5

$
 bar.c  is now said to be the victim of
        a tree conflict.  It cannot be committed until the conflict is
        resolved: 
$ svn commit -m &quot;Small fixes&quot; 
svn: E155015: Commit failed (details follow):
svn: E155015: Aborting commit: &#39;/home/svn/project/code/bar.c&#39; remains in confl
ict
$
 To resolve this conflict, you must either agree or
        disagree with the move that Harry made. If you agree with the move, your  bar.c 
        is superfluous.  You&#39;ll want to delete it and mark the tree
        conflict as resolved.  But wait:  you made changes to that
        file!  Before deleting  bar.c , you need to
        decide if the changes you made to it need to be applied
        elsewhere, for example to the new  baz.c 
        file where all of  bar.c &#39;s code now lives.
        Let&#39;s assume that your changes do need to  follow the
        move .  Subversion isn&#39;t smart enough to do this work
        for you In some cases, Subversion 1.5 and 1.6
         would  actually handle this for you, but
        this somewhat hit-or-miss functionality was removed in
        Subversion 1.7. , so you need to migrate your
        changes manually. In our example, you could manually re-make your change
        to  bar.c  pretty easily it was,
        after all, a single-line change.  That&#39;s not always the case,
        though, so we&#39;ll show a more scalable approach.  We&#39;ll first
        use  svn diff  to create a patch file.  Then
        we&#39;ll edit the headers of that patch file to point to the new
        name of our renamed file.  Finally, we re-apply the modified
        patch to our working copy. 
$ svn diff code/bar.c &gt; PATCHFILE
$ cat PATCHFILE
Index: code/bar.c
===================================================================
--- code/bar.c    (working copy)
+++ code/bar.c    (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return &quot;Me neither!\n&quot;;
+    return &quot;Well, I do like being moved around!\n&quot;;
 }
$ ### Edit PATCHFILE to refer to code/baz.c instead of code/bar.c
$ cat PATCHFILE
Index: code/baz.c
===================================================================
--- code/baz.c    (working copy)
+++ code/baz.c    (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return &quot;Me neither!\n&quot;;
+    return &quot;Well, I do like being moved around!\n&quot;;
 }
$ svn patch PATCHFILE
U         code/baz.c
$
 Now that the changes you originally made
        to  bar.c  have been successfully
        reproduced in  baz.c , you can
        delete  bar.c  and resolve the conflict,
        instructing the resolution logic to accept what is currently
        in the working copy as the desired result. 
$ svn delete --force code/bar.c
D         code/bar.c
$ svn resolve --accept=working code/bar.c
Resolved conflicted state of &#39;code/bar.c&#39;
$ svn status
M       code/foo.c
M       code/baz.c
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c  (revision 14)
+++ code/foo.c  (working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf(&quot;I don&#39;t like being moved around!\n%s&quot;, bar());
-    return 0;
+    return 1;
 }
Index: code/baz.c
===================================================================
--- code/baz.c  (revision 14)
+++ code/baz.c  (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return &quot;Me neither!\n&quot;;
+    return &quot;Well, I do like being moved around!\n&quot;;
 }
$
 But what if you do not agree with the move?  Well, in that
        case, you can delete  baz.c  instead, after
        making sure any changes made to it after it was renamed are
        either preserved or not worth keeping.  (Do not forget to also
        revert the changes Harry made to  Makefile .)
        Since  bar.c  is already scheduled for
        re-addition, there is nothing else left to do, and the
        conflict can be marked resolved: 
$ svn delete --force code/baz.c
D         code/baz.c
$ svn resolve --accept=working code/bar.c
Resolved conflicted state of &#39;code/bar.c&#39;
$ svn status
M       code/foo.c
A  +    code/bar.c
D       code/baz.c
M       Makefile
$ svn diff
Index: code/foo.c
===================================================================
--- code/foo.c    (revision 14)
+++ code/foo.c    (working copy)
@@ -3,5 +3,5 @@
 int main(int argc, char *argv[])
 {
     printf(&quot;I don&#39;t like being moved around!\n%s&quot;, bar());
-    return 0;
+    return 1;
 }
Index: code/bar.c
===================================================================
--- code/bar.c    (revision 14)
+++ code/bar.c    (working copy)
@@ -1,4 +1,4 @@
 const char *bar(void)
 {
-    return &quot;Me neither!\n&quot;;
+    return &quot;Well, I do like being moved around!\n&quot;;
 }
Index: code/baz.c
===================================================================
--- code/baz.c    (revision 14)
+++ code/baz.c    (working copy)
@@ -1,4 +0,0 @@
-const char *bar(void)
-{
-    return &quot;Me neither!\n&quot;;
-}
Index: Makefile
===================================================================
--- Makefile    (revision 14)
+++ Makefile    (working copy)
@@ -1,2 +1,2 @@
 foo: 
-    $(CC) -o $@ code/foo.c code/baz.c
+    $(CC) -o $@ code/foo.c code/bar.c
 You&#39;ve now resolved your first tree conflict!  You can
        commit your changes and tell Harry during tea break about all
        the extra work he caused for you. Summary Now we&#39;ve covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see  ) and properties (see
         ).  However, you may want to
        take a moment to skim through   to
        get an idea of all the different commands that Subversion
        has and how you can use them to make your work
        easier. Advanced Topics If you&#39;ve been reading this book chapter by chapter, from
    start to finish, you should by now have acquired enough
    knowledge to use the Subversion client to perform the most
    common version control operations.  You understand how to
    check out a working copy from a Subversion repository.  You are
    comfortable with submitting and receiving changes using the
     svn commit  and  svn update 
    operations.  You&#39;ve probably even developed a reflex that causes
    you to run the  svn status  command almost
    unconsciously.  For all intents and purposes, you are ready to
    use Subversion in a typical environment. But the Subversion feature set doesn&#39;t stop at  common
    version control operations.   It has other bits of
    functionality besides just communicating file and
    directory changes to and from a central repository. This chapter highlights some of Subversion&#39;s features that,
    while important, may not be part of the typical user&#39;s daily routine.
    It assumes that you are familiar with Subversion&#39;s basic file and
    directory versioning capabilities.  If you aren&#39;t, you&#39;ll want to
    first read   and  .  Once you&#39;ve mastered those basics and
    consumed this chapter, you&#39;ll be a Subversion power user! Revision Specifiers As we described in  , revision numbers in Subversion are pretty
      straightforward integers that keep getting larger as you
      commit more changes to your versioned data.  Still, it doesn&#39;t
      take long before you can no longer remember exactly what
      happened in each and every revision.  Fortunately, the typical
      Subversion workflow doesn&#39;t often demand that you supply
      arbitrary revisions to the Subversion operations you perform.
      For operations that  do  require a revision
      specifier, you generally supply a revision number that you saw
      in a commit email, in the output of some other Subversion
      operation, or in some other context that would give meaning to
      that particular number. Referring to revision numbers with
        an  r  prefix
        ( r314 , for example) is an established
        practice in Subversion communities, and is both supported and
        encouraged by many Subversion-related tools.  In most places
        where you would specify a bare revision number on the command
        line, you may also use
        the  r NNN 
        syntax. revisions keywords But occasionally, you need to pinpoint a moment in
      time for which you don&#39;t already have a revision number
      memorized or handy.  So besides the integer revision numbers,
       svn  allows as input some additional forms of
      revision specifiers:  revision keywords 
      and revision dates. The various forms of Subversion revision specifiers can be
        mixed and matched when used to specify revision ranges.  For
        example, you can use  -r
         REV1 : REV2 
        where  REV1  is a revision keyword
        and  REV2  is a revision number, or
        where  REV1  is a date and
         REV2  is a revision keyword, and so
        on.  The individual revision specifiers are independently
        evaluated, so you can put whatever you want on the opposite
        sides of that colon. Revision Keywords revisions keywords The Subversion client understands a number of revision
        keywords.  These keywords can be used instead of integer
        arguments to the  --revision 
        ( -r ) option, and are resolved into specific
        revision numbers by Subversion: HEAD HEAD revisions keywords HEAD The latest (or  youngest ) revision in
              the repository. BASE BASE revisions keywords BASE The revision number of an item in a working copy.
              If the item has been locally modified, this refers to
              the way the item appears without those local
              modifications. COMMITTED COMMITTED revisions keywords COMMITTED The most recent revision prior to, or equal to,
               BASE , in which an item changed. PREV PREV revisions keywords PREV The revision immediately  before 
              the last revision in which an item changed.
              Technically, this boils down to
               COMMITTED -1. As can be derived from their descriptions, the
         PREV ,  BASE , and
         COMMITTED  revision keywords are used only
        when referring to a working copy path they don&#39;t apply
        to repository URLs.   HEAD , on the other
        hand, can be used in conjunction with both of these path
        types. Here are some examples of revision keywords in
        action: 
$ svn diff -r PREV:COMMITTED foo.c
# shows the last change committed to foo.c

$ svn log -r HEAD
# shows log message for the latest repository commit

$ svn diff -r HEAD
# compares your working copy (with all of its local changes) to the
# latest version of that tree in the repository

$ svn diff -r BASE:HEAD foo.c
# compares the unmodified version of foo.c with the latest version of
# foo.c in the repository

$ svn log -r BASE:HEAD
# shows all commit logs for the current versioned directory since you
# last updated

$ svn update -r PREV foo.c
# rewinds the last change on foo.c, decreasing foo.c&#39;s working revision

$ svn diff -r BASE:14 foo.c
# compares the unmodified version of foo.c with the way foo.c looked
# in revision 14
 Revision Dates revisions as dates Revision numbers reveal nothing about the world outside
        the version control system, but sometimes you need to
        correlate a moment in real time with a moment in version
        history.  To facilitate this, the  --revision 
        ( -r ) option can also accept as input date
        specifiers wrapped in curly braces ( {  and
         } ).  Subversion accepts the standard
        ISO-8601 date and time formats, plus a few others.  Here are
        some examples. 
$ svn update -r {2006-02-17}
$ svn update -r {15:30}
$ svn update -r {15:30:00.200000}
$ svn update -r {&quot;2006-02-17 15:30&quot;}
$ svn update -r {&quot;2006-02-17 15:30 +0230&quot;}
$ svn update -r {2006-02-17T15:30}
$ svn update -r {2006-02-17T15:30Z}
$ svn update -r {2006-02-17T15:30-04:00}
$ svn update -r {20060217T1530}
$ svn update -r {20060217T1530Z}
$ svn update -r {20060217T1530-0500}
 
 Keep in mind that most shells will require you to, at a
          minimum, quote or otherwise escape any spaces that are
          included as part of revision date specifiers.  Certain
          shells may also take issue with the unescaped use of curly
          braces, too.  Consult your shell&#39;s documentation for the
          requirements specific to your environment. When you specify a date, Subversion resolves that date to
        the most recent revision of the repository as of that date,
        and then continues to operate against that resolved revision
        number: 
$ svn log -r {2006-11-28}
------------------------------------------------------------------------
r12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines
 
 Is Subversion a Day Early? If you specify a single date as a revision without
          specifying a time of day (for example
           2006-11-27 ), you may think that Subversion
          should give you the last revision that took place on the
          27th of November.  Instead, you&#39;ll get back a revision from
          the 26th, or even earlier.  Remember that Subversion will
          find the  most recent revision of the
          repository  as of the date you give.  If you give
          a date without a timestamp, such as
           2006-11-27 , Subversion assumes a time of
          00:00:00, so looking for the most recent revision won&#39;t
          return anything on the 27th. If you want to include the 27th in your search, you can
          either specify the 27th with the time ( {&quot;2006-11-27
          23:59&quot;} ), or just specify the next day
          ( {2006-11-28} ). You can also use a range of dates.  Subversion will find
        all revisions between both dates, inclusive: 
$ svn log -r {2006-11-20}:{2006-11-29}
 
 Since the timestamp of a revision is stored as an
          unversioned, modifiable property of the revision (see  ), revision timestamps can be
          changed to represent complete falsifications of true
          chronology, or even removed altogether.  Subversion&#39;s
          ability to correctly convert revision dates into real
          revision numbers depends on revision datestamps maintaining
          a sequential ordering the younger the revision, the
          younger its timestamp.  If this ordering isn&#39;t maintained,
          you will likely find that trying to use dates to specify
          revision ranges in your repository doesn&#39;t always return the
          data you might have expected. Peg and Operative Revisions We copy, move, rename, and completely replace files and
      directories on our computers all the time.  And your version
      control system shouldn&#39;t get in the way of your doing these
      things with your version-controlled files and directories,
      either.  Subversion&#39;s file management support is quite
      liberating, affording almost as much flexibility for versioned
      files as you&#39;d expect when manipulating your unversioned ones.
      But that flexibility means that across the lifetime of your
      repository, a given versioned object might have many paths, and
      a given path might represent several entirely different
      versioned objects.  This introduces a certain level of
      complexity to your interactions with those paths and
      objects. Subversion is pretty smart about noticing when an object&#39;s
      version history includes such  changes of address. 
      For example, if you ask for the revision history log of a
      particular file that was renamed last week, Subversion happily
      provides all those logs the revision in which the rename
      itself happened, plus the logs of relevant revisions both before
      and after that rename.  So, most of the time, you don&#39;t even
      have to think about such things.  But occasionally, Subversion
      needs your help to clear up ambiguities. The simplest example of this occurs when a directory or file
      is deleted from version control, and then a new directory or
      file is created with the same name and added to version control.
      The thing you deleted and the thing you later added aren&#39;t the
      same thing.  They merely happen to have had the same
      path /trunk/object , for example.
      What, then, does it mean to ask Subversion about the history of
       /trunk/object ?  Are you asking about the
      thing currently at that location, or the old thing you deleted
      from that location?  Are you asking about the operations that
      have happened to  all  the objects that have
      ever lived at that path?  Subversion needs a hint about what you
      really want. And thanks to moves, versioned object history can get far
      more twisted than even that.  For example, you might have a
      directory named  concept , containing some
      nascent software project you&#39;ve been toying with.  Eventually,
      though, that project matures to the point that the idea seems to
      actually have some wings, so you do the unthinkable and decide
      to give the project a name. You&#39;re not
      supposed to name it.  Once you name it, you start getting
      attached to it. Mike Wazowski 
      Let&#39;s say you called your software Frabnaggilywort.  At this
      point, it makes sense to rename the directory to reflect the
      project&#39;s new name, so  concept  is renamed
      to  frabnaggilywort .  Life goes on,
      Frabnaggilywort releases a 1.0 version and is downloaded and
      used daily by hordes of people aiming to improve their
      lives. It&#39;s a nice story, really, but it doesn&#39;t end there.
      Entrepreneur that you are, you&#39;ve already got another think in
      the tank.  So you make a new directory,
       concept , and the cycle begins again.  In
      fact, the cycle begins again many times over the years, each
      time starting with that old  concept 
      directory, then sometimes seeing that directory renamed as the
      idea cures, sometimes seeing it deleted when you scrap the idea.
      Or, to get really sick, maybe you rename
       concept  to something else for a while, but
      later rename the thing back to  concept  for
      some reason. In scenarios like these, attempting to instruct
      Subversion to work with these reused paths can be a little like
      instructing a motorist in Chicago&#39;s West Suburbs to drive east
      down Roosevelt Road and turn left onto Main Street.  In a mere
      20 minutes, you can cross  Main Street  in
      Wheaton, Glen Ellyn, and Lombard.  And no, they aren&#39;t the same
      street.  Our motorist and our Subversion need a
      little more detail to do the right thing. revisions peg revisions at syntax @ at syntax Fortunately, Subversion allows you to tell it
      exactly which Main Street you meant.  The mechanism used is
      called a  peg revision , and you provide
      these to Subversion for the sole purpose of identifying unique
      lines of history.  Because at most one versioned object may
      occupy a path at any given time or, more precisely, in any
      one revision the combination of a path and a peg revision
      is all that is needed to unambiguously identify a specific line
      of history.  Peg revisions are specified to the Subversion
      command-line client using  at syntax , so
      called because the syntax involves appending an  at
      sign  ( @ ) and the peg revision to the
      end of the path with which the revision is associated. revisions operative revisions revisions operative revision range But what of the  --revision 
      ( -r ) of which we&#39;ve spoken so much in this
      book?  That revision (or set of revisions) is called the
       operative revision  (or
       operative revision range ).  Once a
      particular line of history has been identified using a path and
      peg revision, Subversion performs the requested operation using
      the operative revision(s).  To map this to our Chicagoland
      streets analogy, if we are told to go to 606 N. Main Street in
      Wheaton, 606 N. Main Street, Wheaton, Illinois,
      is the home of the Wheaton  History  Center.
      It seemed appropriate  we can think
      of  Main Street  as our path and
       Wheaton  as our peg revision.  These two pieces of
      information identify a unique path that can be traveled (north or
      south on Main Street), and they keep us from traveling up and
      down the wrong Main Street in search of our destination.  Now we
      throw in  606 N.  as our operative revision of
      sorts, and we know  exactly  where to
      go. The Peg Revision Algorithm The Subversion command-line client performs the peg revision
        algorithm any time it needs to resolve possible ambiguities in
        the paths and revisions provided to it.  Here&#39;s an example of
        such an invocation: 
$ svn  command  -r  OPERATIVE-REV  item@ PEG-REV 
 If  OPERATIVE-REV  is older than
         PEG-REV , the algorithm is as
        follows: Locate  item  in the revision
            identified by  PEG-REV .  There
            can be only one such object. Trace the object&#39;s history backwards (through any
            possible renames) to its ancestor in the revision
             OPERATIVE-REV . Perform the requested action on that ancestor,
            wherever it is located, or whatever its name might
            be or might have been at that time. But what if  OPERATIVE-REV  is
         younger  than
         PEG-REV ?  Well, that adds some
        complexity to the theoretical problem of locating the path in
         OPERATIVE-REV , because the path&#39;s
        history could have forked multiple times (thanks to copy
        operations) between  PEG-REV  and
         OPERATIVE-REV .  And that&#39;s not
        all Subversion doesn&#39;t store enough information to
        performantly trace an object&#39;s history forward, anyway.  So
        the algorithm is a little different: Locate  item  in the revision
            identified by  OPERATIVE-REV .  There
            can be only one such object. Trace the object&#39;s history backward (through any
            possible renames) to its ancestor in the revision
             PEG-REV . Verify that the object&#39;s location (path-wise) in
             PEG-REV  is the same as it is in
             OPERATIVE-REV .  If that&#39;s the
            case, at least the two locations are known to be
            directly related, so perform the requested action on the
            location in  OPERATIVE-REV .
            Otherwise, relatedness was not established, so error out
            with a loud complaint that no viable location was found.
            (Someday, we expect that Subversion will be able to handle
            this usage scenario with more flexibility and
            grace.) Note that even when you don&#39;t explicitly supply a peg
        revision or operative revision, they are still present.  For
        your convenience, the default peg revision is
         BASE  for working copy items and
         HEAD  for repository URLs.  And when no
        operative revision is provided, it defaults to being the same
        revision as the peg revision. Say that long ago we created our repository, and in revision 1
      we added our first  concept  directory, plus an
       IDEA  file in that directory talking about
      the concept.  After several revisions in which real code was
      added and tweaked, we, in revision 20, renamed this directory to
       frabnaggilywort .  By revision 27, we had a
      new concept, a new  concept  directory to
      hold it, and a new  IDEA  file to describe
      it.  And then five years and thousands of revisions flew by,
      just like they would in any good romance story. Now, years later, we wonder what the
       IDEA  file looked like back in revision 1.
      But Subversion needs to know whether we are asking about how the
       current  file looked back in revision 1, or
      whether we are asking for the contents of whatever file lived at
       concept/IDEA  in revision 1.  Certainly
      those questions have different answers, and because of peg
      revisions, you can ask those questions.  To find out how the
      current  IDEA  file looked in that old
      revision, you run: 
$ svn cat -r 1 concept/IDEA 
svn: E195012: Unable to find repository location for &#39;concept/IDEA&#39; in revision 1
 Of course, in this example, the current
       IDEA  file didn&#39;t exist yet in revision 1,
      so Subversion gives an error.  The previous command is shorthand
      for a longer notation which explicitly lists a peg revision.
      The expanded notation is: 
$ svn cat -r 1 concept/IDEA@BASE
svn: E195012: Unable to find repository location for &#39;concept/IDEA&#39; in revision 1
 And when executed, it has the expected results. The perceptive reader is probably wondering at this point whether
      the peg revision syntax causes problems for working copy paths
      or URLs that actually have at signs in them.  After
      all, how does  svn  know whether
       news@11  is the name of a directory in my
      tree or just a syntax for  revision 11 of
       news ?  Thankfully, while
       svn  will always assume the latter, there is a
      trivial workaround.  You need only append an at sign to the
      end of the path, such as  news@11@ .
       svn  cares only about the last at sign in
      the argument, and it is not considered illegal to omit a literal
      peg revision specifier after that at sign.  This workaround
      even applies to paths that end in an at sign you would
      use  filename@@  to talk about a file named
       filename@ . Let&#39;s ask the other question, then in revision 1, what
      were the contents of whatever file occupied the address
       concepts/IDEA  at the time?  We&#39;ll use an
      explicit peg revision to help us out. 
$ svn cat concept/IDEA@1
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
 Notice that we didn&#39;t provide an operative revision this
      time.  That&#39;s because when no operative revision is specified,
      Subversion assumes a default operative revision that&#39;s the same
      as the peg revision. As you can see, the output from our operation appears to be
      correct.  The text even mentions frabbing naggily worts, so this
      is almost certainly the file that describes the software now
      called Frabnaggilywort.  In fact, we can verify this using the
      combination of an explicit peg revision and explicit operative
      revision.  We know that in  HEAD , the
      Frabnaggilywort project is located in the
       frabnaggilywort  directory.  So we specify
      that we want to see how the line of history identified in
       HEAD  as the path
       frabnaggilywort/IDEA  looked in revision
      1. 
$ svn cat -r 1 frabnaggilywort/IDEA@HEAD
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
 And the peg and operative revisions need not be so trivial,
      either.  For example, say  frabnaggilywort 
      had been deleted from  HEAD , but we know it
      existed in revision 20, and we want to see the diffs for its
       IDEA  file between revisions 4 and 10.  We
      can use peg revision 20 in conjunction with the URL that
      would have held Frabnaggilywort&#39;s  IDEA  file
      in revision 20, and then use 4 and 10 as our operative revision
      range. 
$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20
Index: frabnaggilywort/IDEA
===================================================================
--- frabnaggilywort/IDEA    (revision 4)
+++ frabnaggilywort/IDEA    (revision 10)
@@ -1,5 +1,5 @@
-The idea behind this project is to come up with a piece of software
-that can frab a naggily wort.  Frabbing naggily worts is tricky
-business, and doing it incorrectly can have serious ramifications, so
-we need to employ over-the-top input validation and data verification
-mechanisms.
+The idea behind this project is to come up with a piece of
+client-server software that can remotely frab a naggily wort.
+Frabbing naggily worts is tricky business, and doing it incorrectly
+can have serious ramifications, so we need to employ over-the-top
+input validation and data verification mechanisms.
 Fortunately, most folks aren&#39;t faced with such complex
      situations.  But when you are, remember that peg revisions are
      that extra hint Subversion needs to clear up ambiguity. Properties We&#39;ve already covered in detail how Subversion stores and
      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      fundamental piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from a version control perspective. But it doesn&#39;t stop there. properties In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
       properties , and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must contain only
      ASCII characters.  And the best part about these properties is
      that they, too, are versioned, just like the textual contents of
      your files.  You can modify, commit, and revert property changes
      as easily as you can file content changes.  And the sending and
      receiving of property changes occurs as part of your typical
      commit and update operations you don&#39;t have to change your
      basic processes to accommodate them. Subversion has reserved the set of properties whose names
        begin with  svn:  as its own.  While there
        are only a handful of such properties in use today, you should
        avoid creating custom properties for your own needs whose names
        begin with this prefix.  Otherwise, you run the risk that a
        future release of Subversion will grow support for a feature
        or behavior driven by a property of the same name but with
        perhaps an entirely different interpretation. Properties show up elsewhere in Subversion, too.  Just as
      files and directories may have arbitrary property names and
      values attached to them, each revision as a whole may have
      arbitrary properties attached to it.  The same constraints
      apply human-readable names and anything-you-want binary
      values.  The main difference is that revision properties are not
      versioned.  In other words, if you change the value of, or
      delete, a revision property, there&#39;s no way, within the scope of
      Subversion&#39;s functionality, to recover the previous value. Subversion has no particular policy regarding the use of
      properties.  It asks only that you do not use property names that
      begin with the prefix  svn:  as that&#39;s the
      namespace that it sets aside for its own use.  And Subversion
      does, in fact, use properties both the versioned and
      unversioned variety.  Certain versioned properties have special
      meaning or effects when found on files and directories, or they
      house a particular bit of information about the revisions on
      which they are found.  Certain revision properties are
      automatically attached to revisions by Subversion&#39;s commit
      process, and they carry information about the revision.  Most of
      these properties are mentioned elsewhere in this or other
      chapters as part of the more general topics to which they are
      related.  For an exhaustive list of Subversion&#39;s predefined
      properties, see  . While Subversion automatically attaches properties
        ( svn:date ,  svn:author ,
         svn:log , and so on) to revisions, it does
         not  presume thereafter the existence of
        those properties, and neither should you or the tools you use to
        interact with your repository.  Revision properties can be
        deleted programmatically or via the client (if allowed by the
        repository hooks) without damaging Subversion&#39;s ability to
        function.  So, when writing scripts which operate on your
        Subversion repository data, do not make the mistake of
        assuming that any particular revision property exists on a
        revision. In this section, we will examine the utility both to
      users of Subversion and to Subversion itself of property
      support.  You&#39;ll learn about the property-related
       svn  subcommands and how property
      modifications affect your normal Subversion workflow. Why Properties? Just as Subversion uses properties to store extra
        information about the files, directories, and revisions that
        it contains, you might also find properties to be of similar
        use.  You might find it useful to have a place
        close to your versioned data to hang custom metadata about
        that data. Say you wish to design a web site that houses many digital
        photos and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you&#39;d like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors. Now, you can get this functionality using traditional
        files.  That is, you can have your
         image123.jpg  and an
         image123-thumbnail.jpg  side by side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, such as
         thumbnails/image123.jpg .  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  But the problem here
        is that your collection of files multiplies with each new
        photo added to the site. Now consider the same web site deployed in a way that
        makes use of Subversion&#39;s file properties.  Imagine having a
        single image file,  image123.jpg , with
        properties set on that file that are named
         caption ,  datestamp , and
        even  thumbnail .  Now your working copy
        directory looks much more manageable in fact, it looks
        to the casual browser like there are nothing but image files
        in it.  But your automation scripts know better.  They know
        that they can use  svn  (or better yet, they
        can use the Subversion language bindings see  ) to dig out the extra
        information that your site needs to display without having to
        read an index file or play path manipulation games. While Subversion places few restrictions on the names
          and values you use for properties, it has not been designed
          to optimally carry large property values or large sets of
          properties on a given file or directory.  Subversion
          commonly holds all the property names and values associated
          with a single item in memory at the same time, which can
          cause detrimental performance or failed operations when
          extremely large property sets are used. Custom revision properties are also frequently used.  One
        common such use is a property whose value contains an issue
        tracker ID with which the revision is associated, perhaps
        because the change made in that revision fixes a bug filed in
        the tracker issue with that ID.  Other uses include hanging
        more friendly names on the revision it might be hard to
        remember that revision 1935 was a fully tested revision.  But
        if there&#39;s, say, a  test-results  property on
        that revision with the value  all passing ,
        that&#39;s meaningful information to have.  And Subversion allows
        you to easily do this via the  --with-revprop 
        option of the  svn commit  command: 
$ svn commit -m &quot;Fix up the last remaining known regression bug.&quot; \
             --with-revprop &quot;test-results=all passing&quot;
Sending        lib/crit_bits.c
Transmitting file data .
Committed revision 912.
$
 Searchability (or, Why  Not 
          Properties) For all their utility, Subversion properties or,
          more accurately, the available interfaces to them have
          a major shortcoming: while it is a simple matter to
           set  a custom property,
           finding  that property later is a whole
          different ball of wax. Trying to locate a custom revision property generally
          involves performing a linear walk across all the revisions
          of the repository, asking of each revision,  Do you
          have the property I&#39;m looking for?   Use
          the  --with-all-revprops  option with
          the  svn log  command&#39;s XML output mode to
          facilitate this search.  Notice the presence of the custom
          revision property  testresults  in the
          following output: 
$ svn log --with-all-revprops --xml lib/crit_bits.c
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;log&gt;
&lt;logentry
   revision=&quot;912&quot;&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2011-07-29T14:47:41.169894Z&lt;/date&gt;
&lt;msg&gt;Fix up the last remaining known regression bug.&lt;/msg&gt;
&lt;revprops&gt;
&lt;property
   name=&quot;testresults&quot;&gt;all passing&lt;/property&gt;
&lt;/revprops&gt;
&lt;/logentry&gt;
 
$
 Trying to find a custom versioned property is painful,
          too, and often involves a recursive  svn
          propget  across an entire working copy.  In your
          situation, that might not be as bad as a linear walk across
          all revisions.  But it certainly leaves much to be desired
          in terms of both performance and likelihood of success,
          especially if the scope of your search would require a
          working copy from the root of your repository. For this reason, you might choose especially in
          the revision property use case to simply add your
          metadata to the revision&#39;s log message using some
          policy-driven (and perhaps programmatically enforced)
          formatting that is designed to be quickly parsed from the
          output of  svn log .  It is quite common to
          see the following in Subversion log messages: 
Issue(s): IZ2376, IZ1919
Reviewed by:  sally

This fixes a nasty segfault in the wort frabbing process
 
 But here again lies some misfortune.  Subversion doesn&#39;t
          yet provide a log message templating mechanism, which would
          go a long way toward helping users be consistent with the
          formatting of their log-embedded revision metadata. Manipulating Properties The  svn  program affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command line of the  svn propset 
        subcommand: 
$ svn propset copyright &#39;(c) 2006 Red-Bean Software&#39; calc/button.c
property &#39;copyright&#39; set on &#39;calc/button.c&#39;
$
 But we&#39;ve been touting the flexibility that Subversion
        offers for your property values.  And if you are planning to
        have a multiline textual, or even binary, property value, you
        probably do not want to supply that value on the command line.
        So the  svn propset  subcommand takes a
         --file  ( -F ) option for
        specifying the name of a file that contains the new property
        value. 
$ svn propset license -F /path/to/LICENSE calc/button.c
property &#39;license&#39; set on &#39;calc/button.c&#39;
$
 There are some restrictions on the names you can use for
        properties.  A property name must start with a letter, a colon
        ( : ), or an underscore
        ( _ ); after that, you can also use digits,
        hyphens ( - ), and periods
        ( . ). If you&#39;re familiar with
        XML, this is pretty much the ASCII subset of the syntax for
        XML  Name . In addition to the  propset  command, the
         svn  program supplies the
         propedit  command.  This command uses the
        configured editor program (see  ) to add or
        modify properties.  When you run the command,
         svn  invokes your editor program on a
        temporary file that contains the current value of the property
        (or that is empty, if you are adding a new property).  Then,
        you just modify that value in your editor program until it
        represents the new value you wish to store for the property,
        save the temporary file, and then exit the editor program.  If
        Subversion detects that you&#39;ve actually changed the existing
        value of the property, it will accept that as the new property
        value.  If you exit your editor without making any changes, no
        property modification will occur: 
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property &#39;copyright&#39; on &#39;calc/button.c&#39;
$
 We should note that, as with other  svn 
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done the following: 
$ svn propset copyright &#39;(c) 2006 Red-Bean Software&#39; calc/*
property &#39;copyright&#39; set on &#39;calc/Makefile&#39;
property &#39;copyright&#39; set on &#39;calc/button.c&#39;
property &#39;copyright&#39; set on &#39;calc/integer.c&#39;
 
$
 All of this property adding and editing isn&#39;t really very
        useful if you can&#39;t easily get the stored property value.  So
        the  svn  program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The  svn proplist 
        command will list the names of properties that exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using  svn
        propget .  This command will, given a property name
        and a path (or set of paths), print the value of the property
        to the standard output stream. 
$ svn proplist calc/button.c
Properties on &#39;calc/button.c&#39;:
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2006 Red-Bean Software
 There&#39;s even a variation of the
         proplist  command that will list both the
        name and the value for all of the properties.  Simply supply the
         --verbose  ( -v ) option. 
$ svn proplist -v calc/button.c
Properties on &#39;calc/button.c&#39;:
  copyright
    (c) 2006 Red-Bean Software
  license
    ================================================================
    Copyright (c) 2006 Red-Bean Software.  All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions 
    are met:

    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions, and the recipe for Fitz&#39;s famous
    red-beans-and-rice.
     
 The last property-related subcommand is
         propdel .  Since Subversion allows you to
        store properties with empty values, you can&#39;t remove a
        property altogether using  svn propedit  or
         svn propset .  For example, this command will
         not  yield the desired effect: 
$ svn propset license &quot;&quot; calc/button.c
property &#39;license&#39; set on &#39;calc/button.c&#39;
$ svn proplist -v calc/button.c
Properties on &#39;calc/button.c&#39;:
  copyright
    (c) 2006 Red-Bean Software
  license
    
$
 You need to use the  propdel  subcommand
        to delete properties altogether.  The syntax is similar to the
        other property commands: 
$ svn propdel license calc/button.c
property &#39;license&#39; deleted from &#39;calc/button.c&#39;.
$ svn proplist -v calc/button.c
Properties on &#39;calc/button.c&#39;:
  copyright
    (c) 2006 Red-Bean Software
$
 Remember those unversioned revision properties?  You can
        modify those, too, using the same  svn 
        subcommands that we just described.  Simply add the
         --revprop  command-line parameter and specify
        the revision whose property you wish to modify.  Since
        revisions are global, you don&#39;t need to specify a target path
        to these property-related commands so long as you are
        positioned in a working copy of the repository whose revision
        property you wish to modify.  Otherwise, you can simply
        provide the URL of any path in the repository of interest
        (including the repository&#39;s root URL).  For example, you might
        want to replace the commit log message of an existing
        revision. Fixing spelling errors, grammatical
        gotchas, and  just-plain-wrongness  in commit log
        messages is perhaps the most common use case for
        the  --revprop  option.   If
        your current working directory is part of a working copy of
        your repository, you can simply run the
         svn propset  command with no target path: 
$ svn propset svn:log &quot;* button.c: Fix a compiler warning.&quot; -r11 --revprop
property &#39;svn:log&#39; set on repository revision &#39;11&#39;
$
 But even if you haven&#39;t checked out a working copy from
        that repository, you can still effect the property change by
        providing the repository&#39;s root URL: 
$ svn propset svn:log &quot;* button.c: Fix a compiler warning.&quot; -r11 --revprop \
              http://svn.example.com/repos/project
property &#39;svn:log&#39; set on repository revision &#39;11&#39;
$
 Note that the ability to modify these unversioned
        properties must be explicitly added by the repository
        administrator (see  ).
        That&#39;s because the properties aren&#39;t versioned, so you run the risk of
        losing information if you aren&#39;t careful with your edits.
        The repository administrator can set up methods to protect
        against this loss, and by default, modification of
        unversioned properties is disabled. Users should, where possible, use  svn
          propedit  instead of  svn
          propset .  While the end result of the commands is
          identical, the former will allow them to see the current
          value of the property that they are about to change, which helps
          them to verify that they are, in fact, making the change
          they think they are making.  This is especially true when
          modifying unversioned revision properties.  Also, it is
          significantly easier to modify multiline property values in
          a text editor than at the command line. Properties and the Subversion Workflow Now that you are familiar with all of the
        property-related  svn  subcommands, let&#39;s see
        how property modifications affect the usual Subversion
        workflow.  As we mentioned earlier, file and directory
        properties are versioned, just like your file contents.  As a
        result, Subversion provides the same opportunities for
        merging cleanly or with conflicts someone
        else&#39;s modifications into your own. As with file contents, your property changes are local
        modifications, made permanent only when you commit them to the
        repository with  svn commit .  Your property
        changes can be easily unmade, too the  svn
        revert  command will restore your files and
        directories to their unedited states contents, properties,
        and all.  Also, you can receive interesting information about
        the state of your file and directory properties by using the
         svn status  and  svn diff 
        commands. 
$ svn status calc/button.c
 M      calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Added: copyright
## -0,0 +1 ##
+(c) 2006 Red-Bean Software
$
 Notice how the  status  subcommand
        displays  M  in the second column instead of
        the first.  That is because we have modified the properties on
         calc/button.c , but not its textual
        contents.  Had we changed both, we would have seen
         M  in the first column, too.  (We cover
         svn status  in  ). Property Conflicts As with file contents, local property modifications can
          conflict with changes committed by someone else.  If you
          update your working copy directory and receive property
          changes on a versioned object that clash with your own,
          Subversion will report that the object is in a conflicted
          state. 
$ svn update calc
Updating &#39;calc&#39;:
M  calc/Makefile.in
Conflict for property &#39;linecount&#39; discovered on &#39;calc/button.c&#39;.
Select: (p) postpone, (df) diff-full, (e) edit,
        (s) show all options: p
 C calc/button.c
Updated to revision 143.
Summary of conflicts:
  Property conflicts: 1
$ 
 Subversion will also create, in the same directory as
          the conflicted object, a file with a
           .prej  extension that contains the
          details of the conflict.  You should examine the contents of
          this file so you can decide how to resolve the conflict.
          Until the conflict is resolved, you will see a
           C  in the second column of  svn
          status  output for that object, and attempts to
          commit your local modifications will fail. 
$ svn status calc
 C      calc/button.c
?       calc/button.c.prej
$ cat calc/button.c.prej 
Trying to change property &#39;linecount&#39; from &#39;1267&#39; to &#39;1301&#39;,
but property has been locally changed from &#39;1267&#39; to &#39;1256&#39;.
$
 To resolve property conflicts, simply ensure that the
          conflicting properties contain the values that they should,
          and then use the  svn resolve --accept=working 
          command to alert Subversion that you have manually resolved the
          problem. You might also have noticed the nonstandard way that
        Subversion currently displays property differences.  You can
        still use  svn diff  and redirect its output
        to create a usable patch file.  The  patch 
        program will ignore property patches as a rule, it
        ignores any noise it can&#39;t understand.  This does,
        unfortunately, mean that to fully apply a patch generated by
         svn diff  using  patch ,
        any property modifications will need to be applied by
        hand. Subversion 1.7 improves this situation in two ways.
        First, its nonstandard display of property differences is at
        least machine-readable an improvement over the display
        of properties in versions prior to 1.7.  But Subversion 1.7
        also introduces the  svn patch  subcommand,
        designed specifically to handle the additional information
        which  svn diff &#39;s output can carry, applying
        those changes to the Subversion working copy.  Of specific
        relevance to our topic, property differences present in patch
        files generated by  svn diff  in Subversion
        1.7 or better can be automatically applied to a working copy
        by the  svn patch  command.  For more
        about  svn patch , see
          in
         . There&#39;s one exception to how property changes are
          reported by  svn diff : changes to
          Subversion&#39;s special  svn:mergeinfo 
          property used to track information about merges which
          have been performed in your repository are described
          in a more human-readable fashion.  This is quite helpful to
          the humans who have to read those descriptions.  But it also
          serves to cause patching programs (including  svn
          patch ) to skip those change descriptions as noise.
          This might sound like a bug, but it really isn&#39;t because
          this property is intended to be managed solely by
          the  svn merge  subcommand.  For more about
          merge tracking, see  . Inherited Properties Subversion 1.8 introduces the concept of inherited properties.
        There is really nothing special about a property that makes it
        inheritable.  In fact, all versioned properties are inheritable!
        The main difference between versioned properties before 1.8 and
        after is that the latter provides a mechanism to find the
        properties set on a target path&#39;s  parents ,
        even if those parents are not found within the working copy.
         Generic property inheritance manifests itself in a few
        commands.  First, the  svn proplist  and  
        svn propget  subcommands can retrieve all the properties
        on a URL&#39;s or a working copy path&#39;s parents by using the  
        --show-inherited-props  option.  You might think of this
        as the opposite of a  --recursive  subcommand
        operation instead of recursing &quot;down&quot; into a target&#39;s
        subdirectories, subcommands with the  --show-inherited-props
          option look &quot;up&quot; into the target&#39;s parent directories.
        The  svnlook propget  and  svnlook
        proplist   subcommands also use the  
        --show-inherited-props  option in a similar fashion. Let&#39;s look at an example of how this works. The following
        recursive propget on the root of our working copy finds that the
         svn:auto-props  property is set on both the target
        of the subcommand and one of its subdirectories  site
         : 
$ svn pg svn:auto-props --verbose -R .
Properties on &#39;.&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

Properties on &#39;site&#39;:
  svn:auto-props
    *.html = svn:eol-style=native
 If we were to instead make the target of the subcommand the
        subdirectory  site , then using the  
        -show-inherited-props  option, we find that the  
        svn:auto-props  property is set on the target  
        and  its parent.  The parent&#39;s properties are called out
        as &quot;inherited&quot;: 
$ svn pg svn:auto-props --verbose --show-inherited-props site
Inherited properties on &#39;site&#39;,
from &#39;.&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

Properties on &#39;site&#39;:
  svn:auto-props
    *.html = svn:eol-style=native
 In the prior examples the root of the working copy
        corresponds to the root of the repository, but properties can
        also be inherited from outside the working copy when this is
        not the case.  Let&#39;s checkout the  site 
        directory from the prior example, making it the root of our
        working copy: 
$ svn co http://svn.example.com/repos site-wc
A    site-wc/publish
A    site-wc/publish/ch2.html
A    site-wc/publish/news.html
A    site-wc/publish/ch3.html
A    site-wc/publish/faq.html
A    site-wc/publish/index.html
A    site-wc/publish/ch1.html
 U   site-wc
Checked out revision 19.

$ cd site-wc
 Now when we check for inherited properties on a working copy
        path we can see that one property is inherited from a working
        copy parent and one from a repository parent representing a
        location &quot;above&quot; the root of the working copy: 
$ svn pg svn:auto-props --verbose --show-inherited-props publish
Inherited properties on &#39;publish&#39;,
from &#39;http://svn.example.com/repos&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

Inherited properties on &#39;publish&#39;,
from &#39;.&#39;:
  svn:auto-props
    *.html = svn:eol-style=native
 You can only inherit properties from repository paths
            which you have read authorization to see
              and
             .  If you
            don&#39;t have read authorization to a parent path then it will
            appear as if the parent has no properties set on it.
           As mentioned above, the  svnlook proplist 
        and  svnlook propget  commands also support the
         --show-inherited-props  option, but instead of
        reporting the inherited props by working copy path or URL, they
        are listed by repository paths: 
$ svnlook pg repos svn:auto-props /site/publish --show-inherited-props -v
Inherited properties on &#39;/site/publish&#39;,
from &#39;/&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

Inherited properties on &#39;/site/publish&#39;,
from &#39;/site&#39;:
  svn:auto-props
    *.html = svn:eol-style=native
 Properties inherited from above the root of the working copy
        are cached in the working copy&#39;s administrative database when the
        working copy is initially checked out and then refreshed whenever
        the working copy is updated.  This means that you don&#39;t need
        access to your repository to view inherited properties.  This
        allows Subversion subcommands that have traditionally not
        required access to the repository (e.g.  svn add 
        ) to remain &quot;disconnected&quot; while still accessing properties
        inherited from paths not found in the working copy.  However it
        also means that inherited properties from above the root of the
        working copy may have changed since your most recent update,
        causing your local cache to become out of date.  So if you require
        the absolute latest value of some inherited property, it&#39;s always
        safest to update your working copy first or query the repository
        directly. At this point you might be thinking, &quot;nice trick, but what
        good is it?&quot;  By itself property inheritance isn&#39;t very useful.
        Before 1.8, all of Subversion&#39;s own reserved  svn:*
          properties (and likely all of your own custom user
        properties) applied only to the path on which they were set or
        at most, the path&#39;s immediate children The one
        noteable exception to this being the  svn:mergeinfo
          property, which is inheritable see
         
           Rather, inheritable properties are a tool
        that Subversion uses to do other more interesting things, like
        setting automatic properties with the  svn:auto-props
          property or repository-wide ignores with the  
        svn:global-ignores  property see
          and
          for more
        information about these special properties and how to use them.
         Currently inheritable properties are primarily useful only
            as regards the  svn:auto-props  and  
            svn:global-ignores  properties but that doesn&#39;t mean
            those two properties are the end of the story.  Look for more
            features to be built with inherited properties in future
            releases of Subversion a log message templating mechanism
            comes to mind.  In the meantime feel free to use the feature
            however you&#39;d like.  Any piece of versioned metadata you want
            to apply to your whole repository (or large subsections
            thereof) can easily be stored in a property on the root of
            your repository (or the appropriate subtree).  We suspect that
            some users and administrators will come up with clever ways to
            use inheritable properties which we never considered. Automatic Property Setting Properties are a powerful feature of Subversion, acting as
        key components of many Subversion features discussed elsewhere
        in this and other chapters textual diff and merge
        support, keyword substitution, newline translation, and so on.  But
        to get the full benefit of properties, they must be set on the
        right files and directories.  Unfortunately, that
        step can be easily forgotten in the routine of things, especially
        since failing to set a property doesn&#39;t usually result in an
        obvious error (at least compared to, say, failing to
        add a file to version control).  To help your properties get
        applied to the places that need them, Subversion provides a
        few simple but useful features. Whenever you introduce a file to version control using the
         svn add  or  svn import 
        commands, Subversion tries to assist by setting some common
        file properties automatically.  First, on operating systems
        whose filesystems support an execute permission bit,
        Subversion will automatically set the
         svn:executable  property on newly added or
        imported files whose execute bit is enabled.  (See   later in
        this chapter for more about this property.) Second, Subversion tries to determine the file&#39;s MIME
        type.  If you&#39;ve configured a
         mime-types-files  runtime configuration
        parameter, Subversion will try to find a MIME type mapping in
        that file for your file&#39;s extension.  If it finds such a
        mapping, it will set your file&#39;s
         svn:mime-type  property to the MIME type it
        found.  If no mapping file is configured, or no mapping for
        your file&#39;s extension could be found, Subversion will fall
        back to heuristic algorithms to determine the file&#39;s MIME
        type.  Depending on how it is built, Subversion 1.7 can make
        use of file scanning libraries Currently,
        libmagic is the support library used to accomplish
        this.  to detect a file&#39;s type based on its
        content.  Failing all else, Subversion will employ its own
        very basic heuristic to determine whether the file contains
        nontextual content.  If so, it automatically sets the
         svn:mime-type  property on that file to
         application/octet-stream  (the generic
         this is a collection of bytes  MIME type).  Of
        course, if Subversion guesses incorrectly, or if you wish to
        set the  svn:mime-type  property to something
        more precise perhaps  image/png  or
         application/x-shockwave-flash you can
        always remove or edit that property.  (For more on
        Subversion&#39;s use of MIME types, see   later in
        this chapter.) UTF-16 is commonly used to encode files whose semantic
          content is textual in nature, but the encoding itself makes
          heavy use of bytes which are outside the typical ASCII
          character byte range.  As such, Subversion will tend to
          classify such files as binary files, much to the chagrin of
          users who desire line-based differencing and merging,
          keyword substitution, and other behaviors for those
          files. Subversion also provides, via its runtime configuration
        system (see  ), a more
        flexible automatic property setting feature that allows you
        to create mappings of filename patterns to property names and
        values.  Once again, these mappings affect adds and imports,
        and can not only override the default MIME type decision made
        by Subversion during those operations, but can also set
        additional Subversion or custom properties, too.  For example,
        you might create a mapping that says that anytime you add
        JPEG files ones whose names match the pattern
         *.jpg Subversion should automatically
        set the  svn:mime-type  property on those
        files to  image/jpeg .  Or perhaps any files
        that match  *.cpp  should have
         svn:eol-style  set to
         native , and  svn:keywords 
        set to  Id .  For more details on automatic
        property support in the runtime configuration see  . While automatic property support via the runtime
        configuration system is certainly handy, Subversion
        administrators might prefer a set of property definitions
        which all connecting clients automatically consider when
        operating on working copies checked out from a given server.
        Subversion 1.8 and newer clients support such functionality
        through the  svn:auto-props  inheritable
        property. The  svn:auto-props  property works like
        the runtime configuration to automatically set properties on
        files when they are added or imported.  The value of the
         svn:auto-props  property is expected to be
        the same as the  auto-props  runtime
        configuration option (i.e. Any number of key-value pairs in
        the format FILE_PATTERN = PROPNAME=VALUE[;PROPNAME=VALUE ...])
        Like the  auto-props  runtime option, the
         svn:auto-props  property can be disregarded
        when using the  --no-auto-props  option, but unlike
        the config option, the  svn:auto-props  property
        is  not  disabled when the
         enable-auto-props  configuration option is set
        to  no .
         For example, say you have checked out a working copy of your
         trunk  branch and need to add a new file
        (let&#39;s assume that automatic properties in your runtime
        configuration are disabled): 
$ svn st
?       calc/data.c

$ svn add calc/data.c
A         calc/data.c

$ svn proplist -v calc/data.c
Properties on &#39;calc/data.c&#39;:
  svn:eol-style
    native
 Notice that after you place the unversioned file
         data.c  under version control the
         svn:eol-style  property was automatically set
        on it.  Since we assumed that the  auto-props 
        runtime configuration option is disabled, we know
        that the  svn:auto-props  property must be set
        on some parent path of  data.c .  Using the
         svn propget  subcommand with the
         --show-inherited-props  option we see that this
        is indeed the case: 
$ svn propget svn:auto-props --show-inherited-props -v calc
Inherited properties on &#39;calc&#39;,
from &#39;http://svn.example.com/repos&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native
 Unlike the  svn:global-ignores  property and
        its analogous runtime configuration
         global-ignores , which are combined, the
         svn:auto-props  property
         overrides  the  auto-props 
        runtime configuration if it defines an auto-prop for the
         same  pattern as the runtime configuration.
        Automatic properties inherited Remember that users
        can only inherit properties from paths for which they have read
        access.  So if an administrator sets
         svn:auto-props  on some high-level parent
        path (e.g. the repository root), they need to be sure all users
        have read access to that path or the desired automatic property
        setting won&#39;t kick in.  from one path can also
        override the  identical  pattern inherited from
        a different path.  The hierarchy of these overrides works as
        follows: An auto-prop, for a given pattern, defined in
             svn:auto-props  overrides the same auto-prop
            for the identical pattern in the  auto-props 
            runtime configuration. If an auto-prop, for a given pattern, is inherited from
            more than one parents&#39;  svn:auto-props 
            property, the nearer path-wise parent overrides the more
            distant parents. An auto-prop, for a given pattern, defined in a
             svn:auto-props  property explicitly set on
            a path overrides the same auto-prop(s) for the identical
            pattern inherited from any parents. Let&#39;s look at an example.  Suppose you have this runtime
        configuration: 
[miscellany]
enable-auto-props = yes
[auto-props]
*.py  = svn:eol-style=CR
*.c   = svn:eol-style=CR
*.h   = svn:eol-style=CR
*.cpp = svn:eol-style=CR
 And you want to add three files in the  calc 
        directory of your working copy: 
$ svn st
?       calc/data-binding.cpp
?       calc/data.c
?       calc/editor.py
 Let&#39;s check what  svn:auto-props  apply to
         calc : 
$ svn propget svn:auto-props -v --show-inherited-props calc
Inherited properties on &#39;calc&#39;,
from &#39;http://svn.example.com/repos&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

Inherited properties on &#39;calc&#39;,
from &#39;.&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:keywords=Author Date Id Rev URL
 When we add these three files what auto-props do we expect?
        We add the trio to version control and then check: 
$ svn add calc --force
A         calc/data-binding.cpp
A         calc/data.c
A         calc/editor.py
 The file  data-binding.cpp  has only one
        matching pattern,  *.cpp = svn:eol-style=CR 
        in the runtime configuration, so obviously the
         svn:eol-style  property is set to
         CR : 
$ svn proplist -v calc/data-binding.cpp
Properties on &#39;calc/data-binding.cpp&#39;:
  svn:eol-style
    CR
 The file  editor.py  matches a single
        pattern in runtime config and both of the
         svn:auto-props  properties, but by the hierarchy
        described above, the property explicitly set on
         calc ,
         *.py = svn:eol-style=native , takes precedence.
        So the  svn:eol-style  property is set to
         native: : 
$ svn proplist -v calc/editor.py
Properties on &#39;calc/editor.py&#39;:
  svn:eol-style
    native
 The file  data.c  also matches patterns
        in the runtime config and both of the inherited
         svn:auto-props  properties.  The
         svn:keywords  auto-prop is only defined once,
        on  calc , so  data.c 
        automatically gets that property.  The
         svn:auto-props  on  calc 
        don&#39;t define a  svn:eol-style  value however, so
        the nearest inherited parent,
         http://svn.example.com/repos ,
        provides that value: 
$ svn proplist -v calc/data.c
Properties on &#39;calc/data.c&#39;:
  svn:eol-style
    native
  svn:keywords
    Author Date Id Rev URL
 Overriding auto-props only applies for
           identical  patterns.  If a file to be added
          or imported matches more than one pattern, then there is no
          guarantee which pattern&#39;s auto-props will be applied.  For
          example, say you want to add the file
           foo.cpp  in the directory
           bar .  Further, suppose the
           svn:auto-props  property is set on
           bar  with the value: 
*.c*  = svn:eol-style=native
*.cpp = svn:eol-style=native;svn:keywords=Author Date Id Rev URL
 Since  foo.cpp  matches both patterns,
          there is no way to know if the  svn:keywords 
          property will be set on  foo.cpp  when it
          is added. A final note on  svn:auto-props .  This
        property (along with the similar
         svn:global-ignores , see
         )
        only provides a  recommendation  to clients
        that understand the meaning of the property.  Older clients will
        ignore these properties, the  --no-auto-props 
        option will disregard them, a user might manually change or remove
        automatic properties after they have been set there are
        numerous ways in which the recommended properties contained in
         svn:auto-props  can be by-passed.  Given
        this, administrators will still need to use hook scripts to
        validate that the properties added to and modified on files
        and directories match the administrator&#39;s preferred policies,
        rejecting commits which are non-compliant in this fashion.
        (See   for more about
        hook scripts.) Subversion&#39;s Reserved Properties In this section, we&#39;ll briefly summarize all the
        properties which Subversion reserves for its own use.  We&#39;ll
        look at both types of properties those which are
        associated with individual versioned files and directories,
        and those which are associated with revisions. Versioned properties These are the versioned (or node) properties that
          Subversion reserves for its own use: svn:auto-props If present on a directory, the value is a set of
                automatic property definitions which apply to all files
                under the directory, See
                 . svn:executable If present on a file, the client will make the file
                executable in Unix-hosted working copies.  See
                 . svn:mime-type If present on a file, the value indicates the file&#39;s
                MIME type.  This allows the client to decide whether
                line-based contextual merging is safe to perform during
                updates, and can also affect how the file behaves when
                fetched via a web browser.  See
                 . svn:ignore If present on a directory, the value is a list of
                 unversioned  file patterns to be
                ignored by  svn status  and other
                subcommands.  See
                 . svn:global-ignores If present on a directory, the value is a list of
                 unversioned  file patterns to be
                ignored by  svn status  and other
                subcommands.  Unlike  svn:ignore  these
                patterns apply to  all  unversioned
                subtrees under the directory, not just the directory&#39;s
                immediate file children.  See
                 . svn:keywords If present on a file, the value tells the client how
                to expand particular keywords within the file.  See
                 . svn:eol-style If present on a file, the value tells the client how
                to manipulate the file&#39;s line-endings in the working
                copy and in exported trees.  See
                 
                and  . svn:externals If present on a directory, the value is a multiline
                list of other paths and URLs the client should check
                out.  See  . svn:special If present on a file, indicates that the file is not
                an ordinary file, but a symbolic link or other special
                object. As of this writing, symbolic
                links are indeed the only  special 
                objects.  But there might be more in future releases of
                Subversion. svn:needs-lock If present on a file, tells the client to make the
                file read-only in the working copy, as a reminder that
                the file should be locked before editing begins.  See
                 . svn:mergeinfo Used by Subversion to track merge data.  See
                  for details, but you should never edit this property
                unless you  really  know what you&#39;re
                doing. Unversioned properties The following are the unversioned (or revision) properties
          that Subversion reserves for its own use.  Most of these
          appear on every revision in the repository, carrying important
          information about the origin and nature of the changes made in
          that revision. svn:author If present, contains the authenticated username of
                the person who created the revision.  (If not present,
                the revision was committed anonymously.) svn:autoversioned If present, the revision was created via the
                autoversioning feature.  See
                 . svn:date Contains the UTC time the revision was created, in
                ISO 8601 format.  The value comes from the
                 server  machine&#39;s clock, not the
                client&#39;s. svn:log Contains the log message describing the
                revision. Certain auxiliary tools in the Subversion
          toolchain namely,  svnrdump 
          and  svnsync also use unversioned
          properties for their own accounting purposes.  These
          properties are found only on revision 0 of repositories on
          which these tools are operating.  For more about
           svnrdump  and  svnsync  and
          the functionality they offer, see
           .  The following are the
          properties created and managed by these tools. svn:rdump-lock Used to temporarily enforce mutually exclusive
                access to the repository by  svnrdump
                load .  This property is generally only
                observed when such an operation is active or when
                an  svnrdump  command failed to cleanly
                disconnect from the repository.  (This property is only
                relevant when it appears on revision 0.) svn:sync-currently-copying Contains the revision number from the source
                repository which is currently being mirrored to this one
                by the  svnsync  tool.  (This property
                is only relevant when it appears on revision 0.) svn:sync-from-uuid Contains the UUID of the repository of which this
                repository has been initialized as a mirror by
                the  svnsync  tool.  (This property is
                only relevant when it appears on revision 0.) svn:sync-from-url Contains the URL of the repository directory of
                which this repository has been initialized as a mirror
                by the  svnsync  tool.  (This property
                is only relevant when it appears on revision 0.) svn:sync-last-merged-rev Contains the revision of the source repository which
                was most recently and successfully mirrored to this one.
                (This property is only relevant when it appears on
                revision 0.) svn:sync-lock Used to temporarily enforce mutually exclusive
                access to the repository by  svnsync 
                mirroring operations.  This property is generally only
                observed when such an operation is active or when
                an  svnsync  command failed to cleanly
                disconnect from the repository.  (This property is
                only relevant when it appears on revision 0.) File Portability Fortunately for Subversion users who routinely find
      themselves on different computers with different operating
      systems, Subversion&#39;s command-line program behaves almost
      identically on all those systems.  If you know how to wield
       svn  on one platform, you know how to wield it
      everywhere. However, the same is not always true of other general classes
      of software or of the actual files you keep in Subversion.  For
      example, on a Windows machine, the definition of a  text
      file  would be similar to that used on a Linux box, but
      with a key difference the character sequences used to mark
      the ends of the lines of those files.  There are other
      differences, too.  Unix platforms have (and Subversion supports)
      symbolic links; Windows does not.  Unix platforms use filesystem
      permission to determine executability; Windows uses filename
      extensions. Because Subversion is in no position to unite the whole
      world in common definitions and implementations of all of these
      things, the best it can do is to try to help make your life
      simpler when you need to work with your versioned files and
      directories on multiple computers and operating systems.  This
      section describes some of the ways Subversion does this. File Content Type Subversion joins the ranks of the many applications that
        recognize and make use of Multipurpose Internet Mail
        Extensions (MIME) content types.  Besides being a
        general-purpose storage location for a file&#39;s content type,
        the value of the  svn:mime-type  file
        property determines some behavioral characteristics of
        Subversion itself. Identifying File Types Various programs on most modern operating systems make
          assumptions about the type and format of the contents of a
          file by the file&#39;s name, specifically its file extension.
          For example, files whose names end in
           .txt  are generally assumed to be
          human-readable; that is, able to be understood by simple perusal
          rather than requiring complex processing to decipher.  Files
          whose names end in  .png , on the other
          hand, are assumed to be of the Portable Network Graphics
          type not human-readable at all, and sensible only when
          interpreted by software that understands the PNG format and
          can render the information in that format as a raster
          image. Unfortunately, some of those extensions have changed
          their meanings over time.  When personal computers first appeared,
          a file named  README.DOC  would have
          almost certainly been a plain-text file, just like today&#39;s
           .txt  files.  But by the mid-1990s, you
          could almost bet that a file of that name would not be a
          plain-text file at all, but instead a Microsoft Word
          document in a proprietary, non-human-readable format.  But
          this change didn&#39;t occur overnight there was certainly
          a period of confusion for computer users over what exactly
          they had in hand when they saw a  .DOC 
          file. You think that was rough?  During that
          same era, WordPerfect also used  .DOC 
          for their proprietary file format&#39;s preferred
          extension! The popularity of computer networking cast still more
          doubt on the mapping between a file&#39;s name and its content.
          With information being served across networks and generated
          dynamically by server-side scripts, there was often no real
          file per se, and therefore no filename.  Web
          servers, for example, needed some other way to tell browsers
          what they were downloading so that the browser could do something
          intelligent with that information, whether that was to
          display the data using a program registered to handle that
          datatype or to prompt the user for where on the client
          machine to store the downloaded data. Eventually, a standard emerged for, among other things,
          describing the contents of a data stream.  In 1996, RFC 2045
          was published.  It was the first of five RFCs describing
          MIME.  It describes the concept of media types and subtypes
          and recommends a syntax for the representation of those
          types.  Today, MIME media types or  MIME
          types are used almost universally across
          email applications, web servers, and other software as the
          de facto mechanism for clearing up the file content
          confusion. For example, one of the benefits that Subversion typically
        provides is contextual, line-based merging of changes received
        from the server during an update into your working file.  But
        for files containing nontextual data, there is often no
        concept of a  line.   So, for versioned files
        whose  svn:mime-type  property is set to a
        nontextual MIME type (generally, something that doesn&#39;t begin
        with  text/ , though there are exceptions),
        Subversion does not attempt to perform contextual merges
        during updates.  Instead, any time you have locally modified a
        binary working copy file that is also being updated, your file
        is left untouched and Subversion creates two new files.  One
        file has a  .oldrev  extension and contains
        the BASE revision of the file.  The other file has a
         .newrev  extension and contains the
        contents of the updated revision of the file.  This behavior
        is really for the protection of the user against failed
        attempts at performing contextual merges on files that simply
        cannot be contextually merged. Additionally, since the acts of displaying line-based
        differences and line-based change attribution are, rather
        obviously, dependent on there being a meaningful definition
        of  line  for a given file, files with nontextual
        MIME types will by default trigger errors when used as the
        targets of  svn diff  and  svn
        annotate  operations.  This can be especially
        frustrating for users with XML files whose
         svn:mime-type  property is set to something
        such as  application/xml  which is not
        unambiguously human-readable and as such is treated as
        nontextual by Subversion.  Fortunately, those subcommands
        offer a  --force  option for forcing
        Subversion to attempt the operations in spite of the apparent
        non-human-readability of the files. The  svn:mime-type  property, when set
          to a value that does not indicate textual file contents, can
          cause some unexpected behaviors with respect to other
          properties.  For example, since the idea of line endings
          (and therefore, line-ending conversion) makes no sense when
          applied to nontextual files, Subversion will prevent you
          from setting the  svn:eol-style  property
          on such files.  This is obvious when attempted on a single
          file target svn propset  will error
          out.  But it might not be as clear if you perform a
          recursive property set, where Subversion will silently skip
          over files that it deems unsuitable for a given
          property. Subversion provides a number of mechanisms by which to
        automatically set the  svn:mime-type 
        property on a versioned file.  See
          for details. Also, if the  svn:mime-type  property is
        set, then the Subversion Apache module will use its value to
        populate the  Content-type:  HTTP header when
        responding to GET requests.  This gives your web browser a
        crucial clue about how to display a file when you use it to
        peruse your Subversion repository&#39;s contents. File Executability On many operating systems, the ability to execute a file
        as a command is governed by the presence of an execute
        permission bit.  This bit usually defaults to being disabled,
        and must be explicitly enabled by the user for each file that
        needs it.  But it would be a monumental hassle to have to
        remember exactly which files in a freshly checked-out working
        copy were supposed to have their executable bits toggled on,
        and then to have to do that toggling.  So, Subversion provides
        the  svn:executable  property as a way to
        specify that the executable bit for the file on which that
        property is set should be enabled, and Subversion honors that
        request when populating working copies with such files. This property has no effect on filesystems that have no
        concept of an executable permission bit, such as FAT32 and
        NTFS. The Windows filesystems use file
        extensions (such
        as  .EXE ,  .BAT , and
         .COM ) to denote executable
        files.   Also, although it has no defined
        values, Subversion will force its value
        to  *  when setting this property.  Finally,
        this property is valid only on files, not on
        directories. End-of-Line Character Sequences Unless otherwise noted using a versioned file&#39;s
         svn:mime-type  property, Subversion
        assumes the file contains human-readable data.  Generally
        speaking, Subversion uses this knowledge only to determine
        whether contextual difference reports for that file are
        possible.  Otherwise, to Subversion, bytes are bytes. line endings end-of-line (EOL) markers line endings This means that by default, Subversion doesn&#39;t pay
        any attention to the type of  end-of-line (EOL)
        markers  used in your files.  Unfortunately,
        different operating systems have different conventions about
        which character sequences represent the end of a line of text
        in a file.  For example, the usual line-ending token used by
        software on the Windows platform is a pair of ASCII control
        characters a carriage return ( CR )
        followed by a line feed ( LF ).  Unix
        software, however, just uses the  LF 
        character to denote the end of a line. line endings native Not all of the various tools on these operating
        systems understand files that contain line endings in a format
        that differs from the  native line-ending
        style  of the operating system on which they are
        running.  So, typically, Unix programs treat the
         CR  character present in Windows files as a
        regular character (usually rendered as  ^M ),
        and Windows programs combine all of the lines of a Unix file
        into one giant line because no  CR 
        characters are found to denote the ends of the lines. This sensitivity to foreign EOL markers can be
        frustrating for folks who share a file across different
        operating systems.  For example, consider a source code
        file, and developers who edit this file on both Windows and
        Unix systems.  If all the developers always use tools that
        preserve the line-ending style of the file, no problems
        occur. But in practice, many common tools either fail to
        properly read a file with foreign EOL markers, or
        convert the file&#39;s line endings to the native style when the
        file is saved.  If the former is true for a developer, he
        has to use an external conversion utility (such as
         dos2unix  or its companion,
         unix2dos ) to prepare the file for
        editing.  The latter case requires no extra preparation.
        But both cases result in a file that differs from the
        original quite literally on every line!  Prior to committing
        his changes, the user has two choices.  Either he can use a
        conversion utility to restore the modified file to the same
        line-ending style that it was in before his edits were made,
        or he can simply commit the file new EOL markers and
        all. The result of scenarios like these include wasted time
        and unnecessary modifications to committed files.  Wasted
        time is painful enough.  But when commits change every line
        in a file, this complicates the job of determining which of
        those lines were changed in a nontrivial way.  Where was
        that bug really fixed?  On what line was a syntax error
        introduced? The solution to this problem is the
         svn:eol-style  property.  When this
        property is set to a valid value, Subversion uses it to
        determine what special processing to perform on the file so
        that the file&#39;s line-ending style isn&#39;t flip-flopping with
        every commit that comes from a different operating
        system.  The valid values are: native This causes the file to contain the EOL markers
              that are native to the operating system on which
              Subversion was run.  In other words, if a user on a
              Windows machine checks out a working copy that
              contains a file with an
               svn:eol-style  property set to
               native , that file will contain
               CRLF  EOL markers.  A Unix user
              checking out a working copy that contains the same
              file will see  LF  EOL markers in his
              copy of the file. Note that Subversion will actually store the file
              in the repository using normalized
               LF  EOL markers regardless of the
              operating system.  This is basically transparent to
              the user, though. CRLF This causes the file to contain
               CRLF  sequences for EOL markers,
              regardless of the operating system in use. LF This causes the file to contain
               LF  characters for EOL markers,
              regardless of the operating system in use. CR This causes the file to contain
               CR  characters for EOL markers,
              regardless of the operating system in use.  This
              line-ending style is not very common. Ignoring Unversioned Items In any given working copy, there is a good chance that
      alongside all those versioned files and directories are other
      files and directories that are neither versioned nor intended
      to be.  Text editors litter directories with backup files.
      Software compilers generate intermediate or even
      final files that you typically wouldn&#39;t bother to
      version.  And users themselves drop various other files and
      directories wherever they see fit, often in version control
      working copies. It&#39;s ludicrous to expect Subversion working copies to be
      somehow impervious to this kind of clutter and impurity.  In
      fact, Subversion counts it as a  feature 
      that its working copies are just typical directories, just like
      unversioned trees.  But these not-to-be-versioned files and
      directories can cause some annoyance for Subversion users.  For
      example, because the  svn add  and  svn
      import  commands act recursively by default and don&#39;t
      know which files in a given tree you do and don&#39;t wish to
      version, it&#39;s easy to accidentally add stuff to version control
      that you didn&#39;t mean to.  And because  svn
      status  reports, by default, every item of interest in
      a working copy including unversioned files and
      directories its output can get quite noisy where many of
      these things exist. file patterns globs file patterns shell wildcard patterns file patterns So Subversion provides several ways for telling it
      which files you would prefer that it simply disregard.  One of
      the ways involves the use of Subversion&#39;s runtime configuration
      system (see  ), and
      therefore applies to all the Subversion operations that make use
      of that runtime configuration generally those performed on
      a particular computer or by a particular user of a computer.
      Two other methods make use of Subversion&#39;s directory property
      support and are more tightly bound to the versioned tree itself,
      and therefore affects everyone who has a working copy of that
      tree.  All of these mechanisms use  file
      patterns  (strings of literal and special wildcard
      characters used to match against filenames) to decide which
      files to ignore. The Subversion runtime configuration system provides an
      option,  global-ignores , whose value is a
      whitespace-delimited collection of file patterns.  The
      Subversion client checks these patterns against the names of the
      files that are candidates for addition to version control, as
      well as to unversioned files that the  svn
      status  command notices.  If any file&#39;s name matches
      one of the patterns, Subversion will basically act as if the
      file didn&#39;t exist at all.  This is really useful for the kinds
      of files that you almost never want to version, such as editor
      backup files such as Emacs&#39;  *~  and
       .*~  files. File Patterns in Subversion File patterns (also called  globs  or
         shell wildcard patterns ) are strings of
        characters that are intended to be matched against filenames,
        typically for the purpose of quickly selecting some subset of
        similar files from a larger grouping without having to
        explicitly name each file.  The patterns contain two types of
        characters:  regular characters, which are compared explicitly
        against potential matches, and special wildcard characters,
        which are interpreted differently for matching
        purposes. There are different types of file pattern syntaxes, but
        Subversion uses the one most commonly found in Unix systems
        implemented as the  fnmatch  system
        function.  It supports the following wildcards, described here
        simply for your convenience: ? Matches any single character * Matches any string of characters, including the
              empty string [ Begins a character class definition terminated by
               ] , used for matching a subset of
              characters You can see this same pattern matching behavior at a Unix
        shell prompt.  The following are some examples of patterns
        being used for various things: 
$ ls   ### the book sources
appa-quickstart.xml             ch06-server-configuration.xml
appb-svn-for-cvs-users.xml      ch07-customizing-svn.xml
appc-webdav.xml                 ch08-embedding-svn.xml
book.xml                        ch09-reference.xml
ch00-preface.xml                ch10-world-peace-thru-svn.xml
ch01-fundamental-concepts.xml   copyright.xml
ch02-basic-usage.xml            foreword.xml
ch03-advanced-topics.xml        images/
ch04-branching-and-merging.xml  index.xml
ch05-repository-admin.xml       styles.css
$ ls ch*   ### the book chapters
ch00-preface.xml                ch06-server-configuration.xml
ch01-fundamental-concepts.xml   ch07-customizing-svn.xml
ch02-basic-usage.xml            ch08-embedding-svn.xml
ch03-advanced-topics.xml        ch09-reference.xml
ch04-branching-and-merging.xml  ch10-world-peace-thru-svn.xml
ch05-repository-admin.xml
$ ls ch?0-*   ### the book chapters whose numbers end in zero
ch00-preface.xml  ch10-world-peace-thru-svn.xml
$ ls ch0[3578]-*   ### the book chapters that Mike is responsible for
ch03-advanced-topics.xml   ch07-customizing-svn.xml
ch05-repository-admin.xml  ch08-embedding-svn.xml
$
 File pattern matching is a bit more complex than what
        we&#39;ve described here, but this basic usage level tends to suit
        the majority of Subversion users. When found on a versioned directory, the
       svn:ignore  property is expected to contain a
      list of newline-delimited file patterns that Subversion should
      use to determine ignorable objects in that
       same  directory.
      These patterns do not override those found in the
       global-ignores  runtime configuration option,
      but are instead appended to that list.  And it&#39;s worth noting
      again that, unlike the  global-ignores  option,
      the patterns found in the  svn:ignore 
      property apply only to the directory on which that property is
      set, and not to any of its subdirectories.  The
       svn:ignore  property is a good way to tell
      Subversion to ignore files that are likely to be present in
      every user&#39;s working copy of that directory, such as compiler
      output or to use an example more appropriate to this
      book the HTML, PDF, or PostScript files generated as the
      result of a conversion of some source DocBook XML files to a
      more legible output format. Subversion 1.8 provides a more powerful version of the
       svn:ignore  property, the
       svn:global-ignores  property.  Like the
       svn:ignore  property,
       svn:global-ignores  can only be set
      on a directory and contains file patterns Subversion uses to
      determine ignorable objects. The ignore patterns
      in the  svn:global-ignores  property may be
      delimited with any whitespace (similar to the
       global-ignores  runtime configuration option),
      not just newlines (as with the  svn:ignore 
      property).  These ignore patterns are also
      appended to any patterns defined in the
       global-ignores  runtime configuration option
      together with any  svn:ignore  defined patterns.
      Unlike  svn:ignore  however, the
       svn:global-ignores  property is inheritable
       Of course only a 1.8 or newer Subversion client
      will recognize the inheritability and special meaning of the
       svn:global-ignores  property! 
      and applies to  all  paths under the directory on
      which the property is set, not just the immediate children of the
      directory. Subversion&#39;s support for ignorable file patterns extends
        only to the one-time process of adding unversioned
        files and directories to version control.  Once an object is
        under Subversion&#39;s control, the ignore pattern mechanisms no
        longer apply to it.  In other words, don&#39;t expect Subversion
        to avoid committing changes you&#39;ve made to a versioned file
        simply because that file&#39;s name matches an ignore
        pattern Subversion  always  notices
        all of its versioned objects. Ignore Patterns for CVS Users The Subversion  svn:ignore  property is
        very similar in syntax and function to the CVS
         .cvsignore  file.  In fact, if you are
        migrating a CVS working copy to Subversion, you can directly
        migrate the ignore patterns by using the
         .cvsignore  file as input to the
         svn propset  command: 
$ svn propset svn:ignore -F .cvsignore .
property &#39;svn:ignore&#39; set on &#39;.&#39;
$
 There are, however, some differences in the ways that CVS
        and Subversion handle ignore patterns.  The two systems use
        the ignore patterns at some different times, and there are
        slight discrepancies in what the ignore patterns apply to.
        Also, Subversion does not recognize the use of the
         !  pattern as a reset back to having no
        ignore patterns at all. The ignore patterns in the  global-ignores 
      runtime configuration option tend to be more a
      matter of personal taste Despite being a matter
      of personal taste, if you don&#39;t explicitly set the
       global-ignores  runtime
      configuration option either to your preferred set of
      patterns or to an empty string Subversion uses a default
      value.  See the  global-ignores  entry in
        and ties more closely to a user&#39;s particular tool
      chain than to the details of any particular working copy&#39;s needs.
      So, the rest of this section will focus
      on the  svn:ignore  and
       svn:global-ignores  properies and their
      uses. Say you have the following output from  svn
      status : 
$ svn status calc
 M      calc/button.c
?       calc/calculator
?       calc/data.c
?       calc/debug_log
?       calc/debug_log.1
?       calc/debug_log.2.gz
?       calc/debug_log.3.gz
 In this example, you have made some property modifications
      to  button.c , but in your working copy, you
      also have some unversioned files: the latest
       calculator  program that you&#39;ve compiled
      from your source code, a source file named
       data.c , and a set of debugging output
      logfiles.  Now, you know that your build system always results
      in the  calculator  program being
      generated. Isn&#39;t that the whole point of a build
      system?   And you know that your test suite
      always leaves those debugging logfiles lying around.  These
      facts are true for all working copies of this project, not just
      your own.  And you know that you aren&#39;t interested in seeing
      those things every time you run
       svn status , and you are pretty sure that
      nobody else is interested in them either.  So you use
       svn propedit svn:ignore calc  to add some
      ignore patterns to the  calc 
      directory. 
$ svn propget svn:ignore calc
calculator
debug_log*
$
 After you&#39;ve added this property, you will now have a local
      property modification on the  calc 
      directory.  But notice what else is different about your
       svn status  output: 
$ svn status
 M      calc
 M      calc/button.c
?       calc/data.c
 Now, all that cruft is missing from the output!  Your
       calculator  compiled program and all those
      logfiles are still in your working copy; Subversion just isn&#39;t
      constantly reminding you that they are present and unversioned.
      And now with all the uninteresting noise removed from the
      display, you are left with more intriguing items such as
      that source code file  data.c  that you
      probably forgot to add to version control. Of course, this less-verbose report of your working copy
      status isn&#39;t the only one available.  If you actually want to
      see the ignored files as part of the status report, you can pass
      the  --no-ignore  option to Subversion: 
$ svn status --no-ignore
 M      calc
 M      calc/button.c
I       calc/calculator
?       calc/data.c
I       calc/debug_log
I       calc/debug_log.1
I       calc/debug_log.2.gz
I       calc/debug_log.3.gz
I       calc/wip.1.diff
 All of your previously hidden unversioned paths are once
      again shown, but now with the  &#39;I&#39; Ignored 
      status.  But wait, what about  wip.1.diff ?
      The  svn:ignore  property on
       calc  doesn&#39;t include any pattern that
      matches that filename, so why is it ignored? 
      Let&#39;s assume that you don&#39;t have a matching pattern anywhere
      in your  global-ignores  runtime configuration.
         The answer lies in the third method by which
      Subversion can disregard unversioned paths, the inheritable
       svn:global-ignores  property.  Using the
       svn propget  subcommand with the
       --show-inherited-props  option, you see that
      the  svn:global-ignores  property is set on the
      root of your working copy, and sure enough, it defines a
      matching ignore pattern: 
$ svn pg svn:global-ignores calc -v --show-inherited-props
Inherited properties on &#39;calc&#39;,
from &#39;.&#39;:
  svn:global-ignores
    *.diff
    *.patch
 As mentioned earlier, the list of file patterns to ignore is
      also used by  svn add  and  svn
      import .  Both of these operations involve asking
      Subversion to begin managing some set of files and directories.
      Rather than force the user to pick and choose which files in a
      tree she wishes to start versioning, Subversion uses the ignore
      patterns the global, per-directory, and inherited
      lists to determine which files should not be swept into
      the version control system as part of a larger recursive
      addition or import operation.  And here again, you can use the
       --no-ignore  option to tell Subversion to disregard
      its ignores list and operate on all the files and directories
      present. Even if  svn:ignore  or
         svn:global-ignores  is set, you may run
        into problems if you use shell wildcards in a command.  Shell
        wildcards are expanded into an explicit list of targets before
        Subversion operates on them, so running  svn
         SUBCOMMAND  *  is just like
        running  svn  SUBCOMMAND 
        file1 file2 file3  .  In the case of the
         svn add  command, this has an effect similar
        to passing the  --no-ignore  option.  So
        instead of using a wildcard, use  svn add --force
        .  to do a bulk scheduling of unversioned things for
        addition.  The explicit target will ensure that the current
        directory isn&#39;t overlooked because of being already under
        version control, and the  --force  option will
        cause Subversion to crawl through that directory, adding
        unversioned files while still honoring the
         svn:ignore  and
         svn:global-ignores  properties and the
         global-ignores  runtime configuration
        variable.  Be sure to also provide the  --depth
        files  option to the  svn add 
        command if you don&#39;t want a fully recursive crawl for things
        to add. Keyword Substitution keywords Subversion has the ability to substitute
       keywords pieces of useful,
      dynamic information about a versioned file into the
      contents of the file itself.  Keywords generally provide
      information about the last modification made to the file.
      Because this information changes each time the
      file changes, and more importantly, just
       after  the file changes, it is a hassle
      for any process except the version control system to keep
      the data completely up to date.  Left to human authors, the
      information would inevitably grow stale. For example, say you have a document in which you would
      like to display the last date on which it was modified.  You
      could burden every author of that document to, just before
      committing their changes, also tweak the part of the
      document that describes when it was last changed.  But
      sooner or later, someone would forget to do that.  Instead,
      simply ask Subversion to perform keyword substitution on the
       LastChangedDate  keyword.  You control
      where the keyword is inserted into your document by placing
      a  keyword anchor  at the desired
      location in the file.  This anchor is just a string of text
      formatted as
       $ KeywordName $ . Adding keyword anchor text alone to your file does nothing
      special.  Subversion will never attempt to perform textual
      substitutions on your file contents unless explicitly asked to
      do so.  After all, you might be writing a
      document  or maybe even a section of a
      book   about how to use keywords, and
      you don&#39;t want Subversion to substitute your beautiful examples
      of unsubstituted keyword anchors! To tell Subversion whether to substitute keywords
      on a particular file, we again turn to the property-related
      subcommands.  The  svn:keywords  property,
      when set on a versioned file, controls which keywords will
      be substituted on that file.  The value is a space-delimited
      list of keyword names or aliases. For example, say you have a versioned file named
       weather.txt  that looks like
      this: 
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
 With no  svn:keywords  property set on
      that file, Subversion will do nothing special.  Now, let&#39;s
      enable substitution of the
       LastChangedDate  keyword. 
$ svn propset svn:keywords &quot;Date Author&quot; weather.txt
property &#39;svn:keywords&#39; set on &#39;weather.txt&#39;
$
 Now you have made a local property modification on the
       weather.txt  file.  You will see no
      changes to the file&#39;s contents (unless you made some of your
      own prior to setting the property).  Notice that the file
      contained a keyword anchor for the  Rev 
      keyword, yet we did not include that keyword in the property
      value we set.  Subversion will happily ignore requests to
      substitute keywords that are not present in the file and
      will not substitute keywords that are not present in the
       svn:keywords  property value. Immediately after you commit this property change,
      Subversion will update your working file with the new
      substitute text.  Instead of seeing your keyword anchor
       $LastChangedDate$ , you&#39;ll see its
      substituted result.  That result also contains the name of
      the keyword and continues to be delimited by the dollar sign
      ( $ ) characters.  And as we predicted, the
       Rev  keyword was not substituted because
      we didn&#39;t ask for it to be. Note also that we set the  svn:keywords 
      property to  Date Author , yet the keyword
      anchor used the alias  $LastChangedDate$ 
      and still expanded correctly: 
Here is the latest report from the front lines.
$LastChangedDate: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
 If someone else now commits a change to
       weather.txt , your copy of that file
      will continue to display the same substituted keyword value
      as before until you update your working copy.  At that
      time, the keywords in your  weather.txt 
      file will be resubstituted with information that
      reflects the most recent known commit to that file. All keywords are case-sensitive where they appear as
      anchors in files: you must use the correct capitalization
      for the keyword to be expanded.  You should consider the
      value of the  svn:keywords  property to be
      case-sensitive, too for the sake of backward
      compatibility, certain keyword names will be recognized
      regardless of case, but this behavior is deprecated. Subversion defines the list of keywords available for
      substitution.  That list contains the following keywords, 
      some of which have aliases that you can also use: keywords Date keywords LastChangedDate keywords, Date keywords Revision keywords LastChangedRevision keywords, Revision keywords Rev keywords, Revision keywords Author keywords LastChangedBy keywords, Author keywords HeadURL keywords URL keywords, HeadURL keywords Id keywords Header Date This keyword describes the last time the file was
            known to have been changed in the repository, and is of
            the form  $Date: 2006-07-22 21:42:37 -0700 (Sat,
            22 Jul 2006) $ .  It may also be specified as
             LastChangedDate .  Unlike the
             Id  keyword, which uses UTC, the
             Date  keyword displays dates using the
            local time zone. Revision This keyword describes the last known revision in
            which this file changed in the repository, and looks
            something like  $Revision: 144 $ .  
            It may also be specified as
             LastChangedRevision  or
             Rev . Author This keyword describes the last known user to
            change this file in the repository, and looks
            something like  $Author: harry $ .  
            It may also be specified as 
             LastChangedBy . HeadURL This keyword describes the full URL to the latest
            version of the file in the repository, and looks
            something like  $HeadURL:
            http://svn.example.com/repos/trunk/calc.c $ .
            It may be abbreviated as
             URL . Id This keyword is a compressed combination of the other
            keywords.  Its substitution looks something like
             $Id: calc.c 148 2006-07-28 21:30:43Z sally
            $ , and is interpreted to mean that the file
             calc.c  was last changed in revision
            148 on the evening of July 28, 2006 by the user
             sally .  The date displayed by this
            keyword is in UTC, unlike that of the
             Date  keyword (which uses the local time
            zone). Header This keyword is similar to the  Id 
            keyword but contains the full URL of the latest revision
            of the item, identical to  HeadURL . 
            Its substitution looks something like  $Header: 
            http://svn.example.com/repos/trunk/calc.c 
            148 2006-07-28 21:30:43Z sally $ . Several of the preceding descriptions use the phrase
       last known  or similar wording.  Keep in mind that
      keyword expansion is a client-side operation, and your client
       knows  only about changes that have occurred in
      the repository when you update your working copy to include
      those changes.  If you never update your working copy, your
      keywords will never expand to different values even if those
      versioned files are being changed regularly in the
      repository. Where&#39;s $GlobalRev$? New users are often confused by how the
         $Rev$  keyword works.  Since the repository
        has a single, globally increasing revision number, many people
        assume that it is this number that is reflected by the
         $Rev$  keyword&#39;s value.  But
         $Rev$  expands to show the last revision in
        which the file  changed , not the last
        revision to which it was updated.  Understanding this clears
        the confusion, but frustration often remains without the
        support of a Subversion keyword to do so, how can you
        automatically get the global revision number into your
        files? To do this, you need external processing.  Subversion
        ships with a tool called  svnversion , which
        was designed for just this purpose.  It crawls your working
        copy and generates as output the revision(s) it finds.  You
        can use this program, plus some additional tooling, to embed
        that revision information into your files.  For more
        information on  svnversion , see  . In addition to previous set of stock keyword definitions and
      aliases, Subversion 1.8 allows you the freedom to define and use
      custom keywords.  To define a custom keyword, add a token to the
      value of the  svn:keywords  property which is
      of the form
       MyKeyword = FORMAT ,
      where  MyKeyword  is the keyword name
      (which you&#39;ll use in the keyword anchor)
      and  FORMAT  is a format string into
      which information will be substituted when your keyword is
      expanded inside your file. The format string syntax used for custom keywords supports
      the following format codes: %a The author of the revision given
            by  %r . %b The basename of the URL of the file. %d Short format of the date of the revision given by
             %r . %D Long format of the date of the revision given by
             %r . %P The file&#39;s path, relative to the repository
            root. %r The last known revision in which this file changed in
          the repository.  (This is the same revision which would be
          substituted for the  Revision 
          keyword.) %R The URL to the root of the repository. %u The URL of the file. %_ A space character. (Keyword definitions cannot contain
            a literal space character.) %% A literal percent sign (&#39; % &#39;). %H Equivalent to  %P%_%r%_%d%_%a . %I Equivalent to  %b%_%r%_%d%_%a . As you can see, many of the individual format codes serve as
      placeholders for the same information available through the
      stock keywords.  But of course, the custom keyword format allows
      you to more flexibly string together multiple bits of
      information.  For example, you might wish to have a single
      keyword in your files which reports the repository relative path
      of the file and last-changed revision, formatted in a pleasant,
      human-readable way.  To do so, you&#39;d first define your custom
      keyword: 
$ svn pset svn:keywords &quot;PathRev=%P,%_r%r&quot; calc/button.c
property &#39;svn:keywords&#39; set on &#39;button.c&#39;
$
 Next, you&#39;d edit the file&#39;s contents to add the keyword
      anchor for your custom keyword, which in this case
      is  $PathRev$ .  After committing these
      changes, an examination of your file&#39;s contents will show that
      your custom keyword was substituted as you would
      expect where previously the file
      contained  $PathRev$ , it now reads
       $PathRev: trunk/calc/button.c, r23 $ . Subversion will automatically truncate any keyword
        expansions which exceed 255 bytes in length.  Also custom
        keywords defined with names that exceed 255 bytes will be
        ignored altogether. You can also instruct Subversion to maintain a fixed length
      (in terms of the number of bytes consumed) for the substituted
      keyword.  By using a double colon ( :: ) after
      the keyword name, followed by a number of space characters, you
      define that fixed width.  When Subversion goes to substitute
      your keyword for the keyword and its value, it will essentially
      replace only those space characters, leaving the overall width
      of the keyword field unchanged.  If the substituted value is
      shorter than the defined field width, there will be extra
      padding characters (spaces) at the end of the substituted field;
      if it is too long, it is truncated with a special hash
      ( # ) character just before the final dollar
      sign terminator. For example, say you have a document in which you have
      some section of tabular data reflecting the document&#39;s
      Subversion keywords.  Using the original Subversion keyword
      substitution syntax, your file might look something
      like: 
$Rev$:     Revision of last commit
$Author$:  Author of last commit
$Date$:    Date of last commit
 Now, that looks nice and tabular at the start of things.
      But when you then commit that file (with keyword substitution
      enabled, of course), you see: 
$Rev: 12 $:     Revision of last commit
$Author: harry $:  Author of last commit
$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit
 The result is not so beautiful.  And you might be
      tempted to then adjust the file after the substitution so
      that it again looks tabular.  But that holds only as long as
      the keyword values are the same width.  If the last
      committed revision rolls into a new place value (say, from
      99 to 100), or if another person with a longer username
      commits the file, stuff gets all crooked again.  However, if
      you are using Subversion 1.2 or later, you can use the new
      fixed-length keyword syntax and define some field widths that
      seem sane, so your file might look like this: 
$Rev::               $:  Revision of last commit
$Author::            $:  Author of last commit
$Date::              $:  Date of last commit
 You commit this change to your file.  This time,
      Subversion notices the new fixed-length keyword syntax and
      maintains the width of the fields as defined by the padding
      you placed between the double colon and the trailing dollar
      sign.  After substitution, the width of the fields is
      completely unchanged the short values for
       Rev  and  Author  are
      padded with spaces, and the long  Date 
      field is truncated by a hash character: 
$Rev:: 13            $:  Revision of last commit
$Author:: harry      $:  Author of last commit
$Date:: 2006-03-15 0#$:  Date of last commit
 The use of fixed-length keywords is especially handy when
      performing substitutions into complex file formats that
      themselves use fixed-length fields for data, or for which the
      stored size of a given data field is overbearingly difficult to
      modify from outside the format&#39;s native application.  Of course,
      where binary file formats are concerned, you must always take great
      care that any keyword substitution you introduce fixed-length
      or otherwise does not violate the integrity of that format.
      While it might sound easy enough, this can be an astonishingly
      difficult task for most of the popular binary file formats in use
      today, and  not  something to be undertaken by
      the faint of heart! Be aware that because the width of a keyword field is
        measured in bytes, the potential for corruption of
        multibyte values exists.  For example, a username that
        contains some multibyte UTF-8 characters might suffer
        truncation in the middle of the string of bytes that make
        up one of those characters.  The result will be a mere
        truncation when viewed at the byte level, but will likely
        appear as a string with an incorrect or garbled final
        character when viewed as UTF-8 text.  It is conceivable
        that certain applications, when asked to load the file,
        would notice the broken UTF-8 text and deem the entire
        file corrupt, refusing to operate on the file
        altogether.  So, when limiting keywords to a fixed size,
        choose a size that allows for this type of byte-wise
        expansion. Sparse Directories sparse directories checkouts shallow sparse directories By default, most Subversion operations on
      directories act in a recursive manner.  For
      example,  svn checkout  creates a working copy
      with every file and directory in the specified area of the
      repository, descending recursively through the repository tree
      until the entire structure is copied to your local disk.
      Subversion 1.5 introduces a feature called  sparse
      directories  (or  shallow
      checkouts ) that allows you to easily check out a
      working copy or a portion of a working copy more
      shallowly than full recursion, with the freedom to bring in
      previously ignored files and subdirectories at a later
      time. For example, say we have a repository with a tree of files
      and directories with names of the members of a human family with
      pets.  (It&#39;s an odd example, to be sure, but bear with us.)  A
      regular  svn checkout  operation will give us a
      working copy of the whole tree: 
$ svn checkout file:///var/svn/repos mom
A    mom/son
A    mom/son/grandson
A    mom/daughter
A    mom/daughter/granddaughter1
A    mom/daughter/granddaughter1/bunny1.txt
A    mom/daughter/granddaughter1/bunny2.txt
A    mom/daughter/granddaughter2
A    mom/daughter/fishie.txt
A    mom/kitty1.txt
A    mom/doggie1.txt
Checked out revision 1.
$
 Now, let&#39;s check out the same tree again, but this time
      we&#39;ll ask Subversion to give us only the topmost directory
      with none of its children at all: 
$ svn checkout file:///var/svn/repos mom-empty --depth empty
Checked out revision 1
$
 Notice that we added to our original  svn
      checkout  command line a new  --depth 
      option.  This option is present on many of Subversion&#39;s
      subcommands and is similar to the
       --non-recursive  ( -N ) and
       --recursive  ( -R ) options.  In
      fact, it combines, improves upon, supercedes, and ultimately
      obsoletes these two older options.  For starters, it expands the
      supported degrees of depth specification available to users,
      adding some previously unsupported (or inconsistently supported)
      depths.  Here are the depth values that you can request for a
      given Subversion operation: depth empty depth files depth immediates depth infinity --depth empty Include only the immediate target of the operation,
            not any of its file or directory children. --depth files Include the immediate target of the operation and any
            of its immediate file children. --depth immediates Include the immediate target of the operation and any
            of its immediate file or directory children.  The directory
            children will themselves be empty. --depth infinity Include the immediate target, its file and directory
            children, its children&#39;s children, and so on to full
            recursion. depth ambient Of course, merely combining two existing options into one
      hardly constitutes a new feature worthy of a whole section in
      our book.  Fortunately, there is more to this story.  This idea
      of depth extends not just to the operations you perform with
      your Subversion client, but also as a description of a working
      copy citizen&#39;s  ambient depth , which is
      the depth persistently recorded by the working copy for that
      item.  Its key strength is this very persistence the fact
      that it is  sticky .  The working copy remembers
      the depth you&#39;ve selected for each item in it until you later
      change that depth selection; by default, Subversion commands
      operate on the working copy citizens present, regardless of
      their selected depth settings. You can check the recorded ambient depth of a working copy
        using the  svn info  command.  If the ambient
        depth is anything other than infinite recursion,  svn
        info  will display a line describing that depth
        value: 
$ svn info mom-immediates | grep &quot;^Depth:&quot;
Depth: immediates
$
 Our previous examples demonstrated checkouts of infinite
      depth (the default for  svn checkout ) and
      empty depth.  Let&#39;s look now at examples of the other depth
      values: 
$ svn checkout file:///var/svn/repos mom-files --depth files
A    mom-files/kitty1.txt
A    mom-files/doggie1.txt
Checked out revision 1.
$ svn checkout file:///var/svn/repos mom-immediates --depth immediates
A    mom-immediates/son
A    mom-immediates/daughter
A    mom-immediates/kitty1.txt
A    mom-immediates/doggie1.txt
Checked out revision 1.
$
 As described, each of these depths is something more than
      only the target, but something less than full recursion. We&#39;ve used  svn checkout  as an example
      here, but you&#39;ll find the  --depth  option
      present on many other Subversion commands, too.  In those other
      commands, depth specification is a way to limit the scope of an
      operation to some depth, much like the way the older
       --non-recursive  ( -N ) and
       --recursive  ( -R ) options
      behave.  This means that when operating on a working copy of
      some depth, while requesting an operation of a shallower depth,
      the operation is limited to that shallower depth.  In fact, we
      can make an even more general statement: given a working copy of
      any arbitrary even mixed ambient depth, and a
      Subversion command with some requested operational depth, the
      command will maintain the ambient depth of the working copy
      members while still limiting the scope of the operation to the
      requested (or default) operational depth. In addition to the  --depth  option, the
       svn update  and  svn switch 
      subcommands also accept a second depth-related option:
       --set-depth .  It is with this option that you
      can change the sticky depth of a working copy item.  Watch what
      happens as we take our empty-depth checkout and gradually
      telescope it deeper using  svn update
      --set-depth  NEW-DEPTH   TARGET : 
$ svn update --set-depth files mom-empty
Updating &#39;mom-empty&#39;:
A    mom-empty/kittie1.txt
A    mom-empty/doggie1.txt
Updated to revision 1.
$ svn update --set-depth immediates mom-empty
Updating &#39;mom-empty&#39;:
A    mom-empty/son
A    mom-empty/daughter
Updated to revision 1.
$ svn update --set-depth infinity mom-empty
Updating &#39;mom-empty&#39;:
A    mom-empty/son/grandson
A    mom-empty/daughter/granddaughter1
A    mom-empty/daughter/granddaughter1/bunny1.txt
A    mom-empty/daughter/granddaughter1/bunny2.txt
A    mom-empty/daughter/granddaughter2
A    mom-empty/daughter/fishie1.txt
Updated to revision 1.
$
 As we gradually increased our depth selection, the
      repository gave us more pieces of our tree. In our example, we operated only on the root of our working
      copy, changing its ambient depth value.  But we can
      independently change the ambient depth value of
       any  subdirectory inside the working copy,
      too.  Careful use of this ability allows us to flesh out only
      certain portions of the working copy tree, leaving other
      portions absent altogether (hence the  sparse  bit
      of the feature&#39;s name).  Here&#39;s an example of how we might build
      out a portion of one branch of our family&#39;s tree, enable full
      recursion on another branch, and keep still other pieces pruned
      (absent from disk). 
$ rm -rf mom-empty
$ svn checkout file:///var/svn/repos mom-empty --depth empty
Checked out revision 1.
$ svn update --set-depth empty mom-empty/son
Updating &#39;mom-empty/son&#39;:
A    mom-empty/son
Updated to revision 1.
$ svn update --set-depth empty mom-empty/daughter
Updating &#39;mom-empty/daughter&#39;:
A    mom-empty/daughter
Updated to revision 1.
$ svn update --set-depth infinity mom-empty/daughter/granddaughter1
Updating &#39;mom-empty/daughter/granddaughter1&#39;:
A    mom-empty/daughter/granddaughter1
A    mom-empty/daughter/granddaughter1/bunny1.txt
A    mom-empty/daughter/granddaughter1/bunny2.txt
Updated to revision 1.
$
 Fortunately, having a complex collection of ambient depths
      in a single working copy doesn&#39;t complicate the way you interact
      with that working copy.  You can still make, revert, display,
      and commit local modifications in your working copy without
      providing any new options (including  --depth  and
       --set-depth ) to the relevant subcommands.  Even
       svn update  works as it does elsewhere when no
      specific depth is provided it updates the working copy
      targets that are present while honoring their sticky
      depths. You might at this point be wondering,  So what?  When
      would I use this?   One scenario where this feature
      finds utility is tied to a particular repository layout,
      specifically where you have many related or codependent
      projects or software modules living as siblings in a single
      repository location ( trunk/project1 ,
       trunk/project2 ,
       trunk/project3 , etc.).  In such
      scenarios, it might be the case that you personally care 
      about only a handful of those projects maybe some primary
      project and a few other modules on which it depends.  You can
      check out individual working copies of all of these things, but
      those working copies are disjoint and, as a result, it can be
      cumbersome to perform operations across several or all of them
      at the same time.  The alternative is to use the sparse
      directories feature, building out a single working copy that
      contains only the modules you care about.  You&#39;d start with an
      empty-depth checkout of the common parent directory of the
      projects, and then update with infinite depth only the items you
      wish to have, like we demonstrated in the previous example.
      Think of it like an opt-in system for working copy
      citizens. The original (Subversion 1.5) implementation of shallow
      checkouts was good, but didn&#39;t support de-telescoping of working
      copy items.  Subversion 1.6 remedied this problem.  For example,
      running  svn update --set-depth empty  in
      an infinite-depth working copy will discard everything but the
      topmost directory. Safely, of course.  As in
      other situations, Subversion will leave on disk any files you&#39;ve
      modified or which aren&#39;t versioned.   Subversion
      1.6 also introduced another supported value for
      the  --set-depth 
      option:  exclude .  Using  --set-depth
      exclude  with  svn update  will cause
      the update target to be removed from the working copy
      entirely a directory target won&#39;t even be left
      present-but-empty.  This is especially handy when there are more
      things that you&#39;d like to keep in a working copy than things
      you&#39;d like to  not  keep. Consider a directory with hundreds of subdirectories, one of
      which you would like to omit from your working copy.  Using
      an  additive  approach to sparse directories, you
      might check out the directory with an empty depth, then
      explicitly telescope (using  svn update --set-depth
      infinity ) each and every subdirectory of the
      directory except the one you don&#39;t care about. 
$ svn checkout http://svn.example.com/repos/many-dirs --depth empty
 
$ svn update --set-depth infinity many-dirs/wanted-dir-1
 
$ svn update --set-depth infinity many-dirs/wanted-dir-2
 
$ svn update --set-depth infinity many-dirs/wanted-dir-3
 
### and so on, and so on, ...
 This could be quite tedious, especially since you don&#39;t even
      have stubs of these directories in your working copy to deal
      with.  Such a working copy would also have another
      characteristic that you might not expect or desire: if someone
      else creates any new subdirectories in this top-level directory,
      you won&#39;t receive those when you update your working
      copy. Beginning with Subversion 1.6, you can take a different
      approach.  First, check out the directory in full.  Then
      run  svn update --set-depth exclude  on the
      one subdirectory you don&#39;t care about. 
$ svn checkout http://svn.example.com/repos/many-dirs
 
$ svn update --set-depth exclude many-dirs/unwanted-dir
D         many-dirs/unwanted-dir
$
 This approach leaves your working copy with the same stuff
      as in the first approach, but any new subdirectories which
      appear in the top-level directory would also show up when you
      update your working copy.  The downside of this approach is that
      you have to actually check out that whole subdirectory that you
      don&#39;t even want just so you can tell Subversion that you don&#39;t
      want it.  This might not even be possible if that subdirectory
      is too large to fit on your disk (which might, after all, be the
      very reason you don&#39;t want it in your working copy). While the functionality for excluding an existing item
        from a working copy was hung off of the  svn
        update  command, you might have noticed that the
        output from  svn update --set-depth
        exclude  differs from that of a normal update
        operation.  This output betrays the fact that, under the hood,
        exclusion is a completely client-side operation, very much
        unlike a typical update. In such a situation, you might consider a compromise
      approach.  First, check out the top-level directory
      with  --depth immediates .  Then, exclude the
      directory you don&#39;t want using  svn update --set-depth
      exclude .  Finally, telescope all the items that
      remain to infinite depth, which should be fairly easy to do
      because they are all addressable in your shell. 
$ svn checkout http://svn.example.com/repos/many-dirs --depth immediates
 
$ svn update --set-depth exclude many-dirs/unwanted-dir
D         many-dirs/unwanted-dir
$ svn update --set-depth infinity many-dirs/*
 
$
 Once again, your working copy will have the same stuff as in
      the previous two scenarios.  But now, any time a new file or
      subdirectory is committed to the top-level directory, you&#39;ll
      receive it at an empty depth when you update your
      working copy.  You can now decide what to do with such newly
      appearing working copy items: expand them into infinite depth,
      or exclude them altogether. Locking Subversion&#39;s copy-modify-merge version control model lives
      and dies on its data merging algorithms specifically on
      how well those algorithms perform when trying to resolve
      conflicts caused by multiple users modifying the same file
      concurrently.  Subversion itself provides only one such
      algorithm: a three-way differencing algorithm that is smart
      enough to handle data at a granularity of a single line of text.
      Subversion also allows you to supplement its content merge
      processing with external differencing utilities (as described in
        and
       ), some
      of which may do an even better job, perhaps providing
      granularity of a word or a single character of text.  But common
      among those algorithms is that they generally work only on text
      files.  The landscape starts to look pretty grim when you start
      talking about content merges of nontextual file formats.  And
      when you can&#39;t find a tool that can handle that type of merging,
      you begin to run into problems with the copy-modify-merge
      model. Let&#39;s look at a real-life example of where this model runs
      aground.  Harry and Sally are both graphic designers working on
      the same project, a bit of marketing collateral for an
      automobile mechanic.  Central to the design of a particular
      poster is an image of a car in need of some bodywork, stored in
      a file using the PNG image format.  The poster&#39;s layout is
      almost finished, and both Harry and Sally are pleased with the
      particular photo they chose for their damaged car a baby
      blue 1967 Ford Mustang with an unfortunate bit of crumpling on
      the left front fender. Now, as is common in graphic design work, there&#39;s a change
      in plans, which causes the car&#39;s color to be a concern.  So Sally
      updates her working copy to  HEAD , fires up
      her photo-editing software, and sets about tweaking the image so
      that the car is now cherry red.  Meanwhile, Harry, feeling
      particularly inspired that day, decides that the image would
      have greater impact if the car also appears to have suffered
      greater impact.  He, too, updates to  HEAD ,
      and then draws some cracks on the vehicle&#39;s windshield.  He
      manages to finish his work before Sally finishes hers, and after
      admiring the fruits of his undeniable talent, he commits the
      modified image.  Shortly thereafter, Sally is finished with the
      car&#39;s new finish and tries to commit her changes.  But, as
      expected, Subversion fails the commit, informing Sally that
      her version of the image is now out of date. Here&#39;s where the difficulty sets in.  If Harry and Sally
      were making changes to a text file, Sally would simply update
      her working copy, receiving Harry&#39;s changes in the process.  In
      the worst possible case, they would have modified the same
      region of the file, and Sally would have to work out by hand the
      proper resolution to the conflict.  But these aren&#39;t text
      files they are binary images.  And while it&#39;s a simple
      matter to describe what one would expect the results of this
      content merge to be, there is precious little chance that any
      software exists that is smart enough to examine the common
      baseline image that each of these graphic artists worked
      against, the changes that Harry made, and the changes that Sally
      made, and then spit out an image of a busted-up red Mustang with
      a cracked windshield! locks checkouts reserved locking Of course, things would have gone more smoothly if
      Harry and Sally had serialized their modifications to the
      image if, say, Harry had waited to draw his windshield
      cracks on Sally&#39;s now-red car, or if Sally had tweaked the color
      of a car whose windshield was already cracked.  As is discussed
      in  , most of
      these types of problems go away entirely where perfect
      communication between Harry and Sally
      exists. Communication wouldn&#39;t have been such bad
      medicine for Harry and Sally&#39;s Hollywood namesakes, either, for
      that matter.  But as one&#39;s version control
      system is, in fact, one form of communication, it follows that
      having that software facilitate the serialization of
      nonparallelizable editing efforts is no bad thing.  This is
      where Subversion&#39;s implementation of the lock-modify-unlock
      model steps into the spotlight.  This is where we talk about
      Subversion&#39;s  locking  feature, which is
      similar to the  reserved checkouts  mechanisms of
      other version control systems. Subversion&#39;s locking feature exists ultimately to minimize
      wasted time and effort.  By allowing a user to programmatically
      claim the exclusive right to change a file in the repository,
      that user can be reasonably confident that any energy he invests
      on unmergeable changes won&#39;t be wasted his commit of those
      changes will succeed.  Also, because Subversion communicates to
      other users that serialization is in effect for a particular
      versioned object, those users can reasonably expect that the
      object is about to be changed by someone else.  They, too, can
      then avoid wasting their time and energy on unmergeable changes
      that won&#39;t be committable due to eventual
      out-of-dateness. When referring to Subversion&#39;s locking feature, one is
      actually talking about a fairly diverse collection of behaviors,
      which include the ability to lock a versioned
      file Subversion does not currently allow locks on
      directories.  (claiming the exclusive right to
      modify the file), to unlock that file (yielding that exclusive
      right to modify), to see reports about which files are locked
      and by whom, to annotate files for which locking before editing
      is strongly advised, and so on.  In this section, we&#39;ll cover
      all of these facets of the larger locking feature. The Three Meanings of  Lock In this section, and almost everywhere in this book, the
        words  lock  and  locking  describe
        a mechanism for mutual exclusion between users to avoid
        clashing commits.  Unfortunately, there are two other sorts
        of  lock  with which Subversion, and therefore
        this book, sometimes needs to be concerned. locks administrative The second is  administrative
        locks , used internally by Subversion to prevent
        clashes between multiple Subversion clients operating on the
        same working copy.  This is the sort of lock indicated by an
         L  in the third column of
         svn status  output, and removed by the
         svn cleanup  command, as described in  . locks database Third, there are  database
        locks , used internally by the Berkeley DB backend
        to prevent clashes between multiple programs trying to access
        the database.  This is the sort of lock whose unwanted
        persistence after an error can cause a repository to
        be  wedged,  as described in
         . You can generally forget about these other kinds of locks
        until something goes wrong that requires you to care about
        them.  In this book,  lock  means the first sort
        unless the contrary is either clear from context or explicitly
        stated. Creating Locks locks locks lock token locking lock owner In the Subversion repository, a
         lock  is a piece of metadata that
        grants exclusive access to one user to change a file.  This
        user is said to be the  lock owner .
        Each lock also has a unique identifier, typically a long
        string of characters, known as the  lock
        token .  The repository manages locks, ultimately
        handling their creation, enforcement, and removal.  If any
        commit transaction attempts to modify or delete a locked file
        (or delete one of the parent directories of the file), the
        repository will demand two pieces of information that
        the client performing the commit be authenticated as the lock
        owner, and that the lock token has been provided as part of
        the commit process as a form of proof that the client knows which
        lock it is using. svn subcommands lock locks creation To demonstrate lock creation, let&#39;s refer back to
        our example of multiple graphic designers working on the same
        binary image files.  Harry has decided to change a JPEG image.
        To prevent other people from committing changes to the file
        while he is modifying it (as well as alerting them that he is
        about to change it), he locks the file in the repository using
        the  svn lock  command. 
$ svn lock banana.jpg -m &quot;Editing file for tomorrow&#39;s release.&quot;
&#39;banana.jpg&#39; locked by user &#39;harry&#39;.
$
 The preceding example demonstrates a number of new things.
        First, notice that Harry passed the
         --message  ( -m ) option to
         svn lock .  Similar to  svn
        commit , the  svn lock  command can
        take comments via either  --message 
        ( -m ) or  --file 
        ( -F ) to describe the reason for locking the
        file.  Unlike  svn commit , however,
         svn lock  will not demand a message by
        launching your preferred text editor.  Lock comments are
        optional, but still recommended to aid communication. Second, the lock attempt succeeded.  This means that the
        file wasn&#39;t already locked, and that Harry had the latest
        version of the file.  If Harry&#39;s working copy of the file had
        been out of date, the repository would have rejected the
        request, forcing Harry to  svn update  and
        reattempt the locking command.  The locking command would also
        have failed if the file had already been locked by someone
        else. As you can see, the  svn lock  command
        prints confirmation of the successful lock.  At this point,
        the fact that the file is locked becomes apparent in the
        output of the  svn status  and  svn
        info  reporting subcommands. 
$ svn status
     K  banana.jpg

$ svn info banana.jpg
Path: banana.jpg
Name: banana.jpg
Working Copy Root Path: /home/harry/project
URL: http://svn.example.com/repos/project/banana.jpg
Repository Root: http://svn.example.com/repos/project
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 2198
Node Kind: file
Schedule: normal
Last Changed Author: frank
Last Changed Rev: 1950
Last Changed Date: 2006-03-15 12:43:04 -0600 (Wed, 15 Mar 2006)
Text Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Properties Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Checksum: 3b110d3b10638f5d1f4fe0f436a5a2a5
Lock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e
Lock Owner: harry
Lock Created: 2006-06-14 17:20:31 -0500 (Wed, 14 Jun 2006)
Lock Comment (1 line):
Editing file for tomorrow&#39;s release.

$
 The fact that the  svn info  command,
        which does not contact the repository when run against working
        copy paths, can display the lock token reveals an important
        piece of information about those tokens:  they are cached in
        the working copy.  The presence of the lock token is critical.
        It gives the working copy authorization to make use of the
        lock later on.  Also, the  svn status 
        command shows a  K  next to the file (short
        for locKed), indicating that the lock token is present. Regarding Lock Tokens A lock token isn&#39;t an authentication token, so much as
          an  authorization  token.  The token
          isn&#39;t a protected secret.  In fact, a lock&#39;s unique token is
          discoverable by anyone who runs  svn info
           URL .  A lock token is
          special only when it lives inside a working copy.  It&#39;s
          proof that the lock was created in that particular working
          copy, and not somewhere else by some other client.  Merely
          authenticating as the lock owner isn&#39;t enough to prevent
          accidents. locks breaking For example, suppose you lock a file using a
          computer at your office, but leave work for the day before
          you finish your changes to that file.  It should not be
          possible to accidentally commit changes to that same file
          from your home computer later that evening simply because
          you&#39;ve authenticated as the lock&#39;s owner.  In other words,
          the lock token prevents one piece of Subversion-related
          software from undermining the work of another.  (In our
          example, if you really need to change the file from an
          alternative working copy, you would need
          to  break  the lock and relock the
          file.) Now that Harry has locked  banana.jpg ,
        Sally is unable to change or delete that file: 
$ svn delete banana.jpg
D         banana.jpg
$ svn commit -m &quot;Delete useless file.&quot;
Deleting       banana.jpg
svn: E175002: Commit failed (details follow):
svn: E175002: Server sent unexpected return value (423 Locked) in response to 
DELETE request for &#39;/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc
35d/banana.jpg&#39;
$
 But Harry, after touching up the banana&#39;s shade of yellow,
        is able to commit his changes to the file.  That&#39;s because he
        authenticates as the lock owner and also because his working
        copy holds the correct lock token: 
$ svn status
M    K  banana.jpg
$ svn commit -m &quot;Make banana more yellow&quot;
Sending        banana.jpg
Transmitting file data .
Committed revision 2201.
$ svn status
$
 Notice that after the commit is finished,  svn
        status  shows that the lock token is no longer
        present in the working copy.  This is the standard behavior of
         svn commit it searches the working
        copy (or list of targets, if you provide such a list) for
        local modifications and sends all the lock tokens it
        encounters during this walk to the server as part of the
        commit transaction.  After the commit completes successfully,
        all of the repository locks that were mentioned are
        released even on files that weren&#39;t
        committed .  This is meant to discourage users from
        being sloppy about locking or from holding locks for too long.
        If Harry haphazardly locks 30 files in a directory named
         images  because he&#39;s unsure of which files
        he needs to change, yet changes only four of those files, when he
        runs  svn commit images , the process will
        still release all 30 locks. This behavior of automatically releasing locks can be
        overridden with the  --no-unlock  option to
         svn commit .  This is best used for those
        times when you want to commit changes, but still plan to make
        more changes and thus need to retain existing locks.  You can
        also make this your default behavior by setting the
         no-unlock  runtime configuration option (see
         ). svn subcommands unlock locks releasing Of course, locking a file doesn&#39;t oblige one to
        commit a change to it.  The lock can be released at any time
        with a simple  svn unlock  command: 
$ svn unlock banana.c
&#39;banana.c&#39; unlocked.
 Discovering Locks svn subcommands status locks discovery When a commit fails due to someone else&#39;s locks, it&#39;s
        fairly easy to learn about them.  The easiest way is to run
         svn status -u : 
$ svn status -u
M               23   bar.c
M    O          32   raisin.jpg
        *       72   foo.h
Status against revision:     105
$
 svn subcommands info In this example, Sally can see not only that her copy of
         foo.h  is out of date, but also that one of the
        two modified files she plans to commit is locked in the
        repository.  The  O  symbol stands for
         Other,  meaning that a lock exists on the file
        and was created by somebody else.  If she were to attempt a
        commit, the lock on  raisin.jpg  would
        prevent it.  Sally is left wondering who made the lock, when,
        and why.  Once again,  svn info  has the
        answers: 
$ svn info ^/raisin.jpg
Path: raisin.jpg
Name: raisin.jpg
URL: http://svn.example.com/repos/project/raisin.jpg
Repository Root: http://svn.example.com/repos/project
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 105
Node Kind: file
Last Changed Author: sally
Last Changed Rev: 32
Last Changed Date: 2006-01-25 12:43:04 -0600 (Sun, 25 Jan 2006)
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Lock Comment (1 line):
Need to make a quick tweak to this image.
$
 Just as you can use  svn info  to examine
        objects in the working copy, you can also use it to examine
        objects in the repository.  If the main argument to
         svn info  is a working copy path, then all
        of the working copy&#39;s cached information is displayed; any
        mention of a lock means that the working copy is holding a
        lock token (if a file is locked by another user or in another
        working copy,  svn info  on a working copy
        path will show no lock information at all).  If the main
        argument to  svn info  is a URL, the
        information reflects the latest version of an object in the
        repository, and any mention of a lock describes the current
        lock on the object. So in this particular example, Sally can see that Harry
        locked the file on February 16 to  make a quick
        tweak.   It being June, she suspects that he probably
        forgot all about the lock.  She might phone Harry to complain
        and ask him to release the lock.  If he&#39;s unavailable, she
        might try to forcibly break the lock herself or ask an
        administrator to do so. Breaking and Stealing Locks locks breaking A repository lock isn&#39;t sacred in Subversion&#39;s
        default configuration state, locks can be released not only by
        the person who created them, but by anyone.  When somebody
        other than the original lock creator destroys a lock, we refer
        to this as  breaking the lock . From the administrator&#39;s chair, it&#39;s simple to break
        locks.  The  svnlook 
        and  svnadmin  programs have the ability to
        display and remove locks directly from the repository.  (For
        more information about these tools, see
         .) 
$ svnadmin lslocks /var/svn/repos
Path: /project2/images/banana.jpg
UUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923
Owner: frank
Created: 2006-06-15 13:29:18 -0500 (Thu, 15 Jun 2006)
Expires: 
Comment (1 line):
Still improving the yellow color.

Path: /project/raisin.jpg
UUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Owner: harry
Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Expires: 
Comment (1 line):
Need to make a quick tweak to this image.

$ svnadmin rmlocks /var/svn/repos /project/raisin.jpg
Removed lock on &#39;/project/raisin.jpg&#39;.
$
 The more interesting option is to allow users to break
        each other&#39;s locks over the network.  To do this, Sally simply
        needs to pass the  --force  option to the
         svn unlock  command: 
$ svn status -u
M               23   bar.c
M    O          32   raisin.jpg
        *       72   foo.h
Status against revision:     105
$ svn unlock raisin.jpg
svn: E195013: &#39;raisin.jpg&#39; is not locked in this working copy
$ svn info raisin.jpg | grep URL
URL: http://svn.example.com/repos/project/raisin.jpg
$ svn unlock http://svn.example.com/repos/project/raisin.jpg
svn: warning: W160039: Unlock failed on &#39;raisin.jpg&#39; (403 Forbidden)
$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg
&#39;raisin.jpg&#39; unlocked.
$
 Now, Sally&#39;s initial attempt to unlock failed because she
        ran  svn unlock  directly on her working copy
        of the file, and no lock token was present.  To remove the
        lock directly from the repository, she needs to pass a URL
        to  svn unlock .  Her first attempt to unlock
        the URL fails, because she can&#39;t authenticate as the lock
        owner (nor does she have the lock token).  But when she
        passes  --force , the authentication and
        authorization requirements are ignored, and the remote lock is
        broken. locks stealing Simply breaking a lock may not be enough.  In
        the running example, Sally may not only want to break Harry&#39;s
        long-forgotten lock, but relock the file for her own use.
        She can accomplish this by using  svn unlock 
        with  --force  and then  svn lock 
        back-to-back, but there&#39;s a small chance that somebody else
        might lock the file between the two commands.  The simpler thing
        to do is to  steal  the lock, which involves
        breaking and relocking the file all in one atomic step.  To
        do this, Sally passes the  --force  option
        to  svn lock : 
$ svn lock raisin.jpg
svn: warning: W160035: Path &#39;/project/raisin.jpg&#39; is already locked by user &#39;h
arry&#39; in filesystem &#39;/var/svn/repos/db&#39;
$ svn lock --force raisin.jpg
&#39;raisin.jpg&#39; locked by user &#39;sally&#39;.
$
 locks defunct In any case, whether the lock is broken or stolen,
        Harry may be in for a surprise.  Harry&#39;s working copy still
        contains the original lock token, but that lock no longer
        exists.  The lock token is said to
        be  defunct .  The lock represented by
        the lock token has either been broken (no longer in the
        repository) or stolen (replaced with a different lock).
        Either way, Harry can see this by asking
         svn status  to contact the
        repository: 
$ svn status
     K  raisin.jpg
$ svn status -u
     B          32   raisin.jpg
Status against revision:     105
$ svn update
Updating &#39;.&#39;:
  B  raisin.jpg
Updated to revision 105.
$ svn status
$
 If the repository lock was broken, then  svn
        status --show-updates  ( -u )
        displays a  B  (Broken) symbol next to the
        file.  If a new lock exists in place of the old one, then a
         T  (sTolen) symbol is shown.  Finally,
         svn update  notices any defunct lock tokens
        and removes them from the working copy. Locking Policies Different systems have different notions of how strict a
          lock should be.  Some folks argue that locks must be
          strictly enforced at all costs, releasable only by the
          original creator or administrator.  They argue that if
          anyone can break a lock, chaos runs rampant and the
          whole point of locking is defeated.  The other side argues
          that locks are first and foremost a communication tool.  If
          users are constantly breaking each other&#39;s locks, it
          represents a cultural failure within the team and the
          problem falls outside the scope of software enforcement. Subversion defaults to the  softer 
          approach, but still allows administrators to create stricter
          enforcement policies through the use of hook scripts.  In
          particular, the  pre-lock  and
           pre-unlock  hooks allow administrators
          to decide when lock creation and lock releases are allowed
          to happen.  Depending on whether a lock already exists,
          these two hooks can decide whether to allow a certain user
          to break or steal a lock.  The
           post-lock  and
           post-unlock  hooks are also available,
          and can be used to send email after locking actions.  To
          learn more about repository hooks, see
           . Lock Communication We&#39;ve seen how  svn lock 
        and  svn unlock  can be used to create,
        release, break, and steal locks.  This satisfies the goal of
        serializing commit access to a file.  But what about the
        larger problem of preventing wasted time? For example, suppose Harry locks an image file and then
        begins editing it.  Meanwhile, miles away, Sally wants to do
        the same thing.  She doesn&#39;t think to run  svn status
        -u , so she has no idea that Harry has
        already locked the file.  She spends hours editing the file,
        and when she tries to commit her change, she discovers that
        either the file is locked or that she&#39;s out of date.
        Regardless, her changes aren&#39;t mergeable with Harry&#39;s.  One of
        these two people has to throw away his or her work, and a lot of
        time has been wasted. Subversion&#39;s solution to this problem is to provide a
        mechanism to remind users that a file ought to be locked
         before  the editing begins.  The mechanism
        is a special property:   svn:needs-lock .  If
        that property is attached to a file (regardless of its value,
        which is irrelevant), Subversion will try to use
        filesystem-level permissions to make the file read-only unless,
        of course, the user has explicitly locked the file.
        When a lock token is present (as a result of using
         svn lock ), the file becomes read/write.
        When the lock is released, the file becomes read-only
        again. The theory, then, is that if the image file has this
        property attached, Sally would immediately notice
        something is strange when she opens the file for editing:
        many applications alert users immediately when a read-only
        file is opened for editing, and nearly all would
        prevent her from saving changes to the file.  This
        reminds her to lock the file before editing, whereby she
        discovers the preexisting lock: 
$ /usr/local/bin/gimp raisin.jpg
gimp: error: file is read-only!
$ ls -l raisin.jpg
-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg
$ svn lock raisin.jpg
svn: warning: W160035: Path &#39;/project/raisin.jpg&#39; is already locked by user &#39;h
arry&#39; in filesystem &#39;/var/svn/repos/db&#39;
$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-06-08 07:29:18 -0500 (Thu, 08 June 2006)
Lock Comment (1 line):
Making some tweaks.  Locking for the next two hours.
$
 Users and administrators alike are encouraged to attach
          the  svn:needs-lock  property to any file
          that cannot be contextually merged.  This is the primary
          technique for encouraging good locking habits and preventing
          wasted effort. Note that this property is a communication tool that
        works independently from the locking system.  In other words,
        any file can be locked, whether or not this property is
        present.  And conversely, the presence of this property
        doesn&#39;t make the repository require a lock when
        committing. Unfortunately, the system isn&#39;t flawless.  It&#39;s possible
        that even when a file has the property, the read-only reminder
        won&#39;t always work.  Sometimes applications misbehave and
         hijack  the read-only file, silently allowing
        users to edit and save the file anyway.  There&#39;s not much that
        Subversion can do in this situation at the end of the
        day, there&#39;s simply no substitution for good interpersonal
        communication. Except, perhaps, a classic
        Vulcan mind-meld. Externals Definitions Sometimes it is useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different subdirectories to come from different
      locations in a repository or perhaps from different
      repositories altogether.  You could certainly set up such a
      scenario by hand using  svn checkout  to
      create the sort of nested working copy structure you are trying
      to achieve.  But if this layout is important for everyone who
      uses your repository, every other user will need to perform the
      same checkout operations that you did. externals definitions externals externals definitions properties svn:externals Fortunately, Subversion provides support for
       externals definitions .  An externals
      definition is a mapping of a local directory to the
      URL and ideally a particular revision of a versioned
      directory.  In Subversion, you declare externals definitions in
      groups using the  svn:externals  property.  You
      can create or modify this property using  svn
      propset  or  svn propedit  (see  ).  It can be set on any
      versioned directory, and its value describes both the external
      repository location and the client-side directory to which that
      location should be checked out. The convenience of the  svn:externals 
      property is that once it is set on a versioned directory,
      everyone who checks out a working copy with that directory also
      gets the benefit of the externals definition.  In other words,
      once one person has made the effort to define the nested working
      copy structure, no one else has to bother Subversion will,
      after checking out the original working copy, automatically also
      check out the external working copies. The relative target subdirectories of externals
        definitions  must not  already exist on
        your or other users&#39; systems Subversion will create them
        when it checks out the external working copy. You also get in the externals definition design all the
      regular benefits of Subversion properties.  The definitions are
      versioned.  If you need to change an externals definition, you
      can do so using the regular property modification subcommands.
      When you commit a change to the  svn:externals 
      property, Subversion will synchronize the checked-out items
      against the changed externals definition when you next run
       svn update .  The same thing will happen when
      others update their working copies and receive your changes to
      the externals definition. Because the  svn:externals  property has
        a multiline value, we strongly recommend that you use
         svn propedit  instead of  svn
        propset . Subversion releases prior to 1.5 honor an externals
      definition format that is a multiline table of subdirectories
      (relative to the versioned directory on which the property is
      set), optional revision flags, and fully qualified, absolute
      Subversion repository URLs.  An example of this might look as
      follows: 
$ svn propget svn:externals calc
third-party/sounds             http://svn.example.com/repos/sounds
third-party/skins -r148        http://svn.example.com/skinproj
third-party/skins/toolkit -r21 http://svn.example.com/skin-maker
 When someone checks out a working copy of the
       calc  directory referred to in the previous
      example, Subversion also continues to check out the items found
      in its externals definition. 
$ svn checkout http://svn.example.com/repos/calc
A    calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A    calc/third-party/sounds/ding.ogg
A    calc/third-party/sounds/dong.ogg
A    calc/third-party/sounds/clang.ogg
 
A    calc/third-party/sounds/bang.ogg
A    calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
 
 As of Subversion 1.5, though, a new format of the
       svn:externals  property is supported.
      Externals definitions are still multiline, but the order and
      format of the various pieces of information have changed.  The
      new syntax more closely mimics the order of arguments you might
      pass to  svn checkout : the optional revision
      flags come first, then the external Subversion repository URL,
      and finally the relative local subdirectory.  Notice, though,
      that this time we didn&#39;t say  fully qualified, absolute
      Subversion repository URLs.  That&#39;s because the new
      format supports relative URLs and URLs that carry peg revisions.
      The previous example of an externals definition might, in
      Subversion 1.5, look like the following: 
$ svn propget svn:externals calc
      http://svn.example.com/repos/sounds third-party/sounds
-r148 http://svn.example.com/skinproj third-party/skins
-r21  http://svn.example.com/skin-maker third-party/skins/toolkit
 Or, making use of the peg revision syntax (which we describe
      in detail in  ), it might
      appear as: 
$ svn propget svn:externals calc
http://svn.example.com/repos/sounds third-party/sounds
http://svn.example.com/skinproj@148 third-party/skins
http://svn.example.com/skin-maker@21 third-party/skins/toolkit
 You should seriously consider using explicit revision
        numbers in all of your externals definitions.  Doing so means
        that you get to decide when to pull down a different snapshot
        of external information, and exactly which snapshot to pull.
        Besides avoiding the surprise of getting changes to
        third-party repositories that you might not have any control
        over, using explicit revision numbers also means that as you
        backdate your working copy to a previous revision, your
        externals definitions will also revert to the way they looked
        in that previous revision, which in turn means that the
        external working copies will be updated to match the way
         they  looked back when your repository was
        at that previous revision.  For software projects, this could
        be the difference between a successful and a failed build of
        an older snapshot of your complex codebase. For most repositories, these three ways of formatting the
      externals definitions have the same ultimate effect.  They all
      bring the same benefits.  Unfortunately, they all bring the same
      annoyances, too.  Since the definitions shown use absolute URLs,
      moving or copying a directory to which they are attached will
      not affect what gets checked out as an external (though the
      relative local target subdirectory will, of course, move with the
      renamed directory).  This can be confusing even
      frustrating in certain situations.  For example, say you
      have a top-level directory named
       my-project , and you&#39;ve created an externals
      definition on one of its subdirectories
      ( my-project/some-dir ) that tracks the
      latest revision of another of its subdirectories
      ( my-project/external-dir ). 
$ svn checkout http://svn.example.com/projects .
A    my-project
A    my-project/some-dir
A    my-project/external-dir
 
Fetching external item into &#39;my-project/some-dir/subdir&#39;
Checked out external at revision 11.

Checked out revision 11.
$ svn propget svn:externals my-project/some-dir
subdir http://svn.example.com/projects/my-project/external-dir

$
 Now you use  svn move  to rename the
       my-project  directory.  At this point, your
      externals definition will still refer to a path under the
       my-project  directory, even though that
      directory no longer exists. 
$ svn move -q my-project renamed-project
$ svn commit -m &quot;Rename my-project to renamed-project.&quot;
Deleting       my-project
Adding         renamed-project

Committed revision 12.
$ svn update
Updating &#39;.&#39;:

svn: warning: W200000: Error handling externals definition for &#39;renamed-projec
t/some-dir/subdir&#39;:
svn: warning: W170000: URL &#39;http://svn.example.com/projects/my-project/externa
l-dir&#39; at revision 12 doesn&#39;t exist
At revision 12.
svn: E205011: Failure occurred processing one or more externals definitions
$
 Also, absolute URLs can cause problems with repositories
      that are available via multiple URL schemes.  For example, if
      your Subversion server is configured to allow everyone to check
      out the repository over  http://  or
       https:// , but only allow commits to come in
      via  https:// , you have an interesting problem
      on your hands.  If your externals definitions use the
       http://  form of the repository URLs, you
      won&#39;t be able to commit anything from the working copies created
      by those externals.  On the other hand, if they use the
       https://  form of the URLs, anyone who might
      be checking out via  http://  because his
      client doesn&#39;t support  https://  will be
      unable to fetch the external items.  Be aware, too, that if you
      need to reparent your working copy (using  svn
      relocate ), externals definitions will
       not  also be reparented. Subversion 1.5 takes a huge step in relieving these
     frustrations.  As mentioned earlier, the URLs used in the new
     externals definition format can be relative, and Subversion
     provides syntax magic for specifying multiple flavors of URL
     relativity. caret syntax ../ Relative to the URL of the directory on which
          the  svn:externals  property is
          set ^/ Relative to the root of the repository in
          which the  svn:externals  property is
          versioned // Relative to the scheme of the URL of the
          directory on which the  svn:externals 
          property is set / Relative to the root URL of the server on
          which the  svn:externals  property is
          versioned ^/../ REPO-NAME Relative to a sibling repository beneath the
          same  SVNParentPath  location as the
          repository in which the  svn:externals  is
          defined. So, looking a fourth time at our previous externals
      definition example, and making use of the new absolute URL
      syntax in various ways, we might now see: 
$ svn propget svn:externals calc
^/sounds third-party/sounds
/skinproj@148 third-party/skins
//svn.example.com/skin-maker@21 third-party/skins/toolkit
$
 Subversion 1.6 brought two more improvements to externals
      definitions.  First, it added a quoting and escape mechanism to
      the syntax so that the path of the external working copy may
      contain whitespace.  This was previously problematic, of course,
      because whitespace is used to delimit the fields in an externals
      definition.  Now you need only wrap such a path specification in
      double-quote ( &quot; ) characters or
      escape the problematic characters in the path with a backslash
      ( \ ) character.  Of course, if you have spaces
      in the  URL  portion of the external
      definition, you should use the standard URI-encoding mechanism
      to represent those. 
$ svn propget svn:externals paint
http://svn.thirdparty.com/repos/My%20Project &quot;My Project&quot;
http://svn.thirdparty.com/repos/%22Quotes%20Too%22 \&quot;Quotes\ Too\&quot;
$
 externals file Subversion 1.6 also introduced support for external
      definitions for files.   File externals 
      are configured just like externals for directories and appear as
      a versioned file in the working copy. For example, let&#39;s say you had the file
       /trunk/bikeshed/blue.html  in your repository,
      and you wanted this file, as it appeared in revision 40,
      to appear in your working copy of  /trunk/www/ 
      as  green.html . The externals definition required to achieve this should
      look familiar by now: 
$ svn propget svn:externals www/
^/trunk/bikeshed/blue.html@40 green.html
$ svn update
Updating &#39;.&#39;:

Fetching external item into &#39;www&#39;
E    www/green.html
Updated external to revision 40.

Update to revision 103.
$ svn status
    X   www/green.html
$
 As you can see in the previous output, Subversion denotes file
      externals with the letter  E  when they are
      fetched into the working copy, and with the letter
       X  when showing the working copy status. While directory externals can place the external
        directory at any depth, and any missing intermediate
        directories will be created, file externals must be placed
        into a working copy that is already checked out. When examining the file external with
       svn info , you can see the URL and revision
      the external is coming from: 
$ svn info www/green.html 
Path: www/green.html
Name: green.html
Working Copy Root Path: /home/harry/projects/my-project
URL: http://svn.example.com/projects/my-project/trunk/bikeshed/blue.html
Repository Root: http://svn.example.com/projects/my-project
Repository UUID: b2a368dc-7564-11de-bb2b-113435390e17
Revision: 40
Node kind: file
Schedule: normal
Last Changed Author: harry
Last Changed Rev: 40
Last Changed Date: 2009-07-20 20:38:20 +0100 (Mon, 20 Jul 2009)
Text Last Updated: 2009-07-20 23:22:36 +0100 (Mon, 20 Jul 2009)
Checksum: 01a58b04617b92492d99662c3837b33b
$
 Because file externals appear in the working copy as
      versioned files, they can be modified and even committed
      if they reference a file at the HEAD revision. The committed
      changes will then appear in the external as well as the file
      referenced by the external. However, in our example, we pinned
      the external to an older revision, so attempting to commit
      the external fails: 
$ svn status
M   X   www/green.html
$ svn commit -m &quot;change the color&quot; www/green.html
Sending        www/green.html
svn: E155011: Commit failed (details follow):
svn: E155011: File &#39;/trunk/bikeshed/blue.html&#39; is out of date
$
 Keep this in mind when defining file externals.
      If you need the external to refer to a certain revision
      of a file you will not be able to modify the external.
      If you want to be able to modify the external, you cannot
      specify a revision other than the  HEAD 
      revision, which is implied if no revision is specified. Unfortunately, the support which exists for externals definitions
      in Subversion remains less than ideal.  Both file and directory
      externals have shortcomings. For either type of external, the
      local subdirectory part of the definition cannot contain
       ..  parent directory indicators (such as
       ../../skins/myskin ).  File externals cannot
      refer to files from other repositories. A file external&#39;s URL
      must always be in the same repository as the URL that the file
      external will be inserted into. Also, file externals cannot be
      moved or deleted. The  svn:externals  property
      must be modified instead. However, file externals can be copied. Perhaps most disappointingly, the working copies created via the
      externals definition support are still disconnected from the primary
      working copy (on whose versioned directories the
       svn:externals  property was actually set).
      And Subversion still truly operates only on nondisjoint working
      copies.  So, for example, if you want to commit changes that
      you&#39;ve made in one or more of those external working copies, you
      must run  svn commit  explicitly on those
      working copies committing on the primary working copy will
      not recurse into any external ones. We&#39;ve already mentioned some of the additional shortcomings
      of the old  svn:externals  format and how the
      newer Subversion 1.5 format improves upon it.  But be careful
      when making use of the new format that you don&#39;t inadvertently
      introduce new problems.  For example, while the latest clients
      will continue to recognize and support the original externals
      definition format, pre-1.5 clients will  not 
      be able to correctly parse the new format.  If you change all
      your externals definitions to the newer format, you effectively
      force everyone who uses those externals to upgrade their
      Subversion clients to a version that can parse them.  Also, be
      careful to avoid naively relocating
      the  -r NNN  portion
      of the definition the older format uses that revision as a
      peg revision, but the newer format uses it as an operative
      revision (with a peg revision of  HEAD  unless
      otherwise specified; see  
      for a full explanation of the distinction here). External working copies are still completely
        self-sufficient working copies.  You can operate directly on
        them as you would any other working copy.  This can be a handy
        feature, allowing you to examine an external working copy
        independently of any primary working copy
        whose  svn:externals  property caused its
        instantiation.  Be careful, though, that you don&#39;t
        inadvertently modify your external working copy in subtle ways
        that cause problems.  For example, while an externals
        definition might specify that the external working copy should
        be held at a particular revision number, if you
        run  svn update  directly on the external
        working copy, Subversion will oblige, and now your external
        working copy is out of sync with its declaration in the
        primary working copy.  Using  svn switch  to
        directly switch the external working copy (or some portion
        thereof) to another URL could cause similar problems if the
        contents of the primary working copy are expecting particular
        contents in the external content. working copies disjoint Besides the  svn checkout ,  svn
      update ,  svn switch , and
       svn export  commands which actually manage the
       disjoint  (or disconnected) subdirectories
      into which externals are checked out, the  svn
      status  command also recognizes externals definitions.
      It displays a status code of  X  for the
      disjoint external subdirectories, and then recurses into those
      subdirectories to display the status of the external items
      themselves.  You can pass the
       --ignore-externals  option to any of these
      subcommands to disable externals definition processing. Changelists It is commonplace for a developer to find himself working at
      any given time on multiple different, distinct changes to a
      particular bit of source code.  This isn&#39;t necessarily due to
      poor planning or some form of digital masochism.  A software
      engineer often spots bugs in his peripheral vision while working
      on some nearby chunk of source code.  Or perhaps he&#39;s halfway
      through some large change when he realizes the solution he&#39;s
      working on is best committed as several smaller logical units.
      Often, these logical units aren&#39;t nicely contained in some
      module, safely separated from other changes.  The units might
      overlap, modifying different files in the same module, or even
      modifying different lines in the same file. Developers can employ various work methodologies
      to keep these logical changes organized.  Some use
      separate working copies of the same repository to hold each
      individual change in progress.  Others might choose to create
      short-lived feature branches in the repository and use a single
      working copy that is constantly switched to point to one such
      branch or another.  Still others use  diff  and
       patch  tools to back up and restore uncommitted
      changes to and from patch files associated with each change.
      Each of these methods has its pros and cons, and to a large
      degree, the details of the changes being made heavily influence
      the methodology used to distinguish them. changelists Subversion provides a  changelists 
      feature that adds yet another method to the mix.  Changelists
      are basically arbitrary labels (currently at most one per file)
      applied to working copy files for the express purpose of
      associating multiple files together.  Users of many of Google&#39;s
      software offerings are familiar with this concept already.  For
      example,  Gmail 
      doesn&#39;t provide the traditional folders-based email organization
      mechanism.  In Gmail, you apply arbitrary labels to emails, and
      multiple emails can be said to be part of the same group if they
      happen to share a particular label.  Viewing only a group of
      similarly labeled emails then becomes a simple user interface
      trick.  Many other Web 2.0 sites have similar
      mechanisms consider the  tags  used by sites
      such as  YouTube  and
       Flickr ,
       categories  applied to blog posts, and so on.
      Folks understand today that organization of data is critical,
      but that how that data is organized needs to be a flexible
      concept.  The old files-and-folders paradigm is too rigid for
      some applications. Subversion&#39;s changelist support allows you to create
      changelists by applying labels to files you want to be
      associated with that changelist, remove those labels, and limit
      the scope of the files on which its subcommands operate to only
      those bearing a particular label.  In this section, we&#39;ll look
      in detail at how to do these things. Creating and Modifying Changelists svn subcommands changelist changelists creating You can create, modify, and delete changelists using the
         svn changelist  command.  More accurately,
        you use this command to set or unset the changelist
        association of a particular working copy file.  A changelist
        is effectively created the first time you label a file with
        that changelist; it is deleted when you remove that label from
        the last file that had it.  Let&#39;s examine a usage scenario
        that demonstrates these concepts. Harry is fixing some bugs in the calculator application&#39;s
        mathematics logic.  His work leads him to change a couple of
        files: 
$ svn status
M       integer.c
M       mathops.c
$
 While testing his bug fix, Harry notices that his changes
        bring to light a tangentially related bug in the user
        interface logic found in  button.c .  Harry
        decides that he&#39;ll go ahead and fix that bug, too, as a
        separate commit from his math fixes.  Now, in a small working
        copy with only a handful of files and few logical changes,
        Harry can probably keep his two logical change groupings
        mentally organized without any problem.  But today he&#39;s going
        to use Subversion&#39;s changelists feature as a special favor to
        the authors of this book. Harry first creates a changelist and associates with it
        the two files he&#39;s already changed.  He does this by using the
         svn changelist  command to assign the same
        arbitrary changelist name to those files: 
$ svn changelist math-fixes integer.c mathops.c
A [math-fixes] integer.c
A [math-fixes] mathops.c
$ svn status

--- Changelist &#39;math-fixes&#39;:
M       integer.c
M       mathops.c
$
 As you can see, the output of  svn
        status  reflects this new grouping. Harry now sets off to fix the secondary UI problem.  Since
        he knows which file he&#39;ll be changing, he assigns that path to
        a changelist, too.  Unfortunately, Harry carelessly assigns this
        third file to the same changelist as the previous two files: 
$ svn changelist math-fixes button.c
A [math-fixes] button.c
$ svn status

--- Changelist &#39;math-fixes&#39;:
        button.c
M       integer.c
M       mathops.c
$
 svn subcommands changelist changelists removing Fortunately, Harry catches his mistake.  At this
        point, he has two options.  He can remove the changelist
        association from  button.c , and then
        assign a different changelist name: 
$ svn changelist --remove button.c
D [math-fixes] button.c
$ svn changelist ui-fix button.c
A [ui-fix] button.c
$
 svn subcommands changelist changelists reassigning Or, he can skip the removal and just assign a new
        changelist name.  In this case, Subversion will first warn
        Harry that  button.c  is being removed from
        the first changelist: 
$ svn changelist ui-fix button.c
D [math-fixes] button.c
A [ui-fix] button.c
$ svn status

--- Changelist &#39;ui-fix&#39;:
        button.c

--- Changelist &#39;math-fixes&#39;:
M       integer.c
M       mathops.c
$
 Harry now has two distinct changelists present in his
        working copy, and  svn status  will group its
        output according to these changelist determinations.  Notice
        that even though Harry hasn&#39;t yet modified
         button.c , it still shows up in the output
        of  svn status  as interesting because it has
        a changelist assignment.  Changelists can be added to and
        removed from files at any time, regardless of whether they
        contain local modifications. Harry now fixes the user interface problem in
         button.c . 
$ svn status

--- Changelist &#39;ui-fix&#39;:
M       button.c

--- Changelist &#39;math-fixes&#39;:
M       integer.c
M       mathops.c
$
 Changelists As Operation Filters The visual grouping that Harry sees in the output of
         svn status  as shown in our previous section
        is nice, but not entirely useful.  The
         status  command is but one of many
        operations that he might wish to perform on his working copy.
        Fortunately, many of Subversion&#39;s other operations understand
        how to operate on changelists via the use of the
         --changelist  option. When provided with a  --changelist  option,
        Subversion commands will limit the scope of their operation to
        only those files to which a particular changelist name is
        assigned.  If Harry now wants to see the actual changes he&#39;s
        made to the files in his  math-fixes 
        changelist, he  could  explicitly list only
        the files that make up that changelist on the  svn
        diff  command line. 
$ svn diff integer.c mathops.c
Index: integer.c
===================================================================
--- integer.c    (revision 1157)
+++ integer.c    (working copy)
 
Index: mathops.c
===================================================================
--- mathops.c    (revision 1157)
+++ mathops.c    (working copy)
 
$
 That works okay for a few files, but what if Harry&#39;s
        change touched 20 or 30 files?  That would be an annoyingly
        long list of explicitly named files.  Now that he&#39;s using
        changelists, though, Harry can avoid explicitly listing the
        set of files in his changelist from now on, and instead
        provide just the changelist name: 
$ svn diff --changelist math-fixes
Index: integer.c
===================================================================
--- integer.c    (revision 1157)
+++ integer.c    (working copy)
 
Index: mathops.c
===================================================================
--- mathops.c    (revision 1157)
+++ mathops.c    (working copy)
 
$
 And when it&#39;s time to commit, Harry can again use the
         --changelist  option to limit the scope of the
        commit to files in a certain changelist.  He might commit his
        user interface fix by doing the following: 
$ svn commit -m &quot;Fix a UI bug found while working on math logic.&quot; \
             --changelist ui-fix
Sending        button.c
Transmitting file data .
Committed revision 1158.
$
 In fact, the  svn commit  command
        provides a second changelists-related option:
         --keep-changelists .  Normally, changelist
        assignments are removed from files after they are committed.
        But if  --keep-changelists  is provided,
        Subversion will leave the changelist assignment on the
        committed (and now unmodified) files.  In any case, committing
        files assigned to one changelist leaves other changelists
        undisturbed. 
$ svn status

--- Changelist &#39;math-fixes&#39;:
M       integer.c
M       mathops.c
$
 The  --changelist  option acts only as a
          filter for Subversion command targets, and will not add
          targets to an operation.  For example, on a commit operation
          specified as  svn commit /path/to/dir , the
          target is the directory  /path/to/dir 
          and its children (to infinite depth).  If you then add a
          changelist specifier to that command, only those files in
          and under  /path/to/dir  that are
          assigned that changelist name will be considered as targets
          of the commit the commit will not include files
          located elsewhere (such as in
           /path/to/another-dir ), regardless of
          their changelist assignment, even if they are part of the
          same working copy as the operation&#39;s target(s). Even the  svn changelist  command accepts
        the  --changelist  option.  This allows you to
        quickly and easily rename or remove a changelist: 
$ svn changelist math-bugs --changelist math-fixes --depth infinity .
D [math-fixes] integer.c
A [math-bugs] integer.c
D [math-fixes] mathops.c
A [math-bugs] mathops.c
$ svn changelist --remove --changelist math-bugs --depth infinity .
D [math-bugs] integer.c
D [math-bugs] mathops.c
$
 Finally, you can specify multiple instances of the
         --changelist  option on a single command
        line.  Doing so limits the operation you are performing to
        files found in any of the specified changesets. Changelist Limitations Subversion&#39;s changelist feature is a handy tool for
        grouping working copy files, but it does have a few limitations.
        Changelists are artifacts of a particular working copy, which
        means that changelist assignments cannot be propagated to the
        repository or otherwise shared with other users.  Changelists
        can be assigned only to files Subversion doesn&#39;t
        currently support the use of changelists with directories.
        Finally, you can have at most one changelist assignment on a
        given working copy file.  Here is where the blog post category
        and photo service tag analogies break down if you find
        yourself needing to assign a file to multiple changelists,
        you&#39;re out of luck. Network Model At some point, you&#39;re going to need to understand how your
      Subversion client communicates with its server.  Subversion&#39;s
      networking layer is abstracted, meaning that Subversion clients
      exhibit the same general behaviors no matter what sort of server
      they are operating against.  Whether speaking the HTTP protocol
      ( http:// ) with the Apache HTTP Server or
      speaking the custom Subversion protocol
      ( svn:// ) with  svnserve ,
      the basic network model is the same.  In this section, we&#39;ll
      explain the basics of that network model, including how
      Subversion manages authentication and authorization
      matters. Requests and Responses The Subversion client spends most of its time managing
        working copies.  When it needs information from a remote
        repository, however, it makes a network request, and the
        server responds with an appropriate answer.  The details of
        the network protocol are hidden from the user the client
        attempts to access a URL, and depending on the URL scheme, a
        particular protocol is used to contact the server (see  ). Run  svn --version  to see which
          URL schemes and protocols the client knows how to use. authentication credentials When the server process receives a client request, it
        often demands that the client identify itself.  It issues
        an authentication challenge to the client, and the client
        responds by providing  credentials  back
        to the server.  Once authentication is complete, the server
        responds with the original information that the client asked for.
        Notice that this system is different from systems such as CVS,
        where the client preemptively offers credentials ( logs
        in ) to the server before ever making a request.  In
        Subversion, the server  pulls  credentials by
        challenging the client at the appropriate moment, rather than
        the client  pushing  them.  This makes certain
        operations more elegant.  For example, if a server is
        configured to allow anyone in the world to read a repository,
        the server will never issue an authentication challenge
        when a client attempts to  svn checkout . If the particular network requests issued by the client
        result in a new revision being created in the repository
        (e.g.,  svn commit ), Subversion uses the
        authenticated username associated with those requests as the
        author of the revision.  That is, the authenticated user&#39;s
        name is stored as the value of the
         svn:author  property on the new revision
        (see  ).  If the
        client was not authenticated (i.e., if the server never issued
        an authentication challenge), the revision&#39;s
         svn:author  property is empty. Client Credentials Many Subversion servers are configured to require
        authentication.  Sometimes anonymous read operations are
        allowed, while write operations must be authenticated.  In
        other cases, reads and writes alike require authentication.
        Subversion&#39;s different server options understand different
        authentication protocols, but from the user&#39;s point of view,
        authentication typically boils down to usernames and
        passwords.  Subversion clients offer several different ways to
        retrieve and store a user&#39;s authentication credentials, from
        interactive prompting for usernames and passwords to encrypted
        and non-encrypted on-disk data caches. The security-conscious reader will suspect immediately
        that there is reason for concern here.   Caching
        passwords on disk?  That&#39;s terrible!  You should never do
        that!   Don&#39;t worry it&#39;s not as bad as it sounds.
        The following sections discuss the various types of credential
        caches that Subversion uses, when it uses them, and how to
        disable that functionality in whole or in part. Caching credentials Subversion offers a remedy for the annoyance caused when
          users are forced to type their usernames and passwords over
          and over again.  By default, whenever the command-line
          client successfully responds to a server&#39;s authentication
          challenge, credentials are cached on disk and keyed on a
          combination of the server&#39;s hostname, port, and
          authentication realm.  This cache will then be automatically
          consulted in the future, avoiding the need for the user to
          re-type his or her authentication credentials.  If seemingly
          suitable credentials are not present in the cache, or if the
          cached credentials ultimately fail to authenticate, the
          client will, by default, fall back to prompting the user for
          the necessary information. The Subversion developers recognize that on-disk caches
          of authentication credentials can be a security risk.  To
          offset this, Subversion works with available mechanisms
          provided by the operating system and environment to try to
          minimize the risk of leaking this information. On Windows, the Subversion client stores passwords
              in the  %APPDATA%/Subversion/auth/ 
              directory.  On Windows 2000 and later, the standard
              Windows cryptography services are used to encrypt the
              password on disk.  Because the encryption key is managed
              by Windows and is tied to the user&#39;s own login
              credentials, only the user can decrypt the cached
              password.  (Note that if the user&#39;s Windows account
              password is reset by an administrator, all of the cached
              passwords become undecipherable.  The Subversion client
              will behave as though they don&#39;t exist, prompting for
              passwords when required.) Similarly, on Mac OS X, the Subversion client stores
              all repository passwords in the login keyring (managed
              by the Keychain service), which is protected by the
              user&#39;s account password.  User preference settings can
              impose additional policies, such as requiring that the
              user&#39;s account password be entered each time the
              Subversion password is used. For other Unix-like operating systems, no single
              standard  keychain  service exists.
              However, the Subversion client knows how to store
              passwords securely using the  GNOME Keyring 
              and  KDE Wallet  services.  Also, before
              storing unencrypted passwords in the
               ~/.subversion/auth/  caching area,
              the Subversion client will ask the user for permission
              to do so.  Note that the  auth/ 
              caching area is still permission-protected so that only
              the user (owner) can read data from it, not the world at
              large.  The operating system&#39;s own file permissions protect
              the passwords from other non-administrative users on the
              same system, provided they have no direct physical access
              to the storage media of the home directory, or backups
              thereof. Of course, for the truly paranoid, none of these
          mechanisms meets the test of perfection.  So for those folks
          willing to sacrifice convenience for the ultimate in security,
          Subversion provides various ways of disabling its credentials
          caching system altogether. Disabling password caching When you perform a Subversion operation that requires
          you to authenticate, by default Subversion tries to cache
          your authentication credentials on disk in encrypted form.
          On some systems, Subversion may be unable to encrypt your
          authentication data.  In those situations, Subversion will
          ask whether you want to cache your credentials to disk in
          plaintext: 
$ svn checkout https://host.example.com:443/svn/private-repo
-----------------------------------------------------------------------
ATTENTION!  Your password for authentication realm:

   &lt;https://host.example.com:443&gt; Subversion Repository

can only be stored to disk unencrypted!  You are advised to configure
your system so that Subversion can store passwords encrypted, if
possible.  See the documentation for details.

You can avoid future appearances of this warning by setting the value
of the &#39;store-plaintext-passwords&#39; option to either &#39;yes&#39; or &#39;no&#39; in
&#39;/tmp/servers&#39;.
-----------------------------------------------------------------------
Store password unencrypted (yes/no)? 
 If you want the convenience of not having to continually
          reenter your password for future operations, you can
          answer  yes  to this prompt.  If you&#39;re
          concerned about caching your Subversion passwords in
          plaintext and do not want to be asked about it again and
          again, you can disable caching of plaintext passwords either
          permanently, or on a server-by-server basis. When considering how to use Subversion&#39;s password
            caching system, you&#39;ll want to consult any governing
            policies that are in place for your client
            computer many companies have strict rules about the
            ways that their employees&#39; authentication credentials
            should be stored. To permanently disable caching of passwords in
          plaintext, add the line  store-plaintext-passwords =
          no  to the  [global]  section in
          the  servers  configuration file on the
          local machine.  To disable plaintext password caching for a
          particular server, use the same setting in the appropriate
          group section in the  servers 
          configuration file.  (See
            in
            for details.) To disable password caching entirely for any single
          Subversion command-line operation, pass
          the  --no-auth-cache  option to that command
          line.  To permanently disable caching entirely, add the
          line  store-passwords = no  to your local
          machine&#39;s Subversion configuration file. Removing cached credentials Sometimes users will want to remove specific credentials
          from the disk cache.  To do this, you need to navigate into
          the  auth/  area and manually delete the
          appropriate cache file.  Credentials are cached in individual
          files;  if you look inside each file, you will see keys and
          values.  The  svn:realmstring  key describes
          the particular server realm that the file is associated
          with: 
$ ls ~/.subversion/auth/svn.simple/
5671adf2865e267db74f09ba6f872c28
3893ed123b39500bca8a0b382839198e
5c3c22968347b390f349ff340196ed39

$ cat ~/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28

K 8
username
V 3
joe
K 8
password
V 4
blah
K 15
svn:realmstring
V 45
&lt;https://svn.domain.com:443&gt; Joe&#39;s repository
END
 Once you have located the proper cache file, just delete
          it. Command-line authentication All Subversion command-line operations accept
          the  --username 
          and  --password  options, which allow you to
          specify your username and password, respectively, so that
          Subversion isn&#39;t forced to prompt you for that information.
          This is especially handy if you need to invoke Subversion
          from a script and cannot rely on Subversion being able to
          locate valid cached credentials for you.  These options are
          also helpful when Subversion has already cached
          authentication credentials for you, but you know they aren&#39;t
          the ones you want it to use.  Perhaps several system users
          share a login to the system, but each have distinct
          Subversion identities.  You can omit
          the  --password  option from this pair if
          you wish Subversion to use only the provided username, but
          still prompt you for that username&#39;s password. Authentication wrap-up One last word about  svn &#39;s
          authentication behavior, specifically regarding the
           --username  and  --password 
          options.  Many client subcommands accept these options, but it
          is important to understand that using these options does
           not  automatically send credentials to the
          server.  As discussed earlier, the server  pulls 
          credentials from the client when it deems necessary; the
          client cannot  push  them at will.  If a username
          and/or password are passed as options, they will be
          presented to the server only if the server requests them.  These
          options are typically used to authenticate as a different user
          than Subversion would have chosen by default (such as your
          system login name) or when trying to avoid interactive
          prompting (such as when calling  svn  from a
          script). A common mistake is to misconfigure a server so
            that it never issues an authentication challenge.  When
            users pass  --username  and
             --password  options to the client, they&#39;re
            surprised to see that they&#39;re never used; that is, new
            revisions still appear to have been committed
            anonymously! Here is a final summary that describes how a Subversion
          client behaves when it receives an authentication
          challenge. First, the client checks whether the user specified
              any credentials as command-line options
              ( --username  and/or
               --password ).  If so, the client will try
              to use those credentials to authenticate against the
              server. If no command-line credentials were provided, or the
              provided ones were invalid, the client looks up the server&#39;s
              hostname, port, and realm in the runtime configuration&#39;s
               auth/  area, to see whether appropriate 
              credentials are cached there.  If so, it attempts to use
              those credentials to authenticate. Finally, if the previous mechanisms failed to
              successfully authenticate the user against the server, the
              client resorts to interactively prompting the user for
              valid credentials (unless instructed not to do so via the
               --non-interactive  option or its
              client-specific equivalents). If the client successfully authenticates by any of these
          methods, it will attempt to cache the credentials on disk
          (unless the user has disabled this behavior, as mentioned
          earlier). Working Without a Working Copy As we described in  , the Subversion working copy is a sort of staging area where
      a user can privately make changes to his or her versioned data
      and then when those changes are complete and ready for
      sharing with others commit them to the repository.  It
      should come as no surprise, then, that most of the interaction
      you will have with Subversion will be in the form of asking your
      Subversion client to do  something  to one or
      more items in a local working copy.  Even for those operations
      which don&#39;t manipulate the working copy data itself (such
      as  svn log ), it&#39;s often just easier to use a
      working copy file or directory as a convenient target for that
      operation. Clearly, the typical approach to making changes to
      your versioned data is via commits from a Subversion working
      copy.  Fortunately, it&#39;s not the only way.  Users of Subversion
      who need to make relatively simple changes to their versioned
      data can do so without the overhead of checking out a working
      copy.  We&#39;ll cover some of those supported operations in this
      section. Remote command-line client operations The Subversion command-line client supports a number of
        operations which can be performed directly against repository
        URLs in order to make simple changes without a working copy.
        Some of these are described elsewhere in this book, but we
        provide an exhaustive list of them here for your
        convenience. Perhaps the most obvious remote commit-like operation is
        the  svn import  command.  We describe that
        command in   as
        part of explaining how you can easily get a whole tree of
        unversioned information into your Subversion repository so you
        can start doing version-controlled operations on it. The  svn mkdir  and  svn
        delete  commands, when used with URL targets, are
        also remote commit-type operations.  These allow the user to
        create one or more new versioned directories or remove
        (recursively) one or more versioned files or directories,
        respectively, without the use of a working copy.  Each time
        you issue one of these commands, the client communicates with
        the server in a way that&#39;s similar to how it would describe
        the commit of a directory added or of an item removed from the
        working copy.  If there&#39;s no problem or conflict detected with
        the requested operation, the server commits the additions or
        removals in a single new revision. You can use  svn copy  or  svn
        move  with two URLs a copy/move source and a
        destination to commit a copies and moves of files and
        directories directly in the repository.  These operations tend
        to be some of the most expensive ones when performed within a
        working copy, but they complete in constant time when
        performed remotely using repository URLs.  In fact,
        the  svn copy  remote operation is commonly
        used to create branches in Subversion, as we discuss later in
         . As with the regular  svn commit  command,
        you can supply a log message with any of these commands we&#39;ve
        discussed so far to describe the changes you&#39;re making.  Use
        the  --file (-F)  or  --message
        (-m)  option, or otherwise allow the client to prompt
        you for the log message. Finally, there are a number of operations related to
        unversioned revision properties which can be performed
        directly against the repository.  In fact, revision properties
        are somewhat unique in this context, as they aren&#39;t stored in
        the working copy and therefore  must  be
        modified without working copy interaction.  See
          for a more detailed
        description of how to manage properties in Subversion. Using svnmucc One shortcoming of the remote commit operation support
        offered in the command-line client is that you are essentially
        limited to one operation or, really, one type of
        operation per commit.  For example, it&#39;s perfectly
        natural and supported to, say, use  svn
        delete  followed by  svn mkdir 
        within a working copy to replace an existing versioned
        directory with a brand new one.  When you commit the results
        of those operations, a single new revision is created in the
        repository, and that revision carries the full replacement of
        your directory.  You can&#39;t really do the same thing as remote
        operations using the command-line client while still
        preserving the it-happened-in-a-single-revision-ness of the
        change svn
        delete  URL  would create a
        new revision that removed the directory;  svn
        mkdir  URL  would generate
        a second revision for the directory&#39;s re-creation. Fortunately, Subversion provides a separate tool which
        exists solely to allow users to string together a set of
        remote operations and commit them as one atomic change.  That
        tool is the  svnmucc  tool the
        Subversion Multiple URL Command Client: 
$ svnmucc --help
Subversion multiple URL command client
usage: svnmucc ACTION...

  Perform one or more Subversion repository URL-based ACTIONs, committing
  the result as a (single) new revision.

Actions:
  cp REV URL1 URL2       : copy URL1@REV to URL2
  mkdir URL              : create new directory URL
  mv URL1 URL2           : move URL1 to URL2
  rm URL                 : delete URL
  put SRC-FILE URL       : add or modify file URL with contents copied from
                           SRC-FILE (use &quot;-&quot; to read from standard input)
  propset NAME VAL URL   : set property NAME on URL to value VAL
  propsetf NAME VAL URL  : set property NAME on URL to value from file VAL
  propdel NAME URL       : delete property NAME from URL
 
 svnmucc  has been a part of the Subversion
        project&#39;s source code tree for many years
        (as  mucc  for most of that time), but it was
        only in Subversion 1.8 that it become a fully supported member
        of the Subversion command-line tool suite. The  svnmucc  tool can perform any
        transformation on your versioned data that  svn 
        itself can.  But unlike  svn , the functionality
        that  svnmucc  offers isn&#39;t broken up into
        subcommands.  Rather, you provide a list of actions and
        operands in a single command line (or from a file stream, via
        the  --extra-args (-X)  option).  Some of the
        actions supported by  svnmucc  mimic those of
        the command-line client.  You&#39;ll notice in the previous
        command output actions such as  cp ,
         mkdir ,  mv ,
        and  rm , all of which are very similar to
        the commands we mentioned in
         .  But
        remember, the key difference here is that you can use any
        number of these actions together in a single command
        invocation, resulting in a single committed revision in the
        repository. Let&#39;s take our previous example of trying to simply
        replace a remote directory.  Using  svnmucc ,
        you would accomplish this as follows: 
$ svnmucc rm http://svn.example.com/projects/sandbox \
          mkdir http://svn.example.com/projects/sandbox \
          -m &quot;Replace my old sandbox with a fresh new one.&quot;
r22 committed by harry at 2013-01-15T21:45:26.442865Z
$ 
 As you can see,  svnmucc  accomplished in
        a single revision what  svn without
        the benefit of a working copy required two revisions to
        complete. Another difference between  svnmucc 
          and  svn  is that the former currently will
          not prompt you for a commit log message if you fail to
          supply one via the command line.  Rather, it will use a
          stock (that is, relatively valueless) log message. The  svnmucc  tool is not limited to
        merely remixing actions that  svn  itself can
        perform.  It introduces some additional functionality not
        found in the command-line client.  For example, you can use
        the  put  action to add or modify a file in
        the repository, copying the file&#39;s intended new contents from
        either a file on your local machine or from data piped in via
        standard input.  The tool also offers  propset ,
         propsetf , and  propdel 
        actions, useful for setting properties on versioned files and
        directories (explicitly, or by copying the property&#39;s value
        from a local file) and for deleting properties on the same.
        Those actions are unsupported in the command-line client at
        this time. At this point, though, it seems prudent to discuss the
        difference between what  can  be done
        with  svnmucc  and what
         should  be done.  A pair of notable quotes
        comes to mind: Jesus To whom much has been given, much will be
          expected. &quot;Spiderman&quot; Peter Parker&#39;s Uncle Ben With great power comes great
          responsibility. Inherent in working-copy-less modifications is the loss of
        the very conflict detection safeguards which make the use of a
        working copy so valuable.  When using  svn 
        in the typical way, changes are committed to the server
        against a specific base version of a file or directory so that
        you don&#39;t inadvertently overwrite contemporary changes made to
        the same item by another team member.  The server knows what
        version of the file you had before you changed it, and it
        knows if other folks have changed that same file since that
        revision was created.  That&#39;s all the information the server
        needs to deny your commit when it would clobber someone else&#39;s
        change, forcing you to integrate their change into your
        working copy and reconsider your own change.  Because there is
        no working copy in the mix here,  svnmucc 
        really gives you the power to bypass those safeguards and to
        act as if the current state of the repository is precisely the
        base state against which you are working.  But hopefully it is
        obvious to you that this is not a power you should cavalierly
        wield. Fortunately,  svnmucc  allows you to be
        more conservative in the way you use the tool.  In order to
        provide a safety mechanism similar to what is offered by the
        use of a working copy,  svnmucc  offers
        a  --revision (-r)  option.  With this option,
        you can manually specify a base revision for the changes you
        are attempting to commit.  The base revision you choose
        is ideally the most recent revision in your repository of
        which you can reasonably claim knowledge. Users are strongly encouraged to use, and to use
          correctly, the  --revision (-r)  option
          to  svnmucc . Proper use of the  svnmucc put  action
        best demonstrates how this  --revision (-r) 
        option should be used.  Say Harry wishes to change the
        contents of a versioned  README  file
        without bothering with a full checkout of a working copy.
        (We&#39;ll assume that there is no other value in using a working
        copy for this operation, such as the presence of scripts Harry
        should run in advance of his commit to verify that it&#39;s a
        reasonable one.)  The first decision he has to make is which
        revision of the file he wants to work with.  Typically, users
        wish to modify the most recent version of a file.  So Harry
        queries the revision in which the file was last modified, and
        then uses that revision to fetch the contents of the file into
        a temporary local file: 
$ svn info http://svn.example.com/projects/sandbox/README
Path: README
URL: http://svn.example.com/projects/sandbox/README
Relative URL: ^/sandbox/README
Repository Root: http://svn.example.com/projects
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 22
Node Kind: file
Last Changed Author: sally
Last Changed Rev: 14
Last Changed Date: 2012-09-02 10:34:09 -0400 (Sun, 02 Sep 2012)

$ svn cat -r 14 http://svn.example.com/projects/sandbox/README \
      &gt; README.tmpfile
$
 Harry now has a copy of the  README 
        file as it looked when it it was last modified.  He makes the
        edits he wishes to make to this copy of the file.  Naturally,
        when he&#39;s finished, he wishes to then commit those changes to
        the repository. Now, if Harry naively uses  svnmucc put
          at this point to replace the contents of
         README  in the repository with his locally
        modified contents, he has just abused the power
        that  svnmucc  affords.  What if, just
        microseconds prior to his commit, Sally had also modified
        the  README  file?  As with the
         svn  program,  svnmucc 
        won&#39;t attempt some sort of server-side content merge in order
        to preserve both users&#39; changes.  Rather,
         svnmucc  will happily replace the current
        latest version of the file with the contents specified.  Harry
        will be oblivious.  Sally will be livid. 
$ svnmucc put README.tmpfile \
          http://svn.example.com/projects/sandbox/README \
          -m &quot;Tweak the README file.&quot;
r24 committed by harry at 2013-01-21T16:21:23.100133Z
$
Message from sally@shell.example.com on pts/2 at 16:26 ...
We need to talk.  Now.
EOF
 Harry should instead recall the revision he originally
        used as the revision on which to base his changes, supplying
        that revision to  svnmucc  via
        the  --revision (-r)  option, and thus giving
        the server the opportunity to bounce his commit if, by his own
        (perhaps ignorant) admission, he&#39;s attempting to modify an
        out-of-date item: 
$ svnmucc -r 14 put README.tmpfile \
          http://svn.example.com/projects/sandbox/README \
          -m &quot;Tweak the README file.&quot;
svnmucc: E170004: Item &#39;/sandbox/README&#39; is out of date
$
 Like other  svnmucc  options,
        the  --revision (-r)  option operates at a
        scope global to the whole command every action specified
        in that command.  This enables you to have the same sort of
        safeguards you would have if you had checked out a working
        copy of your entire repository (and thus had a working copy
        entirely at a single uniform revision), made changes to that
        working copy, and then committed all those changes at
        once. As you can see,  svnmucc  is a handy
        addition to the Subversion user&#39;s tool chest.  For a complete
        reference of this tool&#39;s offerings, see
         . Summary After reading this chapter, you should have a firm grasp on
      some of Subversion&#39;s features that, while perhaps not used
       every  time you interact with your version
      control system, are certainly handy to know about.  But don&#39;t
      stop here!  Read on to the following chapter, where you&#39;ll learn
      about branches, tags, and merging.  Then you&#39;ll have nearly full
      mastery of the Subversion client.  Though our lawyers won&#39;t
      allow us to promise you anything, this additional knowledge
      could make you measurably more cool. No purchase
      necessary.  Certains terms and conditions apply.  No guarantee
      of coolness implicit or otherwise exists.  Mileage
      may vary. Branching and Merging Confucius 君子务本
      (It is upon the Trunk that a gentleman works.) Branching and merging are fundamental aspects of version
    control, simple enough to explain conceptually but offering just
    enough complexity and nuance to merit their own chapter in this
    book.  Herein, we&#39;ll introduce you to the general ideas behind
    these operations as well as Subversion&#39;s somewhat unique approach
    to them.  If you&#39;ve not familiarized yourself with Subversion&#39;s
    basic concepts (found in  ), we
    recommend that you do so before reading this chapter. What&#39;s a Branch? Suppose it&#39;s your job to maintain a document for a division
      in your company a handbook of some sort.  One day a different
      division asks you for the same handbook, but with a few parts
       tweaked  for them, since they do things slightly
      differently. What do you do in this situation?  You do the obvious: make
      a second copy of your document and begin maintaining the two
      copies separately.  As each department asks you to make small
      changes, you incorporate them into one copy or the other. You often want to make the same change to both copies.  For
      example, if you discover a typo in the first copy, it&#39;s very
      likely that the same typo exists in the second copy.  The two
      documents are almost the same, after all; they differ only in
      small, specific ways. branches This is the basic concept of a branch namely,
      a line of development that exists independently of another line,
      yet still shares a common history if you look far enough back in
      time.  A branch always begins life as a copy of something, and
      moves on from there, generating its own history (see
       ). Branches of development Subversion has commands to help you maintain parallel
      branches of your files and directories.  It allows you to create
      branches by copying your data, and remembers that the copies are
      related to one another.  It also helps you duplicate changes
      from one branch to another.  Finally, it can make portions of
      your working copy reflect different branches so that you can
       mix and match  different lines of development in
      your daily work. Using Branches At this point, you should understand how each commit creates
      a new state of the filesystem tree (called a  revision )
      in the repository.  If you don&#39;t, go back and read about revisions in
       . Let&#39;s revisit the example from
       .  Remember that you and your
      collaborator, Sally, are sharing a repository that contains two
      projects,  paint  and
       calc .  Notice that in  , however, each project
      directory now contains subdirectories named
       trunk  and  branches .
      The reason for this will soon become clear. Starting repository layout As before, assume that Sally and you both have working
      copies of the  calc  project.  Specifically, you
      each have a working copy of  /calc/trunk .
      All the files for the project are in this subdirectory rather
      than in  /calc  itself, because your team has
      decided that  /calc/trunk  is where the
       main line  of development is going to take
      place. Let&#39;s say that you&#39;ve been given the task of implementing a
      large software feature.  It will take a long time to write, and
      will affect all the files in the project.  The immediate problem
      is that you don&#39;t want to interfere with Sally, who is in the
      process of fixing small bugs here and there.  She&#39;s depending on
      the fact that the latest version of the project (in
       /calc/trunk ) is always usable.  If you
      start committing your changes bit by bit, you&#39;ll surely break
      things for Sally (and other team members as well). One strategy is to crawl into a hole: you can stop sharing
      information for a week or two, gutting and reorganizing all the
      files in your private working copy but not committing or
      updating until you&#39;re completely finished with your task.  There
      are a number of problems with this, though.  First, it&#39;s not
      very safe.  Should something bad happen to your working copy or
      computer, you risk losing all your changes.  Second, it&#39;s not
      very flexible.  Unless you manually replicate your changes
      across different working copies or computers, you&#39;re stuck trying
      to make your changes in a single working copy.  Similarly, it&#39;s
      difficult to share your work-in-progress with anyone else.  A
      common software development  best practice  is to
      allow your peers to review your work as you go.  If nobody sees
      your intermediate commits, you lose potential feedback and may
      end up going down the wrong path for weeks before another person
      on your team notices.  Finally, when you&#39;re finished with all
      your changes, you might find it very difficult to merge your
      completed work with the rest of the company&#39;s main body of code.
      Sally (or others) may have made many other changes in the
      repository that are difficult to incorporate into your working
      copy when you eventually run  svn update  after
      weeks of isolation. The better solution is to create your own branch, or line of
      development, in the repository.  This allows you to save your
      not-yet-completed work frequently without interfering with
      others&#39; changes and while still selectively sharing information
      with your collaborators.  You&#39;ll see exactly how this works as
      we continue. Creating a Branch Creating a branch is very simple you make a copy of
        your project tree in the repository using the  svn
        copy  command.  Since your project&#39;s source code is
        rooted in the  /calc/trunk  directory, it&#39;s
        that directory that you&#39;ll copy.  Where should the new
        copy live?  Wherever you wish.  The repository location in
        which branches are stashed is left by Subversion as a matter
        of project policy.  Finally, your branch will need a name to
        distinguish it from other branches.  Once again, the name you
        choose is unimportant to Subversion you can use whatever
        name works best for you and your team. Let&#39;s assume that your team (like most) has a policy of
        creating branches in the  branches 
        directory that is a sibling of the project&#39;s trunk
        (the  /calc/branches  directory in our
        scenario).  Lacking inspiration, you settle
        on  my-calc-branch  as the name you wish to
        give your branch.  This means that you&#39;ll create a new
        directory,  /calc/branches/my-calc-branch ,
        which begins its life as a copy
        of  /calc/trunk . copying remote copies svn subcommands copy branches creating You may already have seen  svn
        copy  used to copy one file to another within a
        working copy.  But it can also be used to do
        a  remote copy a copy that
        immediately results in a newly committed repository revision
        and for which no working copy is required at all.  Just copy
        one URL to another: 
$ svn copy ^/calc/trunk ^/calc/branches/my-calc-branch \
           -m &quot;Creating a private branch of /calc/trunk.&quot;

Committed revision 341.
$
 This command causes a near-instantaneous commit in the
        repository, creating a new directory in revision 341.  The new
        directory is a copy of  /calc/trunk .  This
        is shown in  . Subversion does not support copying between
        different repositories.  When using URLs with  svn
        copy  or  svn move , you can only
        copy items within the same repository.   While
        it&#39;s also possible to create a branch by using  svn
        copy  to duplicate a directory within the working
        copy, this technique isn&#39;t recommended.  It can be quite slow,
        in fact!  Copying a directory on the client side is a
        linear-time operation, in that it actually has to duplicate
        every file and subdirectory within that working copy directory
        on the local disk.  Copying a directory on the server,
        however, is a constant-time operation, and it&#39;s the way most
        people create branches.  In addition, this practice raises the
        possibility of copying mixed-revision working copies.  This isn&#39;t
        inherently dangerous, but can cause unnecessary complications later
        during merging.  If you do choose to create a branch by copying a
        working copy path, you should be sure the source directory has no
        local modifications and is not at mixed-revisions. Repository with new copy Cheap Copies Subversion&#39;s repository has a special design.  When you
          copy a directory, you don&#39;t need to worry about the
          repository growing huge Subversion doesn&#39;t actually
          duplicate any data.  Instead, it creates a new directory
          entry that points to an  existing  tree.
          If you&#39;re an experienced Unix user, you&#39;ll recognize this as
          the same concept behind a hard link.  As further changes are
          made to files and directories beneath the copied directory,
          Subversion continues to employ this hard link concept where
          it can.  It duplicates data only when it is necessary to
          disambiguate different versions of objects. This is why you&#39;ll often hear Subversion users talk
          about  cheap copies.   It doesn&#39;t matter how
          large the directory is it takes a very tiny, constant
          amount of time and space to make a copy of it.  In fact,
          this feature is the basis of how commits work in Subversion:
          each revision is a  cheap copy  of the previous
          revision, with a few items lazily changed within.  (To read
          more about this, visit Subversion&#39;s web site and read about
          the  bubble up  method in Subversion&#39;s design
          documents.) Of course, these internal mechanics of copying and
          sharing data are hidden from the user, who simply sees
          copies of trees.  The main point here is that copies are
          cheap, both in time and in space.  If you create a branch
          entirely within the repository (by running  svn copy
           URL1   URL2 ),
          it&#39;s a quick, constant-time operation.  Make branches as
          often as you want. Working with Your Branch Now that you&#39;ve created a branch of the project, you can
        check out a new working copy to start using it: 
$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A    my-calc-branch/doc
A    my-calc-branch/src
A    my-calc-branch/doc/INSTALL
A    my-calc-branch/src/real.c
A    my-calc-branch/src/main.c
A    my-calc-branch/src/button.c
A    my-calc-branch/src/integer.c
A    my-calc-branch/Makefile
A    my-calc-branch/README
Checked out revision 341.

$
 There&#39;s nothing special about this working copy; it simply
        mirrors a different directory in the repository.  When you
        commit changes, however, Sally won&#39;t see them when she
        updates, because her working copy is of
         /calc/trunk .  (Be sure to read   later in this chapter: the
         svn switch  command is an alternative way of
        creating a working copy of a branch.) Let&#39;s pretend that a week goes by, and the following
        commits happen: You make a change to
             /calc/branches/my-calc-branch/src/button.c ,
            which creates revision 342. You make a change to
             /calc/branches/my-calc-branch/src/integer.c ,
            which creates revision 343. Sally makes a change to
             /calc/trunk/src/integer.c , which creates
            revision 344. Now two independent lines of development (shown
        in  ) are happening on
         integer.c . The branching of one file&#39;s history Things get interesting when you look at the history of
        changes made to your copy of  integer.c : 
$ pwd
/home/user/my-calc-branch

$ svn log -v src/integer.c
------------------------------------------------------------------------
r343 | user | 2013-02-15 14:11:09 -0500 (Fri, 15 Feb 2013) | 1 line
Changed paths:
   M /calc/branches/my-calc-branch/src/integer.c

* integer.c:  frozzled the wazjub.
------------------------------------------------------------------------
r341 | user | 2013-02-15 07:41:25 -0500 (Fri, 15 Feb 2013) | 1 line
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

Creating a private branch of /calc/trunk.
------------------------------------------------------------------------
r154 | sally | 2013-01-30 04:20:03 -0500 (Wed, 30 Jan 2013) | 2 lines
Changed paths:
   M /calc/trunk/src/integer.c

* integer.c:  changed a docstring.
------------------------------------------------------------------------
 
------------------------------------------------------------------------
r113 | sally | 2013-01-26 15:50:21 -0500 (Sat, 26 Jan 2013) | 2 lines
Changed paths:
   M /calc/trunk/src/integer.c

* integer.c: Revise the fooplus API.
------------------------------------------------------------------------
r8 | sally | 2013-01-17 16:55:36 -0500 (Thu, 17 Jan 2013) | 1 line
Changed paths:
   A /calc/trunk/Makefile
   A /calc/trunk/README
   A /calc/trunk/doc/INSTALL
   A /calc/trunk/src/button.c
   A /calc/trunk/src/integer.c
   A /calc/trunk/src/main.c
   A /calc/trunk/src/real.c

Initial trunk code import for calc project.
------------------------------------------------------------------------
 Notice that Subversion is tracing the history of your
        branch&#39;s  integer.c  all the way back
        through time, even traversing the point where it was copied.
        It shows the creation of the branch as an event in the
        history, because  integer.c  was implicitly
        copied when all of  /calc/trunk/  was
        copied.  Now look at what happens when Sally runs the same
        command on her copy of the file: 
$ pwd
/home/sally/calc

$ svn log -v src/integer.c
------------------------------------------------------------------------
r344 | sally | 2013-02-15 16:44:44 -0500 (Fri, 15 Feb 2013) | 1 line
Changed paths:
   M /calc/trunk/src/integer.c

Refactor the bazzle functions.
------------------------------------------------------------------------
r154 | sally | 2013-01-30 04:20:03 -0500 (Wed, 30 Jan 2013) | 2 lines
Changed paths:
   M /calc/trunk/src/integer.c

* integer.c:  changed a docstring.
------------------------------------------------------------------------
 
------------------------------------------------------------------------
r113 | sally | 2013-01-26 15:50:21 -0500 (Sat, 26 Jan 2013) | 2 lines
Changed paths:
   M /calc/trunk/src/integer.c

* integer.c: Revise the fooplus API.
------------------------------------------------------------------------
r8 | sally | 2013-01-17 16:55:36 -0500 (Thu, 17 Jan 2013) | 1 line
Changed paths:
   A /calc/trunk/Makefile
   A /calc/trunk/README
   A /calc/trunk/doc/INSTALL
   A /calc/trunk/src/button.c
   A /calc/trunk/src/integer.c
   A /calc/trunk/src/main.c
   A /calc/trunk/src/real.c

Initial trunk code import for calc project.
------------------------------------------------------------------------
 Sally sees her own revision 344 change, but not the change
        you made in revision 343.  As far as Subversion is concerned,
        these two commits affected different files in different
        repository locations.  However, Subversion
         does  show that the two files share a
        common history.  Before the branch copy was made in revision
        341, the files used to be the same file.  That&#39;s why you and
        Sally both see the changes made between revisions 8 and
        154. The Key Concepts Behind Branching You should remember two important lessons
        from this section.  First, Subversion has no internal concept
        of a branch it knows only how to make copies.  When you
        copy a directory, the resultant directory is only
        a  branch  because  you 
        attach that meaning to it.  You may think of the directory
        differently, or treat it differently, but to Subversion it&#39;s
        just an ordinary directory that happens to carry some extra
        historical information. Second, because of this copy mechanism, Subversion&#39;s
        branches exist as  normal filesystem
        directories  in the repository.  This is different
        from other version control systems, where branches are
        typically defined by adding
        extra-dimensional  labels  to collections of
        files.  The location of your branch directory doesn&#39;t matter
        to Subversion.  Most teams follow a convention of putting all
        branches into a  /branches  directory, but
        you&#39;re free to invent any policy you wish. Basic Merging Now you and Sally are working on parallel branches of the
      project: you&#39;re working on a private branch, and Sally is
      working on the trunk, or main line of development. For projects that have a large number of contributors, it&#39;s
      common for most people to have working copies of the trunk.
      Whenever someone needs to make a long-running change that is
      likely to disrupt the trunk, a standard procedure is to create a
      private branch and commit changes there until all the work is
      complete. So, the good news is that you and Sally aren&#39;t interfering
      with each other.  The bad news is that it&#39;s very easy to drift
       too  far apart.  Remember that one of the
      problems with the  crawl in a hole  strategy is
      that by the time you&#39;re finished with your branch, it may be
      near-impossible to merge your changes back into the trunk
      without a huge number of conflicts. merging Instead, you and Sally might continue to share changes as
      you work.  It&#39;s up to you to decide which changes are worth
      sharing; Subversion gives you the ability to selectively
       copy  changes between branches.  And when you&#39;re
      completely finished with your branch, your entire set of branch
      changes can be copied back into the trunk.  In Subversion
      terminology, the general act of replicating changes from one
      branch to another is called  merging , and
      it is performed using various invocations of the  svn
      merge  subcommand. In the examples that follow, we&#39;re assuming that both your
      Subversion client and server are running Subversion 1.8 (or
      later).  If either client or server is older than version 1.5,
      things are more complicated: the system won&#39;t track changes
      automatically, forcing you to use painful manual methods to
      achieve similar results.  That is, you&#39;ll always need to use the
      detailed merge syntax to specify specific ranges of revisions to
      replicate (see
        later
      in this chapter), and take special care to keep track of what&#39;s
      already been merged and what hasn&#39;t.  For this reason,
      we  strongly  recommend that you make sure your
      client and server are at least at version 1.5. Merge Tracking merge tracking Subversion 1.5 introduced the
         merge tracking  feature to Subversion.
        Prior to this feature keeping track of merges required cumbersome
        manual procedures or the use of external tools. Subsequent
        releases of Subversion introduced many enhancements and bug
        fixes to merge tracking, which is why we recommend using the
        most recent versions for both your server and client.  Keep in
        mind that even if your server is running 1.5-1.7, you can still
        use a 1.8 client.  This is particularly important with regard to merge
        tracking, because the overwhelming majority of fixes and enhancements
        to it are on the client side. Changesets changesets Before we proceed further, we should warn you that there&#39;s
        a lot of discussion of  changes  in
        the pages ahead.  A lot of people experienced with version
        control systems use the terms  change 
        and  changeset  interchangeably, and we should
        clarify what Subversion understands as
        a  changeset . Everyone seems to have a slightly different definition
        of changeset, or at least a different
        expectation of what it means for a version control system to
        have one.  For our purposes, let&#39;s say that a changeset is just
        a collection of changes with a unique name.  The changes might
        include textual edits to file contents, modifications to tree
        structure, or tweaks to metadata.  In more common speak, a
        changeset is just a patch with a name you can refer to. In Subversion, a global revision
        number  N  names a tree in the
        repository: it&#39;s the way the repository looked after the
         N th commit.  It&#39;s also the name of
        an implicit changeset: if you compare
        tree  N  with
        tree  N -1, you can derive the exact
        patch that was committed.  For this reason, it&#39;s easy to think
        of revision  N  as not just a tree,
        but a changeset as well.  If you use an issue tracker to
        manage bugs, you can use the revision numbers to refer to
        particular patches that fix bugs for example,
         this issue was fixed by r9238.  Somebody
        can then run  svn log -r 9238  to read about
        the exact changeset that fixed the bug, and run
         svn diff -c 9238  to see the patch itself.
        And (as you&#39;ll see shortly)
        Subversion&#39;s  svn merge  command is able to use
        revision numbers.  You can merge specific changesets from one
        branch to another by naming them in the merge
        arguments: passing  -c 9238 
        to  svn merge  would merge changeset r9238
        into your working copy. Keeping a Branch in Sync merging sync merges svn subcommands merge Continuing with our running example, let&#39;s suppose
        that a week has passed since you started working on your
        private branch.  Your new feature isn&#39;t finished yet, but at
        the same time you know that other people on your team continue
        to make important changes in the
        project&#39;s  /trunk .  It&#39;s in your best
        interest to replicate those changes to your own branch, just
        to make sure they mesh well with your changes.  This is done
        by performing an  automatic sync merge a
        merge operation designed to bring your branch up to date with
        any changes made to its ancestral parent branch since your
        branch was created.
         merging automatic  An  automatic  merge is simply
        one in which you provide the bare minimum of information required
        for a merge (i.e. a single merge source and a working copy target)
        and let Subversion determine which changes need merging no
        changesets are passed to  svn merge  via the
         -r  or  -c  options in an automatic
        merge. Frequently keeping your branch in sync with the main
          development line helps prevent  surprise 
          conflicts when the time comes for you to fold your changes
          back into the trunk. Subversion is aware of the history of your branch and
        knows when it split away from the trunk.  To perform a sync
        merge, first make sure your working copy of the branch
        is  clean that it has no local
        modifications reported by  svn status .  Then
        simply run: 
$ pwd
/home/user/my-calc-branch

$ svn merge ^/calc/trunk
--- Merging r341 through r351 into &#39;.&#39;:
U    doc/INSTALL
U    src/real.c
U    src/button.c
U    Makefile
--- Recording mergeinfo for merge of r341 through r351 into &#39;.&#39;:
 U   .
 $
 properties svn:mergeinfo This basic syntax svn merge
         URL tells
        Subversion to merge all changes which have not been previously
        merged from the URL to the current working directory (which is
        typically the root of your working copy).  Notice that we&#39;re
        using the caret ( ^ )
        syntax This was introduced in svn
        1.6.  to avoid having to type out the
        entire  /trunk  URL.  Also note
        the  Recording mergeinfo for merge 
        notification.  This tells you that the merge is updating
        the  svn:mergeinfo  property. We&#39;ll discuss
        both this property and these notifications later in this
        chapter, in
         . mergeinfo In this book and elsewhere (Subversion mailing
          lists, articles on merge tracking, etc.) you will frequently
          come across the term  mergeinfo . This
          is simply shorthand for the  svn:mergeinfo 
          property. Keeping a Branch in Sync Without Merge Tracking You may not always be able to use Subversion&#39;s merge
          tracking feature, perhaps because your server is running
          Subversion 1.4 or earlier or you must use an older client.
          In such a scenario, you can of course still perform merges,
          but Subversion will need you to manually do many of the historical
          calculations that it automatically does on your behalf when the
          merge tracking feature is available. To replicate the most recent trunk changes you need to
          perform sync merges the  old-fashioned 
          way by specifying ranges of revisions you wish to
          merge. Using the ongoing example, you know that you branched
           /calc/trunk  to 
           /calc/branches/my-calc-branch  in revision
          341: 
$ svn log -v -r341
------------------------------------------------------------------------
r341 | user | 2013-02-15 07:41:25 -0500 (Fri, 15 Feb 2013) | 1 line
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

Creating a private branch of /calc/trunk.
------------------------------------------------------------------------
 When you are ready to synchronize your branch with the
          ongoing changes from trunk, you specify the starting
          revision as the revision of  /calc/trunk 
          which the branch was copied from and the ending revision as
          the youngest change on  /calc/trunk .  You
          can find the latter with the  svn log  command
          with the  -r  set to  HEAD : 
$ svn log -q -rHEAD http://svn.example.com/repos/calc/trunk
------------------------------------------------------------------------
r351 | sally | 2013-02-16 08:04:22 -0500 (Sat, 16 Feb 2013)
------------------------------------------------------------------------

$ svn merge http://svn.example.com/repos/calc/trunk -r340:351
U    doc/INSTALL
U    src/real.c
U    src/button.c
U    Makefile
 After any conflicts have been resolved, you can commit
          the merged changes to your branch.  Now, to avoid
          accidentally trying to merge these same changes into your
          branch again in the future, you&#39;ll need to record the fact
          that you&#39;ve already merged them.  But where should that
          record be kept?  One of the simplest places to record this
          information is in the log message for the commit of the
          merge: 
$ svn ci -m &quot;Sync the my-calc-branch with ^/calc/trunk through r351.&quot;
 
 The next time you sync
           /calc/branches/my-calc-branch   with
           /calc/trunk  you repeat this process, except
          that the starting revision is the  youngest 
          revision that&#39;s already been merged in from the trunk.
          If you&#39;ve been keeping good records of your merges in the
          commit log messages, you should be able to determine what
          that youngest revision was by reading the revision logs
          associated with your branch.  Once you know your starting
          revision, you can perform another sync merge: 
$ svn log -q -rHEAD http://svn.example.com/repos/calc/trunk
------------------------------------------------------------------------
r959 | sally | 2013-03-5 7:30:21 -0500 (Tue, 05 Mar 2013)
------------------------------------------------------------------------

$ svn merge http://svn.example.com/repos/calc/trunk -r351:959
 
 After running the prior example, your branch working copy
        now contains new local modifications, and these edits are
        duplications of all of the changes that have happened on the
        trunk since you first created your branch: 
$ svn status
 M      .
M       Makefile
M       doc/INSTALL
M       src/button.c
M       src/real.c
 At this point, the wise thing to do is look at the changes
        carefully with  svn diff , and then build and
        test your branch.  Notice that the current working directory
        ( . ) has also been
        modified;  svn diff  shows that
        its  svn:mergeinfo  property has been created.
         
$ svn diff --depth empty .
Index: .
===================================================================
--- .   (revision 351)
+++ .   (working copy)

Property changes on: .
___________________________________________________________________
Added: svn:mergeinfo
   Merged /calc/trunk:r341-351
 
        This new property is important merge-related metadata
        that you should  not  touch, since it is
        needed by future  svn merge  commands.
        (We&#39;ll learn more about this metadata later in the
        chapter.) After performing the merge, you might also need to resolve
        some conflicts just as you do with  svn
        update or possibly make some small edits to get
        things working properly.  (Remember, just because there are
        no  syntactic  conflicts doesn&#39;t mean there
        aren&#39;t any  semantic  conflicts!)  If you
        encounter serious problems, you can always abort the local
        changes by running  svn revert . -R  (which
        will undo all local modifications) and starting a
        long  what&#39;s going on?  discussion with your
        collaborators.  If things look good, however, you can
        submit these changes into the repository: 
$ svn commit -m &quot;Sync latest trunk changes to my-calc-branch.&quot;
Sending        .
Sending        Makefile
Sending        doc/INSTALL
Sending        src/button.c
Sending        src/real.c
Transmitting file data ....
Committed revision 352.
 At this point, your private branch is now  in
        sync  with the trunk, so you can rest easier knowing
        that as you continue to work in isolation, you&#39;re not drifting
        too far away from what everyone else is doing. Why Not Use Patches Instead? A question may be on your mind, especially if you&#39;re a
          Unix user: why bother to use  svn merge  at
          all?  Why not simply use  svn patch  or the
          operating system&#39;s  patch  command to
          accomplish the same job?  For example: 
$ cd my-calc-branch

$ svn diff -r 341:351 ^/calc/trunk &gt; my-patch-file

$ svn patch my-patch-file
U         doc/INSTALL
U         src/real.c
U         src/button.c
U         Makefile
 In this particular example, there really isn&#39;t much
          difference.  But  svn merge  has special
          abilities that surpass the  patch  program.
          The file format used by  patch  is quite
          limited; it&#39;s able to tweak file contents only.  There&#39;s no
          way to represent changes to  trees , such
          as the addition, removal, or renaming of files and
          directories.  Nor can the  patch  program
          notice changes to properties.  If Sally&#39;s change had,
          say, added a new directory, the output of  svn
          diff  wouldn&#39;t have mentioned it at
          all.   svn diff  outputs only the limited
          patch format, so there are some ideas it simply can&#39;t
          express.  Even Subversion&#39;s own  svn patch 
          subcommand, while more flexible than the patch program, still has
          similar limitations. The  svn merge  command, however, can
          express changes in tree structure and properties by directly
          applying them to your working copy.  Even more important,
          this command records the changes that have been duplicated
          to your branch so that Subversion is aware of exactly which
          changes exist in each location (see
           ).
          This is a critical feature that makes branch management
          usable; without it, users would have to manually keep notes
          on which sets of changes have or haven&#39;t been merged
          yet. Suppose that another week has passed.  You&#39;ve committed
        more changes to your branch, and your comrades have continued
        to improve the trunk as well.  Once again, you want to
        replicate the latest trunk changes to your branch and bring
        yourself in sync.  Just run the same merge command
        again! 
$ svn merge ^/calc/trunk
svn: E195020: Cannot merge into mixed-revision working copy [352:357]; try up\
dating first
$
 Well that was unexpected!  After making changes to your
        branch over the past week you now find yourself with a working
        copy that contains a mixture of revisions (see
         ).  With Subversion
        1.7 and later, the  svn merge 
        subcommand disables merges into mixed-revision working copies
        by default.  Without going into too much detail, this is
        because of limitations in the way merges are tracked by the
         svn:mergeinfo  property (see
          for
        details).  These limitations mean that merges into
        mixed-revision working copies can result in unexpected text
        and tree conflicts. The  svn
        merge  subcommand
        option  --allow-mixed-revisions  allows you to
        override this prohibition, but you should only do so if you
        understand the ramifications and have a good reason for
        it.   We don&#39;t want any needless conflicts, so
        we update the working copy and then reattempt the
        merge. 
$ svn up
Updating &#39;.&#39;:
At revision 361.

$ svn merge ^/calc/trunk
--- Merging r352 through r361 into &#39;.&#39;:
U    src/real.c
U    src/main.c
--- Recording mergeinfo for merge of r352 through r361 into &#39;.&#39;:
 U   .
 Subversion knows which trunk changes you previously
        replicated to your branch, so it carefully replicates only
        those changes you don&#39;t yet have.  And once again, you build,
        test, and  svn commit  the local modifications
        to your branch. Subtree Merges and Subtree Mergeinfo merging subtree merge mergeinfo subtree mergeinfo In most of the examples in this chapter the
          merge target is the root directory of a branch (see
           ). While this is a
          best practice, you may occasionally need to merge directly
          to some child of the branch root. This type of merge is
          called a  subtree merge  and the
          mergeinfo recorded to describe it is called
           subtree mergeinfo . There is nothing
          special about subtree merges or subtree mergeinfo.  In fact
          there is really only one important point to keep in mind
          about these concepts: the complete record of merges to a
          branch may not be contained solely in the mergeinfo on the
          branch root.  You may have to consider subtree mergeinfo
          to get a full accounting.  Fortunately Subversion does this
          for you and rarely will you need to concern yourself with
          it.  A brief example will help explain: 
# We need to merge r958 from trunk to branches/proj-X/doc/INSTALL,
# but that revision also affects main.c, which we don&#39;t want to merge:
$ svn log --verbose --quiet -r 958 ^/
------------------------------------------------------------------------
r958 | bruce | 2011-10-20 13:28:11 -0400 (Thu, 20 Oct 2011)
Changed paths:
   M /trunk/doc/INSTALL
   M /trunk/src/main.c
------------------------------------------------------------------------

# No problem, we&#39;ll do a subtree merge targeting the INSTALL file
# directly, but first take a note of what mergeinfo exists on the
# root of the branch:
$ cd branches/proj-X

$ svn propget svn:mergeinfo --recursive
Properties on &#39;.&#39;:
  svn:mergeinfo
    /trunk:651-652

# Now we perform the subtree merge, note that merge source
# and target both point to INSTALL:
$ svn merge ^/trunk/doc/INSTALL doc/INSTALL -c 958
--- Merging r958 into &#39;doc/INSTALL&#39;:
U    doc/INSTALL
--- Recording mergeinfo for merge of r958 into &#39;doc/INSTALL&#39;:
 G   doc/INSTALL

# Once the merge is complete there is now subtree mergeinfo on INSTALL:
$ svn propget svn:mergeinfo --recursive
Properties on &#39;.&#39;:
  svn:mergeinfo
    /trunk:651-652
Properties on &#39;doc/INSTALL&#39;:
  svn:mergeinfo
    /trunk/doc/INSTALL:651-652,958

# What if we then decide we do want all of r958? Easy, all we need do is
# repeat the merge of that revision, but this time to the root of the
# branch, Subversion notices the subtree mergeinfo on INSTALL and doesn&#39;t
# try to merge any changes to it, only the changes to main.c are merged:
$ svn merge ^/subversion/trunk . -c 958
--- Merging r958 into &#39;.&#39;:
U    src/main.c
--- Recording mergeinfo for merge of r958 into &#39;.&#39;:
 U   .
--- Eliding mergeinfo from &#39;doc/INSTALL&#39;:
 U   doc/INSTALL
 mergeinfo elision You might be wondering
          why  INSTALL  in the above example has
          mergeinfo for r651-652, when we only merged r958. This is
          due to mergeinfo inheritance, which we&#39;ll cover in the
          sidebar
           .  Also note that the subtree mergeinfo on
           doc/INSTALL  was removed, or
           elided .  This is called
           mergeinfo elision  and it occurs
          whenever Subversion detects redundant subtree mergeinfo. Prior to Subversion 1.7, merges unconditionally updated
           all  of the subtree mergeinfo under the
          target to describe the merge. For users with a lot of subtree
          mergeinfo this meant that relatively  simple 
          merges (e.g. one which applied a diff to only a single file)
          resulted in changes to every subtree with mergeinfo, even
          those that were not parents of the affected path(s). This
          caused some level of confusion and frustration. Subversion 1.7
          and later addresses this problem by only updating the mergeinfo
          on subtrees which are parents of the paths modified by the merge
          (i.e. paths changed, added, or deleted by application of the
          difference, see
           ).
          The one exception to this behavior regards the actual merge
          target; the merge target&#39;s mergeinfo is always updated to
          describe the merge, even if the applied difference made no
          changes. Reintegrating a Branch What happens when you finally finish your work, though?
        Your new feature is done, and you&#39;re ready to merge your
        branch changes back to the trunk (so your team can enjoy the
        bounty of your labor).  The process is simple.  First, bring
        your branch into sync with the trunk again, just as you&#39;ve been
        doing all along Since Subversion 1.7 you don&#39;t
        absolutely have to do all your sync merges to the root of your
        branch as we do in this example.   If  your
        branch is effectively synced via a series of subtree
        merges then the reintegrate will work, but ask yourself, if the
        branch is effectively synced, then why are you doing subtree
        merges? Doing so is almost always needlessly
        complex. : 
$ svn up # (make sure the working copy is up to date)
Updating &#39;.&#39;:
At revision 378.

$ svn merge ^/calc/trunk
--- Merging r362 through r378 into &#39;.&#39;:
U    src/main.c
--- Recording mergeinfo for merge of r362 through r378 into &#39;.&#39;:
 U   .

$ # build, test, ...

$ svn commit -m &quot;Final merge of trunk changes to my-calc-branch.&quot;
Sending        .
Sending        src/main.c
Transmitting file data .
Committed revision 379.
 Now, use  svn merge  subcommand to automatically
        replicate your branch changes back into the trunk.  This type of
        merge is called an
         merging reintegrate merges   automatic reintegrate  merge.  You&#39;ll need
        a working copy of  /calc/trunk .  You can get one
        by doing an  svn checkout , dredging up an old trunk
        working copy from somewhere on your disk, or
        using  svn switch  (see
         ). The term  reintegrating  comes from the
           merge  option  --reintegrate .
          This option is deprecated in Subversion 1.8 (which automatically
          detects when a reintegrate merge is needed), but is required
          for Subversion 1.5 through 1.7 clients when performing reintegrate
          merges. Your trunk working copy cannot have any local edits, switched
        paths, or contain a mixture of revisions (see
         ).  While
        these are typically best practices for merging anyway, they
        are  required  for automatic reintegrate
        merges. Once you have a clean working copy of the trunk, you&#39;re
        ready to merge your branch back into it: 
$ pwd
/home/user/calc-trunk

$ svn update
Updating &#39;.&#39;:
At revision 379.

$ svn merge ^/calc/branches/my-calc-branch
--- Merging differences between repository URLs into &#39;.&#39;:
U    src/real.c
U    src/main.c
U    Makefile
--- Recording mergeinfo for merge between repository URLs into &#39;.&#39;:
 U   .

$ # build, test, verify, ...

$ svn commit -m &quot;Merge my-calc-branch back into trunk!&quot;
Sending        .
Sending        Makefile
Sending        src/main.c
Sending        src/real.c
Transmitting file data ...
Committed revision 380.
 Congratulations, your branch-specific changes have now
        been merged back into the main line of development.  Notice that
        the automatic reintegrate merge did a different sort of work than
        what you&#39;ve done up until now.  Previously, we were
        asking  svn merge  to grab the  next
        set  of changes from one line of development (the
        trunk) and duplicate them to another (your branch).  This is
        fairly straightforward, and each time Subversion knows how to
        pick up where it left off.  In our prior examples, you can see
        that first it merges the ranges 341:351 from
         /calc/trunk  to
         /calc/branches/my-calc-branch ;
        later on, it continues by merging the next contiguously
        available range, 351:361.  When doing the final sync, it
        merges the range 361:378. When merging  /calc/branches/my-calc-branch 
        back to the  /calc/trunk , however, the
        underlying mathematics are quite different.  Your feature
        branch is now a mishmash of both duplicated trunk changes and
        private branch changes, so there&#39;s no simple contiguous range
        of revisions to copy over.  By using an automatic merge, you&#39;re
        asking Subversion to carefully replicate  only 
        those changes unique to your branch.  (And in fact, it does
        this by comparing the latest trunk tree with the latest branch
        tree:  the resulting difference is exactly your branch
        changes!) Keep in mind that the automatic reintegrate merges only support
        the use case described above.  Because of this narrow focus, in
        addition to the requirements previously mentioned (up-to-date working
        copy  Automatic reintegrate merges are allowed if the
        target is a shallow checkout
        (see  ) but any paths
        affected by the diff which are  missing  due to the
        sparse working copy will be skipped this is probably
         not  what you intended! 
        with no mixed-revisions, switched paths or local changes) it will not
        function in combination with most of the other
         svn merge  options. You&#39;ll get an error if you
        use any non-global options but these:  --accept ,
         --dry-run ,  --diff3-cmd ,
         --extensions , or  --quiet . Now that your private branch is merged to trunk, you may
        wish to remove it from the repository: 
$ svn delete ^/calc/branches/my-calc-branch \
             -m &quot;Remove my-calc-branch, reintegrated with trunk in r381.&quot;
 
 But wait!  Isn&#39;t the history of that branch valuable?
        What if somebody wants to audit the evolution of your feature
        someday and look at all of your branch changes?  No need to
        worry.  Remember that even though your branch is no longer
        visible in the  /calc/branches  directory, its
        existence is still an immutable part of the repository&#39;s
        history.  A simple  svn log  command on
        the  /calc/branches  URL will show the entire
        history of your branch.  Your branch can even be resurrected
        at some point, should you desire (see
         ). If you choose not to delete your branch after reintegrating
        it to the trunk you may continue to perform sync merges from the
        trunk and then reintegrate the branch again Only
        Subversion 1.8 supports this reuse of a feature branch.  Earlier
        versions require some special handling before a feature branch
        can be reintegrated more than once.  See the earlier version of
        this chapter for more information:  . If you do this, only the changes made on your
        branch after the first reintegrate are merged to the trunk. Mergeinfo and Previews The basic mechanism Subversion uses to track
        changesets that is, which changes have been merged to
        which branches is by recording data in versioned
        properties.  Specifically, merge data is tracked in
        the  svn:mergeinfo  property attached to
        files and directories.  (If you&#39;re not familiar with
        Subversion properties, see  .) You can examine the mergeinfo property, just like any other
        versioned property: 
$ cd my-calc-branch

$ svn pg svn:mergeinfo -v
Properties on &#39;.&#39;:
  svn:mergeinfo
    /calc/trunk:341-378
 While it is possible to
          modify  svn:mergeinfo  just as you might
          any other versioned property, we strongly discourage doing
          so unless you  really  know what you&#39;re
          doing. The amount of  svn:mergeinfo  on a single
          path can get quite large, as can the output of a
           svn propget --recursive  or
           svn proplist --recursive  when dealing with
          large amounts of subtree mergeinfo. See
           
          . The formatted output produced by the
           --verbose  option with either of these
          subcommands is often very helpful in these cases. The  svn:mergeinfo  property is
        automatically maintained by Subversion whenever you
        run  svn merge .  Its value indicates which
        changes made to a given path have been replicated into the
        directory in question.  In our previous example, the path
        which is the source of the merged changes is
         /calc/trunk  and the directory which has
        received the changes is
         /calc/branches/my-calc-branch .
        Earlier versions of Subversion maintained the
         svn:mergeinfo  property silently. You could
        still detect the changes, after a merge completed, with the
         svn diff  or  svn status 
        subcommands, but the merge itself gave no indication when it
        changed the  svn:mergeinfo  property. In
        Subversion 1.7 and later this is no longer true as there are
        several notifications to alert you when a merge updates the
         svn:mergeinfo  property. These notifications
        all begin with  --- Recording mergeinfo for 
        and appear at the end of the merge.  Unlike other merge
        notifications, these don&#39;t describe the application of a
        difference to a working copy
        (see  ),
        but instead describe &quot;housekeeping&quot; changes made to keep
        track of what was merged. Subversion also provides a subcommand,  svn
        mergeinfo , which is helpful in seeing the merge
        relationships between two branches; specifically which changesets
        a directory has absorbed or which changesets it&#39;s still eligible
        to receive.  The latter gives a sort of preview of which changes a
        subsequent  svn merge  operation would replicate
        to your branch.  By default,  svn mergeinfo  gives
        an graphical overview of the relationship between to branches.
        Returning to our earlier example, we use the subcommand to analyze
        the relationship between  /calc/trunk  and
         /calc/branches/my-calc-branch : 
$ cd my-calc-branch

$ svn mergeinfo ^/calc/trunk
    youngest common ancestor
    |         last full merge
    |         |        tip of branch
    |         |        |         repository path

    340                382
    |                  |
  -------| |------------         calc/trunk
     \          /
      \        /
       --| |------------         calc/branches/my-calc-branch
              |        |
              379      382
 The diagram shows that  /calc/branches/my-calc-branch
        was copied from  /calc/trunk@340  and
      that most recent automatic merge was the reintegrate merge we made
      from the branch to the trunk in r380.  Notice that the diagram does
       not  show the four automatic sync merges we made
      in revisions 352, 362, 372, and 379.  Only the most recent automatic
      merge, in either direction By  direction 
      we mean either trunk-to-branch (automatic sync) or branch-to-trunk
      (automatic reintegrate) merges. , is shown.  This
      default output is useful for obtaining an overview of the merges
      between two branches, but to see the specific revisions which were
      merged we use the  --show-revs=merged  option: 
$ svn mergeinfo ^/calc/trunk --show-revs merged
r344
r345
r346
 
r366
r367
r368
 Likewise, to see which changes are eligible to merge from the
        trunk to the branch we can use the  --show-revs=eligible
          option: 
$ svn mergeinfo ^/calc/trunk --show-revs eligible
r380
r381
r382
 Operative and Inoperative Merge Revisions The revision lists produced by the  --show-revs
            option include only revisions which made (or would make)
          changes when merged.  So while we have merged a contiguous range of
          revisions (i.e. r341-378) from  /calc/trunk  to
           /calc/branches/my-calc-branch , only the
          revisions listed with the  --show-revs=merged  option
          actually represent changes made on  /calc/trunk .
          These revisions are described as  operative 
          revisions as regards merging, not to be confused with the
          operative revision used with the  -r  option, see
           .  Not suprisingly, the
          revisions in the range r341-378 that are  not 
          listed as merged are termed  inoperative  revisions.
         The  svn mergeinfo  command requires
        a  source  URL (where the changes come
        from), and takes an optional  target  URL (where
        the changes merge to).  If no target URL is given,
        it assumes that the current working directory is the
        target.  In the prior example, because we&#39;re querying our
        branch working copy, the command assumes we&#39;re interested in
        receiving changes to  /calc/branches/my-calc-branch
          from the specified trunk URL. Since Subversion 1.7, the
         svn mergeinfo  subcommand can also account for
        subtree mergeinfo and non-inheritable mergeinfo.  It accounts for
        subtree mergeinfo by use of the  --recursive  or
         --depth  options, while non-inheritable mergeinfo
        is considered by default. Mergeinfo Inheritance mergeinfo inheritance mergeinfo explicit When a path has
          the  svn:mergeinfo  property set on it we
          say it has  explicit mergeinfo .  This
          explicit mergeinfo describes not only what changes were
          merged into that particular directory, but also all the
          children of that directory (because those children inherit
          the mergeinfo of their parent path).  For example: 
# What explicit mergeinfo exists on a branch?
$ svn propget svn:mergeinfo ^/branches/proj-X --recursive
/trunk:651-652

# What children does proj-X have?
$ svn list --recursive ^/branches/proj-X
doc/
doc/INSTALL
README
src/main.c

# Ask what revs were merged to a file with no explicit mergeinfo
$ svn mergeinfo ^/trunk/src/main.c ^/branches/proj-X/src/main.c \
                --show-revs merged
651
652
 Notice from our first subcommand that only the root of
           /branches/proj-X  has any explicit
          mergeinfo.  However, when we use
           svn mergeinfo  to ask what was merged to
           /branches/proj-X/src/main.c  it reports
          that the two revisions described in the explicit mergeinfo
          on  /branches/proj-X  were merged.  This is
          because  /branches/proj-X/src/main.c , having
          no explicit mergeinfo of its own, inherits the mergeinfo from
          its nearest parent with explicit mergeinfo,
           /branches/proj-X . There are two cases in which mergeinfo is not inherited.
          First, if a path has explicit mergeinfo, then it never inherits
          mergeinfo. Another way to think of this is that explicit
          mergeinfo is always a complete record of the merges to a given
          path. Once it exists it overrides any mergeinfo that path might
          otherwise inherit. The second way is when dealing with
          non-inheritable mergeinfo, a special type of explicit mergeinfo
          that applies  only  to the directory on which
          the  svn:mergeinfo  property is set (and it&#39;s
          only directories, non-inheritable mergeinfo is never set on
          files). For example: 
# The &#39;*&#39; decorator indicates non-inheritable mergeinfo
$ svn propget svn:mergeinfo ^/branches/proj-X
/trunk:651-652,758*

# Revision 758 is non-inheritable, but still applies to the path it is
# set on. Here the &#39;*&#39; decorator signals that r758 is only partially
# merged from trunk. 
$ svn mergeinfo ^/trunk ^/branches/proj-X --show-revs merged
651
652
758*

# Revision 758 is not reported as merged because it is non-inheritable
# and applies only to ^/trunk
$ svn mergeinfo ^/trunk/src/main.c ^/branches/proj-X/src/main.c \
                --show-revs merged
651
652
 You might never have to think about mergeinfo inheritance
          or encounter non-inheritable mergeinfo in your own repository.
          A discussion of the full ramifications of mergeinfo inheritance
          are beyond the scope of this book.  If you have more questions
          check out some of the references mentioned in
           Let&#39;s say we have a branch with both subtree and
        non-inheritable mergeinfo: 
$ svn pg svn:mergeinfo -vR
# Non-inheritable mergeinfo
Properties on &#39;.&#39;:
  svn:mergeinfo
    /calc/trunk:354,385-388*
# Subtree mergeinfo
Properties on &#39;Makefile&#39;:
  svn:mergeinfo
    /calc/trunk/Makefile:354,380
 From the above mergeinfo we see that r385-388 has only been
        merged into the root of the branch, but not any of the root&#39;s
        children.  We also see that r380 has only been merged to
         Makefile .
        When we use  svn mergeinfo  with the
         --recursive  option to see what has been merged
        from  /calc/trunk  to this branch, we see three
        revisions are flagged with the  *  marker: 
$ svn mergeinfo -R --show-revs=merged ^/calc/trunk .
r354
r380*
r385
r386
r387*
r388*
 The  *  indicates revisions that are only
         partially  merged to the target in question
        (the meaning is the same if we are checking for eligible
        revisions).  What this means in this example is that if we tried
        to merge r380, r387, or r388 from  ^/trunk  then
        more changes would result. Likewise, because r354, r385 and r386 are
         not  flagged with a  * ,
        we know that re-merging those revisions would have no result.
         This is a good example of inoperative merge
        revisions. Another way to get a more precise preview of a merge
        operation is to use the  --dry-run 
        option: 
$ svn merge ^/paint/trunk paint-feature-branch --dry-run
--- Merging r290 through r383 into &#39;paint-feature-branch&#39;:
U    paint-feature-branch/src/palettes.c
U    paint-feature-branch/src/brushes.c
U    paint-feature-branch/Makefile

$ svn status
#  nothing printed, working copy is still unchanged.
 The  --dry-run  option doesn&#39;t actually
        apply any local changes to the working copy.  It shows only
        status codes that  would  be printed in a
        real merge.  It&#39;s useful for getting a  high-level 
        preview of the potential merge, for those times
        when running  svn diff  gives too much
        detail. After performing a merge operation, but before
          committing the results of the merge, you can use
           svn diff --depth=empty  
          /path/to/merge/target  to see only the
          changes to the immediate target of your merge.  If your merge
          target was a directory, only property differences are displayed.
          This is a handy way to see the changes to the
           svn:mergeinfo  property recorded by the
          merge operation, which will remind you about what you&#39;ve
          just merged. Of course, the best way to preview a merge operation is to
        just do it!  Remember, running  svn merge 
        isn&#39;t an inherently risky thing (unless you&#39;ve made local
        modifications to your working copy but we already
        stressed that you shouldn&#39;t merge into such an
        environment).  If you don&#39;t like the results of the merge,
        simply run  svn revert . -R  to revert
        the changes from your working copy and retry the command with
        different options.  The merge isn&#39;t final until you
        actually  svn commit  the results. Undoing Changes An extremely common use for  svn merge 
        is to roll back a change that has already been committed.
        Suppose you&#39;re working away happily on a working copy of
         /calc/trunk , and you discover that the
        change made back in revision 392, which changed
        several code files, is completely wrong.  It never
        should have been committed.  You can use  svn
        merge  to  undo  the change in your
        working copy, and then commit the local modification to the
        repository.  All you need to do is to specify a
         reverse  difference.  (You can do this by
        specifying  --revision 392:391 , or by an
        equivalent  --change -392 .) 
$ svn merge ^/calc/trunk . -c-392
--- Reverse-merging r392 into &#39;.&#39;:
U    src/real.c
U    src/main.c
U    src/button.c
U    src/integer.c
--- Recording mergeinfo for reverse merge of r392 into &#39;.&#39;:
 U   .

$ svn st
M       src/button.c
M       src/integer.c
M       src/main.c
M       src/real.c

$ svn diff
 
# verify that the change is removed
 

$ svn commit -m &quot;Undoing erroneous change committed in r392.&quot;
Sending        src/button.c
Sending        src/integer.c
Sending        src/main.c
Sending        src/real.c
Transmitting file data ....
Committed revision 399.
 As we mentioned earlier, one way to think about a
        repository revision is as a specific changeset.  By using the
         -r  option, you can ask  svn
        merge  to apply a changeset, or a whole range of
        changesets, to your working copy.  In our case of undoing a
        change, we&#39;re asking  svn merge  to apply
        changeset r392 to our working copy
         backward . Keep in mind that rolling back a change like this is just
        like any other  svn merge  operation, so you
        should use  svn status  and  svn
        diff  to confirm that your work is in the state you
        want it to be in, and then use  svn commit 
        to send the final version to the repository.  After
        committing, this particular changeset is no longer reflected
        in the  HEAD  revision. Again, you may be thinking: well, that really didn&#39;t undo
        the commit, did it?  The change still exists in revision 392.
        If somebody checks out a version of the
         calc  project between revisions 392 and
        398, she&#39;ll still see the bad change, right? Yes, that&#39;s true.  When we talk about
         removing  a change, we&#39;re really talking about
        removing it from the  HEAD  revision.  The
        original change still exists in the repository&#39;s history.  For
        most situations, this is good enough.  Most people are only
        interested in tracking the  HEAD  of a
        project anyway.  There are special cases, however, where you
        really might want to destroy all evidence of the commit.
        (Perhaps somebody accidentally committed a confidential
        document.)  This isn&#39;t so easy, it turns out, because
        Subversion was deliberately designed to never lose
        information.  Revisions are immutable trees that build upon
        one another.  Removing a revision from history would cause a
        domino effect, creating chaos in all subsequent revisions and
        possibly invalidating all working copies. The
        Subversion project has plans, however, to someday implement a
        command that would accomplish the task of permanently deleting
        information.  In the meantime, see
          for a
        possible workaround. Resurrecting Deleted Items The great thing about version control systems is that
        information is never lost.  Even when you delete a file or
        directory, it may be gone from the  HEAD 
        revision, but the object still exists in earlier revisions.
        One of the most common questions new users ask is,  How
        do I get my old file or directory back? The first step is to define
        exactly  which  item you&#39;re
        trying to resurrect.  Here&#39;s a useful metaphor: you can think
        of every object in the repository as existing in a sort of
        two-dimensional coordinate system.  The first coordinate is a
        particular revision tree, and the second coordinate is a path
        within that tree.  So every version of your file or directory
        is defined by a specific coordinate pair.  (Remember the
         peg revision 
        syntax foo.c@224 mentioned back in
         .) First, you might need to use  svn log  to
        discover the exact coordinate pair you wish to resurrect.  A
        good strategy is to run  svn log --verbose 
        in a directory that used to contain your deleted item.  The
         --verbose  ( -v ) option shows
        a list of all changed items in each revision; all you need to
        do is find the revision in which you deleted the file or
        directory.  You can do this visually, or by using another tool
        to examine the log output (via  grep , or
        perhaps via an incremental search in an editor).  If you know that
        the item in question was recently deleted you might also use
        the  --limit  option to keep the log output brief
        enough to examine manually. 
$ cd calc/trunk

$ svn log -v --limit 3
------------------------------------------------------------------------
r401 | sally | 2013-02-19 23:15:44 -0500 (Tue, 19 Feb 2013) | 1 line
Changed paths:
   M /calc/trunk/src/main.c

Follow-up to r400: Fix typos in help text.
------------------------------------------------------------------------
r400 | bill | 2013-02-19 20:55:08 -0500 (Tue, 19 Feb 2013) | 4 lines
Changed paths:
   M /calc/trunk/src/main.c
   D /calc/trunk/src/real.c

* calc/trunk/src/main.c: Update help text.

* calc/trunk/src/real.c: Remove this file, none of the APIs
  implemented here are used anymore.
------------------------------------------------------------------------
r399 | sally | 2013-02-19 20:05:14 -0500 (Tue, 19 Feb 2013) | 1 line
Changed paths:
   M /calc/trunk/src/button.c
   M /calc/trunk/src/integer.c
   M /calc/trunk/src/main.c
   M /calc/trunk/src/real.c

Undoing erroneous change committed in r392.
------------------------------------------------------------------------
 In the example, we&#39;re assuming that you&#39;re looking for a
        deleted file  real.c .  By looking through
        the logs of a parent directory, you&#39;ve spotted that this file
        was deleted in revision 400.  Therefore, the last version of
        the file to exist was in the revision right before that.
        Conclusion: you want to resurrect the path
         /calc/trunk/real.c  from revision
        399. That was the hard part the research.  Now that you
        know what you want to restore, you have two different
        choices. One option is to use  svn merge  to apply
        revision 400  in reverse.  (We already
        discussed how to undo changes in
         .)  This
        would have the effect of re-adding  real.c 
        as a local modification.  The file would be scheduled for
        addition, and after a commit, the file would again exist
        in  HEAD . In this particular example, however, this is probably not
        the best strategy.  Reverse-applying revision 400 would not
        only schedule  real.c  for addition, but
        the log message indicates that it would also undo certain
        changes to  main.c , which you don&#39;t
        want.  Certainly, you could reverse-merge revision 400 and
        then  svn revert  the local modifications to
         main.c , but this technique doesn&#39;t
        scale well.  What if 90 files were changed in revision
        400? A second, more targeted strategy is not to use
         svn merge  at all, but rather to use the
         svn copy  command.  Simply copy the exact
        revision and path  coordinate pair  from the
        repository to your working copy: 
$ svn copy ^/calc/trunk/src/real.c@399 ./real.c
A         real.c

$ svn st
A  +    real.c

# Commit the resurrection.
 
 The plus sign in the status output indicates that the item
        isn&#39;t merely scheduled for addition, but scheduled for
        addition  with history.   Subversion remembers
        where it was copied from.  In the future, running  svn
        log  on this file will traverse back through the
        file&#39;s resurrection and through all the history it had prior
        to revision 399.  In other words, this new
         real.c  isn&#39;t really new; it&#39;s a direct
        descendant of the original, deleted file.  This is usually
        considered a good and useful thing.  If, however, you wanted
        to resurrect the file  without 
        maintaining a historical link to the old file, this technique
        works just as well: 
$ svn cat ^/calc/trunk/src/real.c@399 &gt; ./real.c

$ svn add real.c
A         real.c

# Commit the resurrection.
 
 Although our example shows us resurrecting a file, note
        that these same techniques work just as well for resurrecting
        deleted directories.  Also note that a resurrection doesn&#39;t
        have to happen in your working copy it can happen
        entirely in the repository: 
$ svn copy ^/calc/trunk/src/real.c@399 ^/calc/trunk/src/real.c \
           -m &quot;Resurrect real.c from revision 399.&quot;

Committed revision 402.

$ svn up
Updating &#39;.&#39;:
A    real.c
Updated to revision 402.
 Advanced Merging Here ends the automated magic.  Sooner or later, once you
      get the hang of branching and merging, you&#39;re going to have to
      ask Subversion to merge  specific  changes
      from one place to another.  To do this, you&#39;re going to
      have to start passing more complicated arguments to  svn
      merge .  The next section describes the fully expanded
      syntax of the command and discusses a number of common
      scenarios that require it. Cherrypicking merging cherrypicking Just as the term  changeset  is often used in
        version control systems, so is the term
         cherrypicking .  This word refers to
        the act of choosing  one  specific
        changeset from a branch and replicating it to another.
        Cherrypicking may also refer to the act of duplicating a
        particular set of (not necessarily contiguous!) changesets
        from one branch to another.  This is in contrast to more
        typical merging scenarios, where the  next 
        contiguous range of revisions is duplicated
        automatically. Why would people want to replicate just a single change?
        It comes up more often than you&#39;d think.  For example, let&#39;s
        assume you&#39;ve created a new feature branch  
        /calc/branches/my-calc-feature-branch  copied from
         /calc/trunk : 
$ svn log ^/calc/branches/new-calc-feature-branch -v -r403
------------------------------------------------------------------------
r403 | user | 2013-02-20 03:26:12 -0500 (Wed, 20 Feb 2013) | 1 line
Changed paths:
   A /calc/branches/new-calc-feature-branch (from /calc/trunk:402)

Create a new calc branch for Feature &#39;X&#39;.
------------------------------------------------------------------------
 At the water cooler, you get word that Sally made an interesting
        change to  main.c  on the trunk.
        Looking over the history of commits to the trunk, you see that
        in revision 413 she fixed a critical bug that directly
        impacts the feature you&#39;re working on.  You might not be ready
        to merge all the trunk changes to your branch just yet, but
        you certainly need that particular bug fix in order to continue
        your work. 
$ svn log ^/calc/trunk -r413 -v
------------------------------------------------------------------------
r413 | sally | 2013-02-21 01:57:51 -0500 (Thu, 21 Feb 2013) | 3 lines
Changed paths:
   M /calc/trunk/src/main.c

Fix issue #22 &#39;Passing a null value in the foo argument
of bar() should be a tolerated, but causes a segfault&#39;.
------------------------------------------------------------------------

$ svn diff ^/calc/trunk -c413
Index: src/main.c
===================================================================
--- src/main.c  (revision 412)
+++ src/main.c  (revision 413)
@@ -34,6 +34,7 @@
 
# Details of the fix
 
 Just as you used  svn diff  in the prior
        example to examine revision 413, you can pass the same option
        to  svn merge : 
$ cd new-calc-feature-branch

$ svn merge ^/calc/trunk -c413
--- Merging r413 into &#39;.&#39;:
U    src/main.c
--- Recording mergeinfo for merge of r413 into &#39;.&#39;:
 U   .

$ svn st
 M      .
M       src/main.c
 You can now go through the usual testing procedures before
        committing this change to your branch.  After the commit,
        Subversion updates the  svn:mergeinfo  on your
        branch to reflect that r413 was been merged to the branch.  This
        prevents future automatic sync merges from attempting to merge
        r413 again.  (Merging the same change to the same branch almost
        always results in a conflict!) Notice also the mergeinfo  
        /calc/branches/my-calc-branch:341-379 .  This was
        recorded during the earlier reintegrate merge to  
        /calc/trunk  from the  
        /calc/branches/my-calc-branch  branch which we made in
        r380.  When we created the  my-calc-branch 
        branch in r403, this mergeinfo was carried along with the copy.
         
$ svn pg svn:mergeinfo -v
Properties on &#39;.&#39;:
  svn:mergeinfo
    /calc/branches/my-calc-branch:341-379
    /calc/trunk:413
 Notice too that the  mergeinfo  doesn&#39;t list r413
        as &quot;eligible&quot; to merge, because it&#39;s already been merged: 
$ svn mergeinfo ^/calc/trunk --show-revs eligible
r404
r405
r406
r407
r409
r410
r411
r412
r414
r415
r416
 
r455
r456
r457
 The preceding means that when the time finally comes to do an
        automatic sync merge, Subversion breaks the merge into two parts.
        First it merges all eligible merges up to revision 412.  Then it
        merges all eligible revisions from revisions 414 to the  HEAD
          revision.  Because we already cherrypicked r413, that
        change is skipped: 
$ svn merge ^/calc/trunk
--- Merging r403 through r412 into &#39;.&#39;:
U    doc/INSTALL
U    src/main.c
U    src/button.c
U    src/integer.c
U    Makefile
U    README
--- Merging r414 through r458 into &#39;.&#39;:
G    doc/INSTALL
G    src/main.c
G    src/integer.c
G    Makefile
--- Recording mergeinfo for merge of r403 through r458 into &#39;.&#39;:
 U   .
 merging backporting This use case of replicating
        (or  backporting ) bug fixes from one
        branch to another is perhaps the most popular reason for
        cherrypicking changes; it comes up all the time, for example,
        when a team is maintaining a  release branch  of
        software.  (We discuss this pattern in
         .) Did you notice how, in the last example, the merge
          invocation merged two distinct ranges?
          The  svn merge  command applied
          two independent patches to your working copy to skip over
          changeset 413, which your branch already contained.  There&#39;s
          nothing inherently wrong with this, except that it has the
          potential to make conflict resolution trickier.  If the
          first range of changes creates conflicts,
          you  must  resolve them interactively for
          the merge process to continue and apply the second range of
          changes.  If you postpone a conflict from the first wave of
          changes, the whole merge command will bail out with an error
          message and you must resolve the conflict before running the
          merge a second time to get the remainder of the changes. A word of warning: while  svn diff  and
         svn merge  are very similar in concept, they
        do have different syntax in many cases.  Be sure to read about
        them in   for details, or ask
         svn help .  For example,  svn
        merge  requires a working copy path as a target, that is,
        a place where it should apply the generated patch.  If the
        target isn&#39;t specified, it assumes you are trying to perform
        one of the following common operations: You want to merge directory changes into your current
            working directory. You want to merge the changes in a specific file into
            a file by the same name that exists in your current working
            directory. If you are merging a directory and haven&#39;t specified a
        target path,  svn merge  assumes the first
        case and tries to apply the changes into your current
        directory.  If you are merging a file, and that file (or a
        file by the same name) exists in your current working
        directory,
         svn merge  assumes the second case and tries
        to apply the changes to a local file with the same name. Merge Syntax: Full Disclosure You&#39;ve now seen some examples of the  svn
        merge  command, and you&#39;re about to see several more.
        If you&#39;re feeling confused about exactly how merging works,
        you&#39;re not alone.  Many users (especially those new to version
        control) are initially perplexed about the proper syntax of
        the command and about how and when the feature should be
        used.  But fear not, this command is actually much simpler
        than you think!  There&#39;s a very easy technique for
        understanding exactly how  svn merge 
        behaves. The main source of confusion is the
         name  of the command.  The term
         merge  somehow denotes that branches are
        combined together, or that some sort of mysterious
        blending of data is going on.  That&#39;s not the case.  A better
        name for the command might have been  svn
        diff-and-apply , because that&#39;s all that happens:
        two repository trees are compared, and the differences are
        applied to a working copy. If you&#39;re using  svn merge  to do basic
        copying of changes between branches, an automatic merge will
        generally do the right thing.  For example, a command such as the
        following, 
$ svn merge ^/calc/branches/some-branch
 will attempt to duplicate any changes made
        on  some-branch  into your current working
        directory, which is presumably a working copy that shares some
        historical connection to the branch.  The command is smart
        enough to only duplicate changes that your working copy
        doesn&#39;t yet have.  If you repeat this command once a week, it
        will only duplicate the  newest  branch changes
        that happened since you last merged. If you choose to use the  svn merge 
        command in all its full glory by giving it specific revision
        ranges to duplicate, the command takes three main
        arguments: merging left side merging right side merging target An initial repository tree (often called the
             left side  of the comparison) A final repository tree (often called the
             right side  of the
            comparison) A working copy to accept the differences as local
            changes (often called the  target  of
            the merge) Once these three arguments are specified, then the two trees
        are compared and the differences applied to the
        target working copy as local modifications.  When the command
        is done, the results are no different than if you had
        hand-edited the files or run various  svn
        add  or  svn delete  commands
        yourself.  If you like the results, you can commit them.  If
        you don&#39;t like the results, you can simply  svn
        revert  all of the changes. The syntax of  svn merge  allows you to
        specify the three necessary arguments rather flexibly.  Here
        are some examples: 
$ svn merge http://svn.example.com/repos/branch1@150 \
            http://svn.example.com/repos/branch2@212 \
            my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk
 The first syntax lays out all three arguments explicitly,
        naming each tree in the form  URL@REV  and
        naming the working copy target.  The second syntax is used
        as a shorthand for situations when you&#39;re comparing two
        different revisions of the same URL.
         merging 2-URL  This type of merge is referred to (for obvious
        reasons) as a  2-URL  merge. The last syntax shows
        how the working copy argument is optional; if omitted, it
        defaults to the current directory. While the first example shows the  full 
        syntax of  svn merge , use it
        very carefully;  it can result in merges which do not record
        any  svn:mergeinfo  metadata at all.  The
        next section talks a bit more about this. Merges Without Mergeinfo Subversion tries to generate merge metadata whenever it
        can, to make future invocations of  svn
        merge  smarter.  There are still situations, however,
        where  svn:mergeinfo  data is not created or
        changed.  Remember to be a bit wary of these scenarios: Merging unrelated sources If you ask  svn merge  to compare
              two URLs that aren&#39;t related to each other, a patch is
              still generated and applied to your working copy, but
              no merging metadata is created.  There&#39;s no common
              history between the two sources, and
              future  smart  merges depend on that common
              history. Merging from foreign repositories While it&#39;s possible to run a command such
              as  svn merge -r 100:200
               http://svn.foreignproject.com/repos/trunk ,
              the resultant patch also lacks any historical merge
              metadata.  At the time of this writing, Subversion has no
              way of representing different repository URLs within
              the  svn:mergeinfo  property. Using  --ignore-ancestry If this option is passed to  svn
              merge , it causes the merging logic to
              mindlessly generate differences the same way
              that  svn diff  does, ignoring any
              historical relationships.  We discuss this later in this
              chapter in
               . Applying reverse merges from a target&#39;s natural history Earlier in this chapter
              ( ) we
              discussed how to use  svn merge  to
              apply a  reverse patch  as a way of rolling
              back changes.  If this technique is used to undo a
              change to an object&#39;s personal history (e.g., commit r5
              to the trunk, then immediately roll back r5
              using  svn merge . -c -5 ), this
              sort of merge doesn&#39;t affect the recorded
              mergeinfo. Interestingly, after rolling
              back a revision like this, we wouldn&#39;t be able to
              reapply the revision using  svn merge . -c
              5 , since the mergeinfo would already list r5
              as being applied.  We would have to use
              the  --ignore-ancestry  option to make
              the merge command ignore the existing
              mergeinfo! Natural History and Implicit Mergeinfo mergeinfo implicit natural history mergeinfo, implicit As we mentioned earlier when discussing
           ,
          a path that has the
           svn:mergeinfo  property set on it is said to
          have  explicit  mergeinfo.  Yes, this implies a
          path can have  implicit  mergeinfo, too!  Implicit
          mergeinfo, or  natural history , is
          simply a path&#39;s own history (see
           ) interpreted as mergeinfo.
          While implicit mergeinfo is largely
          an implementation detail, it can be a useful abstraction for
          understanding merge tracking behavior. Let&#39;s say you created  ^/trunk  in
          revision 100 and then later, in revision 201,
          created  ^/branches/feature-branch  as
          a copy of  ^/trunk@200 .  The natural
          history of  ^/branches/feature-branch 
          contains all the repository paths and revision ranges
          through which the history of the new branch has ever
          passed: 
/trunk:100-200
/branches/feature-branch:201
 With each new revision added to the repository, the
          natural history and thus, implicit mergeinfo of
          the branch continues to expand to include those revisions
          until the day the branch is deleted.  Here&#39;s what the
          implicit mergeinfo of our branch would look like when
          the  HEAD  revision of the repository had
          grown to 234: 
/trunk:100-200
/branches/feature-branch:201-234
 Implicit mergeinfo does not actually show up in the
           svn:mergeinfo  property, but Subversion
          acts as if it does.  This is why if you check out
           ^/branches/feature-branch  and then
          run  svn merge ^/trunk -c 58  in the
          resulting working copy, nothing happens.  Subversion knows
          that the changes committed to  ^/trunk 
          in revision 58 are already present in the target&#39;s natural
          history, so there&#39;s no need to try to merge them again.
          After all, avoiding repeated merges of
          changes  is  the primary goal of
          Subversion&#39;s merge tracking feature! More on Merge Conflicts Just like the  svn update  command,
         svn merge  applies changes to your working
        copy.  And therefore it&#39;s also capable of creating
        conflicts.  The conflicts produced by  svn
          merge , however, are sometimes different, and this
        section explains those differences. To begin with, assume that your working copy has no
        local edits.  When you  svn update  to a
        particular revision, the changes sent by the server
        always apply  cleanly  to your working copy.
        The server produces the delta by comparing two trees: a
        virtual snapshot of your working copy, and the revision tree
        you&#39;re interested in.  Because the left hand side of the
        comparison is exactly equal to what you already have, the
        delta is guaranteed to correctly convert your working copy
        into the right hand tree. But  svn merge  has no such guarantees
        and can be much more chaotic: the advanced user can ask the
        server to compare  any  two trees at all,
        even ones that are unrelated to the working copy!  This means
        there&#39;s large potential for human error.  Users will sometimes
        compare the wrong two trees, creating a delta that doesn&#39;t
        apply cleanly. The  svn merge  subcommand does
        its best to apply as much of the delta as possible, but some
        parts may be impossible. A common sign that you merged the wrong
        delta is unexpected tree conflicts: 
$ svn merge ^/calc/trunk -r104:115
--- Merging r105 through r115 into &#39;.&#39;:
   C doc
   C src/button.c
   C src/integer.c
   C src/real.c
   C src/main.c
--- Recording mergeinfo for merge of r105 through r115 into &#39;.&#39;:
 U   .
Summary of conflicts:
  Tree conflicts: 5

$ svn st
 M      .
!     C doc
      &gt;   local dir missing, incoming dir edit upon merge
!     C src/button.c
      &gt;   local file missing, incoming file edit upon merge
!     C src/integer.c
      &gt;   local file missing, incoming file edit upon merge
!     C src/main.c
      &gt;   local file missing, incoming file edit upon merge
!     C src/real.c
      &gt;   local file missing, incoming file edit upon merge
Summary of conflicts:
  Tree conflicts: 5
 In the previous example, it might be the case that
         doc  and the four  *.c 
        files all exist in both snapshots of the
        branch being compared.  The resultant delta wants to change
        the contents of the corresponding paths in your working copy,
        but those paths don&#39;t exist in the working copy.  Whatever the
        case, the preponderance of tree conflicts most likely means that
        the user compared the wrong two trees or that you are merging to
        the wrong working copy target; both are classic signs of user
        error.  When this happens, it&#39;s easy to recursively revert all
        the changes created by the merge
        ( svn revert . --recursive ), delete any
        unversioned files or directories left behind after the
        revert, and rerun  svn merge  with the
        correct arguments. Also keep in mind that a merge into a working copy with no
        local edits can still produce text conflicts. 
$ svn st

$ svn merge ^/paint/trunk -r289:291
--- Merging r290 through r291 into &#39;.&#39;:
C    Makefile
--- Recording mergeinfo for merge of r290 through r291 into &#39;.&#39;:
 U   .
Summary of conflicts:
  Text conflicts: 1
Conflict discovered in file &#39;Makefile&#39;.
Select: (p) postpone, (df) diff-full, (e) edit, (m) merge,
        (mc) mine-conflict, (tc) theirs-conflict, (s) show all options: p

$ svn st
 M      .
C       Makefile
?       Makefile.merge-left.r289
?       Makefile.merge-right.r291
?       Makefile.working
Summary of conflicts:
  Text conflicts: 1
 How can a conflict possibly happen?  Again, because the user
        can request  svn merge  to define and apply any
        old delta to the working copy, that delta may contain textual
        changes that don&#39;t cleanly apply to a working file, even if
        the file has no local modifications. Another small difference between  svn
        update  and  svn merge  is the names
        of the full-text files created when a conflict happens.  In
         , we saw that an
        update produces files named
         filename.mine ,
         filename.rOLDREV , and
         filename.rNEWREV .  When  svn
        merge  produces a conflict, though, it creates three
        files named  filename.working ,
         filename.merge-left.rOLDREV , and
         filename.merge-right.rNEWREV .  In this case,
        the terms  merge-left  and  merge-right 
        are describing which side of the double-tree comparison the file
        came from,  rOLDREV  describes the revision of the
        left side, and  rNEWREV  the revision of the right
        side. In any case, these differing names help you distinguish
        between conflicts that happened as a result of an  update and
        ones that happened as a result of a merge. Blocking Changes Sometimes there&#39;s a particular changeset that you don&#39;t
        want automatically merged.  For example, perhaps your
        team&#39;s policy is to do new development work on
         /trunk , but is more conservative about
        backporting changes to a stable branch you use for releasing
        to the public.  On one extreme, you can manually cherrypick
        single changesets from the trunk to the branch just the
        changes that are stable enough to pass muster.  Maybe things
        aren&#39;t quite that strict, though; perhaps most of the time
        you just let  svn merge 
        automatically merge most changes from trunk to branch.  In
        this case, you want a way to mask a few specific changes
        out, that is, prevent them from ever being automatically
        merged. To block a changeset you must make Subversion believe that the
        change has  already  been merged.  To do this,
        invoke the merge subcommand with the  --record-only 
        option.  The option makes Subversion record mergeinfo as if it had
        actually performed the merge, but no difference is actually
        applied: 
$ cd my-calc-branch

$ svn merge ^/calc/trunk -r386:388 --record-only
--- Recording mergeinfo for merge of r387 through r388 into &#39;.&#39;:
 U   .

# Only the mergeinfo is changed
$ svn st
 M      .

$ svn pg svn:mergeinfo -vR
Properties on &#39;.&#39;:
  svn:mergeinfo
    /calc/trunk:341-378,387-388

$ svn commit -m &quot;Block r387-388 from being merged to my-calc-branch.&quot;
Sending        .

Committed revision 461.
 Since Subversion 1.7,  --record-only 
        merges are transitive.  This means that, in addition to recording
        mergeinfo describing the blocked revision(s), any
         svn:mergeinfo  property differences in the
        merge source are also applied.  For example, let&#39;s say we want to
        block the &#39;paint-python-wrapper&#39; feature from ever being merged from
         ^/paint/trunk  to the
         ^/paint/branches/paint-1.0.x  branch.  We know
        the work on this feature was done on its own branch, which was
        reintegrated to  /paint/trunk  in revision
        465: 
$ svn log -v -r465 ^/paint/trunk
------------------------------------------------------------------------
r465 | joe | 2013-02-25 14:05:12 -0500 (Mon, 25 Feb 2013) | 1 line
Changed paths:
   M /paint/trunk
   A /paint/trunk/python (from /paint/branches/paint-python-wrapper/python:464)

Reintegrate Paint Python wrapper.
------------------------------------------------------------------------
 Because revision 465 was a reintegrate merge we know
        that mergeinfo was recorded describing the merge: 
$ svn diff ^/paint/trunk --depth empty -c465
Index: .
===================================================================
--- .   (revision 464)
+++ .   (revision 465)

Property changes on: .
___________________________________________________________________
Added: svn:mergeinfo
   Merged /paint/branches/paint-python-wrapper:r463-464
 Now simply blocking merges of revision 465 from
         /paint/trunk  isn&#39;t foolproof since someone could
        merge r462:464 directly from
         /paint/branches/paint-python-wrapper .
        Fortunately the transitive nature
        of  --record-only  merges prevents this; the
         --record-only  merge
        applies the  svn:mergeinfo  diff from
        revision 465, thus blocking merges of that change directly from
         /paint/trunk   and  indirectly
        from  /paint/branches/paint-python-wrapper :
         
$ cd paint/branches/paint-1.0.x

$ svn merge ^/paint/trunk --record-only -c465
--- Merging r465 into &#39;.&#39;:
 U   .
--- Recording mergeinfo for merge of r465 into &#39;.&#39;:
 G   .

$ svn diff --depth empty
Index: .
===================================================================
--- .   (revision 462)
+++ .   (working copy)

Property changes on: .
___________________________________________________________________
Added: svn:mergeinfo
   Merged /paint/branches/paint-python-wrapper:r463-464
   Merged /paint/trunk:r465

$ svn ci -m &quot;Block the Python wrappers from the first release of paint.&quot;
Sending        .

Committed revision 466.
 Now any subsequent attempts to merge the feature to  
        /paint/trunk  are inoperative: 
$ svn merge ^/paint/trunk -c465
--- Recording mergeinfo for merge of r465 into &#39;.&#39;:
 U   .

$ svn st # No change!

$ svn merge ^/paint/branches/paint-python-wrapper -r462:464
--- Recording mergeinfo for merge of r463 through r464 into &#39;.&#39;:
 U   .

$ svn st  # No change!

$
 If at a later time you realize that you actually  do
          need the blocked feature merged to  /paint/trunk
          you have a couple of choices.  You can reverse merge r466,
        (the revision you blocked the feature), as we discussed in
         .  Once you commit
        that change you can repeat the merge of r465 from  
        /paint/trunk .  Alternatively, you can simply repeat the
        merge of r465 from  /paint/trunk  using the
         --ignore-ancestry  option, which will cause the merge
        to disregard any mergeinfo and simply apply the requested diff, see
         . 
$ svn merge ^/paint/trunk -c465 --ignore-ancestry
--- Merging r465 into &#39;.&#39;:
A    python
A    python/paint.py
 G   .
 Blocking changes with  --record-only 
        works, but it&#39;s also a little bit
        dangerous.  The main problem is that we&#39;re not clearly
        differentiating between the ideas of  I already have
        this change  and  I don&#39;t have this change, but
        don&#39;t currently want it.  We&#39;re effectively lying to
        the system, making it think that the change was previously
        merged.  This puts the responsibility on you the
        user to remember that the change wasn&#39;t actually merged,
        it just wasn&#39;t wanted.  There&#39;s no way to ask Subversion for a
        list of  blocked changelists.  If you want to
        track them (so that you can unblock them someday) you&#39;ll need
        to record them in a text file somewhere, or perhaps in an
        invented property. Merge-Sensitive Logs and Annotations One of the main features of any version control system is
        to keep track of who changed what, and when they did it.
        The  svn log  and  svn
        blame  subcommands are just the tools for this: when
        invoked on individual files, they show not only the history of
        changesets that affected the file, but also exactly which user
        wrote which line of code, and when she did it. When changes start getting replicated between branches,
        however, things start to get complicated.  For example, if you
        were to ask  svn log  about the history of
        your feature branch, it would show exactly every revision that ever
        affected the branch: 
$ cd my-calc-branch

$ svn log -q
------------------------------------------------------------------------
r461 | user | 2013-02-25 05:57:48 -0500 (Mon, 25 Feb 2013)
------------------------------------------------------------------------
r379 | user | 2013-02-18 10:56:35 -0500 (Mon, 18 Feb 2013)
------------------------------------------------------------------------
r378 | user | 2013-02-18 09:48:28 -0500 (Mon, 18 Feb 2013)
------------------------------------------------------------------------
 
------------------------------------------------------------------------
r8 | sally | 2013-01-17 16:55:36 -0500 (Thu, 17 Jan 2013)
------------------------------------------------------------------------
r7 | bill | 2013-01-17 16:49:36 -0500 (Thu, 17 Jan 2013)
------------------------------------------------------------------------
r3 | bill | 2013-01-17 09:07:04 -0500 (Thu, 17 Jan 2013)
------------------------------------------------------------------------
 But is this really an accurate picture of all the changes
        that happened on the branch?  What&#39;s left out here is
        the fact that revisions 352, 362, 372 and 379 were actually the
        results of merging changes from the trunk.  If you look at one
        of these logs in detail, the multiple trunk changesets that
        comprised the branch change are nowhere to be seen: 
$ svn log ^/calc/branches/my-calc-branch -r352 -v
------------------------------------------------------------------------
r352 | user | 2013-02-16 09:35:18 -0500 (Sat, 16 Feb 2013) | 1 line
Changed paths:
   M /calc/branches/my-calc-branch
   M /calc/branches/my-calc-branch/Makefile
   M /calc/branches/my-calc-branch/doc/INSTALL
   M /calc/branches/my-calc-branch/src/button.c
   M /calc/branches/my-calc-branch/src/real.c

Sync latest trunk changes to my-calc-branch.
------------------------------------------------------------------------
 We happen to know that this merge to the branch was
        nothing but a merge of trunk changes.  How can we see those
        trunk changes as well?  The answer is to use the
         --use-merge-history  ( -g )
        option.  This option expands those  child 
        changes that were part of the merge. 
$ svn log ^/calc/branches/my-calc-branch -r352 -v -g
------------------------------------------------------------------------
r352 | user | 2013-02-16 09:35:18 -0500 (Sat, 16 Feb 2013) | 1 line
Changed paths:
   M /calc/branches/my-calc-branch
   M /calc/branches/my-calc-branch/Makefile
   M /calc/branches/my-calc-branch/doc/INSTALL
   M /calc/branches/my-calc-branch/src/button.c
   M /calc/branches/my-calc-branch/src/real.c

Sync latest trunk changes to my-calc-branch.
------------------------------------------------------------------------
r351 | sally | 2013-02-16 08:04:22 -0500 (Sat, 16 Feb 2013) | 2 lines
Changed paths:
   M /calc/trunk/src/real.c
Merged via: r352

Trunk work on calc project.
------------------------------------------------------------------------
 
------------------------------------------------------------------------
r345 | sally | 2013-02-15 16:51:17 -0500 (Fri, 15 Feb 2013) | 2 lines
Changed paths:
   M /calc/trunk/Makefile
   M /calc/trunk/src/integer.c
Merged via: r352

Trunk work on calc project.
------------------------------------------------------------------------
r344 | sally | 2013-02-15 16:44:44 -0500 (Fri, 15 Feb 2013) | 1 line
Changed paths:
   M /calc/trunk/src/integer.c
Merged via: r352

Refactor the bazzle functions.
------------------------------------------------------------------------
 By making the log operation use merge history, we see not
        just the revision we queried (r352), but also the other revisions
        that came along on the ride with it Sally&#39;s work on trunk.
        This is a much more complete picture of history! The  svn blame  command also takes the
         --use-merge-history  ( -g )
        option.  If this option is neglected, somebody looking at
        a line-by-line annotation of  Makefile  may
        get the mistaken impression that you were responsible for a
        particular change: 
$ svn blame src/button.c
 
   352    user    retval = inverse_func(button, path);
   352    user    return retval;
   352    user    }
 
 And while it&#39;s true that you did actually commit those
        three lines in revision 352, two of them were actually written
        by Sally back in revision 348 and were brought into your branch
        via a sync merge: 
$ svn blame button.c -g
 
G    348    sally   retval = inverse_func(button, path);
G    348    sally   return retval;
     352    user    }
 
 Now we know who to  really  blame for
        those two lines of code! Noticing or Ignoring Ancestry ancestry When conversing with a Subversion developer, you
        might very likely hear reference to the term
         ancestry .  This word is used to
        describe the relationship between two objects in a
        repository: if they&#39;re related to each other, one
        object is said to be an ancestor of the other. For example, suppose you commit revision 100, which
        includes a change to a file  foo.c .
        Then  foo.c@99  is an
         ancestor  of  foo.c@100 .
        On the other hand, suppose you commit the deletion of
         foo.c  in revision 101, and then add a
        new file by the same name in revision 102.  In this case,
         foo.c@99  and
         foo.c@102  may appear to be related
        (they have the same path), but in fact are completely
        different objects in the repository.  They share no history
        or  ancestry. The reason for bringing this up is to point out an
        important difference between  svn diff  and
         svn merge .  The former command ignores
        ancestry, while the latter command is quite sensitive to it.
        For example, if you asked  svn diff  to
        compare revisions 99 and 102 of  foo.c ,
        you would see line-based diffs; the  diff 
        command is blindly comparing two paths.  But if you asked
         svn merge  to compare the same two objects,
        it would notice that they&#39;re unrelated and first attempt to
        delete the old file, then add the new file;  the output would
        indicate a deletion followed by an add: 
D    foo.c
A    foo.c
 Most merges involve comparing trees that are ancestrally
        related to one another; therefore,  svn
        merge  defaults to this behavior.  Occasionally,
        however, you may want the  merge  command to
        compare two unrelated trees.  For example, you may have
        imported two source-code trees representing different vendor
        releases of a software project (see
         ).  If you ask
         svn merge  to compare the two trees, you&#39;d
        see the entire first tree being deleted, followed by an add
        of the entire second tree!  In these situations, you&#39;ll want
         svn merge  to do a path-based comparison
        only, ignoring any relations between files and directories.
        Add the  --ignore-ancestry  option to your
         merge  command, and it will behave just
        like  svn diff .  (And conversely, the
         --notice-ancestry  option will cause
         svn diff  to behave like the
         svn merge  command.) merge tracking disabling 
        The  --ignore-ancestry  option also disables
         .
        This means that  svn:mergeinfo  is not considered
        when  svn merge  is determining what revisions
        to merge, nor is  svn:mergeinfo  recorded to
        describe the merge. Merges and Moves A common desire is to refactor source code, especially
        in Java-based software projects.  Files and directories are
        shuffled around and renamed, often causing great disruption
        to everyone working on the project.  Sounds like a perfect
        case to use a branch, doesn&#39;t it?  Just create a branch,
        shuffle things around, and then merge the branch back to the
        trunk, right? Alas, this scenario doesn&#39;t work so well right now and
        is considered one of Subversion&#39;s current weak spots.  The
        problem is that Subversion&#39;s  svn merge 
        command isn&#39;t as robust as it should be, particularly when
        dealing with copy and move operations. When you use  svn copy  to duplicate a
        file, the repository remembers where the new file came from,
        but it fails to transmit that information to the client which
        is running  svn update  or  svn
        merge .  Instead of telling the client,  Copy
        that file you already have to this new location,  it
        sends down an entirely new file.  This can lead to
        problems, particularly tree conflicts in the case of renames,
        which involve not only the new copy, but a deletion of the old
        path a lesser-known fact about Subversion is that
        it lacks  true renames the  svn
        move  command is nothing more than an aggregation
        of  svn copy  and  svn
        delete . For example, suppose that you want to make some changes on
        your private branch  /calc/branch/my-calc-branch
         .  First you perform an automatic sync merge with
         /calc/trunk  and commit that in r470: 
$ cd calc/trunk

$ svn merge ^/calc/trunk
--- Merging differences between repository URLs into &#39;.&#39;:
U    doc/INSTALL
A    FAQ
U    src/main.c
U    src/button.c
U    src/integer.c
U    Makefile
U    README
 U   .
--- Recording mergeinfo for merge between repository URLs into &#39;.&#39;:
 U   .

$ svn ci -m &quot;Sync all changes from ^/calc/trunk through r469.&quot;
Sending        .
Sending        Makefile
Sending        README
Sending        FAQ
Sending        doc/INSTALL
Sending        src/main.c
Sending        src/button.c
Sending        src/integer.c
Transmitting file data ....
Committed revision 470.
 Then you rename  integer.c  to  
        whole.c  in r471 and then make some edits to the same
        file in r473.  Effectively you&#39;ve created a new file in your branch
        (that is a copy of the original file plus some edits) and deleted
        the original file.  Meanwhile, back on  /calc/trunk
         , Sally has committed some improvements of her own to
         integer.c  in r472: 
$ svn log -v -r472 ^/calc/trunk
------------------------------------------------------------------------
r472 | sally | 2013-02-26 07:05:18 -0500 (Tue, 26 Feb 2013) | 1 line
Changed paths:
   M /calc/trunk/src/integer.c

Trunk work on integer.c.
------------------------------------------------------------------------
 Now you decide to merge your branch back to the trunk.
        How will Subversion combine the rename and edits you made
        with Sally&#39;s edits? 
$ svn merge ^/calc/branches/my-calc-branch
--- Merging differences between repository URLs into &#39;.&#39;:
   C src/integer.c
 U   src/real.c
A    src/whole.c
--- Recording mergeinfo for merge between repository URLs into &#39;.&#39;:
 U   .
Summary of conflicts:
  Tree conflicts: 1

$ svn st
 M      .
      C src/integer.c
      &gt;   local file edit, incoming file delete upon merge
 M      src/real.c
A  +    src/whole.c
Summary of conflicts:
  Tree conflicts: 1
 The answer is that Subversion  won&#39;t 
        combine those changes, but rather raises a tree conflict If Sally hadn&#39;t made her change in r472, then Subversion would
        notice that  integer.c  in the
        target working copy is identical to  integer.c 
        in the left-side of the merge and would allow your rename to
        succeed without a tree conflict: 
$ svn merge ^/calc/branches/my-calc-branch
--- Merging differences between repository URLs into &#39;.&#39;:
 U   src/real.c
A    src/whole.c
D    src/integer.c
--- Recording mergeinfo for merge between repository URLs into &#39;.&#39;:
 U   .
 because it needs your help
        to figure out what part of your changes and what part of Sally&#39;s
        changes should ultimately end up in  whole.c 
        or even if the rename should take place at all! You will need to resolve this tree conflict before committing
        the merge and this may require some manual intervention on your
        part, see  .  The moral of
        this story is that until Subversion improves, be careful about
        merging copies and renames from one branch to another and when you
        do, be prepared for some manual resolution. Blocking Merge Tracking Unaware Clients If you&#39;ve just upgraded your server to Subversion 1.5 or
        later, there&#39;s a risk that pre-1.5 Subversion
        clients can cause problems with
         .
        This is because pre-1.5 clients don&#39;t support this feature;
        when one of these older clients performs  svn
        merge , it doesn&#39;t modify the value of
        the  svn:mergeinfo  property at all.  So the
        subsequent commit, despite being the result of a merge,
        doesn&#39;t tell the repository about the duplicated
        changes that information is lost.  Later on,
        when  merge-aware  clients attempt automatic
        merging, they&#39;re likely to run into all sorts of conflicts
        resulting from repeated merges. If you and your team are relying on the merge-tracking
        features of Subversion, you may want to configure your
        repository to prevent older clients from committing changes.
        The easy way to do this is by inspecting
        the  capabilities  parameter in
        the  start-commit  hook script.  If the
        client reports itself as having  mergeinfo 
        capabilities, the hook script can allow the commit to start.
        If the client doesn&#39;t report that capability, have the hook
        deny the commit.
          gives an
        example of such a hook script: Merge-tracking gatekeeper start-commit hook script 
#!/usr/bin/env python
import sys

# The start-commit hook is invoked immediately after a Subversion txn is
# created and populated with initial revprops in the process of doing a
# commit. Subversion runs this hook by invoking a program (script, 
# executable, binary, etc.) named &#39;start-commit&#39; (for which this file
# is a template) with the following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the authenticated user attempting to commit)
#   [3] CAPABILITIES (a colon-separated list of capabilities reported
#                     by the client; see note below)
#   [4] TXN-NAME     (the name of the commit txn just created)

capabilities = sys.argv[3].split(&#39;:&#39;)
if &quot;mergeinfo&quot; not in capabilities:
  sys.stderr.write(&quot;Commits from merge-tracking-unaware clients are &quot;
                   &quot;not permitted.  Please upgrade to Subversion 1.5 &quot;
                   &quot;or newer.\n&quot;)
  sys.exit(1)
sys.exit(0)
 For more information about hook scripts, see
         . The Final Word on Merge Tracking The bottom line is that Subversion&#39;s merge-tracking
        feature has an complex internal implementation, and
        the  svn:mergeinfo  property is the only
        window the user has into the machinery. How and when mergeinfo is recorded by a merge can sometimes
        be difficult to understand.  Furthermore, the management of
        mergeinfo metadata has a whole set of taxonomies and behaviors
        around it, such as  explicit  versus  implicit
          mergeinfo,  operative 
        versus  inoperative  revisions, specific
        mechanisms of mergeinfo  elision,  and
        even  inheritance  from parent to child
        directories. We&#39;ve chosen to only briefly cover, if at all, these detailed
        topics for a couple of reasons.  First, the level of detail is
        overwhelming for a typical user.  Second, and more
        importantly, the typical user  doesn&#39;t  need
        to understand these concepts; typically they remain in the
        background as implementation details.  All that said, if you
        enjoy this sort of thing, you can get a fantastic overview in a
        paper posted at CollabNet&#39;s website:  . For now, if you want to steer clear of the complexities of
        merge tracking, we recommend that you follow these simple best
        practices: For short-term feature branches, follow the simple
            procedure described throughout
             . Avoid subtree merges and subtree mergeinfo. Perform
            merges only on the root of your branches, not on
            subdirectories or files (see  )
            . Don&#39;t ever edit the  svn:mergeinfo 
            property directly; use  svn
            merge  with the  --record-only  option
            to effect a desired change to the metadata (as demonstrated in
             ). Your merge target should be a working copy which
            represents the root of a  complete  tree
            representing a  single  location in the
            repository at a single point in time:
             Update before you merge!  Don&#39;t use the  
                --allow-mixed-revisions  option to merge into
                mixed-revision working copies. Don&#39;t merge to targets with  switched 
                subdirectories (as described next in
                 ). Avoid merges to targets with sparse directories.
                  Likewise, don&#39;t merge to depths other than
                   --depth=infinity Be sure you have read access to all of the merge
                  source and read/write access to all of the merge
                  target. 
           Of course sometimes you may need to violate some of these
        best practices.  Don&#39;t worry if you need to, just be sure you
        understand the ramifications of doing so. Traversing Branches The  svn switch  command transforms an
      existing working copy to reflect a different branch.  While this
      command isn&#39;t strictly necessary for working with branches, it
      provides a nice shortcut.  In one of our earlier examples,
      after creating your private branch, you checked out a fresh
      working copy of the new repository directory.  Instead, you can
      simply ask Subversion to change your working copy of
       /calc/trunk  to mirror the new branch
      location: 
$ cd calc

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/trunk

$ svn switch ^/calc/branches/my-calc-branch
U    integer.c
U    button.c
U    Makefile
Updated to revision 341.

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/branches/my-calc-branch
 Switching  a working copy that has no local
      modifications to a different branch results in the working copy
      looking just as it would if you&#39;d done a fresh checkout of the
      directory.  It&#39;s usually more efficient to
      use this command, because often branches differ by only a small
      degree.  The server sends only the minimal set of changes
      necessary to make your working copy reflect the branch
      directory. The  svn switch  command also takes a
       --revision  ( -r ) option, so you
      need not always move your working copy to the
       HEAD  of the branch. Of course, most projects are more complicated than our
       calc  example, and contain multiple
      subdirectories.  Subversion users often follow a specific
      algorithm when using branches: Copy the project&#39;s entire  trunk  to a new
          branch directory. Switch only  part  of the trunk
          working copy to mirror the branch. In other words, if a user knows that the branch work needs
      to happen on only a specific subdirectory, she uses
       svn switch  to move only that subdirectory to
      the branch.  (Or sometimes users will switch just a single
      working file to the branch!)  That way, the user can continue to
      receive normal  trunk  updates to most of her
      working copy, but the switched portions will remain immune
      (unless someone commits a change to her branch).  This feature
      adds a whole new dimension to the concept of a  mixed
      working copy not only can working copies contain a
      mixture of working revisions, but they can also contain a
      mixture of repository locations as well. Typically switched subdirectories share common ancestry with
        the location which is switched  away  from.  However
         svn switch  can switch a subdirectory to mirror
        a repository location which it shares no common ancestry with.
        To do this you need to use the
         --ignore-ancestry  option.
     If your working copy contains a number of switched subtrees
      from different repository locations, it continues to function as
      normal.  When you update, you&#39;ll receive patches to each subtree
      as appropriate.  When you commit, your local changes are still
      applied as a single, atomic change to the repository. Note that while it&#39;s okay for your working copy to reflect a
      mixture of repository locations, these locations must all be
      within the  same  repository.  Subversion
      repositories aren&#39;t yet able to communicate with one another;
      that feature is planned for the
      future. You  can , however,
      use  svn relocate  if the URL of your server
      changes and you don&#39;t want to abandon an existing working copy.
      See   in
        for more information and an
      example. Administrators who need to change the URL of a repository
        which is accessed via HTTP are encouraged to add to
        their  httpd.conf  configuration file a
        permanent redirect from the old URL location to the new one
        (via the  RedirectPermanent  directive).
        Subversion clients will generally display the new repository
        URL in error messages generated when the user attempts to use
        working copies which still reflect the old URL location.  Since
        Subversion 1.7 clients will go a step further,
        automatically relocating the working copy to the new
        URL. Switches and Updates Have you noticed that the output of  svn
        switch  and  svn update  looks the
        same?  The switch command is actually a superset of the update
        command. When you run  svn update , you&#39;re asking
        the repository to compare two trees.  The repository does so,
        and then sends a description of the differences back to the
        client.  The only difference between  svn
        switch  and  svn update  is that the
        latter command always compares two identical repository
        paths. That is, if your working copy is a mirror of
         /calc/trunk ,  svn
        update  will automatically compare your working copy
        of  /calc/trunk  to
         /calc/trunk  in the
         HEAD  revision.  If you&#39;re switching your
        working copy to a branch,  svn switch 
        will compare your working copy of
         /calc/trunk  to some
         other  branch directory in the
         HEAD  revision. In other words, an update moves your working copy through
        time.  A switch moves your working copy through time
         and  space. Because  svn switch  is essentially a
      variant of  svn update , it shares the same
      behaviors; any local modifications in your working copy are
      preserved when new data arrives from the repository. Have you ever found yourself making some complex edits (in
        your  /trunk  working copy) and suddenly
        realized,  Hey, these changes ought to be in their own
        branch?  There is a great two step technique to do
        this: 
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/newbranch \
           -m &quot;Create branch &#39;newbranch&#39;.&quot;
Committed revision 353.
$ svn switch ^/calc/branches/newbranch
At revision 353.
 The  svn switch  command, like
         svn update , preserves your local edits.  At
        this point, your working copy is now a reflection of the newly
        created branch, and your next  svn commit 
        invocation will send your changes there. Tags tags 
      Another common version control concept is a tag.  A tag is
      just a  snapshot  of a project in time.  In
      Subversion, this idea already seems to be everywhere.  Each
      repository revision is exactly that a snapshot of the
      filesystem after each commit. However, people often want to give more human-friendly names
      to tags, such as  release-1.0 .  And they want
      to make snapshots of smaller subdirectories of the filesystem.
      After all, it&#39;s not so easy to remember that release 1.0 of a
      piece of software is a particular subdirectory of revision
      4822. Creating a Simple Tag Once again,  svn copy  comes to the
        rescue.  If you want to create a snapshot of
         /calc/trunk  exactly as it looks in the
         HEAD  revision, make a copy of it: 
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/tags/release-1.0 \
           -m &quot;Tagging the 1.0 release of the &#39;calc&#39; project.&quot;

Committed revision 902.
 This example assumes that a
         /calc/tags  directory already exists.  (If
        it doesn&#39;t, you can create it using  svn
        mkdir .)  After the copy completes, the new
         release-1.0  directory is forever a
        snapshot of how the  /trunk  directory
        looked in the  HEAD  revision at the time you
        made the copy.  Of course, you might want to be more precise
        about exactly which revision you copy, in case somebody else
        may have committed changes to the project when you weren&#39;t
        looking.  So if you know that revision 901 of
         /calc/trunk  is exactly the snapshot you
        want, you can specify it by passing  -r 901  to
        the  svn copy  command. But wait a moment: isn&#39;t this tag creation procedure the
        same procedure we used to create a branch?  Yes, in fact, it
        is.  In Subversion, there&#39;s no difference between a tag and a
        branch.  Both are just ordinary directories that are created
        by copying.  Just as with branches, the only reason a copied
        directory is a  tag  is because
         humans  have decided to treat it that way:
        as long as nobody ever commits to the directory, it forever
        remains a snapshot.  If people start committing to it, it
        becomes a branch. If you are administering a repository, there are two
        approaches you can take to managing tags.  The first approach
        is  hands off : as a matter of project policy,
        decide where your tags will live, and make sure all users know
        how to treat the directories they copy.  (That is, make sure
        they know not to commit to them.)  The second approach is more
        paranoid: you can use one of the access control scripts
        provided with Subversion to prevent anyone from doing anything
        but creating new copies in the tags area (see
         ).  The paranoid approach,
        however, isn&#39;t usually necessary.  If a user accidentally
        commits a change to a tag directory, you can simply undo the
        change as discussed in the previous section.  This is version
        control, after all! Creating a Complex Tag Sometimes you may want a  snapshot  that is
        more complicated than a single directory at a single
        revision. For example, pretend your project is much larger than our
         calc  example: suppose it contains a
        number of subdirectories and many more files.  In the course
        of your work, you may decide that you need to create a working
        copy that is designed to have specific features and bug fixes.
        You can accomplish this by selectively backdating files or
        directories to particular revisions (using  svn
        update  with the  -r  option
        liberally), by switching files and directories to particular
        branches (making use of  svn switch ), or
        even just by making a bunch of local changes.  When you&#39;re
        done, your working copy is a hodgepodge of repository
        locations from different revisions.  But after testing, you
        know it&#39;s the precise combination of data you need to
        tag. Time to make a snapshot.  Copying one URL to another won&#39;t
        work here.  In this case, you want to make a snapshot of your
        exact working copy arrangement and store it in the repository.
        Luckily,  svn copy  actually has four
        different uses (see   in  ), including the ability to copy a
        working copy tree to the repository: 
$ ls
my-working-copy/

$ svn copy my-working-copy \
           http://svn.example.com/repos/calc/tags/mytag \
           -m &quot;Tag my existing working copy state.&quot;

Committed revision 940.
 Now there is a new directory in the repository,
         /calc/tags/mytag , which is an exact
        snapshot of your working copy mixed revisions, URLs,
        local changes, and all. Other users have found interesting uses for this feature.
        Sometimes there are situations where you have a bunch of local
        changes made to your working copy, and you&#39;d like a
        collaborator to see them.  Instead of running  svn
        diff  and sending a patch file (which won&#39;t capture
        directory or symlink changes), you can
        use  svn copy  to  upload  your
        working copy to a private area of the repository.  Your
        collaborator can then either check out a verbatim copy of your
        working copy or use  svn merge  to receive
        your exact changes. While this is a nice method for uploading a quick snapshot
        of your working copy, note that this is  not 
        a good way to initially create a branch.  Branch creation should
        be an event unto itself, and this method conflates the creation
        of a branch with extra changes to files, all within a single revision.
        This makes it very difficult (later on) to identify a single
        revision number as a branch point. Branch Maintenance You may have noticed by now that Subversion is extremely
      flexible.  Because it implements branches and tags with the same
      underlying mechanism (directory copies), and because branches
      and tags appear in normal filesystem space, many people find
      Subversion intimidating.  It&#39;s almost  too 
      flexible.  In this section, we&#39;ll offer some suggestions for
      arranging and managing your data over time. Repository Layout There are some standard, recommended ways to organize the
        contents of a repository.  Most people create a
         trunk  directory to hold the  main
        line  of development, a  branches 
        directory to contain branch copies, and
        a  tags  directory to contain tag copies.
        If a repository holds only one project, often people create
        these top-level directories: 
/
   trunk/
   branches/
   tags/
 If a repository contains multiple projects, admins
        typically index their layout by project.  See   to read more about
         project roots , but here&#39;s an example of such a
        layout: 
/
   paint/
      trunk/
      branches/
      tags/
   calc/
      trunk/
      branches/
      tags/
 Of course, you&#39;re free to ignore these common layouts.
        You can create any sort of variation, whatever works best for
        you or your team.  Remember that whatever you choose, it&#39;s not
        a permanent commitment.  You can reorganize your repository at
        any time.  Because branches and tags are ordinary directories,
        the  svn move  command can move or rename
        them however you wish.  Switching from one layout to another
        is just a matter of issuing a series of server-side moves; if
        you don&#39;t like the way things are organized in the repository,
        just juggle the directories around. Remember, though, that while moving directories is
        easy to do, you need to be considerate of other users as well.
        Your juggling can disorient users with existing
        working copies.  If a user has a working copy of a particular
        repository directory and your  svn move 
        subcommand removes the path from the latest revision, then
        when the user next runs  svn update , she is
        told that her working copy represents a path that no
        longer exists.  She is then forced to  svn
        switch  to the new location. Data Lifetimes Another nice feature of Subversion&#39;s model is that
        branches and tags can have finite lifetimes, just like any
        other versioned item.  For example, suppose you eventually
        finish all your work on your personal branch of the
         calc  project.  After merging all of your
        changes back into  /calc/trunk , there&#39;s
        no need for your private branch directory to stick around
        anymore: 
$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
             -m &quot;Removing obsolete branch of calc project.&quot;

Committed revision 474.
 Recall from the previous section that if the repository
          location your working copy refers to is deleted, then when
          you try to update you will receive an error: 
$ svn up
Updating &#39;.&#39;:
svn: E160005: Target path &#39;/calc/branches/my-calc-branch&#39; does not exist
 All you need to do in this situation is switch your working
          copy to a location that still exits: 
$ svn sw ^/calc/trunk
D    src/whole.c
 U   src/real.c
A    src/integer.c
 U   .
Updated to revision 474.
 And now your branch is gone.  Of course, it&#39;s not really
        gone: the directory is simply missing from the
         HEAD  revision, no longer distracting
        anyone.  If you use  svn checkout ,
         svn switch , or  svn list 
        to examine an earlier revision, you can still see
        your old branch. If browsing your deleted directory isn&#39;t enough, you can
        always bring it back.  Resurrecting data is very easy in
        Subversion.  If there&#39;s a deleted directory (or file) that
        you&#39;d like to bring back into  HEAD , simply
        use  svn copy  to copy it from the old
        revision: 
$ svn copy ^/calc/branches/my-calc-branch@473 \
           ^/calc/branches/my-calc-branch \
           -m &quot;Restore my-calc-branch.&quot;

Committed revision 475.
 In our example, your personal branch had a relatively
        short lifetime: you may have created it to fix a bug or
        implement a new feature.  When your task is done, so is the
        branch.  In software development, though, it&#39;s also common to
        have two  main  branches running side by side for
        very long periods.  For example, suppose it&#39;s time to release
        a stable version of the  calc  project to the
        public, and you know it&#39;s going to take a couple of months to
        shake bugs out of the software.  You don&#39;t want people to add
        new features to the project, but you don&#39;t want to tell all
        developers to stop programming either.  So instead, you create
        a  stable  branch of the software that won&#39;t
        change much: 
$ svn copy ^/calc/trunk ^/calc/branches/stable-1.0 \
           -m &quot;Creating stable branch of calc project.&quot;

Committed revision 476.
 And now developers are free to continue adding
        cutting-edge (or experimental) features to
         /calc/trunk , and you can declare a
        project policy that only bug fixes are to be committed to
         /calc/branches/stable-1.0 .  That is, as
        people continue to work on the trunk, a human selectively
        cherrypicks bug fixes over to the stable branch.  Even after the
        stable branch has shipped, you&#39;ll probably continue to
        maintain the branch for a long time that is, as long
        as you continue to support that release for customers.  We&#39;ll
        discuss this more in the next section. Common Branching Patterns There are many different uses for branching and  svn
        merge , and this section describes the most
        common. Version control is most often used for software
      development, so here&#39;s a quick peek at two of the most common
      branching/merging patterns used by teams of programmers.  If
      you&#39;re not using Subversion for software development, feel
      free to skip this section.  If you&#39;re a software developer
      using version control for the first time, pay close attention,
      as these patterns are often considered best practices by
      experienced folk.  These processes aren&#39;t specific to
      Subversion; they&#39;re applicable to any version control system.
      Still, it may help to see them described in Subversion
      terms. Release Branches Most software has a typical life cycle: code, test,
        release, repeat.  There are two problems with this process.
        First, developers need to keep writing new features while
        quality assurance teams take time to test supposedly stable
        versions of the software.  New work cannot halt while the
        software is tested.  Second, the team almost always needs to
        support older, released versions of software; if a bug is
        discovered in the latest code, it most likely exists in
        released versions as well, and customers will want to get
        that bug fix without having to wait for a major new
        release. Here&#39;s where version control can help.  The typical
        procedure looks like this: Developers commit all new work to the
            trunk.   Day-to-day changes are committed to
             /trunk : new features, bug fixes, and
            so on. The trunk is copied to a
             release  branch.   When the team
            thinks the software is ready for release (say, a 1.0
            release),  /trunk  might be copied to
             /branches/1.0 . Teams continue to work in
            parallel.   One team begins rigorous testing of
            the release branch, while another team continues new work
            (say, for version 2.0) on  /trunk .  If
            bugs are discovered in either location, fixes are cherrypicked
            back and forth as necessary.  At some point, however, even
            that process stops.  The branch is  frozen 
            for final testing right before a release. The branch is tagged and
            released.   When testing is complete,
             /branches/1.0  is copied to
             /tags/1.0.0  as a reference
            snapshot.  The tag is packaged and released to
            customers. The branch is maintained over
            time.   While work continues
            on  /trunk  for version 2.0, bug fixes
            continue to be ported from  /trunk  to
             /branches/1.0 .  When enough
            bug fixes have accumulated, management may decide to do a
            1.0.1 release:  /branches/1.0  is
            copied to  /tags/1.0.1 , and the tag
            is packaged and released. This entire process repeats as the software matures:
        when the 2.0 work is complete, a new 2.0 release branch is
        created, tested, tagged, and eventually released.  After
        some years, the repository ends up with a number of release
        branches in  maintenance  mode, and a number
        of tags representing final shipped versions. Feature Branches branches feature branches A  feature branch  is the sort of
        branch that&#39;s been the dominant example in this chapter (the
        one you&#39;ve been working on while Sally continues to work on
         /trunk ).  It&#39;s a temporary branch created
        to work on a complex change without interfering with the
        stability of  /trunk .  Unlike release
        branches (which may need to be supported forever), feature
        branches are born, used for a while, merged back to the trunk,
        and then ultimately deleted.  They have a finite span of
        usefulness. Again, project policies vary widely concerning exactly
        when it&#39;s appropriate to create a feature branch.  Some
        projects never use feature branches at all: commits to
         /trunk  are a free-for-all.  The
        advantage to this system is that it&#39;s simple nobody
        needs to learn about branching or merging.  The disadvantage
        is that the trunk code is often unstable or unusable.  Other
        projects use branches to an extreme: no change is
         ever  committed to the trunk directly.
        Even the most trivial changes are created on a short-lived
        branch, carefully reviewed, and merged to the trunk.  Then
        the branch is deleted.  This system guarantees an
        exceptionally stable and usable trunk at all times, but at
        the cost of tremendous process overhead. Most projects take a middle-of-the-road approach.  They
        commonly insist that  /trunk  compile and
        pass regression tests at all times.  A feature branch is
        required only when a change requires a large number of
        destabilizing commits.  A good rule of thumb is to ask this
        question: if the developer worked for days in isolation and
        then committed the large change all at once (so that
         /trunk  were never destabilized), would it
        be too large a change to review?  If the answer to that
        question is  yes,  the change should be
        developed on a feature branch.  As the developer commits
        incremental changes to the branch, they can be easily reviewed
        by peers. Finally, there&#39;s the issue of how to best keep a feature
        branch in  sync  with the trunk as work
        progresses.  As we mentioned earlier, there&#39;s a great risk to
        working on a branch for weeks or months; trunk changes may
        continue to pour in, to the point where the two lines of
        development differ so greatly that it may become a nightmare
        trying to merge the branch back to the trunk. This situation is best avoided by regularly running an
        automatic merge from trunk to the branch.  Make up a policy:
        once a week, merge the last week&#39;s worth of trunk changes to
        the branch. When you are eventually ready to merge the
         synchronized  feature branch back to the trunk,
        begin by doing a final automatic merge of the latest trunk
        changes to the branch.  When that&#39;s done, the latest versions
        of branch and trunk are absolutely identical except for
        your branch changes.  You can then run an automatic reintegrate
        merge from the branch back to the trunk: 
$ cd trunk-working-copy

$ svn update
Updating &#39;.&#39;:
At revision 1910.

$ svn merge ^/calc/branches/mybranch
--- Merging differences between repository URLs into &#39;.&#39;:
U    real.c
U    integer.c
A    newdirectory
A    newdirectory/newfile
 U   .
 
 Another way of thinking about this pattern is that your
        weekly sync of trunk to branch is analogous to running
         svn update  in a working copy, while the
        final merge step is analogous to running  svn
        commit  from a working copy.  After all, what else
         is  a working copy but a very shallow
        private branch?  It&#39;s a branch that&#39;s capable of
        storing only one change at a time. Vendor Branches branches vendor branches branches vendor branches As is especially the case when developing software, the data
      that you maintain under version control is often closely related
      to, or perhaps dependent upon, someone else&#39;s data.  Generally,
      the needs of your project will dictate that you stay as
      up to date as possible with the data provided by that external
      entity without sacrificing the stability of your own project.
      This scenario plays itself out all the time anywhere that
      the information generated by one group of people has a direct
      effect on that which is generated by another group. For example, software developers might be working on an
      application that makes use of a third-party library.  Subversion
      has just such a relationship with the Apache Portable Runtime (APR)
      library (see  ).
      The Subversion source code depends on the APR library for all
      its portability needs.  In earlier stages of Subversion&#39;s
      development, the project closely tracked APR&#39;s changing API,
      always sticking to the  bleeding edge  of the
      library&#39;s code churn.  Now that both APR and Subversion have
      matured, Subversion attempts to synchronize with APR&#39;s library
      API only at well-tested, stable release points. Now, if your project depends on someone else&#39;s information,
      you could attempt to synchronize that information with your own
      in several ways.  Most painfully, you could issue oral or
      written instructions to all the contributors of your project,
      telling them to make sure they have the specific versions of
      that third-party information that your project needs.  If the
      third-party information is maintained in a Subversion
      repository, you could also use Subversion&#39;s externals
      definitions to effectively  pin down  specific
      versions of that information to some location in your own
      working copy (see  ). But sometimes you want to maintain custom modifications to
      third-party code in your own version control system.  Returning
      to the software development example, programmers might need to
      make modifications to that third-party library for their own
      purposes.  These modifications might include new functionality
      or bug fixes, maintained internally only until they become part
      of an official release of the third-party library.  Or the
      changes might never be relayed back to the library maintainers,
      existing solely as custom tweaks to make the library further
      suit the needs of the software developers. Now you face an interesting situation.  Your project could
      house its custom modifications to the third-party data in some
      disjointed fashion, such as using patch files or full-fledged
      alternative versions of files and directories.  But these quickly
      become maintenance headaches, requiring some mechanism by which
      to apply your custom changes to the third-party code and
      necessitating regeneration of those changes with each successive
      version of the third-party code that you track. vendor drop The solution to this problem is to
      use  vendor branches .  A vendor branch is
      a directory tree in your own version control system that
      contains information provided by a third-party entity, or
      vendor.  Each version of the vendor&#39;s data that you decide to
      absorb into your project is called a  vendor
      drop . Vendor branches provide two benefits.  First, by storing the
      currently supported vendor drop in your own version control
      system, you ensure that the members of your project never need
      to question whether they have the right version of the vendor&#39;s
      data.  They simply receive that correct version as part of their
      regular working copy updates.  Second, because the data lives in
      your own Subversion repository, you can store your custom
      changes to it in-place you have no more need of an
      automated (or worse, manual) method for swapping in your
      customizations. Unfortunately, there is no single best way to manage vendor
      branches in Subversion.  The flexibility of the system offers
      several different approaches, each of which has its advantages
      and disadvantages, and none of which can be clearly considered
      a  silver bullet  for the problem.  We&#39;ll cover a
      few of these approaches at a high level in the following
      sections, using the common example of a software project which
      depends on a third-party library. General Vendor Branch Management Procedure Maintaining customizations to a third-party library
        involves three data sources: the version of the third-party
        library upon which your modifications were last based, the
        customized version (that is, the actual vendor branch) of that
        library which is used by your project, and any new version of
        the vendor&#39;s library to which you may be hoping to upgrade.
        Managing the vendor branch (which should live within your
        source code repository per our definition of the thing), then,
        essentially boils down to performing merge operations (in the
        general sense).  But different teams take different approaches
        to the other data sources the pristine versions of the
        third-party library code.  Thus, there are likewise different
        specific ways to perform the requisite merges. Strictly speaking, there are a couple of different ways
        that those merges can be performed in the general sense.  For
        the sake of simplicity and with the goal of at least providing
         something  concrete in this section of the
        book, we&#39;ll assume that there is but a single vendor branch
        which is upgraded to each successive new release of the
        third-party library by receiving updates that describe the
        differences between the current and new pristine versions of
        that library. Another approach is to create new vendor branches for
          each successive pristine library version, applying the
          differences between the current pristine library and the
          customized version thereof (from the current vendor branch)
          to the new branch.  There&#39;s nothing wrong with that
          approach we just don&#39;t feel compelled to document
          every legitimate possibility in this space. The following sections examine how to create and manage a
        vendor branch in a few different scenarios.  In the examples
        which follow, we&#39;ll assume that the third-party library is
        called libcomplex, and that we will be implementing a vendor
        branch based on libcomplex 1.0.0 which lives in our repository
        at  ^/vendor/libcomplex-custom .  We&#39;ll
        then look at how we can upgrade to libcomplex 1.0.1 while
        still preserving our customizations to the library. Vendor Branches from Foreign Repositories Let&#39;s look first at a vendor branch management approach
        that is possible when the original third-party library is
        itself Subversion-accessible.  For the sake of the example,
        we&#39;ll assume that the libcomplex library we previously
        discussed is developed in a publicly accessible Subversion
        repository, and that its developers use sane release
        procedures which include the creation of tags for each stable
        release version. merging foreign repository merges foreign repository merges merging, foreign repository merges copying foreign repository copies foreign repository copies copying, foreign repository copies Since Subversion 1.5,  svn merge 
        has been able to perform so-called  foreign
        repository merges , where the sources of the merge
        live in a different repository than the repository from which
        the merge target working copy was checked out.  And in
        Subversion 1.8, the behavior of  svn copy 
        was changed so that when you perform a copy from a foreign
        repository into an existing working copy, the resulting tree
        is incorporated into that working copy and scheduled for
        addition.  It&#39;s this  foreign repository
        copy  functionality that we&#39;ll use to bootstrap our
        vendor branch. So let&#39;s create our vendor branch.  We&#39;ll begin by
        creating a placeholder directory for all such vendor branches
        in our repository, and then checking out a working copy of
        that location. 
$ svn mkdir http://svn.example.com/projects/vendor \
            -m &quot;Create a container for vendor branches.&quot;
Committed revision 1160.
$ svn checkout http://svn.example.com/projects/vendor \
               /path/to/vendor
Checked out revision 1160.
$
 Now, we&#39;ll take advantage of Subversion&#39;s foreign
        repository copy support to get an exact copy of libcomplex
        1.0.0 including any Subversion properties stored on its
        files and directories from the vendor repository. 
$ cd /path/to/vendor
$ svn copy http://svn.othervendor.com/repos/libcomplex/tags/1.0.0 \
           libcomplex-custom
--- Copying from foreign repository URL &#39;http://svn.othervendor.com/repos/lib\
complex/tags/1.0.0&#39;:
A    libcomplex-custom
A    libcomplex-custom/README
A    libcomplex-custom/LICENSE
 
A    libcomplex-custom/src/code.c
A    libcomplex-custom/tests
A    libcomplex-custom/tests/TODO
$ svn commit -m &quot;Initialize libcomplex vendor branch from libcomplex 1.0.0.&quot;
Adding         libcomplex-custom
Adding         libcomplex-custom/README
Adding         libcomplex-custom/LICENSE
 
Adding         libcomplex-custom/src
Adding         libcomplex-custom/src/code.h
Adding         libcomplex-custom/src/code.c
Transmitting file data .......................................
Committed revision 1161.
$
 If you happen to be using an older version of
          Subversion, the closest available approximation of the new
          foreign repository copy support in  svn
          copy  is to instead import (via  svn
          import ) a working copy of the vendor&#39;s tag,
          including the  --no-auto-props 
          and  --no-ignore  options so that the
          complete tree and any of its versioned properties are
          accurately replicated in your own repository. Now that we have a vendor branch based on libcomplex 1.0.0,
        we can begin making the customizations to libcomplex required
        for our purposes, committing them directly to the vendor
        branch we&#39;ve created.  And of course, we can begin using
        libcomplex in our own application. Some time later, libcomplex 1.0.1 is released.  After
        reviewing its changes, we decide we&#39;d like to upgrade our
        vendor branch to the new version.  Here is where Subversion&#39;s
        foreign repository merge operation is useful.  We have in our
        vendor branch the original libcomplex 1.0.0 plus our
        customizations to it.  What we need now is to get the set of
        changes the vendor has made between 1.0.0 and 1.0.1 into our
        vendor branch, ideally without clobbering our own
        customizations.  This is precisely what the 2-URL form of
        the  svn merge  command is for. 
$ cd /path/to/vendor
$ svn merge http://svn.othervendor.com/repos/libcomplex/tags/1.0.0 \
            http://svn.othervendor.com/repos/libcomplex/tags/1.0.1 \
            libcomplex-custom
--- Merging differences between foreign repository URLs into &#39;.&#39;:
U    libcomplex-custom/src/code.h
C    libcomplex-custom/src/code.c
U    libcomplex-custom/README
Summary of conflicts:
  Text conflicts: 1
Conflict discovered in file &#39;libcomplex-custom/src/code.c&#39;.
Select: (p) postpone, (df) diff-full, (e) edit, (m) merge,
        (mc) mine-conflict, (tc) theirs-conflict, (s) show all options: 
 As you can see,  svn merge  has merged
        the changes required to make libcomplex 1.0.0 look like
        libcomplex 1.0.1 into our working copy.  In our example, it has
        even noticed and flagged a conflict on one file.   It seems
        the vendor modified a region of one of the files we also
        customized.  Subversion safely detects this conflict, and
        gives us the opportunity to resolve it so that our
        customizations to what is now libcomplex 1.0.1 continue to
        make sense.  (See  
        for more on resolving conflicts of this sort.) Once we&#39;ve resolved the conflicts and performed any
        testing or review we need, we can commit the changes to our
        vendor branch. 
$ svn status libcomplex-custom
M       libcomplex-custom/src/code.h
M       libcomplex-custom/src/code.c
M       libcomplex-custom/README
$ svn commit -m &quot;Upgrade vendor branch to libcomplex 1.0.1.&quot; \
             libcomplex-custom
Sending        libcomplex-custom/README
Sending        libcomplex-custom/src/code.h
Sending        libcomplex-custom/src/code.c
Transmitting file data ...
Committed revision 1282.
$
 That, in a nutshell, is how to manage vendor branches when
        the original source is Subversion-accessible.  There are some
        notable shortcomings, though.  First, foreign repository
        merges are not automatically tracked by Subversion itself like
        same-repository merges are.  This means the burden falls to
        the user to know which merges have been performed on their
        vendor branch, and just how to construct the next merge when
        upgrading that branch.  Also, as is the case for all of
        Subversion&#39;s merge support, renames in the merge sources can
        cause no small amount of complication and frustration.
        Unfortunately, at this time, we don&#39;t have a particularly
        solid recommendation to offer to alleviate that pain. Vendor Branches from Mirrored Sources In the previous section
        ( ) we
        looked at how to implement and maintain a vendor branch when
        the vendor drops are accessible via Subversion, which is the
        ideal scenario when it comes to vendor branches.  Subversion
        is pretty good at handling merges of stuff that&#39;s been
        Subversion-managed.  Unfortunately, it&#39;s not always the case
        that third-party libraries are publicly accessible via
        Subversion.  Many times, a project depends on a library which
        is delivered via only non-Subversion mechanisms, such as a
        source code release distribution tarball.  In such
        circumstances, we strongly recommend that you do all you can
        to get that non-Subversion information into Subversion as
        cleanly as possible.  So let&#39;s examine an approach to vendor
        branches in which the third-party library&#39;s various releases
        are mirrored within our own repository. Setting up the vendor branch the first time is pretty
        simple, really.  For our example, we&#39;ll assume that libcomplex
        1.0.0 is delivered via the common tarball mechanism.  To
        create our vendor branch, we&#39;ll first get the contents of the
        libcomplex 1.0.0 tarball into our repository as a read-only
        (by convention only) vendor tag of sorts. 
$ tar xvfz libcomplex-1.0.0.tar.gz
libcomplex-1.0.0/
libcomplex-1.0.0/README
libcomplex-1.0.0/LICENSE
 
libcomplex-1.0.0/src/code.c
libcomplex-1.0.0/tests
libcomplex-1.0.0/tests/TODO
$ svn import libcomplex-1.0.0 \
             http://svn.example.com/projects/vendor/libcomplex-1.0.0 \
             --no-ignore --no-auto-props \
             -m &quot;Import libcomplex 1.0.0 sources.&quot;
Adding         libcomplex-custom
Adding         libcomplex-custom/README
Adding         libcomplex-custom/LICENSE
 
Adding         libcomplex-custom/src
Adding         libcomplex-custom/src/code.h
Adding         libcomplex-custom/src/code.c
Transmitting file data .......................................
Committed revision 1160.
$
 Note that in our example, we used
        the  --no-ignore  option during import so that
        Subversion is sure to pick up every file in the vendor drop
        and not to omit any of them.  We also supply
        the  --no-auto-props  option so that our client
        doesn&#39;t manufacture property information which isn&#39;t present
        in the vendor drop. Technically, we could let
        the auto-props feature do its thing, but the key to making
        that work well is ensuring that each vendor drop gets
        identical auto-prop treatment. . Now that the first vendor release drop is present in our
        repository, we can create our vendor branch from it just as we
        would create any other branch using  svn
        copy . 
$ svn copy http://svn.example.com/projects/vendor/libcomplex-1.0.0 \
           http://svn.example.com/projects/vendor/libcomplex-custom \
           -m &quot;Initialize libcomplex vendor branch from libcomplex 1.0.0.&quot;
Committed revision 1161.
$
 Okay.  At this point we have a vendor branch based on
        libcomplex 1.0.0.  We are now poised to begin making the
        customizations to libcomplex required for our
        purposes committing them directly to the vendor branch
        we&#39;ve created and then to start using our customized
        libcomplex in our own application. Some time later, libcomplex 1.0.1 is released.  After
        reviewing its changes, we decide we&#39;d like to upgrade our
        vendor branch to the new version.  In order to perform that
        upgrade on our branch, we need to essentially apply the same
        set of changes the vendor has made between 1.0.0 and 1.0.1 to
        our vendor branch without clobbering our own customizations.
        The safest way to perform that application is to first get
        libcomplex 1.0.1 into our repository  as a delta
        against the libcomplex 1.0.0 code in our
        repository .  Afterwards, we&#39;ll use the 2-URL form
        of the  svn merge  command to replicate those
        same changes into our vendor branch. As it turns out, there are several different approaches we
        can take to to get libcomplex 1.0.1 into our repository in the
        right way. Using another  svn
        import  operation would be
        an  incorrect  approach, as the libcomplex
        1.0.0 and 1.0.1 branches would not have any common
        ancestry.   The approach we&#39;ll describe here
        is relatively rudimentary, but it will serve our illustrative
        needs. Remember, we want our mirror of the libcomplex 1.0.1
        vendor drop to share ancestry with our 1.0.0 vendor drop,
        which will produce the best results later when we need to
        merge the changes between those drops to our vendor branch.
        So we&#39;ll start by creating a libcomplex-1.0.1 branch as copy
        of our previously created libcomplex-1.0.0  vendor
        tag a copy which will eventually become a
        replica of libcomplex 1.0.1. 
$ svn copy http://svn.example.com/projects/vendor/libcomplex-1.0.0 \
           http://svn.example.com/projects/vendor/libcomplex-1.0.1 \
           -m &quot;Setup a construction zone for libcomplex 1.0.1.&quot;
Committed revision 1282.
$
 What we need now is to make a working copy of our
        libcomplex-1.0.1 branch, and then to make it actually look
        like libcomplex 1.0.1.  To do this, we&#39;ll take advantage of
        the fact that  svn checkout  can overlay an
        existing directory and, if the  --force  option
        is provided, do so in manner that allows the differences
        between the checked-out tree and the target tree that the
        checkout overlayed to remain as local modifications in the new
        working copy. 
$ tar xvfz libcomplex-1.0.1.tar.gz
libcomplex-1.0.1/
libcomplex-1.0.1/README
libcomplex-1.0.1/LICENSE
 
libcomplex-1.0.1/src/code.c
libcomplex-1.0.1/tests
libcomplex-1.0.1/tests/TODO
$ svn checkout http://svn.example.com/projects/vendor/libcomplex-1.0.1 \
               libcomplex-1.0.1 \
               --force
E    libcomplex-1.0.1/README
E    libcomplex-1.0.1/LICENSE
E    libcomplex-1.0.1/INSTALL
 
E    libcomplex-1.0.1/src/code.c
E    libcomplex-1.0.1/tests
E    libcomplex-1.0.1/tests/TODO
Checked out revision 1282.
$ svn status libcomplex-1.0.1
M       libcomplex-1.0.1/src/code.h
M       libcomplex-1.0.1/src/code.c
M       libcomplex-1.0.1/README
$
 As you can see, after checking out what was really
        libcomplex 1.0.0 atop the libcomplex 1.0.1 exploded tarball,
        we are left with a working copy that contains local
        modifications those modifications required to morph our
        previous vendor release drop into our new one. Admittedly, this is a pretty simple example.  The changes
        required to perform this particular upgrade involved merely
        content changes to existing files.  In reality, new versions
        of third-party libraries might also add or remove files or
        directories, might rename files or directories, and so on.  In
        those situations, it can be much more challenging to morph the
        new vendor tag into a state where it accurately reflects the
        vendor drop it claims to reflect.  We&#39;ll leave the details of
        such transformations as an exercise to the
        reader. Here&#39;s a hint, though:  svn
        add --force /path/to/working-copy --no-ignore
        --no-auto-props  is super handy for adding any new
        vendor drop items to version control in this
        situation. However we make it happen, once our new vendor tag working
        copy is reconciled with the original source distribution, we
        can commit those changes to our repository. 
$ svn commit -m &quot;Upgrade vendor branch to libcomplex 1.0.1.&quot; \
             libcomplex-1.0.1
Sending        libcomplex-1.0.1/README
Sending        libcomplex-1.0.1/src/code.h
Sending        libcomplex-1.0.1/src/code.c
Transmitting file data ...
Committed revision 1283.
$
 We&#39;re finally ready to upgrade our vendor branch.
        Remember, our goal is to get the changes made by the vendor
        between the 1.0.0 and 1.0.1 releases of their library into our
        vendor branch.  There is where a 2-URL  svn
        merge  operation, applied to a working copy of our
        vendor branch, comes into play. 
$ svn checkout http://svn.example.com/projects/vendor/libcomplex-custom \
               libcomplex-custom
E    libcomplex-custom/README
E    libcomplex-custom/LICENSE
E    libcomplex-custom/INSTALL
 
E    libcomplex-custom/src/code.c
E    libcomplex-custom/tests
E    libcomplex-custom/tests/TODO
Checked out revision 1283.
$ cd libcomplex-custom
$ svn merge ^/vendor/libcomplex-1.0.0 \
            ^/vendor/libcomplex-1.0.1
--- Merging differences between repository URLs into &#39;.&#39;:
U    src/code.h
C    src/code.c
U    README
Summary of conflicts:
  Text conflicts: 1
Conflict discovered in file &#39;src/code.c&#39;.
Select: (p) postpone, (df) diff-full, (e) edit, (m) merge,
        (mc) mine-conflict, (tc) theirs-conflict, (s) show all options: 
 As you can see,  svn merge  has merged
        the requisite changes into our working copy, flagging a
        conflict where the vendor modified the same region of one of
        the files as we did during our customizations.  Subversion
        detects this conflict, and gives us the opportunity to resolve
        it (using the methods described in
         ) so that our
        customizations to what is now libcomplex 1.0.1 continue to
        make sense.  Once we&#39;ve resolved the conflicts and performed
        any testing or review we need, we can commit the changes to
        our vendor branch. 
$ svn status
M       src/code.h
M       src/code.c
M       README
$ svn commit -m &quot;Upgrade vendor branch to libcomplex 1.0.1.&quot;
Sending        README
Sending        src/code.h
Sending        src/code.c
Transmitting file data ...
Committed revision 1284.
$
 Our vendor branch upgrade is complete.  And the next time
        we need to upgrade that branch, we&#39;ll follow the same
        procedure we used to upgrade it this time. To Branch or Not to Branch? To branch or not to branch that is an interesting
      question.  This chapter has provided thus far a pretty deep dive
      into the waters of branching and merging, topics which have
      historically been the premier source of Subversion user
      confusion.  As if the rote actions involved in branching and
      branch management aren&#39;t sometimes tricky enough, some users get
      hung up on deciding whether they need to branch at all.  As
      you&#39;ve learned, Subversion can handle common branching and
      branch management scenarios.  So, the decision of whether or not
      to branch a project&#39;s history is rarely a technical one.
      Rather, the social impact of the decision often carries more
      weight.  Let&#39;s examine some of the benefits and costs of using
      branches in a software project. The most obvious benefit of working on a branch is
      isolation.  Changes made to the branch don&#39;t affect the other
      lines of development in the project; changes made to those other
      lines don&#39;t affect the branch.  In this way, a branch can serve
      as a great place to experiment with new features, complex bug
      fixes, major code rewrites, and so on.  No matter how much stuff
      Sally breaks on her branch, Harry and the rest of the team can
      continue with their work unhindered outside the branch. Branches also provide a great way to organize related
      changes into readily identifiable collections.  For example, the
      changes which comprise the complete solution to a particular bug
      might be a list of non-sequential revision numbers.  You might
      describe them in human language as  revisions 1534, 1543,
      1587 and 1588 .  You&#39;d probably reproduce those numbers
      manually (or otherwise) in the issue tracker artifact which
      tracks the bug.  When porting the bug fix to other product
      versions, you&#39;d need to make sure to port all those revisions.
      But had those changes been made on a unique branch, you&#39;d find
      yourself referring only to that branch by its name in
      conversation, in issue tracker comments, and when porting
      changes. The unfortunate downside of branches, though, is that the
      very isolation that makes them so
      useful  can  be at odds with the
      collaborative needs of the project team.  Depending on the work
      habits of your project peers, changes made to branches might not
      get the kind of constructive review, criticism, and testing that
      changes made to the main line of development do.  The isolation
      of a branch can encourage users to forsake certain version
      control  best practices , leading to version
      history which is difficult to review  post
      facto .  Developers on long-lived branches
      sometimes need to work extra hard to ensure that the
      evolutionary direction of their isolated copy of the codebase is
      in harmony with the direction their peers are steering the main
      code lines.  Now, these drawbacks might be less of an issue for
      true exploratory branches aimed at experimenting with the future
      of a codebase with no expectation of reintegrating the results
      back into the main development lines mere policy needn&#39;t
      be a vision-killer!  But the simple fact remains that projects
      generally benefit from an orderly approach to version control
      where code and code changes enjoy the review and comprehension
      of more than one team member. That&#39;s not to say that there are no technical penalties to
      branching.  Pardon us while we  go meta  for a bit
      here.  If you think about it, every time you checkout a
      Subversion working copy, you&#39;re creating a branch of sorts of
      your project.  It&#39;s a special sort of branch.  It lives only on
      your client machine; not in the repository.  You synchronize
      this branch with changes made in the repository
      using  svn update which acts almost like
      a special-cased, simplified form of an  svn
      merge  command. Actually, you
       could  use  svn merge
      -r LAST_UPDATED_REV :HEAD . 
      in your working copy to quite literally merge in all the
      repository changes since your last update if really wanted
      to!  You effectively reintegrate your branch
      each time you run  svn commit .  So, in that
      special sense, Subversion users deal with branches and merges
      all the time.  Given the similarities between updating and
      merging, it&#39;s no surprise, then, that the areas in which
      Subversion seems to have the most shortcomings namely,
      handling file and directory renames and dealing with tree
      conflicts in general are problematic for both
      the  svn update  and  svn
      merge  operations.  Unfortunately,  svn
      merge  has a harder time of it precisely because of the
      fact that, for every way in which  svn update 
      is a special-cased, simplified kind of generic merge operation,
      a true Subversion merge is neither special-cased nor simplified.
      For this reason, merges perform much more slowly than updates,
      require explicit tracking (via
      the  svn:mergeinfo  property we&#39;ve discussed in
      this chapter) and history-crunching arithmetic, and generally
      offer more opportunities for something to go awry. To branch or not to branch?  Ultimately, that depends on
      what your team needs in order to find that sweet balance of
      collaboration and isolation. Summary We covered a lot of ground in this chapter.  We
      discussed the concepts of tags and branches and demonstrated
      how Subversion implements these concepts by copying directories
      with the  svn copy  command.  We showed how
      to use  svn merge  to copy changes from one
      branch to another or roll back bad changes.  We went over
      the use of  svn switch  to create
      mixed-location working copies.  And we talked about how one
      might manage the organization and lifetimes of branches in a
      repository. Remember the Subversion mantra: branches and tags are cheap.
      So don&#39;t be afraid to use them when needed! As a helpful reminder of all the operations we discussed,
      here is handy reference table you can consult as
      you begin to make use of branches. Branching and merging commands Action Command Create a branch or tag svn copy  URL1   URL2 Switch a working copy to a branch or tag svn switch  URL Synchronize a branch with trunk svn merge  trunkURL ; svn commit See merge history or eligible changesets svn mergeinfo  SOURCE   TARGET Merge a branch back into trunk svn merge  branchURL ; svn commit Merge one specific change svn merge -c  REV   URL ; svn commit Merge a range of changes svn merge -r  REV1 : REV2   URL ; svn commit Block a change from automatic merging svn merge -c  REV  --record-only  URL ; svn commit Preview a merge svn merge  URL  --dry-run Abandon merge results svn revert -R . Resurrect something from history svn copy  URL @ REV   localPATH Undo a committed change svn merge -c - REV   URL ; svn commit Examine merge-sensitive history svn log -g; svn blame -g Create a tag from a working copy svn copy .  tagURL Rearrange a branch or tag svn move  URL1   URL2 Remove a branch or tag svn delete  URL Repository Administration The Subversion repository is the central storehouse of all
    your versioned data.  As such, it becomes an obvious candidate for
    all the love and attention an administrator can offer.  While the
    repository is generally a low-maintenance item, it is important to
    understand how to properly configure and care for it so that
    potential problems are avoided, and so actual problems are safely
    resolved. In this chapter, we&#39;ll discuss how to create and configure a
    Subversion repository.  We&#39;ll also talk about repository
    maintenance, providing examples of how and when to use various
    related tools provided with Subversion.  We&#39;ll address some common
    questions and mistakes and give some suggestions on how to arrange
    the data in the repository. If you plan to access a Subversion repository only in the role
    of a user whose data is under version control (i.e., via a
    Subversion client), you can skip this chapter altogether.
    However, if you are, or wish to become, a Subversion repository
    administrator, This may sound really prestigious
    and lofty, but we&#39;re just talking about anyone who is interested
    in that mysterious realm beyond the working copy where everyone&#39;s
    data hangs out.  this chapter is for you. The Subversion Repository, Defined Before jumping into the broader topic of repository
      administration, let&#39;s further define what a repository is.  How
      does it look?  How does it feel?  Does it take its tea hot or
      iced, sweetened, and with lemon?  As an administrator, you&#39;ll be
      expected to understand the composition of a repository both from
      a literal, OS-level perspective how a repository looks and
      acts with respect to non-Subversion tools and from a
      logical perspective dealing with how data is represented
       inside  the repository. Seen through the eyes of a typical file browser application
      (such as Windows Explorer) or command-line based filesystem
      navigation tools, the Subversion repository is just another
      directory full of stuff.  There are some subdirectories with
      human-readable configuration files in them, some subdirectories
      with some not-so-human-readable data files, and so on.  As in
      other areas of the Subversion design, modularity is given high
      regard, and hierarchical organization is preferred to cluttered
      chaos.  So a shallow glance into a typical repository from a
      nuts-and-bolts perspective is sufficient to reveal the basic
      components of the repository: 
$ ls repos
conf/  db/  format  hooks/  locks/  README.txt
 Here&#39;s a quick fly-by overview of what exactly you&#39;re seeing
      in this directory listing.  (Don&#39;t get bogged down in the
      terminology detailed coverage of these components exists
      elsewhere in this and other chapters.) conf/ This directory is a container for configuration
            files. db/ This directory contains the data store for all of your
            versioned data. Strictly speaking,
            Subversion doesn&#39;t dictate that the versioned data live
            here, and there are known (albeit proprietary) alternative
            backend storage implementations which do not, in fact,
            store data in this directory. format This file describes the repository&#39;s internal
            organizational scheme.  (As it turns out,
            the  db/  subdirectory sometimes also
            contains a  format  file which
            describes only the contents of that subdirectory and which
            is not to be confused with this file.) hooks/ This directory contains hook script templates and
            hook scripts, if any have been installed. locks/ Subversion uses this directory to house repository
            lock files, used for managing concurrent access to the
            repository. README.txt This is a brief text file containing merely a notice
            to readers that the directory they are looking in is a
            Subversion repository. WebDAV activities Prior to Subversion 1.5, the on-disk repository
        structure also always contained a  dav 
        subdirectory.  mod_dav_svn  used this
        directory to store information about
        WebDAV  activities mappings of
        high-level WebDAV protocol concepts to Subversion commit
        transactions.  Subversion 1.5 changed that behavior, moving
        ownership of the activities directory, and the ability to
        configure its location, into  mod_dav_svn 
        itself.  Now, new repositories will not necessarily have
        a  dav  subdirectory
        unless  mod_dav_svn  is in use and hasn&#39;t
        been configured to store its activities database elsewhere.
        See  
        for more information. Of course, when accessed via the Subversion libraries, this
      otherwise unremarkable collection of files and directories
      suddenly becomes an implementation of a virtual, versioned
      filesystem, complete with customizable event triggers.  This
      filesystem has its own notions of directories and files, very
      similar to the notions of such things held by real filesystems
      (such as NTFS, FAT32, ext3, etc.).  But this is a special
      filesystem it hangs these directories and files from
      revisions, keeping all the changes you&#39;ve ever made to them
      safely stored and forever accessible.  This is where the
      entirety of your versioned data lives. Strategies for Repository Deployment Due largely to the simplicity of the overall design of the
      Subversion repository and the technologies on which it relies,
      creating and configuring a repository are fairly straightforward
      tasks.  There are a few preliminary decisions you&#39;ll want to
      make, but the actual work involved in any given setup of a
      Subversion repository is pretty basic, tending toward
      mindless repetition if you find yourself setting up multiples of
      these things. Some things you&#39;ll want to consider beforehand, though, are: What data do you expect to live in your repository (or
          repositories), and how will that data be organized? Where will your repository live, and how will it be
          accessed? What types of access control and repository event
          reporting do you need? Which of the available types of data store do you want
          to use? In this section, we&#39;ll try to help you answer those
      questions. Planning Your Repository Organization While Subversion allows you to move around versioned files
        and directories without any loss of information, and even
        provides ways of moving whole sets of versioned history from
        one repository to another, doing so can greatly disrupt the
        workflow of those who access the repository often and come to
        expect things to be at certain locations.  So before creating
        a new repository, try to peer into the future a bit; plan
        ahead before placing your data under version control.  By
        conscientiously  laying out  your repository or
        repositories and their versioned contents ahead of time, you
        can prevent many future headaches. Let&#39;s assume that as repository administrator, you will be
        responsible for supporting the version control system for
        several projects.  Your first decision is whether to use a
        single repository for multiple projects, or to give each
        project its own repository, or some compromise of these
        two. There are benefits to using a single repository for
        multiple projects, most obviously the lack of duplicated
        maintenance.  A single repository means that there is one set
        of hook programs, one thing to routinely back up, one thing to
        dump and load if Subversion releases an incompatible new
        version, and so on.  Also, you can move data between projects
        easily, without losing any historical versioning
        information. The downside of using a single repository is that
        different projects may have different requirements in terms of
        the repository event triggers, such as needing to send commit
        notification emails to different mailing lists, or having
        different definitions about what does and does not constitute
        a legitimate commit.  These aren&#39;t insurmountable problems, of
        course it just means that all of your hook scripts have
        to be sensitive to the layout of your repository rather than
        assuming that the whole repository is associated with a single
        group of people.  Also, remember that Subversion uses
        repository-global revision numbers.  While those numbers don&#39;t
        have any particular magical powers, some folks still don&#39;t
        like the fact that even though no changes have been made to
        their project lately, the youngest revision number for the
        repository keeps climbing because other projects are actively
        adding new revisions. Whether founded in
        ignorance or in poorly considered concepts about how to derive
        legitimate software development metrics, global revision
        numbers are a silly thing to fear,
        and  not  the kind of thing you should
        weigh when deciding how to arrange your projects and
        repositories. A middle-ground approach can be taken, too.  For example,
        projects can be grouped by how well they relate to each other.
        You might have a few repositories with a handful of projects
        in each repository.  That way, projects that are likely to
        want to share data can do so easily, and as new revisions are
        added to the repository, at least the developers know that
        those new revisions are at least remotely related to everyone
        who uses that repository. project root 

        After deciding how to organize your projects with respect
        to repositories, you&#39;ll probably want to think about directory
        hierarchies within the repositories themselves.  Because
        Subversion uses regular directory copies for branching and
        tagging (see  ), the
        Subversion community recommends that you choose a repository
        location for each project
        root the  topmost  directory
        that contains data related to that project and then
        create three subdirectories beneath that root:
         trunk , meaning the directory under which
        the main project development occurs;
         branches , which is a directory in which
        to create various named branches of the main development line;
        and  tags , which is a collection of tree
        snapshots that are created, and perhaps destroyed, but never
        changed. The  trunk ,
         tags , and  branches 
        trio is sometimes referred to as  the TTB
        directories. For example, your repository might look like this: 
/
   calc/
      trunk/
      tags/
      branches/
   calendar/
      trunk/
      tags/
      branches/
   spreadsheet/
      trunk/
      tags/
      branches/
    
 Note that it doesn&#39;t matter where in your repository each
        project root is.  If you have only one project per repository,
        the logical place to put each project root is at the root of
        that project&#39;s respective repository.  If you have multiple
        projects, you might want to arrange them in groups inside the
        repository, perhaps putting projects with similar goals or
        shared code in the same subdirectory, or maybe just grouping
        them alphabetically.  Such an arrangement might look
        like this: 
/
   utils/
      calc/
         trunk/
         tags/
         branches/
      calendar/
         trunk/
         tags/
         branches/
       
   office/
      spreadsheet/
         trunk/
         tags/
         branches/
       
 Lay out your repository in whatever way you see fit.
        Subversion does not expect or enforce a particular layout in
        its eyes, a directory is a directory is a directory.
        Ultimately, you should choose the repository arrangement that
        meets the needs of the people who work on the projects that
        live there. In the name of full disclosure, though, we&#39;ll mention
        another very common layout.  In this layout, the
         trunk ,  tags , and
         branches  directories live in the root
        directory of your repository, and your projects are in
        subdirectories beneath those, like so: 
/
   trunk/
      calc/
      calendar/
      spreadsheet/
       
   tags/
      calc/
      calendar/
      spreadsheet/
       
   branches/
      calc/
      calendar/
      spreadsheet/
       
 There&#39;s nothing particularly incorrect about such a
        layout, but it may or may not seem as intuitive for your
        users.  Especially in large, multiproject situations with
        many users, those users may tend to be familiar with only one
        or two of the projects in the repository.  But the
        projects-as-branch-siblings approach tends to deemphasize project
        individuality and focus on the entire set of projects as a
        single entity.  That&#39;s a social issue, though.  We like our
        originally suggested arrangement for purely practical
        reasons it&#39;s easier to ask about (or modify, or migrate
        elsewhere) the entire history of a single project when there&#39;s
        a single repository path that holds the entire
        history past, present, tagged, and branched for
        that project and that project alone. Deciding Where and How to Host Your Repository Before creating your Subversion repository, an obvious
        question you&#39;ll need to answer is where the thing is going to
        live.  This is strongly connected to myriad other
        questions involving how the repository will be accessed (via a
        Subversion server or directly), by whom (users behind your
        corporate firewall or the whole world out on the open
        Internet), what other services you&#39;ll be providing around
        Subversion (repository browsing interfaces, email-based
        commit notification, etc.), your data backup strategy, and so
        on. We cover server choice and configuration in  , but the point we&#39;d like to
        briefly make here is simply that the answers to some of these
        other questions might have implications that force your hand
        when deciding where your repository will live.  For example,
        certain deployment scenarios might require accessing the
        repository via a remote filesystem from multiple computers, in
        which case (as you&#39;ll read in the next section) your choice of
        a repository backend data store turns out not to be a choice
        at all because only one of the available backends will work
        in this scenario. Addressing each possible way to deploy
        Subversion is both impossible and outside the scope of this
        book.  We simply encourage you to evaluate your options using
        these pages and other sources as your reference material and to
        plan ahead. Choosing a Data Store FSFS Berkeley DB BDB Berkeley DB repositories filesystem Subversion provides two options for the
        type of underlying data store often referred to as
         the backend  or, somewhat confusingly,
         the (versioned) filesystem that each
        repository uses.  One type of data store keeps everything in a
        Berkeley DB (or BDB) database environment; repositories that
        use this type are often referred to as being
         BDB-backed.  The other type stores data in
        ordinary flat files, using a custom format.  Subversion
        developers have adopted the habit of referring to this latter
        data storage mechanism
        as  FSFS Often
        pronounced  fuzz-fuzz,  if Jack Repenning has
        anything to say about it.  (This book, however, assumes that
        the reader is
        thinking  eff-ess-eff-ess. ) a
        versioned filesystem implementation that uses the native OS
        filesystem directly rather than via a database library
        or some other abstraction layer to store data. 
        gives a comparative overview of Berkeley DB and FSFS
        repositories. Repository data store comparison Category Feature Berkeley DB FSFS Reliability Data integrity When properly deployed, extremely reliable;
                Berkeley DB 4.4 brings auto-recovery Older versions had some rarely demonstrated, but
                data-destroying bugs Sensitivity to interruptions Very; crashes and permission problems can leave the
                database  wedged,  requiring journaled
                recovery procedures Quite insensitive Accessibility Usable from a read-only mount No Yes Platform-independent storage No Yes Usable over network filesystems Generally, no Yes Group permissions handling Sensitive to user umask problems; best if accessed
                by only one user Works around umask problems Scalability Repository disk usage Larger (especially if logfiles aren&#39;t purged) Smaller Number of revision trees Database; no problems Some older native filesystems don&#39;t scale well with
                thousands of entries in a single directory Directories with many files Slower Faster Performance Checking out latest revision No meaningful difference No meaningful difference Large commits Slower overall, but cost is amortized across the
                lifetime of the commit Faster overall, but finalization delay may cause 
                client timeouts There are advantages and disadvantages to each of these
        two backend types.  Neither of them is more
         official  than the other, though the newer FSFS
        is the default data store as of Subversion 1.2.  Both are
        reliable enough to trust with your versioned data.  But as you
        can see in  , the FSFS
        backend provides quite a bit more flexibility in terms of its
        supported deployment scenarios.  More flexibility means you
        have to work a little harder to find ways to deploy it
        incorrectly.  Those reasons plus the fact that not using
        Berkeley DB means there&#39;s one fewer component in the
        system largely explain why today almost everyone uses
        the FSFS backend when creating new repositories. Fortunately, most programs that access Subversion
        repositories are blissfully ignorant of which backend data
        store is in use.  And you aren&#39;t even necessarily stuck with
        your first choice of a data store in the event that you
        change your mind later, Subversion provides ways of migrating
        your repository&#39;s data into another repository that uses a
        different backend data store.  We talk more about that later
        in this chapter. The following subsections provide a more detailed look at
        the available backend data store types. Berkeley DB Berkeley DB When the initial design phase of Subversion was in
          progress, the developers decided to use Berkeley DB for a
          variety of reasons, including its open source license,
          transaction support, reliability, performance, API
          simplicity, thread safety, support for cursors, and so
          on. Berkeley DB provides real transaction
          support perhaps its most powerful feature.  Multiple
          processes accessing your Subversion repositories don&#39;t have
          to worry about accidentally clobbering each other&#39;s data.
          The isolation provided by the transaction system is such
          that for any given operation, the Subversion repository code
          sees a static view of the database not a database that
          is constantly changing at the hand of some other
          process and can make decisions based on that view.  If
          the decision made happens to conflict with what another
          process is doing, the entire operation is rolled back as though
          it never happened, and Subversion gracefully retries the
          operation against a new, updated (and yet still static) view
          of the database. Another great feature of Berkeley DB is  hot
          backups the ability to back up the
          database environment without taking it
           offline.  We&#39;ll discuss how to back up your
          repository later in this chapter (in  ), but the benefits
          of being able to make fully functional copies of your
          repositories without any downtime should be obvious. Berkeley DB is also a very reliable database system when
          properly used.  Subversion uses Berkeley DB&#39;s logging
          facilities, which means that the database first writes to
          on-disk logfiles a description of any modifications it is
          about to make, and then makes the modification itself.  This
          is to ensure that if anything goes wrong, the database
          system can back up to a previous
           checkpoint a location in the
          logfiles known not to be corrupt and replay
          transactions until the data is restored to a usable state.
          See   later
          in this chapter for more about Berkeley DB logfiles. But every rose has its thorn, and so we must note some
          known limitations of Berkeley DB.  First, Berkeley DB
          environments are not portable.  You cannot simply copy a
          Subversion repository that was created on a Unix system onto
          a Windows system and expect it to work.  While much of the
          Berkeley DB database format is architecture-independent,
          other aspects of the environment are not.
          Second, Subversion uses Berkeley DB in a way that will not
          operate on Windows 95/98 systems if you need to house
          a BDB-backed repository on a Windows machine, stick with
          Windows 2000 or later. While Berkeley DB promises to behave correctly on
          network shares that meet a particular set of
          specifications, Berkeley DB requires that the
          underlying filesystem implement strict POSIX locking
          semantics, and more importantly, the ability to map files
          directly into process memory.  most
          networked filesystem types and appliances do
           not  actually meet those requirements.
          And in no case can you allow a BDB-backed repository that
          resides on a network share to be accessed by multiple
          clients of that share at once (which quite often is the
          whole point of having the repository live on a network share
          in the first place). If you attempt to use Berkeley DB on a noncompliant
            remote filesystem, the results are unpredictable you
            may see mysterious errors right away, or it may be months
            before you discover that your repository database is
            subtly corrupted.  You should strongly consider using the
            FSFS data store for repositories that need to live on a
            network share. Finally, because Berkeley DB is a library linked
          directly into Subversion, it&#39;s more sensitive to
          interruptions than a typical relational database system.
          Most SQL systems, for example, have a dedicated server
          process that mediates all access to tables.  If a program
          accessing the database crashes for some reason, the database
          daemon notices the lost connection and cleans up any mess
          left behind.  And because the database daemon is the only
          process accessing the tables, applications don&#39;t need to
          worry about permission conflicts.  These things are not the
          case with Berkeley DB, however.  Subversion (and programs
          using Subversion libraries) access the database tables
          directly, which means that a program crash can leave the
          database in a temporarily inconsistent, inaccessible state.
          When this happens, an administrator needs to ask Berkeley DB
          to restore to a checkpoint, which is a bit of an annoyance.
          Other things can cause a repository to  wedge 
          besides crashed processes, such as programs conflicting over
          ownership and permissions on the database files. Berkeley DB 4.4 brings (to Subversion 1.4 and later)
            the ability for Subversion to automatically and
            transparently recover Berkeley DB environments in need of
            such recovery.  When a Subversion process attaches to a
            repository&#39;s Berkeley DB environment, it uses some process
            accounting mechanisms to detect any unclean disconnections
            by previous processes, performs any necessary recovery,
            and then continues on as though nothing happened.  This
            doesn&#39;t completely eliminate instances of repository
            wedging, but it does drastically reduce the amount of
            human interaction required to recover from them. So while a Berkeley DB repository is quite fast and
          scalable, it&#39;s best used by a single server process running
          as one user such as Apache&#39;s  httpd 
          or  svnserve  (see  ) rather than accessing it
          as many different users via  file://  or
           svn+ssh://  URLs.  If you&#39;re accessing a Berkeley
          DB repository directly as multiple users, be sure to read
            later in this
          chapter. FSFS FSFS In mid-2004, a second type of repository storage
          system one that doesn&#39;t use a database at
          all came into being.  An FSFS repository stores the
          changes associated with a revision in a single file, and so
          all of a repository&#39;s revisions can be found in a single
          subdirectory full of numbered files.  Transactions are
          created in separate subdirectories as individual files.
          When complete, the transaction file is renamed and moved
          into the revisions directory, thus guaranteeing that commits
          are atomic.  And because a revision file is permanent and
          unchanging, the repository also can be backed up while
           hot,  just like a BDB-backed
          repository. Revision files and shards FSFS repositories contain files that describe the
            changes made in a single revision, and files that contain
            the revision properties associated with a single revision.
            Repositories created in versions of Subversion prior to
            1.5 keep these files in two directories one for each
            type of file.  As new revisions are committed to the
            repository, Subversion drops more files into these two
            directories over time, the number of these files in
            each directory can grow to be quite large.  This has been
            observed to cause performance problems on certain
            network-based filesystems. FSFS sharding Subversion 1.5 creates FSFS-backed
            repositories using a slightly modified layout in which the
            contents of these two directories
            are  sharded , or scattered across
            several subdirectories.  This can greatly reduce the time
            it takes the system to locate any one of these files, and
            therefore increases the overall performance of Subversion
            when reading from the repository. FSFS packing Subversion 1.6 and later takes the sharded
            layout one step further, allowing administrators to
            optionally  pack  each of their
            repository shards up into a single multi-revision file.
            This can have both performance and disk usage benefits.
            See
             
            for more information. The FSFS revision files describe a revision&#39;s
          directory structure, file contents, and deltas against files
          in other revision trees.  Unlike a Berkeley DB database,
          this storage format is portable across different operating
          systems and isn&#39;t sensitive to CPU architecture.  Because
          no journaling or shared-memory files are being used, the
          repository can be safely accessed over a network filesystem
          and examined in a read-only environment.  The lack of
          database overhead also means the overall repository
          size is a bit smaller. FSFS has different performance characteristics, too.
          When committing a directory with a huge number of files,
          FSFS is able to more quickly append directory entries.  On
          the other hand, FSFS has a longer delay when finalizing a
          commit while it performs tasks that the BDB backend
          amortizes across the lifetime of the commit, which could in
          extreme cases cause clients to time out while waiting for a
          response. The most important distinction, however, is FSFS&#39;s
          imperviousness to wedging when something goes wrong.  If a
          process using a Berkeley DB database runs into a permissions
          problem or suddenly crashes, the database can be left in an
          unusable state until an administrator recovers it.  If the
          same scenarios happen to a process using an FSFS repository,
          the repository isn&#39;t affected at all.  At worst, some
          transaction data is left behind. Creating and Configuring Your Repository Earlier in this chapter (in
       ), we looked at some
      of the important decisions that should be made before creating
      and configuring your Subversion repository.  Now, we finally get
      to get our hands dirty!  In this section, we&#39;ll see how to
      actually create a Subversion repository and configure it to
      perform custom actions when special repository events
      occur. Creating the Repository Subversion repository creation is an incredibly simple
        task.  The  svnadmin  utility that comes with
        Subversion provides a subcommand ( svnadmin
        create ) for doing just that. 
$ # Create a repository
$ svnadmin create /var/svn/repos
$
 Assuming that the parent directory 
         /var/svn  exists and that you have
        sufficient permissions to modify that directory, the previous
        command creates a new repository in the directory
         /var/svn/repos , and with the default
        filesystem data store (FSFS).  You can explicitly choose the
        filesystem type using the  --fs-type  argument,
        which accepts as a parameter either  fsfs  or
         bdb . 
$ # Create an FSFS-backed repository
$ svnadmin create --fs-type fsfs /var/svn/repos
$
 
# Create a Berkeley-DB-backed repository
$ svnadmin create --fs-type bdb /var/svn/repos
$
 After running this simple command, you have a Subversion
        repository.  Depending on how users will access this new
        repository, you might need to fiddle with its filesystem
        permissions.  But since basic system administration is rather
        outside the scope of this text, we&#39;ll leave further
        exploration of that topic as an exercise to the reader. The path argument to  svnadmin  is just
          a regular filesystem path and not a URL like the
           svn  client program uses when referring to
          repositories.  Both  svnadmin  and
           svnlook  are considered server-side
          utilities they are used on the machine where the
          repository resides to examine or modify aspects of the
          repository, and are in fact unable to perform tasks across a
          network.  A common mistake made by Subversion newcomers is
          trying to pass URLs (even  local 
           file://  ones) to these two programs. Present in the  db/  subdirectory of
        your repository is the implementation of the versioned
        filesystem.  Your new repository&#39;s versioned filesystem begins
        life at revision 0, which is defined to consist of nothing but
        the top-level root ( / ) directory.
        Initially, revision 0 also has a single revision property,
         svn:date , set to the time at which the
        repository was created. Now that you have a repository, it&#39;s time to customize
        it. While some parts of a Subversion repository such
          as the configuration files and hook scripts are meant
          to be examined and modified manually, you shouldn&#39;t (and
          shouldn&#39;t need to) tamper with the other parts of the
          repository  by hand.   The
           svnadmin  tool should be sufficient for
          any changes necessary to your repository, or you can look to
          third-party tools (such as Berkeley DB&#39;s tool suite) for
          tweaking relevant subsections of the repository.  Do
           not  attempt manual manipulation of your
          version control history by poking and prodding around in
          your repository&#39;s data store files! Implementing Repository Hooks hook scripts hooks hook scripts repositories hooks hook scripts A  hook  is a program
        triggered by some repository event, such as the creation of a
        new revision or the modification of an unversioned property.
        Some hooks (the so-called  pre hooks ) run in
        advance of a repository operation and provide a means by which
        to both report what is about to happen and prevent it from
        happening at all.  Other hooks (the  post hooks )
        run after the completion of a repository event and are useful
        for performing tasks that examine but don&#39;t
        modify the repository.  Each hook is handed enough
        information to tell what that event is (or was), the specific
        repository changes proposed (or completed), and the username
        of the person who triggered the event. The  hooks  subdirectory is, by
        default, filled with templates for various repository
        hooks: 
$ ls repos/hooks/
post-commit.tmpl          post-unlock.tmpl  pre-revprop-change.tmpl
post-lock.tmpl            pre-commit.tmpl   pre-unlock.tmpl
post-revprop-change.tmpl  pre-lock.tmpl     start-commit.tmpl
$
 There is one template for each hook that the Subversion
        repository supports; by examining the contents of those
        template scripts, you can see what triggers each script
        to run and what data is passed to that script.  Also present
        in many of these templates are examples of how one might use
        that script, in conjunction with other Subversion-supplied
        programs, to perform common useful tasks.  To actually install
        a working hook, you need only place some executable program or
        script into the  repos/hooks  directory,
        which can be executed as the name (such as
         start-commit  or
         post-commit ) of the hook. On Unix platforms, this means supplying a script or
        program (which could be a shell script, a Python program, a
        compiled C binary, or any number of other things) named
        exactly like the name of the hook.  Of course, the template
        files are present for more than just informational
        purposes the easiest way to install a hook on Unix
        platforms is to simply copy the appropriate template file to a
        new file that lacks the  .tmpl  extension,
        customize the hook&#39;s contents, and ensure that the script is
        executable.  Windows, however, uses file extensions to
        determine whether a program is executable, so you would
        need to supply a program whose basename is the name of the
        hook and whose extension is one of the special extensions
        recognized by Windows for executable programs, such as
         .exe  for programs and
         .bat  for batch files. Subversion executes hooks as the same user who owns the
        process that is accessing the Subversion repository.  In most
        cases, the repository is being accessed via a Subversion
        server, so this user is the same user as whom the server
        runs on the system.  The hooks themselves will need to be
        configured with OS-level permissions that allow that user to
        execute them.  Also, this means that any programs or files
        (including the Subversion repository) accessed directly
        or indirectly by the hook will be accessed as the same user.
        In other words, be alert to potential permission-related
        problems that could prevent the hook from performing the tasks
        it is designed to perform. There are several hooks implemented by the Subversion
        repository, and you can get details about each of them in
         .  As a repository
        administrator, you&#39;ll need to decide which hooks you wish
        to implement (by way of providing an appropriately named and
        permissioned hook program), and how.  When you make this
        decision, keep in mind
        the big picture of how your repository is deployed.
        For example, if you are using server configuration
        to determine which users are permitted to commit
        changes to your repository, you don&#39;t need to do this
        sort of access control via the hook system. Hook script environment configuration By default, Subversion executes hook scripts with an
          empty environment that is, no environment variables
          are set at all, not even  $PATH 
          (or  %PATH% , under Windows).  Because of
          this, many administrators are baffled when their hook
          program runs fine by hand, but doesn&#39;t work when invoked by
          Subversion.  Administrators have historically worked around
          this problem by manually setting all the environment
          variables their hook scripts need in the scripts
          themselves. Subversion 1.8 introduces a new way to manage the
          environment of Subversion-executed hook scripts the
          hook script environment configuration file.  If a Subversion
          server finds a file named  hooks-env  in
          the repository&#39;s  conf/  subdirectory, it
          parses that file as an INI-formatted configuration file and
          applies the option names and variables found therein to the
          hook script&#39;s execution environment as environment
          variables. The syntax of the  hooks-env  file is
          pretty straightforward: each section name is the name of a
          hook script (such as  pre-commit 
          or  post-revprop-change , and the
          configuration items inside that section are treated as
          mappings of environment variable names to desired values.
          Additionally, there is a
          special  [default]  section, which can be
          used to configure environment variable mappings that should
          be applied to  all  hook scripts (unless
          explicitly overridden by per-hook-script settings).  See
           
          for a sample  hooks-env  configuration
          file. hooks-env (custom hook script environment
            configuration) 
# All scripts should use a UTF-8 locale and have our hook script
# utilities directory on the search path.

[default]
LANG = en_US.UTF-8
PATH = /usr/local/svn/tools:/usr/bin


# The post-commit and post-revprop-change scripts want to run
# programs from our custom synctools replication software suite, too.

[post-commit]
PATH = /usr/local/synctools-1.1/bin:%(PATH)s

[post-revprop-change]
PATH = /usr/local/synctools-1.1/bin:%(PATH)s
  also demonstrates the nifty string substitution syntax
            found in Subversion&#39;s configuration file parser.  In this
            example, the value of the  PATH 
            option pulled from the  [default] 
            section of the file is substituted in place of
            the  %(PATH)s  placeholder text in the
            per-hook sections.  For more about this special syntax,
            see the  README.txt  file which lives
            in the Subversion runtime configuration directory.  (And
            for more information about that directory, see
             .) Of course, having exact duplicates of your custom hook
          script environment configuration files in every single
          repository&#39;s  conf/  directory could get
          cumbersome, especially when you need to make changes to them
          all.  So Subversion&#39;s servers allow you to specify an
          alternate (possibly shared) location for this configuration
          information. Common uses for hook scripts Repository hook scripts can offer a wide range of
          utility, but most tend to fall into a few basic categories:
          notification, validation, and replication. Notification scripts are those which tell someone that
          something happened.  The most common of these found in a
          Subversion service offering involve programs which send
          commit and revision property change notification emails to
          project members, driven by the post-commit and
          post-revprop-change hooks, respectively.  There are numerous
          other notification approaches, from issue tracker integration
          scripts to scripts which operate as IRC bots to announce
          that something&#39;s changed in the repository. On the validation side of things, the start-commit and
          pre-commit hooks are widely used to allow or disallow
          commits based on various criteria: the author of the commit,
          the formatting and/or content of the log message which describes the
          commit, and even the low-level details of the changes made
          to files and directories in the commit.  Likewise, the
          pre-revprop-change hook acts as the gateway to revision
          property changes, which is an especially valuable role
          considering the fact that revision properties are not
          themselves versioned, and can therefore only be modified
          destructively. One special class of change validation that has seen
          widespread use since Subversion 1.5 was released is
          validation of the committing client software itself.  When
          Subversion&#39;s merge tracking feature (described extensively
          in  ) was introduced in
          that release, Subversion administrators needed a way to
          ensure that once users of their repositories started using
          the new feature that  all  their merges
          were tracked.  To reduce the chance of someone committing an
          untracked merge to the repository, they used start-commit
          hooks to examine the feature capabilities string advertised
          by Subversion clients.  If the committing client didn&#39;t
          advertise support for merge tracking, the commit was denied
          with instructions to the user to immediately update their
          Subversion client!
            provides
          an example of a start-commit script which does precisely
          this. start-commit hook to require merge tracking
            support 
#!/usr/bin/env python
import sys

# sys.argv[3] is a colon-delimited capabilities list
if &#39;mergeinfo&#39; not in sys.argv[3].split(&#39;:&#39;):
  sys.stderr.write(&quot;&quot;&quot;\
ERROR: Commits to this repository must be made using Subversion
clients which support the merge tracking feature.  Please upgrade
your client to at least Subversion 1.5.0.
&quot;&quot;&quot;)
  sys.exit(1)
 properties ephemeral transaction properties Beginning in Subversion 1.8, clients committing
          against a Subversion 1.8 server will still provide the
          feature capabilities string, but will also provide
          additional information about themselves by way
          of  ephemeral transaction properties .
          Ephemeral transaction properties are essentially revision
          properties which are set on the commit transaction by the
          client at the earliest opportunity while committing, but
          which are automatically removed by the server immediately
          prior to the transaction becoming a finalized revision.  You
          can inspect these properties using the same tools with which
          you&#39;d inspect other unversioned properties set on commit
          transactions during the timeframe between which the
          start-commit and pre-commit repository hook scripts would
          operate. The following are the ephemeral transaction properties
          which Subversion currently provides and implements: svn:txn-client-compat-version Carries the Subversion library version string with
                which the committing client claims compatibility.
                This is useful for deciding whether the client
                supports the minimal feature set required for proper
                handling of the repository data. svn:txn-user-agent Carries the  user agent  string which
                describes the committing client program.  Subversion&#39;s
                libraries define the initial portion of this string,
                but third-party consumers of the API (GUI clients,
                etc.) can append custom information to it. While most clients will transmit ephemeral transaction
            properties early enough in the commit process that they
            may be inspected by the start-commit hook script, some
            configurations of Subversion will cause those properties
            to not be set on the transaction until later in the commit
            process.  Administrators should consider performing any
            validation based on ephemeral transaction properties in
            both the start-commit and pre-commit hooks the
            former to rule out invalid clients before those clients
            transmit the commit payload; the latter  just in
            case  the validation checks couldn&#39;t be performed
            by the start-commit hook. As noted before, ephemeral transaction properties are
          removed from the transaction just before it is promoted to a
          new revision.  Some administrators may wish to preserve the
          information in those properties indefinitely.  We suggest
          that you do so by using the pre-commit hook script to copy
          the values of those properties to new property names.  In
          fact, the Subversion source code distribution provides a
           persist-ephemeral-txnprops.py  script
          (in the  tools/hook-scripts/ 
          subdirectory) for doing precisely that. The third common type of hook script usage is for the
          purpose of replication.  Whether you are driving a simple
          backup process or a more involved remote repository
          mirroring scenario, hook scripts can be critical.  See
            and
            for more
          information about these aspects of repository
          maintenance. Finding hook scripts or rolling your own As you might imagine, there is no shortage of Subversion
          hook programs and scripts that are freely available either
          from the Subversion community itself or elsewhere.  In fact,
          the Subversion distribution provides several commonly used
          hook scripts in its  tools/hook-scripts/ 
          subdirectory.  However, if you are unable to find one that
          meets your specific needs, you might consider writing your
          own.  See   for information
          about developing software using Subversion&#39;s public
          APIs. While hook scripts can do almost anything, there is
            one dimension in which hook script authors should show
            restraint: do  not  modify a commit
            transaction using hook scripts.  While it might be
            tempting to use hook scripts to automatically correct
            errors, shortcomings, or policy violations present in the
            files being committed, doing so can cause problems.
            Subversion keeps client-side caches of certain bits of
            repository data, and if you change a commit transaction in
            this way, those caches become indetectably stale.  This
            inconsistency can lead to surprising and unexpected
            behavior.  Instead of modifying the transaction, you
            should simply  validate  the
            transaction in the  pre-commit  hook
            and reject the commit if it does not meet the desired
            requirements.  As a bonus, your users will learn the value
            of careful, compliance-minded work habits. Berkeley DB Configuration A Berkeley DB environment is an encapsulation of one or
        more databases, logfiles, region files, and configuration
        files.  The Berkeley DB environment has its own set of default
        configuration values for things such as the number of database
        locks allowed to be taken out at any given time, the maximum
        size of the journaling logfiles, and so on.  Subversion&#39;s
        filesystem logic additionally chooses default values for some
        of the Berkeley DB configuration options.  However, sometimes
        your particular repository, with its unique collection of data
        and access patterns, might require a different set of
        configuration option values. The producers of Berkeley DB understand that different
        applications and database environments have different
        requirements, so they have provided a mechanism for overriding
        at runtime many of the configuration values for the Berkeley
        DB environment.  BDB checks for the presence of a file named
         DB_CONFIG  in the environment directory
        (namely, the repository&#39;s  db 
        subdirectory), and parses the options found in that file.
        Subversion itself creates this file when it creates the rest
        of the repository.  The file initially contains some default
        options, as well as pointers to the Berkeley DB online
        documentation so that you can read about what those options do.  Of
        course, you are free to add any of the supported Berkeley DB
        options to your  DB_CONFIG  file.  Just be
        aware that while Subversion never attempts to read or
        interpret the contents of the file and makes no direct use of
        the option settings in it, you&#39;ll want to avoid any
        configuration changes that may cause Berkeley DB to behave in
        a fashion that is at odds with what Subversion might expect.
        Also, changes made to  DB_CONFIG  won&#39;t
        take effect until you recover the database environment (using
         svnadmin recover ). FSFS Configuration As of Subversion 1.6, FSFS filesystems have several
        configurable parameters which an administrator can use to
        fine-tune the performance or disk usage of their repositories.
        You can find these options and the documentation for
        them in the  db/fsfs.conf  file in
        the repository. Repository Maintenance Maintaining a Subversion repository can be daunting, mostly
      due to the complexities inherent in systems that have a database
      backend.  Doing the task well is all about knowing the
      tools what they are, when to use them, and how.  This
      section will introduce you to the repository administration
      tools provided by Subversion and discuss how to wield them to
      accomplish tasks such as repository data migration, upgrades,
      backups, and cleanups. An Administrator&#39;s Toolkit Subversion provides a handful of utilities useful for
        creating, inspecting, modifying, and repairing your repository.
        Let&#39;s look more closely at each of those tools.  Afterward,
        we&#39;ll briefly examine some of the utilities included in the
        Berkeley DB distribution that provide functionality specific
        to your repository&#39;s database backend not otherwise provided
        by Subversion&#39;s own tools. svnadmin svnadmin The  svnadmin  program is the
          repository administrator&#39;s best friend.  Besides providing
          the ability to create Subversion repositories, this program
          allows you to perform several maintenance operations on
          those repositories.  The syntax of
           svnadmin  is similar to that of other
          Subversion command-line programs: 
$ svnadmin help
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]
Type &#39;svnadmin help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svnadmin --version&#39; to see the program version and FS modules.

Available subcommands:
   crashtest
   create
   deltify
 
 Previously in this chapter (in  ), we were
          introduced to the  svnadmin create 
          subcommand.  Most of the other  svnadmin 
          subcommands we will cover later in this chapter.  And you
          can consult   for a full
          rundown of subcommands and what each of them offers. svnlook svnlook revisions inspection transactions transactions inspection svnlook  is a tool provided by
          Subversion for examining the various revisions and
           transactions  (which are revisions
          in the making) in a repository.  No part of this program
          attempts to change the repository.   svnlook 
          is typically used by the repository hooks for reporting the
          changes that are about to be committed (in the case of the
           pre-commit  hook) or that were just
          committed (in the case of the  post-commit 
          hook) to the repository.  A repository administrator may use
          this tool for diagnostic purposes. svnlook  has a straightforward
          syntax: 
$ svnlook help
general usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]
Note: any subcommand which takes the &#39;--revision&#39; and &#39;--transaction&#39;
      options will, if invoked without one of those options, act on
      the repository&#39;s youngest revision.
Type &#39;svnlook help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svnlook --version&#39; to see the program version and FS modules.
 
 Most of  svnlook &#39;s
          subcommands can operate on either a revision or a
          transaction tree, printing information about the tree
          itself, or how it differs from the previous revision of the
          repository.  You use the  --revision 
          ( -r ) and  --transaction 
          ( -t ) options to specify which revision or
          transaction, respectively, to examine.  In the absence of
          both the  --revision  ( -r )
          and  --transaction  ( -t )
          options,  svnlook  will examine the
          youngest (or  HEAD ) revision in the
          repository.  So the following two commands do exactly the
          same thing when 19 is the youngest revision in the
          repository located at
           /var/svn/repos : 
$ svnlook info /var/svn/repos
$ svnlook info /var/svn/repos -r 19
 One exception to these rules about subcommands is
          the  svnlook youngest  subcommand, which
          takes no options and simply prints out the repository&#39;s
          youngest revision number: 
$ svnlook youngest /var/svn/repos
19
$
 Keep in mind that the only transactions you can browse
            are uncommitted ones.  Most repositories will have no such
            transactions because transactions are usually either
            committed (in which case, you should access them as
            revision with the  --revision 
            ( -r ) option) or aborted and
            removed. Output from  svnlook  is designed to be
          both human- and machine-parsable.  Take, as an example, the
          output of the  svnlook info  subcommand: 
$ svnlook info /var/svn/repos
sally
2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)
27
Added the usual
Greek tree.
$
 The output of  svnlook info  consists
          of the following, in the order given: The author, followed by a newline The date, followed by a newline The number of characters in the log message,
              followed by a newline The log message itself, followed by a newline This output is human-readable, meaning items such as the
          datestamp are displayed using a textual representation
          instead of something more obscure (such as the number of
          nanoseconds since the Tastee Freez guy drove by).  But the
          output is also machine-parsable because the log
          message can contain multiple lines and be unbounded in
          length,  svnlook  provides the length of
          that message before the message itself.  This allows scripts
          and other wrappers around this command to make intelligent
          decisions about the log message, such as how much memory to
          allocate for the message, or at least how many bytes to skip
          in the event that this output is not the last bit of data in
          the stream. svnlook  can perform a variety of
          other queries:  displaying subsets of bits of information
          we&#39;ve mentioned previously, recursively listing versioned
          directory trees, reporting which paths were modified in a
          given revision or transaction, showing textual and property
          differences made to files and directories, and so on.  See
            for a full reference of
           svnlook &#39;s features. svndumpfilter While it won&#39;t be the most commonly used tool at the
          administrator&#39;s disposal,  svndumpfilter 
          provides a very particular brand of useful
          functionality the ability to quickly and easily modify
          streams of Subversion repository history data by acting as a
          path-based filter. The syntax of  svndumpfilter  is as
          follows: 
$ svndumpfilter help
general usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]
Type &#39;svndumpfilter help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svndumpfilter --version&#39; to see the program version.
  
Available subcommands:
   exclude
   include
   help (?, h)
 There are only two interesting subcommands:
           svndumpfilter exclude  and
           svndumpfilter include .  They allow you to
          make the choice between implicit or explicit inclusion of
          paths in the stream.  You can learn more about these
          subcommands and  svndumpfilter &#39;s unique
          purpose later in this chapter, in  . svnrdump The  svnrdump  program is, to put it
          simply, essentially just network-aware flavors of
          the  svnadmin dump  and  svnadmin
          load  subcommands, rolled up into a separate
          program. 
$ svnrdump help
general usage: svnrdump SUBCOMMAND URL [-r LOWER[:UPPER]]
Type &#39;svnrdump help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svnrdump --version&#39; to see the program version and RA modules.

Available subcommands:
   dump
   load
   help (?, h)

$
 We discuss the use of  svnrdump  and
          the aforementioned  svnadmin  commands
          later in this chapter (see
           ). svnsync The  svnsync  program provides all the
          functionality required for maintaining a read-only mirror of
          a Subversion repository.  The program really has one
          job to transfer one repository&#39;s versioned history
          into another repository.  And while there are few ways to do
          that, its primary strength is that it can operate
          remotely the  source  and
           sink Or is that,
          the  sync ?  repositories may
          be on different computers from each other and
          from  svnsync  itself. As you might expect,  svnsync  has a
          syntax that looks very much like every other program we&#39;ve
          mentioned in this chapter: 
$ svnsync help
general usage: svnsync SUBCOMMAND DEST_URL  [ARGS &amp; OPTIONS ...]
Type &#39;svnsync help &lt;subcommand&gt;&#39; for help on a specific subcommand.
Type &#39;svnsync --version&#39; to see the program version and RA modules.

Available subcommands:
   initialize (init)
   synchronize (sync)
   copy-revprops
   info
   help (?, h)
$
 We talk more about replicating repositories with
           svnsync  later in this chapter (see  ). fsfs-reshard.py While not an official member of the Subversion
          toolchain, the  fsfs-reshard.py  script
          (found in the  tools/server-side 
          directory of the Subversion source distribution) is a useful
          performance tuning tool for administrators of FSFS-backed
          Subversion repositories.  As described in the sidebar
           ,
          FSFS repositories use individual files to house information
          about each revision.  Sometimes these files all live in a
          single directory; sometimes they are sharded across many
          directories.  But the neat thing is that the number of
          directories used to house these files is configurable.
          That&#39;s where  fsfs-reshard.py  comes
          in. fsfs-reshard.py  reshuffles the
          repository&#39;s file structure into a new arrangement that
          reflects the requested number of sharding subdirectories and
          updates the repository configuration to preserve this
          change.  When used in conjunction with the  svnadmin
          upgrade  command, this is especially useful for
          upgrading a pre-1.5 Subversion (unsharded) repository to the
          latest filesystem format and sharding its data files (which
          Subversion will not automatically do for you).  This script
          can also be used for fine-tuning an already sharded
          repository. Berkeley DB utilities If you&#39;re using a Berkeley DB repository, all of
          your versioned filesystem&#39;s structure and data live in a set
          of database tables within the  db/ 
          subdirectory of your repository.  This subdirectory is a
          regular Berkeley DB environment directory and can therefore
          be used in conjunction with any of the Berkeley database
          tools, typically provided as part of the Berkeley DB
          distribution. For day-to-day Subversion use, these tools are
          unnecessary.  Most of the functionality typically needed for
          Subversion repositories has been duplicated in the
           svnadmin  tool.  For example,
           svnadmin list-unused-dblogs  and
           svnadmin list-dblogs  perform a
          subset of what is provided by the Berkeley
           db_archive  utility, and  svnadmin
          recover  reflects the common use cases of the
           db_recover  utility. However, there are still a few Berkeley DB utilities
          that you might find useful.  The  db_dump 
          and  db_load  programs write and read,
          respectively, a custom file format that describes the keys
          and values in a Berkeley DB database.  Since Berkeley
          databases are not portable across machine architectures,
          this format is a useful way to transfer those databases from
          machine to machine, irrespective of architecture or
          operating system.  As we describe later in this chapter, you
          can also use  svnadmin dump  and
           svnadmin load  for similar purposes, but
           db_dump  and  db_load 
          can do certain jobs just as well and much faster.  They can
          also be useful if the experienced Berkeley DB hacker needs
          to do in-place tweaking of the data in a BDB-backed
          repository for some reason, which is something Subversion&#39;s
          utilities won&#39;t allow.  Also, the  db_stat 
          utility can provide useful information about the status of
          your Berkeley DB environment, including detailed statistics
          about the locking and storage subsystems. For more information on the Berkeley DB tool chain,
          visit the documentation section of the Berkeley DB section
          of Oracle&#39;s web site, located at  . Commit Log Message Correction Sometimes a user will have an error in her log message (a
        misspelling or some misinformation, perhaps).  If the
        repository is configured (using the
         pre-revprop-change  hook; see
         ) to accept changes to
        this log message after the commit is finished, the user
        can  fix  her log message remotely using
         svn propset  (see   in
         ).  However, because of the
        potential to lose information forever, Subversion repositories
        are not, by default, configured to allow changes to
        unversioned properties except by an
        administrator. If a log message needs to be changed by an administrator,
        this can be done using  svnadmin setlog .
        This command changes the log message (the
         svn:log  property) on a given revision of a
        repository, reading the new value from a provided file. 
$ echo &quot;Here is the new, correct log message&quot; &gt; newlog.txt
$ svnadmin setlog myrepos newlog.txt -r 388
 The  svnadmin setlog  command, by
        default, is still bound by the same protections against
        modifying unversioned properties as a remote client
        is the  pre-revprop-change  and
         post-revprop-change  hooks are still
        triggered, and therefore must be set up to accept changes of
        this nature.  But an administrator can get around these
        protections by passing the  --bypass-hooks 
        option to the  svnadmin setlog  command. Remember, though, that by bypassing the hooks, you are
          likely avoiding such things as email notifications of
          property changes, backup systems that track unversioned
          property changes, and so on.  In other words, be very
          careful about what you are changing, and how you change
          it. Managing Disk Space While the cost of storage has dropped incredibly in the
        past few years, disk usage is still a valid concern for
        administrators seeking to version large amounts of data.
        Every bit of version history information stored in the live
        repository needs to be backed up
        elsewhere, perhaps multiple times as part of rotating backup
        schedules.  It is useful to know what pieces of Subversion&#39;s
        repository data need to remain on the live site, which need to
        be backed up, and which can be safely removed. How Subversion saves disk space deltification To keep the repository small, Subversion uses
           deltification  (or delta-based storage)
          within the repository itself.  Deltification involves
          encoding the representation of a chunk of data as a
          collection of differences against some other chunk of data.
          If the two pieces of data are very similar, this
          deltification results in storage savings for the deltified
          chunk rather than taking up space equal to the size of
          the original data, it takes up only enough space to
          say,  I look just like this other piece of data over
          here, except for the following couple of changes. 
          The result is that most of the repository data that tends to
          be bulky namely, the contents of versioned
          files is stored at a much smaller size than the
          original full-text representation of that data. representation sharing While deltified storage has been a part of Subversion&#39;s
          design since the very beginning, there have been additional
          improvements made over the years.  Subversion repositories
          created with Subversion 1.4 or later benefit from
          compression of the full-text representations of file
          contents.  Repositories created with Subversion 1.6 or later
          further enjoy the disk space savings afforded by
           representation sharing , a feature
          which allows multiple files or file revisions with identical
          file content to refer to a single shared instance of that data
          rather than each having their own distinct copy thereof. Because all of the data that is subject to
            deltification in a BDB-backed repository is stored in a
            single Berkeley DB database file, reducing the size of the
            stored values will not immediately reduce the size of the
            database file itself.  Berkeley DB will, however, keep
            internal records of unused areas of the database file and
            consume those areas first before growing the size of the
            database file.  So while deltification doesn&#39;t produce
            immediate space savings, it can drastically slow future
            growth of the database. Removing dead transactions Though they are uncommon, there are circumstances in
          which a Subversion commit process might fail, leaving behind
          in the repository the remnants of the revision-to-be that
          wasn&#39;t an uncommitted transaction and all the file and
          directory changes associated with it.  This could happen for
          several reasons:  perhaps the client operation was
          inelegantly terminated by the user, or a network failure
          occurred in the middle of an operation.
          Regardless of the reason, dead transactions can happen.
          They don&#39;t do any real harm, other than consuming disk
          space.  A fastidious administrator may nonetheless wish to
          remove them. You can use the  svnadmin lstxns 
          command to list the names of the currently outstanding
          transactions: 
$ svnadmin lstxns myrepos
19
3a1
a45
$
 Each item in the resultant output can then be used with
           svnlook  (and its
           --transaction  ( -t ) option)
          to determine who created the transaction, when it was
          created, what types of changes were made in the
          transaction information that is helpful in determining
          whether the transaction is a safe candidate for
          removal!  If you do indeed want to remove a transaction, its
          name can be passed to  svnadmin rmtxns ,
          which will perform the cleanup of the transaction.  In fact,
           svnadmin rmtxns  can take its input
          directly from the output of
           svnadmin lstxns ! 
$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`
$
 If you use these two subcommands like this, you should
          consider making your repository temporarily inaccessible to
          clients.  That way, no one can begin a legitimate
          transaction before you start your cleanup.   
          contains a bit of shell-scripting that can quickly generate
          information about each outstanding transaction in your
          repository. txn-info.sh (reporting outstanding transactions) 
#!/bin/sh

### Generate informational output for all outstanding transactions in
### a Subversion repository.

REPOS=&quot;${1}&quot;
if [ &quot;x$REPOS&quot; = x ] ; then
  echo &quot;usage: $0 REPOS_PATH&quot;
  exit
fi

for TXN in `svnadmin lstxns ${REPOS}`; do 
  echo &quot;---[ Transaction ${TXN} ]-------------------------------------------&quot;
  svnlook info &quot;${REPOS}&quot; -t &quot;${TXN}&quot;
done
 The output of the script is basically a concatenation of
          several chunks of  svnlook info  output
          (see  ) and
          will look something like this: 
$ txn-info.sh myrepos
---[ Transaction 19 ]-------------------------------------------
sally
2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)
0
---[ Transaction 3a1 ]-------------------------------------------
harry
2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)
39
Trying to commit over a faulty network.
---[ Transaction a45 ]-------------------------------------------
sally
2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)
0
$
 A long-abandoned transaction usually represents some
          sort of failed or interrupted commit.  A transaction&#39;s
          datestamp can provide interesting information for
          example, how likely is it that an operation begun nine
          months ago is still active? In short, transaction cleanup decisions need not be made
          unwisely.  Various sources of information including
          Apache&#39;s error and access logs, Subversion&#39;s operational
          logs, Subversion revision history, and so on can be
          employed in the decision-making process.  And of course, an
          administrator can often simply communicate with a seemingly
          dead transaction&#39;s owner (via email, e.g.) to verify
          that the transaction is, in fact, in a zombie state. Purging unused Berkeley DB logfiles Until recently, the largest offender of disk space usage
          with respect to BDB-backed Subversion repositories were the
          logfiles in which Berkeley DB performs its prewrites before
          modifying the actual database files.  These files capture
          all the actions taken along the route of changing the
          database from one state to another while the database
          files, at any given time, reflect a particular state, the
          logfiles contain all of the many changes along the way
           between  states.  Thus, they can grow
          and accumulate quite rapidly. Fortunately, beginning with the 4.2 release of Berkeley
          DB, the database environment has the ability to remove its
          own unused logfiles automatically.  Any
          repositories created using  svnadmin 
          when compiled against Berkeley DB version 4.2 or later
          will be configured for this automatic logfile removal.  If
          you don&#39;t want this feature enabled, simply pass the
           --bdb-log-keep  option to the
           svnadmin create  command.  If you forget
          to do this or change your mind at a later time, simply edit
          the  DB_CONFIG  file found in your
          repository&#39;s  db  directory, comment out
          the line that contains the  set_flags
          DB_LOG_AUTOREMOVE  directive, and then run
           svnadmin recover  on your repository to
          force the configuration changes to take effect.  See   for more information about
          database configuration. Without some sort of automatic logfile removal in
          place, logfiles will accumulate as you use your repository.
          This is actually somewhat of a feature of the database
          system you should be able to recreate your entire
          database using nothing but the logfiles, so these files can
          be useful for catastrophic database recovery.  But
          typically, you&#39;ll want to archive the logfiles that are no
          longer in use by Berkeley DB, and then remove them from disk
          to conserve space.  Use the  svnadmin
          list-unused-dblogs  command to list the unused
          logfiles: 
$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033
 
$ rm `svnadmin list-unused-dblogs /var/svn/repos`
## disk space reclaimed!
 BDB-backed repositories whose logfiles are used as
            part of a backup or disaster recovery plan should
             not  make use of the logfile
            autoremoval feature.  Reconstruction of a repository&#39;s
            data from logfiles can only be accomplished only when
             all  the logfiles are available.  If
            some of the logfiles are removed from disk before the
            backup system has a chance to copy them elsewhere, the
            incomplete set of backed-up logfiles is essentially
            useless. Packing FSFS filesystems As described in the sidebar
           ,
          FSFS-backed Subversion repositories create, by default, a
          new on-disk file for each revision added to the repository.
          Having thousands of these files present on your Subversion
          server even when housed in separate shard
          directories can lead to inefficiencies. The first problem is that the operating system has to
          reference many different files over a short period of time.
          This leads to inefficient use of disk caches and, as a
          result, more time spent seeking across large disks.  Because
          of this, Subversion pays a performance penalty when
          accessing your versioned data. The second problem is a bit more subtle.  Because of the
          ways that most filesystems allocate disk space, each file
          claims more space on the disk than it actually uses.  The
          amount of extra space required to house a single file can
          average anywhere from 2 to 16 kilobytes  per
          file , depending on the underlying
          filesystem in use.  This translates directly
          into a per-revision disk usage penalty for FSFS-backed
          repositories.  The effect is most pronounced in repositories
          which have many small revisions, since the overhead involved
          in storing the revision file quickly outgrows the size of
          the actual data being stored. To solve these problems, Subversion 1.6 introduced the
           svnadmin pack  command.  By concatenating
          all the files of a completed shard into a single  pack  file
          and then removing the original per-revision
          files,  svnadmin pack  reduces the file
          count within a given shard down to just a single file.  In
          doing so, it aids filesystem caches and reduces (to one) the
          number of times a file storage overhead penalty is
          paid. Subversion can pack existing sharded repositories which
          have been upgraded to the 1.6 filesystem format or later (see
           ) in
           .  To do so, just
          run  svnadmin pack  on the
          repository: 
$ svnadmin pack /var/svn/repos
Packing shard 0...done.
Packing shard 1...done.
Packing shard 2...done.
 
Packing shard 34...done.
Packing shard 35...done.
Packing shard 36...done.
$
 Because the packing process obtains the required locks
          before doing its work, you can run it on live repositories,
          or even as part of a post-commit hook.  Repacking packed
          shards is legal, but will have no effect on the disk usage
          of the repository. svnadmin pack  has no effect on
          BDB-backed Subversion repositories. Berkeley DB Recovery As mentioned in  , a Berkeley DB
        repository can sometimes be left in a frozen state if not closed
        properly.  When this happens, an administrator needs to rewind
        the database back into a consistent state.  This is unique to
        BDB-backed repositories, though if you are using
        FSFS-backed ones instead, this won&#39;t apply to you.  And for
        those of you using Subversion 1.4 with Berkeley DB 4.4 or
        later, you should find that Subversion has become much more
        resilient in these types of situations.  Still, wedged
        Berkeley DB repositories do occur, and an administrator needs
        to know how to safely deal with this circumstance. To protect the data in your repository, Berkeley
        DB uses a locking mechanism.  This mechanism ensures that
        portions of the database are not simultaneously modified by
        multiple database accessors, and that each process sees the
        data in the correct state when that data is being read from
        the database.  When a process needs to change something in the
        database, it first checks for the existence of a lock on the
        target data.  If the data is not locked, the process locks the
        data, makes the change it wants to make, and then unlocks the
        data.  Other processes are forced to wait until that lock is
        removed before they are permitted to continue accessing that
        section of the database.  (This has nothing to do with the
        locks that you, as a user, can apply to versioned files within
        the repository; we try to clear up the confusion caused by
        this terminology collision in the sidebar  .) In the course of using your Subversion repository, fatal
        errors or interruptions can prevent a process from having the
        chance to remove the locks it has placed in the database.  The
        result is that the backend database system gets
         wedged.   When this happens, any attempts to
        access the repository hang indefinitely (since each new
        accessor is waiting for a lock to go away which isn&#39;t
        going to happen). If this happens to your repository, don&#39;t panic.  The
        Berkeley DB filesystem takes advantage of database
        transactions, checkpoints, and prewrite journaling to ensure
        that only the most catastrophic of events For
        example, hard drive + huge electromagnet =
        disaster.  can permanently destroy a database
        environment.  A sufficiently paranoid repository administrator
        will have made off-site backups of the repository data in some
        fashion, but don&#39;t head off to the tape backup storage closet
        just yet. Instead, use the following recipe to attempt to
         unwedge  your repository: Make sure no processes are accessing (or
            attempting to access) the repository.  For networked
            repositories, this also means shutting down the Apache HTTP
            Server or svnserve daemon. Become the user who owns and manages the repository.
            This is important, as recovering a repository while
            running as the wrong user can tweak the permissions of the
            repository&#39;s files in such a way that your repository will
            still be inaccessible even after it is 
             unwedged. Run the command  svnadmin recover
            /var/svn/repos .  You should see output such as
            this: 
Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 19.
 This command may take many minutes to complete. Restart the server process. This procedure fixes almost every case of repository
        wedging.  Make sure that you run this command as the user that
        owns and manages the database, not just as
         root .  Part of the recovery process might
        involve re-creating from scratch various database files (shared
        memory regions, e.g.).  Recovering as
         root  will create those files such that they
        are owned by  root , which means that even
        after you restore connectivity to your repository, regular
        users will be unable to access it. If the previous procedure, for some reason, does not
        successfully unwedge your repository, you should do two
        things.  First, move your broken repository directory aside
        (perhaps by renaming it to something like
         repos.BROKEN ) and then restore your
        latest backup of it.  Then, send an email to the Subversion
        users mailing list (at  users@subversion.apache.org )
        describing your problem in detail.  Data integrity is an
        extremely high priority to the Subversion developers. Migrating Repository Data Elsewhere A Subversion filesystem has its data spread throughout
        files in the repository, in a fashion generally
        understood by (and of interest to) only the Subversion
        developers themselves.  However, circumstances may arise that
        call for all, or some subset, of that data to be copied or
        moved into another repository. repository dump streams dump files repository dump streams svnadmin subcommands dump svnadmin subcommands load svnrdump Subversion provides such functionality by way of
         repository dump streams .  A repository
        dump stream (often referred to as a  dump file 
        when stored as a file on disk) is a portable, flat file format
        that describes the various revisions in your
        repository what was changed, by whom, when, and so on.
        This dump stream is the primary mechanism used to marshal
        versioned history in whole or in part, with or without
        modification between repositories.  And Subversion
        provides the tools necessary for creating and loading these
        dump streams: the  svnadmin dump  and
         svnadmin load  subcommands, respectively,
        and the  svnrdump  program. While the Subversion repository dump format contains
          human-readable portions and a familiar structure (it
          resembles an RFC 822 format, the same type of format used
          for most email), it is  not  a plain-text
          file format.  It is a binary file format, highly sensitive
          to meddling.  For example, many text editors will corrupt
          the file by automatically converting line endings. There are many reasons for dumping and loading Subversion
        repository data.  Early in Subversion&#39;s life, the most common
        reason was due to the evolution of Subversion itself.  As
        Subversion matured, there were times when changes made to the
        backend database schema caused compatibility issues with
        previous versions of the repository, so users had to dump
        their repository data using the previous version of
        Subversion and load it into a freshly created repository with
        the new version of Subversion.  Now, these types of schema
        changes haven&#39;t occurred since Subversion&#39;s 1.0 release, and
        the Subversion developers promise not to force users to dump
        and load their repositories when upgrading between minor
        versions (such as from 1.3 to 1.4) of Subversion.  But there
        are still other reasons for dumping and loading, including
        re-deploying a Berkeley DB repository on a new OS or CPU
        architecture, switching between the Berkeley DB and FSFS
        backends, or (as we&#39;ll cover later in this chapter in  ) purging versioned
        data from repository history. The Subversion repository dump format describes
          versioned repository changes only.  It will not carry any
          information about uncommitted transactions, user locks on
          filesystem paths, repository or server configuration
          customizations (including hook scripts), and so on. The Subversion repository dump format also enables
        conversion from a different storage mechanism or version
        control system altogether.  Because the dump file format is,
        for the most part, human-readable, it should be relatively
        easy to describe generic sets of changes each of which
        should be treated as a new revision using this file
        format.  In fact, the  cvs2svn  utility (see
         ) uses the dump format to
        represent the contents of a CVS repository so that those
        contents can be copied into a Subversion repository. For now, we&#39;ll concern ourselves only with migration of
        repository data between Subversion repositories, which we&#39;ll
        describe in detail in the sections which follow. Repository data migration using svnadmin Whatever your reason for migrating repository history,
          using the  svnadmin dump  and
           svnadmin load  subcommands is
          straightforward.   svnadmin dump  will output
          a range of repository revisions that are formatted using
          Subversion&#39;s custom filesystem dump format.  The dump format
          is printed to the standard output stream, while informative
          messages are printed to the standard error stream.  This
          allows you to redirect the output stream to a file while
          watching the status output in your terminal window.  For
          example: 
$ svnlook youngest myrepos
26
$ svnadmin dump myrepos &gt; dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
 
* Dumped revision 25.
* Dumped revision 26.
 At the end of the process, you will have a single file
          ( dumpfile  in the previous example) that
          contains all the data stored in your repository in the
          requested range of revisions.  Note that  svnadmin
          dump  is reading revision trees from the repository
          just like any other  reader  process would
          (e.g.,  svn checkout ), so it&#39;s safe
          to run this command at any time. The other subcommand in the pair,  svnadmin
          load , parses the standard input stream as a
          Subversion repository dump file and effectively replays those
          dumped revisions into the target repository for that
          operation.  It also gives informative feedback, this time
          using the standard output stream: 
$ svnadmin load newrepos &lt; dumpfile
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : A ... done.
     * adding path : A/B ... done.
      
------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 2
     * editing path : A/mu ... done.
     * editing path : A/D/G/rho ... done.

------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;

 

&lt;&lt;&lt; Started new txn, based on original revision 25
     * editing path : A/D/gamma ... done.

------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 26
     * adding path : A/Z/zeta ... done.
     * editing path : A/mu ... done.

------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;

 The result of a load is new revisions added to a
          repository the same thing you get by making commits
          against that repository from a regular Subversion client.
          Just as in a commit, you can use hook programs to perform
          actions before and after each of the commits made during a
          load process.  By passing the
           --use-pre-commit-hook  and
           --use-post-commit-hook  options to
           svnadmin load , you can instruct
          Subversion to execute the pre-commit and post-commit hook
          programs, respectively, for each loaded revision.  You might
          use these, for example, to ensure that loaded revisions pass
          through the same validation steps that regular commits pass
          through.  Of course, you should use these options with
          care if your post-commit hook sends emails to a
          mailing list for each new commit, you might not want to spew
          hundreds or thousands of commit emails in rapid succession
          at that list!  You can read more about the use of hook
          scripts in  . Note that because  svnadmin  uses
          standard input and output streams for the repository dump and
          load processes, people who are feeling especially saucy can try
          things such as this (perhaps even using different versions of
           svnadmin  on each side of the pipe): 
$ svnadmin create newrepos
$ svnadmin dump oldrepos | svnadmin load newrepos
 By default, the dump file will be quite large much
          larger than the repository itself.  That&#39;s because by default
          every version of every file is expressed as a full text in the
          dump file.  This is the fastest and simplest behavior, and
          it&#39;s nice if you&#39;re piping the dump data directly into some other
          process (such as a compression program, filtering program, or
          loading process).  But if you&#39;re creating a dump file
          for longer-term storage, you&#39;ll likely want to save disk space
          by using the  --deltas  option.  With this
          option, successive revisions of files will be output as
          compressed, binary differences just as file revisions
          are stored in a repository.  This option is slower, but it
          results in a dump file much closer in size to the original
          repository. We mentioned previously that  svnadmin
          dump  outputs a range of revisions.  Use the
           --revision  ( -r ) option to
          specify a single revision, or a range of revisions, to dump.
          If you omit this option, all the existing repository revisions
          will be dumped. 
$ svnadmin dump myrepos -r 23 &gt; rev-23.dumpfile
$ svnadmin dump myrepos -r 100:200 &gt; revs-100-200.dumpfile
 As Subversion dumps each new revision, it outputs only
          enough information to allow a future loader to re-create that
          revision based on the previous one.  In other words, for any
          given revision in the dump file, only the items that were
          changed in that revision will appear in the dump.  The only
          exception to this rule is the first revision that is dumped
          with the current  svnadmin dump 
          command. By default, Subversion will not express the first dumped
          revision as merely differences to be applied to the previous
          revision.  For one thing, there is no previous revision in the
          dump file!  And second, Subversion cannot know the state of
          the repository into which the dump data will be loaded (if it
          ever is).  To ensure that the output of each
          execution of  svnadmin dump  is
          self-sufficient, the first dumped revision is, by default, a
          full representation of every directory, file, and property in
          that revision of the repository. However, you can change this default behavior.  If you add
          the  --incremental  option when you dump your
          repository,  svnadmin  will compare the first
          dumped revision against the previous revision in the
          repository the same way it treats every other revision that
          gets dumped.  It will then output the first revision exactly
          as it does the rest of the revisions in the dump
          range mentioning only the changes that occurred in that
          revision.  The benefit of this is that you can create several
          small dump files that can be loaded in succession, instead of
          one large one, like so: 
$ svnadmin dump myrepos -r 0:1000 &gt; dumpfile1
$ svnadmin dump myrepos -r 1001:2000 --incremental &gt; dumpfile2
$ svnadmin dump myrepos -r 2001:3000 --incremental &gt; dumpfile3
 These dump files could be loaded into a new repository
          with the following command sequence: 
$ svnadmin load newrepos &lt; dumpfile1
$ svnadmin load newrepos &lt; dumpfile2
$ svnadmin load newrepos &lt; dumpfile3
 Another neat trick you can perform with this
           --incremental  option involves appending to an
          existing dump file a new range of dumped revisions.  For
          example, you might have a  post-commit  hook
          that simply appends the repository dump of the single revision
          that triggered the hook.  Or you might have a script that runs
          nightly to append dump file data for all the revisions that
          were added to the repository since the last time the script
          ran.  Used like this,  svnadmin dump  can be
          one way to back up changes to your repository over time in case
          of a system crash or some other catastrophic event. The dump format can also be used to merge the contents of
          several different repositories into a single repository.  By
          using the  --parent-dir  option of
           svnadmin load , you can specify a new
          virtual root directory for the load process.  That means if
          you have dump files for three repositories say
           calc-dumpfile ,
           cal-dumpfile , and
           ss-dumpfile you can first create a new
          repository to hold them all: 
$ svnadmin create /var/svn/projects
$
 Then, make new directories in the repository that will
          encapsulate the contents of each of the three previous
          repositories: 
$ svn mkdir -m &quot;Initial project roots&quot; \
            file:///var/svn/projects/calc \
            file:///var/svn/projects/calendar \
            file:///var/svn/projects/spreadsheet
Committed revision 1.
$ 
 Lastly, load the individual dump files into their
          respective locations in the new repository: 
$ svnadmin load /var/svn/projects --parent-dir calc &lt; calc-dumpfile
 
$ svnadmin load /var/svn/projects --parent-dir calendar &lt; cal-dumpfile
 
$ svnadmin load /var/svn/projects --parent-dir spreadsheet &lt; ss-dumpfile
 
$
 Repository data migration using svnrdump In Subversion 1.7,  svnrdump  joined
          the set of stock Subversion tools.  It offers fairly
          specialized functionality, essentially as a network-aware
          version of the  svnadmin dump 
          and  svnadmin load  commands which we
          discuss in depth in
           .   svnrdump dump  will generate a dump
          stream from a remote repository, spewing it to standard
          output;  svnrdump load  will read a dump
          stream from standard input and load it into a remote
          repository.  Using  svnrdump , you can
          generate incremental dumps just as you might
          with  svnadmin dump .  You can even dump a
          subtree of the repository something
          that  svnadmin dump  cannot do. The primary difference is that instead of requiring
          direct access to the repository,  svnrdump 
          operates remotely, using the very same Repository Access
          (RA) protocols that the Subversion client does.  As such,
          you might need to provide authentication credentials.  Also,
          your remote interactions are subject to any authorization
          limitations configured on the Subversion server. svnrdump dump  requires that the
            remote server be running Subversion 1.4 or newer.  It
            currently generates dump streams only of the sort which
            are created when you pass the  --deltas 
            option to  svnadmin dump .  This isn&#39;t
            interesting in the typical use-cases, but might impact
            specific types of custom transformations you might wish to
            apply to the resulting dump stream. Because it modifies revision properties after
            committing new revisions,  svnrdump load 
            requires that the target repository have revision property
            changes enabled via the pre-revprop-change hook.  See
              in
              for details. As you might expect, you can use
           svnadmin  and  svnrdump 
          in concert.  You can, for example, use  svnrdump
          dump  to generate a dump stream from a remote
          repository, and pipe the results thereof through
           svnadmin load  to copy all that repository
          history into a local repository.  Or you can do the reverse,
          copying history from a local repository into a remote
          one. By using  file:// 
            URLs,  svnrdump  can also access local
            repositories, but it will be doing so via Subversion&#39;s
            Repository Access (RA) abstraction layer you&#39;ll get
            better performance out of  svnadmin  in
            such situations. Filtering Repository History Since Subversion stores your versioned history using, at
        the very least, binary differencing algorithms and data
        compression (optionally in a completely opaque database
        system), attempting manual tweaks is unwise if not quite
        difficult, and at any rate strongly discouraged.  And once
        data has been stored in your repository, Subversion generally
        doesn&#39;t provide an easy way to remove that
        data. That&#39;s rather the reason you use version
        control at all, right?   But inevitably, there
        will be times when you would like to manipulate the history of
        your repository.  You might need to strip out all instances of
        a file that was accidentally added to the repository (and
        shouldn&#39;t be there for whatever
        reason). Conscious, cautious removal of certain
        bits of versioned data is actually supported by real use
        cases.  That&#39;s why an  obliterate  feature has
        been one of the most highly requested Subversion features, and
        one which the Subversion developers hope to soon
        provide.   Or, perhaps you have multiple
        projects sharing a single repository, and you decide to split
        them up into their own repositories.  To accomplish tasks such
        as these, administrators need a more manageable and malleable
        representation of the data in their repositories the
        Subversion repository dump format. As we described earlier in  , the Subversion
        repository dump format is a human-readable representation of
        the changes that you&#39;ve made to your versioned data over time.
        Use the  svnadmin dump  or  svnrdump
        dump  command to generate the dump data,
        and  svnadmin load  or  svnrdump
        load  to populate a new repository with it.  The
        great thing about the human-readability aspect of the dump
        format is that, if you aren&#39;t careless about it, you can
        manually inspect and modify it.  Of course, the downside is
        that if you have three years&#39; worth of repository activity
        encapsulated in what is likely to be a very large dump file,
        it could take you a long, long time to manually inspect and
        modify it. That&#39;s where  svndumpfilter  becomes
        useful.  This program acts as a path-based filter for
        repository dump streams.  Simply give it either a list of
        paths you wish to keep or a list of paths you wish to not
        keep, and then pipe your repository dump data through this
        filter.  The result will be a modified stream of dump data
        that contains only the versioned paths you (explicitly or
        implicitly) requested. Let&#39;s look at a realistic example of how you might use this
        program.  Earlier in this chapter (see  ), we discussed the
        process of deciding how to choose a layout for the data in
        your repositories using one repository per project or
        combining them, arranging stuff within your repository, and
        so on.  But sometimes after new revisions start flying in,
        you rethink your layout and would like to make some changes.
        A common change is the decision to move multiple projects
        that are sharing a single repository into separate
        repositories for each project. Our imaginary repository contains three projects:
         calc ,  calendar , and
         spreadsheet .  They have been living
        side-by-side in a layout like this: 
/
   calc/
      trunk/
      branches/
      tags/
   calendar/
      trunk/
      branches/
      tags/
   spreadsheet/
      trunk/
      branches/
      tags/
 To get these three projects into their own repositories,
        we first dump the whole repository: 
$ svnadmin dump /var/svn/repos &gt; repos-dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
* Dumped revision 3.
 
$
 Next, run that dump file through the filter, each time
        including only one of our top-level directories.  This results
        in three new dump files: 
$ svndumpfilter include calc &lt; repos-dumpfile &gt; calc-dumpfile
 
$ svndumpfilter include calendar &lt; repos-dumpfile &gt; cal-dumpfile
 
$ svndumpfilter include spreadsheet &lt; repos-dumpfile &gt; ss-dumpfile
 
$
 At this point, you have to make a decision.  Each of your
        dump files will create a valid repository, but will preserve
        the paths exactly as they were in the original repository.
        This means that even though you would have a repository solely
        for your  calc  project, that repository
        would still have a top-level directory named
         calc .  If you want your
         trunk ,  tags , and
         branches  directories to live in the root
        of your repository, you might wish to edit your dump files,
        tweaking the  Node-path  and
         Node-copyfrom-path  headers so that they no
        longer have that first  calc/  path
        component.  Also, you&#39;ll want to remove the section of dump
        data that creates the  calc  directory.  It
        will look something like the following: 
Node-path: calc
Node-action: add
Node-kind: dir
Content-length: 0
  
 If you do plan on manually editing the dump file to
          remove a top-level directory, make sure your editor is
          not set to automatically convert end-of-line characters to
          the native format (e.g.,  \r\n  to
           \n ), as the content will then not agree
          with the metadata.  This will render the dump file
          useless. All that remains now is to create your three new
        repositories, and load each dump file into the right
        repository, ignoring the UUID found in the dump stream: 
$ svnadmin create calc
$ svnadmin load --ignore-uuid calc &lt; calc-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : button.c ... done.
 
$ svnadmin create calendar
$ svnadmin load --ignore-uuid calendar &lt; cal-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : cal.c ... done.
 
$ svnadmin create spreadsheet
$ svnadmin load --ignore-uuid spreadsheet &lt; ss-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : ss.c ... done.
 
$
 Both of  svndumpfilter &#39;s subcommands
        accept options for deciding how to deal with
         empty  revisions.  If a given revision
        contains only changes to paths that were filtered out, that
        now-empty revision could be considered uninteresting or even
        unwanted.  So to give the user control over what to do with
        those revisions,  svndumpfilter  provides
        the following command-line options: --drop-empty-revs Do not generate empty revisions at all just
              omit them. --renumber-revs If empty revisions are dropped (using the
               --drop-empty-revs  option), change the
              revision numbers of the remaining revisions so that
              there are no gaps in the numeric sequence. --preserve-revprops If empty revisions are not dropped, preserve the
              revision properties (log message, author, date, custom
              properties, etc.) for those empty revisions.
              Otherwise, empty revisions will contain only the
              original datestamp, and a generated log message that
              indicates that this revision was emptied by
               svndumpfilter . While  svndumpfilter  can be very
        useful and a huge timesaver, there are unfortunately a
        couple of gotchas.  First, this utility is overly sensitive
        to path semantics.  Pay attention to whether paths in your
        dump file are specified with or without leading slashes.
        You&#39;ll want to look at the  Node-path  and
         Node-copyfrom-path  headers. 
 
Node-path: spreadsheet/Makefile
 
 If the paths have leading slashes, you should
        include leading slashes in the paths you pass to
         svndumpfilter include  and
         svndumpfilter exclude  (and if they don&#39;t,
        you shouldn&#39;t).  Further, if your dump file has an
        inconsistent usage of leading slashes for some
        reason, While  svnadmin dump 
        has a consistent leading slash policy (to not include them),
        other programs that generate dump data might not be so
        consistent.  you should probably normalize
        those paths so that they all have, or all lack, leading
        slashes. Also, copied paths can give you some trouble.
        Subversion supports copy operations in the repository, where
        a new path is created by copying some already existing path.
        It is possible that at some point in the lifetime of your
        repository, you might have copied a file or directory from
        some location that  svndumpfilter  is
        excluding, to a location that it is including.  To
        make the dump data self-sufficient,
         svndumpfilter  needs to still show the
        addition of the new path including the contents of any
        files created by the copy and not represent that
        addition as a copy from a source that won&#39;t exist in your
        filtered dump data stream.  But because the Subversion
        repository dump format shows only what was changed in each
        revision, the contents of the copy source might not be
        readily available.  If you suspect that you have any copies
        of this sort in your repository, you might want to rethink
        your set of included/excluded paths, perhaps including the
        paths that served as sources of your troublesome copy
        operations, too. Finally,  svndumpfilter  takes path
        filtering quite literally.  If you are trying to copy the
        history of a project rooted at
         trunk/my-project  and move it into a
        repository of its own, you would, of course, use the
         svndumpfilter include  command to keep all
        the changes in and under
         trunk/my-project .  But the resultant
        dump file makes no assumptions about the repository into
        which you plan to load this data.  Specifically, the dump
        data might begin with the revision that added the
         trunk/my-project  directory, but it will
         not  contain directives that would
        create the  trunk  directory itself
        (because  trunk  doesn&#39;t match the
        include filter).  You&#39;ll need to make sure that any
        directories that the new dump stream expects to exist
        actually do exist in the target repository before trying to
        load the stream into that repository. Repository Replication There are several scenarios in which it is quite handy to
        have a Subversion repository whose version history is exactly
        the same as some other repository&#39;s.  Perhaps the most obvious
        one is the maintenance of a simple backup repository, used
        when the primary repository has become inaccessible due to a
        hardware failure, network outage, or other such annoyance.
        Other scenarios include deploying mirror repositories to
        distribute heavy Subversion load across multiple servers, use
        as a soft-upgrade mechanism, and so on. Subversion provides a program for managing scenarios such
        as these.   svnsync  works by essentially
        asking the Subversion server to  replay 
        revisions, one at a time.  It then uses that revision
        information to mimic a commit of the same to another
        repository.  Neither repository needs to be locally accessible
        to the machine on which  svnsync  is
        running its parameters are repository URLs, and it does
        all its work through Subversion&#39;s Repository Access (RA)
        interfaces.  All it requires is read access to the source
        repository and read/write access to the destination
        repository. When using  svnsync  against a remote
          source repository, the Subversion server for that repository
          must be running Subversion version 1.4 or later. Replication with svnsync Assuming you already have a source repository that you&#39;d
          like to mirror, the next thing you need is a target repository
          that will actually serve as that mirror.  This target
          repository can use either of the available filesystem
          data-store backends (see
           ) Subversion&#39;s abstraction layers ensure that such
          details don&#39;t matter.  But by default, it must
          not yet have any version history in it.  (We&#39;ll discuss an
          exception to this later in this section.) The protocol that  svnsync  uses to
          communicate revision information is highly sensitive to
          mismatches between the versioned histories contained in the
          source and target repositories.  For this reason,
          while  svnsync 
          cannot  demand  that the target repository
          be read-only, In fact, it can&#39;t truly be
          read-only, or  svnsync  itself would have a
          tough time copying revision history into it. 
          allowing the revision history in the target repository to
          change by any mechanism other than the mirroring process is a
          recipe for disaster. Do  not  modify a mirror repository
            in such a way as to cause its version history to deviate
            from that of the repository it mirrors.  The only commits
            and revision property modifications that ever occur on that
            mirror repository should be those performed by the
             svnsync  tool. Another requirement of the target repository is that the
           svnsync  process be allowed to modify
          revision properties.  Because  svnsync  works
          within the framework of that repository&#39;s hook system, the
          default state of the repository (which is to disallow revision
          property changes; see   in
           ) is insufficient.
          You&#39;ll need to explicitly implement the pre-revprop-change
          hook, and your script must allow  svnsync 
          to set and change revision properties.  With those
          provisions in place, you are ready to start mirroring
          repository revisions. It&#39;s a good idea to implement authorization measures
            that allow your repository replication process to perform
            its tasks while preventing other users from modifying the
            contents of your mirror repository at all. Let&#39;s walk through the use of  svnsync 
          in a somewhat typical mirroring scenario.  We&#39;ll pepper this
          discourse with practical recommendations, which you are free to
          disregard if they aren&#39;t required by or suitable for your
          environment. We will be mirroring the public Subversion repository
          which houses the source code for this very book and exposing
          that mirror publicly on the Internet, hosted on a different
          machine than the one on which the original Subversion source
          code repository lives.  This remote host has a global
          configuration that permits anonymous users to read the
          contents of repositories on the host, but requires users to
          authenticate to modify those repositories.  (Please forgive
          us for glossing over the details of Subversion server
          configuration for the moment those are covered
          thoroughly in  .)  And for
          no other reason than that it makes for a more interesting
          example, we&#39;ll be driving the replication process from a
          third machine the one that we currently find ourselves
          using. First, we&#39;ll create the repository which will be our
          mirror.  This and the next couple of steps do require shell
          access to the machine on which the mirror repository will
          live.  Once the repository is all configured, though, we
          shouldn&#39;t need to touch it directly again. 
$ ssh admin@svn.example.com &quot;svnadmin create /var/svn/svn-mirror&quot;
admin@svn.example.com&#39;s password: ********
$
 At this point, we have our repository, and due to our
          server&#39;s configuration, that repository is now
           live  on the Internet.  Now, because we don&#39;t
          want anything modifying the repository except our replication
          process, we need a way to distinguish that process from other
          would-be committers.  To do so, we use a dedicated username
          for our process.  Only commits and revision property
          modifications performed by the special username
           syncuser  will be allowed. We&#39;ll use the repository&#39;s hook system both to allow the
          replication process to do what it needs to do and to enforce
          that only it is doing those things.  We accomplish this by
          implementing two of the repository event
          hooks pre-revprop-change and start-commit.  Our
           pre-revprop-change  hook script is found
          in  , and basically verifies that the user attempting the
          property changes is our  syncuser  user.  If
          so, the change is allowed; otherwise, it is denied. Mirror repository&#39;s pre-revprop-change hook script 
#!/bin/sh 

USER=&quot;$3&quot;

if [ &quot;$USER&quot; = &quot;syncuser&quot; ]; then exit 0; fi

echo &quot;Only the syncuser user may change revision properties&quot; &gt;&amp;2
exit 1
 That covers revision property changes.  Now we need to
          ensure that only the  syncuser  user is
          permitted to commit new revisions to the repository.  We do
          this using a  start-commit  hook script
          such as the one in  . Mirror repository&#39;s start-commit hook script 
#!/bin/sh 

USER=&quot;$2&quot;

if [ &quot;$USER&quot; = &quot;syncuser&quot; ]; then exit 0; fi

echo &quot;Only the syncuser user may commit new revisions&quot; &gt;&amp;2
exit 1
 After installing our hook scripts and ensuring that they
          are executable by the Subversion server, we&#39;re finished with
          the setup of the mirror repository.  Now, we get to actually
          do the mirroring. The first thing we need to do with
           svnsync  is to register in our target
          repository the fact that it will be a mirror of the source
          repository.  We do this using the  svnsync
          initialize  subcommand.  The URLs we provide point
          to the root directories of the target and source
          repositories, respectively.  In Subversion 1.4, this is
          required only full mirroring of repositories is
          permitted.  Beginning with Subversion 1.5, though, you can
          use  svnsync  to mirror only some subtree
          of the repository, too. 
$ svnsync help init
initialize (init): usage: svnsync initialize DEST_URL SOURCE_URL

Initialize a destination repository for synchronization from
another repository.
 
$ svnsync initialize http://svn.example.com/svn-mirror \
                     http://svnbook.googlecode.com/svn \
                     --sync-username syncuser --sync-password syncpass
Copied properties for revision 0 (svn:sync-* properties skipped).
NOTE: Normalized svn:* properties to LF line endings (1 rev-props, 0 node-props).
$
 Our target repository will now remember that it is a
          mirror of the public Subversion source code repository.
          Notice that we provided a username and password as arguments
          to  svnsync that was required by the
          pre-revprop-change hook on our mirror repository. In Subversion 1.4, the values given to
             svnsync &#39;s  --username  and
             --password  command-line options were used
            for authentication against both the source and destination
            repositories.  This caused problems when a user&#39;s
            credentials weren&#39;t exactly the same for both repositories,
            especially when running in noninteractive mode (with the
             --non-interactive  option).  This was
            fixed in Subversion 1.5 with the introduction of two new
            pairs of options.  Use
             --source-username  and
             --source-password  to provide authentication
            credentials for the source repository; use
             --sync-username  and
             --sync-password  to provide credentials for
            the destination repository.  (The old
             --username  and  --password 
            options still exist for compatibility, but we advise against
            using them.) And now comes the fun part.  With a single subcommand, we
          can tell  svnsync  to copy all the
          as-yet-unmirrored revisions from the source repository to the
          target. Be forewarned that while it will take
          only a few seconds for the average reader to parse this
          paragraph and the sample output that follows it, the actual
          time required to complete such a mirroring operation is, shall
          we say, quite a bit longer.  The
           svnsync synchronize  subcommand will peek
          into the special revision properties previously stored on the
          target repository and determine how much of the source
          repository has been previously mirrored in this case,
          the most recently mirrored revision is r0.  Then it will query
          the source repository and determine what the latest revision
          in that repository is.  Finally, it asks the source
          repository&#39;s server to start replaying all the revisions
          between 0 and that latest revision.  As
           svnsync  gets the resultant response from
          the source repository&#39;s server, it begins forwarding those
          revisions to the target repository&#39;s server as new
          commits. 
$ svnsync help synchronize
synchronize (sync): usage: svnsync synchronize DEST_URL [SOURCE_URL]

Transfer all pending revisions to the destination from the source
with which it was initialized.
 
$ svnsync synchronize http://svn.example.com/svn-mirror \
                      http://svnbook.googlecode.com/svn
Committed revision 1.
Copied properties for revision 1.
Committed revision 2.
Copied properties for revision 2.
Transmitting file data .
Committed revision 3.
Copied properties for revision 3.
 
Transmitting file data .
Committed revision 4063.
Copied properties for revision 4063.
Transmitting file data .
Committed revision 4064.
Copied properties for revision 4064.
Transmitting file data ....
Committed revision 4065.
Copied properties for revision 4065.
$
 Of particular interest here is that for each mirrored
          revision, there is first a commit of that revision to the
          target repository, and then property changes follow.  This
          two-phase replication is required because the initial commit
          is performed by (and attributed to) the user
           syncuser  and is datestamped with the time
          as of that revision&#39;s creation.   svnsync 
          has to follow up with an immediate series of property
          modifications that copy into the target repository all the
          original revision properties found for that revision in the
          source repository, which also has the effect of fixing the
          author and datestamp of the revision to match that of the
          source repository. Also noteworthy is that  svnsync 
          performs careful bookkeeping that allows it to be safely
          interrupted and restarted without ruining the integrity of the
          mirrored data.  If a network glitch occurs while mirroring a
          repository, simply repeat the  svnsync
          synchronize  command, and it will happily pick up
          right where it left off.  In fact, as new revisions appear in
          the source repository, this is exactly what you do
          to keep your mirror up to date. As part of its bookkeeping,  svnsync 
            records in the mirror repository the URL with which the
            mirror was initialized.  Because of this, invocations of
             svnsync  which follow the initialization
            step do not  require  that you provide
            the source URL on the command line again.  However, for
            security purposes, we recommend that you continue to do so.
            Depending on how it is deployed, it may not be safe for
             svnsync  to trust the source URL which it
            retrieves from the mirror repository, and from which it
            pulls versioned data. svnsync Bookkeeping svnsync  needs to be able to set and
            modify revision properties on the mirror repository because
            those properties are part of the data it is tasked with
            mirroring.  As those properties change in the source
            repository, those changes need to be reflected in the mirror
            repository, too.  But  svnsync  also uses a
            set of custom revision properties stored in revision 0
            of the mirror repository for its own internal
            bookkeeping.  These properties contain information such as
            the URL and UUID of the source repository, plus some
            additional state-tracking information. One of those pieces of state-tracking information is a
            flag that essentially just means  there&#39;s a
            synchronization in progress right now.  This is used
            to prevent multiple  svnsync  processes
            from colliding with each other while trying to mirror data
            to the same destination repository.  Now, generally you
            won&#39;t need to pay any attention whatsoever to
             any  of these special properties (all of
            which begin with the prefix  svn:sync- ).
            Occasionally, though, if a synchronization fails
            unexpectedly, Subversion never has a chance to remove this
            particular state flag.  This causes all future
            synchronization attempts to fail because it appears that a
            synchronization is still in progress when, in fact, none is.
            Fortunately, recovering from this situation is easy to do.
            In Subversion 1.7, you can use the newly introduced
             --steal-lock  option with
             svnsync &#39;s commands.  In previous
            Subversion versions, you need only to remove the
             svn:sync-lock  property which serves as
            this flag from revision 0 of the mirror repository: 
$ svn propdel --revprop -r0 svn:sync-lock http://svn.example.com/svn-mirror
property &#39;svn:sync-lock&#39; deleted from repository revision 0
$
 Also,  svnsync  stores the source
            repository URL provided at mirror initialization time in a
            bookkeeping property on the mirror repository.  Future
            synchronization operations against that mirror which omit
            the source URL at the command line will consult the
            special  svn:sync-from-url  property
            stored on the mirror itself to know where to synchronize
            from.  This value is used literally by the synchronization
            process, though.  Be wary of using non-fully-qualified
            domain names (such as referring
            to  svnbook.red-bean.com  as
            simply  svnbook  because that happens to
            work when you are connected directly to
            the  red-bean.com  network), domain names
            which don&#39;t resolve or resolve differently depending on
            where you happen to be operating from, or IP addresses
            (which can change over time).  But here again, if you need
            an existing mirror to start referring to a different URL
            for the same source repository, you can change the
            bookkeeping property which houses that information.  Users
            of Subversion 1.7 or better can use  svnsync init
            --allow-non-empty  to reinitialize their mirrors
            with new source URL: 
$ svnsync initialize --allow-non-empty http://svn.example.com/svn-mirror \
                                        NEW-SOURCE-URL 
Copied properties for revision 4065.
$
 If you are running an older version of Subversion,
            you&#39;ll need to manually tweak
            the  svn:sync-from-url  bookkeeping
            property: 
$ svn propset --revprop -r0 svn:sync-from-url  NEW-SOURCE-URL  \
      http://svn.example.com/svn-mirror
property &#39;svn:sync-from-url&#39; set on repository revision 0
$
 Another interesting thing about these special
            bookkeeping properties is that  svnsync 
            will not attempt to mirror any of those properties when they
            are found in the source repository.  The reason is probably
            obvious, but basically boils down to
             svnsync  not being able to distinguish the
            special properties it has merely copied from the source
            repository from those it needs to consult and maintain for
            its own bookkeeping needs.  This situation could occur if,
            for example, you were maintaining a mirror of a mirror of a
            third repository.  When  svnsync  sees its
            own special properties in revision 0 of the source
            repository, it simply ignores them. An  svnsync info  subcommand was
            added in Subversion 1.6 to easily display the special
            bookkeeping properties in the destination
            repository. 
$ svnsync help info
info: usage: svnsync info DEST_URL

Print information about the synchronization destination repository
located at DEST_URL.
 
$ svnsync info http://svn.example.com/svn-mirror
Source URL: http://svnbook.googlecode.com/svn
Source Repository UUID: 931749d0-5854-0410-9456-f14be4d6b398
Last Merged Revision: 4065
$
 There is, however, one bit of inelegance in the process.
          Because Subversion revision properties can be changed at any
          time throughout the lifetime of the repository, and because
          they don&#39;t leave an audit trail that indicates when they were
          changed, replication processes have to pay special attention
          to them.  If you&#39;ve already mirrored the first 15 revisions of
          a repository and someone then changes a revision property on
          revision 12,  svnsync  won&#39;t know to go back
          and patch up its copy of revision 12.  You&#39;ll need to tell it
          to do so manually by using (or with some additional tooling
          around) the  svnsync copy-revprops 
          subcommand, which simply rereplicates all the revision
          properties for a particular revision or range thereof. 
$ svnsync help copy-revprops
copy-revprops: usage:

    1. svnsync copy-revprops DEST_URL [SOURCE_URL]
    2. svnsync copy-revprops DEST_URL REV[:REV2]

 
$ svnsync copy-revprops http://svn.example.com/svn-mirror 12
Copied properties for revision 12.
$
 That&#39;s repository replication
          via  svnsync  in a nutshell.  You&#39;ll likely
          want some automation around such a process.  For example,
          while our example was a pull-and-push setup, you might wish to
          have your primary repository push changes to one or more
          blessed mirrors as part of its post-commit and
          post-revprop-change hook implementations.  This would enable
          the mirror to be up to date in as near to real time as is
          likely possible. Partial replication with svnsync svnsync  isn&#39;t limited to full copies
          of everything which lives in a repository.  It can handle
          various shades of partial replication, too.  For example,
          while it isn&#39;t very commonplace to do so,
           svnsync  does gracefully mirror repositories
          in which the user as whom it authenticates has only partial
          read access.  It simply copies only the bits of the repository
          that it is permitted to see.  Obviously, such a mirror is not
          useful as a backup solution. As of Subversion 1.5,  svnsync  also
          has the ability to mirror a subset of a repository rather than
          the whole thing.  The process of setting up and maintaining
          such a mirror is exactly the same as when mirroring a whole
          repository, except that instead of specifying the source
          repository&#39;s root URL when running  svnsync
          init , you specify the URL of some subdirectory
          within that repository.  Synchronization to that mirror will
          now copy only the bits that changed under that source
          repository subdirectory.  There are some limitations to this
          support, though.  First, you can&#39;t mirror multiple disjoint
          subdirectories of the source repository into a single mirror
          repository you&#39;d need to instead mirror some parent
          directory that is common to both.  Second, the filtering
          logic is entirely path-based, so if the subdirectory you are
          mirroring was renamed at some point in the past, your mirror
          would contain only the revisions since the directory appeared
          at the URL you specified.  And likewise, if the source
          subdirectory is renamed in the future, your synchronization
          processes will stop mirroring data at the point that the
          source URL you specified is no longer valid. A quick trick for mirror creation We mentioned previously the cost of setting up an
          initial mirror of an existing repository.  For many folks,
          the sheer cost of transmitting thousands or
          millions of revisions of history to a new mirror
          repository via  svnsync  is a show-stopper.
          Fortunately, Subversion 1.7 provides a workaround by way of
          a new  --allow-non-empty  option to
           svnsync initialize .  This option allows
          you to initialize one repository as a mirror of another
          while bypassing the verification that the to-be-initialized
          mirror has no version history present in it.  Per our
          previous warnings about the sensitivity of this whole
          replication process, you should rightly discern that this is
          an option to be used only with great caution.  But it&#39;s
          wonderfully handy when you have administrative access to the
          source repository, where you can simply make a physical copy
          of the repository and then initialize that copy as a new
          mirror: 
$ svnadmin hotcopy /path/to/repos /path/to/mirror-repos
$ ### create /path/to/mirror-repos/hooks/pre-revprop-change
$ svnsync initialize file:///path/to/mirror-repos \
                     file:///path/to/repos
svnsync: E000022: Destination repository already contains revision history; co
nsider using --allow-non-empty if the repository&#39;s revisions are known to mirr
or their respective revisions in the source repository
$ svnsync initialize --allow-non-empty file:///path/to/mirror-repos \
                                       file:///path/to/repos
Copied properties for revision 32042.
$
 Admins who are running a version of Subversion prior to
          1.7 (and thus do not have access to  svnsync
          initialize &#39;s  --allow-non-empty 
          feature) can accomplish effectively the same thing that that
          feature does through  careful 
          manipulation of the r0 revision properties on the copy of
          the repository which is slated to become a mirror of the
          original.  Use  svnadmin setrevprop  to
          create the same bookkeeping properties
          that  svnsync  would have created
          there. Replication wrap-up We&#39;ve discussed a couple of ways to replicate revision
          history from one repository to another.  So let&#39;s look now
          at the user end of these operations.  How does replication
          and the various situations which call for it affect
          Subversion clients? As far as user interaction with repositories and mirrors
          goes, it  is  possible to have a single
          working copy that interacts with both, but you&#39;ll have to
          jump through some hoops to make it happen.  First, you need
          to ensure that both the primary and mirror repositories have
          the same repository UUID (which is not the case by default).
          See   later in
          this chapter for more about this. Once the two repositories have the same UUID, you can use
           svn relocate  to point your working
          copy to whichever of the repositories you wish to operate
          against, a process that is described in
            in
           .  There is a possible danger here,
          though, in that if the primary and mirror repositories
          aren&#39;t in close synchronization, a working copy up to date
          with, and pointing to, the primary repository will, if
          relocated to point to an out-of-date mirror, become confused
          about the apparent sudden loss of revisions it fully expects
          to be present, and it will throw errors to that effect.  If
          this occurs, you can relocate your working copy back to the
          primary repository and then either wait until the mirror
          repository is up to date, or backdate your working copy to a
          revision you know is present in the sync repository, and
          then retry the relocation. Finally, be aware that the revision-based replication
          provided by  svnsync  is only
          that replication of revisions.  Only the kinds of
          information carried by the Subversion repository dump file
          format are available for replication.  As such, tools such
          as  svnsync 
          (and  svnrdump , which we discuss in
           )
          are limited in ways similar to that of the repository dump
          stream.  They do not include in their replicated information
          such things as the hook implementations, repository or
          server configuration data, uncommitted transactions, or
          information about user locks on repository paths. Repository Backup Despite numerous advances in technology since the birth of
        the modern computer, one thing unfortunately rings true with
        crystalline clarity sometimes things go very, very
        awry.  Power outages, network connectivity dropouts, corrupt
        RAM, and crashed hard drives are but a taste of the evil that
        Fate is poised to unleash on even the most conscientious
        administrator.  And so we arrive at a very important
        topic how to make backup copies of your repository
        data. There are two types of backup methods available for
        Subversion repository administrators full and
        incremental.  A full backup of the repository involves
        squirreling away in one sweeping action all the information
        required to fully reconstruct that repository in the event of
        a catastrophe.  Usually, it means, quite literally, the
        duplication of the entire repository directory (which includes
        either a Berkeley DB or FSFS environment).  Incremental
        backups are lesser things:  backups of only the portion of the
        repository data that has changed since the previous
        backup. As far as full backups go, the naïve approach might seem
        like a sane one, but unless you temporarily disable all other
        access to your repository, simply doing a recursive directory
        copy runs the risk of generating a faulty backup.  In the case
        of Berkeley DB, the documentation describes a certain order in
        which database files can be copied that will guarantee a valid
        backup copy.  A similar ordering exists for FSFS data.  But
        you don&#39;t have to implement these algorithms yourself, because
        the Subversion development team has already done so.  The
         svnadmin hotcopy  command takes care of the
        minutiae involved in making a hot backup of your repository.
        And its invocation is as trivial as the Unix
         cp  or Windows  copy 
        operations: 
$ svnadmin hotcopy /var/svn/repos /var/svn/repos-backup
 The resultant backup is a fully functional Subversion
        repository, able to be dropped in as a replacement for your
        live repository should something go horribly wrong. When making copies of a Berkeley DB repository, you can
        even instruct  svnadmin hotcopy  to purge any
        unused Berkeley DB logfiles (see  ) from the
        original repository upon completion of the copy.  Simply
        provide the  --clean-logs  option on the
        command line. 
$ svnadmin hotcopy --clean-logs /var/svn/bdb-repos /var/svn/bdb-repos-backup
 Additional tooling around this command is available, too.
        The  tools/backup/  directory of the
        Subversion source distribution holds the
         hot-backup.py  script.  This script adds a
        bit of backup management atop  svnadmin
        hotcopy , allowing you to keep only the most recent
        configured number of backups of each repository.  It will
        automatically manage the names of the backed-up repository
        directories to avoid collisions with previous backups and
        will  rotate off  older backups, deleting them so
        that only the most recent ones remain.  Even if you also have an
        incremental backup, you might want to run this program on a
        regular basis.  For example, you might consider using
         hot-backup.py  from a program scheduler
        (such as  cron  on Unix systems), which can
        cause it to run nightly (or at whatever granularity of time
        you deem safe). Some administrators use a different backup mechanism built
        around generating and storing repository dump data.  We
        described in  
        how to use  svnadmin dump  with
        the  --incremental  option to perform an
        incremental backup of a given revision or range of revisions.
        And of course, you can achieve a full backup variation of this
        by omitting the  --incremental  option to that
        command.  There is some value in these methods, in that the
        format of your backed-up information is flexible it&#39;s
        not tied to a particular platform, versioned filesystem type,
        or release of Subversion or Berkeley DB.  But that flexibility
        comes at a cost, namely that restoring that data can take a
        long time longer with each new revision committed to
        your repository.  Also, as is the case with so many of the
        various backup methods, revision property changes that are
        made to already backed-up revisions won&#39;t get picked up by a
        nonoverlapping, incremental dump generation.  For these
        reasons, we recommend against relying solely on dump-based
        backup approaches. Beginning with Subversion 1.8,  svnadmin hotcopy 
        accepts  --incremental  option and supports incremental
        hotcopy mode for FSFS repositories.  In incremental hotcopy mode,
        revision data which has already been copied from the source to the
        destination repository will not be copied again. When
         --incremental  option is used with
         svnadmin hotcopy , Subversion will only copy new
        revisions, and revisions which have changed in size or had their
        modification time stamp changed since the previous hotcopy
        operation.  Moreover, unlike with  svnsync  or
         svnadmin dump --incremental , performance of
         svnadmin hotcopy --incremental  is only limited to
        disk I/O.  Therefore, incremental hotcopy can be a huge
        time saver when making a backup of a large repository. As you can see, each of the various backup types and
        methods has its advantages and disadvantages.  The easiest is
        by far the full hot backup, which will always result in a
        perfect working replica of your repository.  Should something
        bad happen to your live repository, you can restore from the
        backup with a simple recursive directory copy.  Unfortunately,
        if you are maintaining multiple backups of your repository,
        these full copies will each eat up just as much disk space as
        your live repository.  Incremental backups, by contrast, tend
        to be quicker to generate and smaller to store.  But the
        restoration process can be a pain, often involving applying
        multiple incremental backups.  And other methods have their
        own peculiarities.  Administrators need to find the balance
        between the cost of making the backup and the cost of
        restoring it. The  svnsync  program (see  ) actually
        provides a rather handy middle-ground approach.  If you are
        regularly synchronizing a read-only mirror with your main
        repository, in a pinch your read-only mirror is probably
        a good candidate for replacing that main repository if it
        falls over.  The primary disadvantage of this method is that
        only the versioned repository data gets
        synchronized repository configuration files,
        user-specified repository path locks, and other items that
        might live in the physical repository directory but not
         inside  the repository&#39;s virtual versioned
        filesystem are not handled by  svnsync . In any backup scenario, repository administrators need to
        be aware of how modifications to unversioned revision
        properties affect their backups.  Since these changes do not
        themselves generate new revisions, they will not trigger
        post-commit hooks, and may not even trigger the
        pre-revprop-change and post-revprop-change
        hooks. svnadmin setlog  can
        be called in a way that bypasses the hook interface
        altogether.   And since you can change
        revision properties without respect to chronological
        order you can change any revision&#39;s properties at any
        time an incremental backup of the latest few revisions
        might not catch a property modification to a revision that was
        included as part of a previous backup. Generally speaking, only the truly paranoid would need to
        back up their entire repository, say, every time a commit
        occurred.  However, assuming that a given repository has some
        other redundancy mechanism in place with relatively fine
        granularity (such as per-commit emails or incremental dumps), a
        hot backup of the database might be something that a
        repository administrator would want to include as part of a
        system-wide nightly backup.  It&#39;s your data protect it
        as much as you&#39;d like. Often, the best approach to repository backups is a
        diversified one that leverages combinations of the methods
        described here.  The Subversion developers, for example, back
        up the Subversion source code repository nightly using
         hot-backup.py  and an off-site
         rsync  of those full backups; keep multiple
        archives of all the commit and property change notification
        emails; and have repository mirrors maintained by various
        volunteers using  svnsync .  Your solution
        might be similar, but should be catered to your needs and that
        delicate balance of convenience with paranoia.  And whatever
        you do, validate your backups from time to time what
        good is a spare tire that has a hole in it?  While all of this
        might not save your hardware from the iron fist of
        Fate, You know the collective term for
        all of her  fickle fingers.  it
        should certainly help you recover from those trying
        times. Managing Repository UUIDs Subversion repositories have a universally unique
        identifier (UUID) associated with them.  This is used by
        Subversion clients to verify the identity of a repository when
        other forms of verification aren&#39;t good enough (such as
        checking the repository URL, which can change over time).
        Most Subversion repository administrators rarely, if ever,
        need to think about repository UUIDs as anything more than a
        trivial implementation detail of Subversion.  Sometimes,
        however, there is cause for attention to this detail. As a general rule, you want the UUIDs of your live
        repositories to be unique.  That is, after all, the point of
        having UUIDs.  But there are times when you want the
        repository UUIDs of two repositories to be exactly the same.
        For example, if you make a copy of a repository for backup
        purposes, you want the backup to be a perfect replica of the
        original so that, in the event that you have to restore that
        backup and replace the live repository, users don&#39;t suddenly
        see what looks like a different repository.  When dumping and
        loading repository history (as described earlier in  ), you get to decide
        whether to apply the UUID encapsulated in the data dump
        stream to the repository in which you are loading the data.  The
        particular circumstance will dictate the correct
        behavior. There are a couple of ways to set (or reset) a
        repository&#39;s UUID, should you need to.  As of Subversion 1.5,
        this is as simple as using the  svnadmin
        setuuid  command.  If you provide this subcommand
        with an explicit UUID, it will validate that the UUID is
        well-formed and then set the repository UUID to that value.
        If you omit the UUID, a brand-new UUID will be generated for
        your repository. 
$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$ svnadmin setuuid /var/svn/repos   # generate a new UUID
$ svnlook uuid /var/svn/repos
3c3c38fe-acc0-11dc-acbc-1b37ff1c8e7c
$ svnadmin setuuid /var/svn/repos \
           cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec  # restore the old UUID
$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$
 For folks using versions of Subversion earlier than 1.5,
        these tasks are a little more complicated.  You can explicitly
        set a repository&#39;s UUID by piping a repository dump file stub
        that carries the new UUID specification through
         svnadmin load --force-uuid
         REPOS-PATH . 
$ svnadmin load --force-uuid /var/svn/repos &lt;&lt;EOF
SVN-fs-dump-format-version: 2

UUID: cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
EOF
$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$
 Having older versions of Subversion generate a brand-new
        UUID is not quite as simple to do, though.  Your best bet here
        is to find some other way to generate a UUID, and then
        explicitly set the repository&#39;s UUID to that value. Moving and Removing Repositories Subversion repository data is wholly contained within the
      repository directory.  As such, you can move a Subversion
      repository to some other location on disk, rename a repository,
      copy a repository, or delete a repository altogether using the
      tools provided by your operating system for manipulating
      directories mv ,  cp
      -a , and  rm -r  on Unix platforms;
       copy ,  move , and
       rmdir /s /q  on Windows; vast numbers of mouse
      and menu gyrations in various graphical file explorer
      applications, and so on. Of course, there&#39;s often still more to be done when trying
      to cleanly affect changes such as this.  For example, you might
      need to update your Subversion server configuration to point to
      the new location of a relocated repository or to remove
      configuration bits for a now-deleted repository.  If you have
      automated processes that publish information from or about your
      repositories, they may need to be updated.  Hook scripts might
      need to be reconfigured.  Users may need to be notified.  The list
      can go on indefinitely, or at least to the extent that you&#39;ve
      built processes and procedures around your Subversion
      repository. In the case of a copied repository, you should also consider
      the fact that Subversion uses repository UUIDs to distinguish
      repositories.  If you copy a Subversion repository using a
      typical shell recursive copy command, you&#39;ll wind up with two
      repositories that are identical in every way including
      their UUIDs.  In some circumstances, this might be desirable.
      But in the instances where it is not, you&#39;ll need to generate a
      new UUID for one of these identical repositories.  See
        for more about
      managing repository UUIDs. Summary By now you should have a basic understanding of how to
      create, configure, and maintain Subversion repositories.  We
      introduced you to the various tools that will assist you with
      this task.  Throughout the chapter, we noted common
      administration pitfalls and offered suggestions for avoiding
      them. All that remains is for you to decide what exciting data to
      store in your repository, and finally, how to make it available
      over a network.  The next chapter is all about networking. Server Configuration A Subversion repository can be accessed simultaneously by
    clients running on the same machine on which the repository
    resides using URLs carrying the  file://  scheme.
    But the typical Subversion setup involves a single server machine
    being accessed from clients on computers all over the
    office or, perhaps, all over the world. This chapter describes how to get your Subversion repository
    exposed outside its host machine for use by remote clients.  We
    will cover Subversion&#39;s currently available server mechanisms,
    discussing the configuration and use of each.  After reading this
    chapter, you should be able to decide which networking setup is
    right for your needs, as well as understand how to enable such a
    setup on your host computer. Overview API layers Repository Access (RA) Layer Subversion was designed with an abstract repository
      access layer.  This means that a repository can be
      programmatically accessed by any sort of server process, and the
      client  repository access  API allows programmers
      to write plug-ins that speak relevant network protocols.  In
      theory, Subversion can use an infinite number of network
      implementations.  In practice, there are only two Subversion
      servers in widespread use today. httpd Apache HTTP Server httpd Apache HTTP Server (also known
      as  httpd ) is an extremely popular web server;
      using the  mod_dav_svn  module, Apache can
      access a repository and make it available to clients via the
      WebDAV/DeltaV protocol, which is an extension of HTTP.  Because
      Apache is an extremely extensible server, it provides a number
      of features  for free,  such as encrypted SSL
      communication, logging, integration with a number of third-party
      authentication systems, and limited built-in web browsing of
      repositories. svnserve In the other corner is  svnserve :
      a small, lightweight server program that speaks a custom
      protocol with clients.  Because its protocol is explicitly
      designed for Subversion and is stateful (unlike HTTP), it
      provides significantly faster network operations but at
      the cost of some features as well.  While it can use SASL to
      provide a variety of authentication and encryption options, it
      has no logging or built-in web browsing.  It is, however,
      extremely easy to set up and is often the best option for small
      teams just starting out with Subversion. The network protocol which  svnserve 
      speaks may also be tunneled over an SSH connection.  This
      deployment option for  svnserve  differs quite
      a bit in features from a traditional  svnserve 
      deployment.  SSH is used to encrypt all communication.  SSH is
      also used exclusively to authenticate, so real system accounts
      are required on the server host (unlike
      vanilla  svnserve , which has its own private
      user accounts).  Finally, because this setup requires that each
      user spawn a private, temporary  svnserve 
      process, it&#39;s equivalent (from a permissions point of view) to
      allowing a group of local users to all access the repository
      via  file://  URLs.  Path-based access control
      has no meaning, since each user is accessing the repository
      database files directly.  provides a
      quick summary of the three typical server deployments. Comparison of Subversion server options Feature Apache + mod_dav_svn svnserve svnserve over SSH Authentication options HTTP Basic or Digest auth, X.509 certificates, LDAP,
              NTLM, or any other mechanism available to Apache httpd CRAM-MD5 by default;  LDAP, NTLM, or any other mechanism
              available to SASL SSH User account options Private  users  file, or other mechanisms
            available to Apache httpd (LDAP, SQL, etc.) Private  users  file, or other
              mechanisms available to SASL (LDAP, SQL, etc.) System accounts Authorization options Read/write access can be granted over the whole
              repository, or specified per path Read/write access can be granted over the whole
              repository, or specified per path Read/write access only grantable over the whole
              repository Encryption Available via optional SSL (https) Available via optional SASL features Inherent in SSH connection Logging High-level operational logging of Subversion
              operations plus detailed logging at the
              per-HTTP-request level High-level operational logging only High-level operational logging only Interoperability Accessible by other WebDAV clients Talks only to svn clients Talks only to svn clients Web viewing Limited built-in support, or via third-party tools
              such as ViewVC Only via third-party tools such as ViewVC Only via third-party tools such as ViewVC Master-slave server replication Transparent write-proxying available from slave to
              master Can only create read-only slave servers Can only create read-only slave servers Speed Somewhat slower Somewhat faster Somewhat faster Initial setup Somewhat complex Extremely simple Moderately simple Choosing a Server Configuration So, which server should you use?  Which is best? Obviously, there&#39;s no right answer to that question.  Every
      team has different needs, and the different servers all
      represent different sets of trade-offs.  The Subversion project
      itself doesn&#39;t endorse one server or another, or consider either
      server more  official  than another. Here are some reasons why you might choose one deployment
      over another, as well as reasons you
      might  not  choose one. The svnserve Server Why you might want to use it: Quick and easy to set up. Network protocol is stateful and noticeably
                  faster than WebDAV. No need to create system accounts on
                  server. Password is not passed over the network. Why you might want to avoid it: By default, only one authentication method is
                  available, the network protocol is not encrypted,
                  and the server stores clear text passwords.  (All
                  these things can be changed by configuring SASL, but
                  it&#39;s a bit more work to do.) No advanced logging facilities. No built-in web browsing.  (You&#39;d have to
                  install a separate web server and repository
                  browsing software to add this.) svnserve over SSH Why you might want to use it: The network protocol is stateful and noticeably
                  faster than WebDAV. You can take advantage of existing SSH accounts
                  and user infrastructure. All network traffic is encrypted. Why you might want to avoid it: Only one choice of authentication method is
                  available. No advanced logging facilities. It requires users to be in the same system
                  group, or use a shared SSH key. If used improperly, it can lead to file
                  permission problems. The Apache HTTP Server Why you might want to use it: It allows Subversion to use any of the
                  numerous authentication systems already integrated
                  with Apache. There is no need to create system accounts on
                  the server. Full Apache logging is available. Network traffic can be encrypted via SSL. HTTP(S) can usually go through corporate
                firewalls. Built-in repository browsing is available via
                  web browser. The repository can be mounted as a network
                  drive for transparent version control (see  ). Why you might want to avoid it: Noticeably slower than  svnserve ,
                  because HTTP is a stateless protocol and requires
                  more network turnarounds. Initial setup can be complex. Recommendations In general, the authors of this book recommend a vanilla
         svnserve  installation for small teams just
        trying to get started with a Subversion server; it&#39;s the
        simplest to set up and has the fewest maintenance issues.
        You can always switch to a more complex server
        deployment as your needs change. Here are some general recommendations and tips, based on
        years of supporting users: If you&#39;re trying to set up the simplest possible server
            for your group, a vanilla  svnserve 
            installation is the easiest, fastest route.  Note,
            however, that your repository data will be transmitted in
            the clear over the network.  If your deployment is
            entirely within your company&#39;s LAN or VPN, this isn&#39;t an
            issue.  If the repository is exposed to the wide-open
            Internet, you might want to make sure that either the
            repository&#39;s contents aren&#39;t sensitive (e.g., it contains
            only open source code), or that you go the extra mile in
            configuring SASL to encrypt network communications. If you need to integrate with existing legacy identity
            systems (LDAP, Active Directory, NTLM, X.509, etc.),
            you must use either the Apache-based server
            or  svnserve  configured with SASL. If you&#39;ve decided to use either Apache or stock
             svnserve , create a single
             svn  user on your system and run the
            server process as that user.  Be sure to make the
            repository directory wholly owned by the
             svn  user as well.  From a security
            point of view, this keeps the repository data nicely
            siloed and protected by operating system filesystem
            permissions, changeable by only the Subversion server
            process itself. If you have an existing infrastructure that is heavily based
            on SSH accounts, and if your users already have system
            accounts on your server machine, it makes sense to
            deploy an  svnserve -over-SSH solution.
            Otherwise, we don&#39;t widely recommend this option to the
            public.  It&#39;s generally considered safer to have your
            users access the repository via (imaginary) accounts
            managed by  svnserve  or Apache, rather
            than by full-blown system accounts.  If your deep desire
            for encrypted communication still draws you to this
            option, we recommend using Apache with SSL or
             svnserve  with SASL encryption
            instead. Do  not  be seduced by the simple
            idea of having all of your users access a repository
            directly via  file://  URLs.  Even if the
            repository is readily available to everyone via a network
            share, this is a bad idea.  It removes any layers of
            protection between the users and the repository: users can
            accidentally (or intentionally) corrupt the repository
            database, it becomes hard to take the repository offline
            for inspection or upgrade, and it can lead to a mess of
            file permission problems (see  ).  Note that this
            is also one of the reasons we warn against accessing
            repositories via  svn+ssh:// 
            URLs from a security standpoint, it&#39;s effectively
            the same as local users accessing via
             file:// , and it can entail all the same
            problems if the administrator isn&#39;t careful. svnserve, a Custom Server svnserve The  svnserve  program is a lightweight
      server, capable of speaking to clients over TCP/IP using a
      custom, stateful protocol.  Clients contact an
       svnserve  server by using URLs that begin with
      the  svn://  or  svn+ssh:// 
      scheme.  This section will explain the different ways of running
       svnserve , how clients authenticate themselves
      to the server, and how to configure appropriate access control
      to your repositories. Invoking the Server svnserve running There are a few different ways to run the
         svnserve  program: Run  svnserve  as a standalone
            daemon, listening for requests. Have the Unix  inetd  daemon
            temporarily spawn  svnserve  whenever a
            request comes in on a certain port. Have SSH invoke a temporary  svnserve 
            over an encrypted tunnel. Run  svnserve  as a Microsoft Windows
            service. Run  svnserve  as a launchd job. The following sections will cover in detail these various
        deployment options for  svnserve . svnserve as daemon svnserve running daemon mode The easiest option is to run  svnserve 
          as a standalone  daemon  process.  Use the
           -d  option for this: 
$ svnserve -d
$               # svnserve is now running, listening on port 3690
 When running  svnserve  in daemon mode,
          you can use the  --listen-port  and
           --listen-host  options to customize the
          exact port and hostname to  bind  to. Once we successfully start  svnserve 
          as explained previously, it makes every repository on your
          system available to the network.  A client needs to specify
          an  absolute  path in the repository URL.
          For example, if a repository is located at
           /var/svn/project1 , a client would reach
          it via  svn://host.example.com/var/svn/project1 .
          To increase security, you can pass the  -r 
          option to  svnserve , which restricts it to
          exporting only repositories below that path.  For
          example: 
$ svnserve -d -r /var/svn
 
 Using the  -r  option effectively
          modifies the location that the program treats as the root of
          the remote filesystem space.  Clients then use URLs that
          have that path portion removed from them, leaving much
          shorter (and much less revealing) URLs: 
$ svn checkout svn://host.example.com/project1
 
 svnserve via inetd svnserve running via inetd inetd If you want  inetd  to launch the
          process, you need to pass the  -i 
          ( --inetd ) option.  In the following
          example, we&#39;ve shown the output from running
           svnserve -i  at the command line, but note
          that this isn&#39;t how you actually start the daemon; see the
          paragraphs following the example for how to configure
           inetd  to start
           svnserve . 
$ svnserve -i
( success ( 2 2 ( ) ( edit-pipeline svndiff1 absent-entries commit-revprops d\
epth log-revprops atomic-revprops partial-replay ) ) )
 When invoked with the  --inetd  option,
           svnserve  attempts to speak with a
          Subversion client via  stdin  and
           stdout  using a custom protocol.  This
          is the standard behavior for a program being run via
           inetd .  The IANA has reserved port 3690
          for the Subversion protocol, so on a Unix-like system you
          can add lines to  /etc/services  such as
          these (if they don&#39;t already exist): 
svn           3690/tcp   # Subversion
svn           3690/udp   # Subversion
 If your system is using a classic Unix-like
           inetd  daemon, you can add this line to
           /etc/inetd.conf : 
svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i
 Make sure  svnowner  is a user that has
          appropriate permissions to access your repositories.  Now,
          when a client connection comes into your server on port
          3690,  inetd  will spawn an
           svnserve  process to service it.  Of
          course, you may also want to add  -r  to the
          configuration line as well, to restrict which repositories
          are exported. svnserve via xinetd svnserve running via xinetd xinetd Some operating systems provide the  xinetd  
          daemon as an alternative to  inetd .
          Fortunately, you can configure  svnserve  for
          use with  xinetd , too.  To do so, you&#39;ll need to
          create a configuration file  /etc/xinetd.d/svn 
          with the following contents: 
# default: on
# description: Subversion server for the svn protocol
service svn
{
  disabled        = no
  port            = 3690
  socket_type     = stream
  protocol        = tcp
  wait            = no
  user            = subversion
  server          = /usr/local/bin/svnserve
  server_args     = -i -r  /path/to/repositories 
}
 Be sure that your  /etc/services 
          configuration file contains the definition of the port used
          for the  svn  protocol (as described in
           ), otherwise the daemon will not start correctly. In Redhat-based distributions, you then need to activate
          the new service using  chkconfig --add
          svn .  After doing so, you will be able to enable
          and disable the server using the graphical configuration
          tools. svnserve over a tunnel svnserve running tunnel mode Another way to invoke  svnserve  is in
          tunnel mode, using the  -t  option.  This
          mode assumes that a remote-service program such as
           rsh  or  ssh  has
          successfully authenticated a user and is now invoking a
          private  svnserve  process  as
          that user .  (Note that you, the user, will
          rarely, if ever, have reason to invoke
           svnserve  with the  -t  at
          the command line; instead, the SSH daemon
          does so for you.)  The  svnserve  program
          behaves normally (communicating via
           stdin  and  stdout )
          and assumes that the traffic is being automatically
          redirected over some sort of tunnel back to the client.
          When  svnserve  is invoked by a tunnel
          agent like this, be sure that the authenticated user has
          full read and write access to the repository database files.
          It&#39;s essentially the same as a local user accessing the
          repository via  file://  URLs. This option is described in much more detail later in
          this chapter in  . svnserve as a Windows service svnserve running as Windows service If your Windows system is a descendant of Windows NT
          (Windows 2000 or newer), you can
          run  svnserve  as a standard Windows
          service.  This is typically a much nicer experience than
          running it as a standalone daemon with
          the  --daemon  ( -d ) option.
          Using daemon mode requires launching a console, typing a
          command, and then leaving the console window running
          indefinitely.  A Windows service, however, runs in the
          background, can start at boot time automatically, and can be
          started and stopped using the same consistent administration
          interface as other Windows services. You&#39;ll need to define the new service using the
          command-line tool  SC.EXE .  Much like
          the  inetd  configuration line, you must
          specify an exact invocation of  svnserve 
          for Windows to run at startup time: 
C:\&gt; sc create svn
        binpath= &quot;C:\svn\bin\svnserve.exe --service -r C:\repos&quot;
        displayname= &quot;Subversion Server&quot;
        depend= Tcpip
        start= auto
 This defines a new Windows service named
           svn  which executes a particular
           svnserve.exe  command when started (in
          this case, rooted at  C:\repos ).  There
          are a number of caveats in the prior example,
          however. First, notice that the  svnserve.exe 
          program must always be invoked with the
           --service  option.  Any other options to
           svnserve  must then be specified on the
          same line, but you cannot add conflicting options such as
           --daemon 
          ( -d ),  --tunnel ,
          or  --inetd  ( -i ).  Options
          such as  -r 
          or  --listen-port  are fine, though.  Second,
          be careful about spaces when invoking
          the  SC.EXE  command: the  key=
          value  patterns must have no spaces between
           key=  and must have exactly one space
          before the  value .  Lastly, be careful
          about spaces in your command line to be invoked.  If a
          directory name contains spaces (or other characters that
          need escaping), place the entire inner value of
           binpath  in double quotes, by escaping
          them: 
C:\&gt; sc create svn
        binpath= &quot;\&quot;C:\program files\svn\bin\svnserve.exe\&quot; --service -r C:\repos&quot;
        displayname= &quot;Subversion Server&quot;
        depend= Tcpip
        start= auto
 Also note that the word  binpath  is
          misleading its value is a  command
          line , not the path to an executable.  That&#39;s why
          you need to surround it with quotes if it contains
          embedded spaces. Once the service is defined, it can be stopped, started,
          or queried using standard GUI tools (the Services
          administrative control panel), or at the command
          line: 
C:\&gt; net stop svn
C:\&gt; net start svn
 The service can also be uninstalled (i.e., undefined) by
          deleting its definition:   sc delete svn .
          Just be sure to stop the service first!
          The  SC.EXE  program has many other
          subcommands and options; run  sc /?  to
          learn more about it. svnserve as a launchd job svnserve running via launchd launchd Mac OS X (10.4 and higher) uses  launchd 
          to manage processes (including daemons) both system-wide and
          per-user.  A  launchd  job is specified by
          parameters in an XML property list file, and
          the  launchctl  command is used to manage
          the lifecycle of those jobs. When configured to run as a  launchd 
          job,  svnserve  is automatically launched
          on demand whenever incoming Subversion
           svn://  network traffic needs to be
          handled.  This is far more convenient than a configuration
          which requires you to manually invoke
           svnserve  as a long-running
          background process. To configure  svnserve  as
          a  launchd  job, first create a job
          definition file named
           /Library/LaunchDaemons/org.apache.subversion.svnserve.plist .
           
          provides an example of such a file. A sample svnserve launchd job definition 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;
    &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
    &lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.apache.subversion.svnserve&lt;/string&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;
        &lt;string&gt;Host Subversion repositories using svn:// scheme&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/bin/svnserve&lt;/string&gt;
            &lt;string&gt;--inetd&lt;/string&gt;
            &lt;string&gt;--root=/var/svn&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;UserName&lt;/key&gt;
        &lt;string&gt;svn&lt;/string&gt;
        &lt;key&gt;GroupName&lt;/key&gt;
        &lt;string&gt;svn&lt;/string&gt;
        &lt;key&gt;inetdCompatibility&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Wait&lt;/key&gt;
            &lt;false/&gt;
        &lt;/dict&gt;
        &lt;key&gt;Sockets&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Listeners&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;SockServiceName&lt;/key&gt;
                    &lt;string&gt;svn&lt;/string&gt;
                    &lt;key&gt;Bonjour&lt;/key&gt;
                    &lt;true/&gt;
                &lt;/dict&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
 The  launchd  system can be somewhat
            challenging to learn.  Fortunately, documentation exists
            for the commands described in this section. For example,
            run  man launchd  from the command
            line to see the manual page for  launchd 
            itself,  man launchd.plist  to read
            about the job definition format, etc. Once your job definition file is created, you can
          activate the job using  launchctl load : 
$ sudo launchctl load \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
 To be clear, this action doesn&#39;t actually launch
           svnserve  yet.  It simply tells
           launchd  how to fire up
           svnserve  when incoming networking traffic
          arrives on the  svn  network port; it will
          be terminated it after the traffic has been handled. Because we want  svnserve  to be a
            system-wide daemon process, we need to
            use  sudo  to manage this job as an
            administrator.  Note also that the
             UserName 
            and  GroupName  keys in the definition
            file are optional if omitted, the job will run as
            the user who loaded the job. Deactivating the job is just as easy to do use
           launchctl unload : 
$ sudo launchctl unload \
       -w /Library/LaunchDaemons/org.apache.subversion.svnserve.plist
 launchctl  also provides a way for you
          to query the status of jobs.  If the job is loaded, there
          will be line which matches the  Label 
          specified in the job definition file: 
$ sudo launchctl list | grep org.apache.subversion.svnserve
-       0       org.apache.subversion.svnserve
$
 Built-in Authentication and Authorization svnserve authentication svnserve authorization When a client connects to an  svnserve 
        process, the following things happen: The client selects a specific repository. The server processes the repository&#39;s
             conf/svnserve.conf  file and begins to
            enforce any authentication and authorization policies it
            describes. Depending on the defined policies, one of the
            following may occur: The client may be allowed to make requests
                anonymously, without ever receiving an authentication
                challenge. The client may be challenged for authentication at
                any time. If operating in tunnel mode, the client will
                declare itself to be already externally authenticated
                (typically by SSH). The  svnserve  server, by default, knows
        only how to send a CRAM-MD5 See RFC
        2195.  authentication challenge.  In essence,
        the server sends a small amount of data to the client.  The
        client uses the MD5 hash algorithm to create a fingerprint of
        the data and password combined, and then sends the fingerprint
        as a response.  The server performs the same computation with
        the stored password to verify that the result is identical.
         At no point does the actual password travel over the
        network. If your  svnserve  server was built with
        SASL support, it not only knows how to send CRAM-MD5 challenges,
        but also likely knows a whole host of other authentication
        mechanisms.  See   later in this
        chapter to learn how to configure SASL authentication and
        encryption. It&#39;s also possible, of course, for the client to be
        externally authenticated via a tunnel agent, such as
         ssh .  In that case, the server simply
        examines the user it&#39;s running as, and uses this name as the
        authenticated username.  For more on this, see the later
        section,  . As you&#39;ve already guessed, a repository&#39;s
         svnserve.conf  file is the central
        mechanism for controlling authentication and authorization
        policies.  The file has the same format as other configuration
        files (see  ):
        section names are marked by square brackets
        ( [  and  ] ), comments
        begin with hashes ( # ), and each section
        contains specific variables that can be set ( variable
        = value ).  Let&#39;s walk through these files and learn
        how to use them. Create a users file and realm For now, the  [general]  section of
           svnserve.conf  has all the variables you
          need.  Begin by changing the values of those variables:
          choose a name for a file that will contain your usernames
          and passwords and choose an authentication realm: 
[general]
password-db = userfile
realm = example realm
 The  realm  is a name that you define.
          It tells clients which sort of  authentication
          namespace  they&#39;re connecting to; the Subversion
          client displays it in the authentication prompt and uses it
          as a key (along with the server&#39;s hostname and port) for
          caching credentials on disk (see  ).  The
           password-db  variable points to a separate
          file that contains a list of usernames and passwords, using
          the same familiar format.  For example: 
[users]
harry = foopassword
sally = barpassword
 The value of  password-db  can be an
          absolute or relative path to the users file.  For many
          admins, it&#39;s easy to keep the file right in the
           conf/  area of the repository, alongside
           svnserve.conf .  On the other hand, it&#39;s
          possible you may want to have two or more repositories share
          the same users file; in that case, the file should probably
          live in a more public place.  The repositories sharing the
          users file should also be configured to have the same realm,
          since the list of users essentially defines an
          authentication realm.  Wherever the file lives, be sure to
          set the file&#39;s read and write permissions appropriately.  If
          you know which user(s)  svnserve  will run
          as, restrict read access to the users file as necessary. Set access controls There are two more variables to set in the
           svnserve.conf  file: they determine what
          unauthenticated (anonymous) and authenticated users are
          allowed to do.  The variables  anon-access 
          and  auth-access  can be set to the value
           none ,  read , or
           write .  Setting the value to
           none  prohibits both reading and writing;
           read  allows read-only access to the
          repository, and  write  allows complete
          read/write access to the repository.  For example: 
[general]
password-db = userfile
realm = example realm

# anonymous users can only read the repository
anon-access = read

# authenticated users can both read and write
auth-access = write
 The example settings are, in fact, the default values of
          the variables, should you forget to define them.  If you
          want to be even more conservative, you can block anonymous
          access completely: 
[general]
password-db = userfile
realm = example realm

# anonymous users aren&#39;t allowed
anon-access = none

# authenticated users can both read and write
auth-access = write
 The server process understands not only
          these  blanket  access controls to the
          repository, but also finer-grained access restrictions
          placed on specific files and directories within the
          repository.  To make use of this feature, you need to define
          a file containing more detailed rules, and then set
          the  authz-db  variable to point to
          it: 
[general]
password-db = userfile
realm = example realm

# Specific access rules for specific locations
authz-db = authzfile
 We discuss the syntax of the  authzfile  file
          in detail later in this chapter, in
           .  Note
          that the  authz-db  variable isn&#39;t mutually
          exclusive with the  anon-access 
          and  auth-access  variables;  if all the
          variables are defined at once,  all 
          of the rules must be satisfied before access is allowed. Using svnserve with SASL For many teams, the built-in CRAM-MD5 authentication is
        all they need from  svnserve .  However, if
        your server (and your Subversion clients) were built with the
        Cyrus Simple Authentication and Security Layer (SASL) library,
        you have a number of authentication and encryption
        options available to you. What Is SASL? The Cyrus Simple Authentication and Security Layer is
          open source software written by Carnegie Mellon University.
          It adds generic authentication and encryption capabilities
          to any network protocol, and as of Subversion 1.5 and later,
          both the  svnserve  server
          and  svn  client know how to make use of
          this library.  It may or may not be available to you: if
          you&#39;re building Subversion yourself, you&#39;ll need to have at
          least version 2.1 of SASL installed on your system, and
          you&#39;ll need to make sure that it&#39;s detected during
          Subversion&#39;s build process.  The Subversion command-line
          client will report the availability of Cyrus SASL when you
          run  svn --version ; if you&#39;re using
          some other Subversion client, you might need to check with
          the package maintainer as to whether SASL support was
          compiled in. SASL comes with a number of pluggable modules that
          represent different authentication systems: Kerberos
          (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5, LDAP,
          Secure-Remote-Password (SRP), and others.  Certain
          mechanisms may or may not be available to you; be sure to
          check which modules are provided. You can download Cyrus SASL (both code and
          documentation) from
           . Normally, when a subversion client connects to
         svnserve , the server sends a greeting that
        advertises a list of the capabilities it supports, and the
        client responds with a similar list of capabilities.  If the
        server is configured to require authentication, it then sends
        a challenge that lists the authentication mechanisms
        available; the client responds by choosing one of the
        mechanisms, and then authentication is carried out in some
        number of round-trip messages.  Even when SASL capabilities
        aren&#39;t present, the client and server inherently know how to
        use the CRAM-MD5 and ANONYMOUS mechanisms (see
         ).  If server
        and client were linked against SASL, a number of other
        authentication mechanisms may also be available.  However,
        you&#39;ll need to explicitly configure SASL on the server side to
        advertise them. Authenticating with SASL To activate specific SASL mechanisms on the server,
          you&#39;ll need to do two things.  First, create
          a  [sasl]  section in your
          repository&#39;s  svnserve.conf  file with an
          initial key-value pair: 
[sasl]
use-sasl = true
 Second, create a main SASL configuration file
          called  svn.conf  in a place where the
          SASL library can find it typically in the directory
          where SASL plug-ins are located.  You&#39;ll have to locate the
          plug-in directory on your particular system, such
          as  /usr/lib/sasl2/ 
          or  /etc/sasl2/ .  (Note that this
          is  not 
          the  svnserve.conf  file that lives
          within a repository!) On a Windows server, you&#39;ll also have to edit the system
          registry (using a tool such as  regedit )
          to tell SASL where to find things.  Create a registry key
          named  [HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library] , and place two
          keys inside it: a key called  SearchPath 
          (whose value is a path to the directory containing the SASL
           sasl*.dll  plug-in libraries), and a key
          called
           ConfFile  (whose value is a path to the
          parent directory containing
          the  svn.conf  file you created). Because SASL provides so many different kinds of
          authentication mechanisms, it would be foolish (and far
          beyond the scope of this book) to try to describe every
          possible server-side configuration.  Instead, we recommend
          that you read the documentation supplied in the
           doc/  subdirectory of the SASL source
          code.  It goes into great detail about every mechanism and
          how to configure the server appropriately for each.  For the
          purposes of this discussion, we&#39;ll just demonstrate a simple
          example of configuring the DIGEST-MD5 mechanism.  For
          example, if your  subversion.conf 
          (or  svn.conf ) file contains the
          following: 
pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: /etc/my_sasldb
mech_list: DIGEST-MD5
 you&#39;ve told SASL to advertise the DIGEST-MD5
          mechanism to clients and to check user passwords against a
          private password database located
          at  /etc/my_sasldb .  A system
          administrator can then use
          the  saslpasswd2  program to add or modify
          usernames and passwords in the database: 
$ saslpasswd2 -c -f /etc/my_sasldb -u realm username
 A few words of warning: first, make sure the
           realm  argument
          to  saslpasswd2  matches the same realm
          you&#39;ve defined in your
          repository&#39;s  svnserve.conf  file; if
          they don&#39;t match, authentication will fail.  Also, due to a
          shortcoming in SASL, the common realm must be a string with
          no space characters.  Finally, if you decide to go with the
          standard SASL password database, make sure
          the  svnserve  program has read access to
          the file (and possibly write access as well, if you&#39;re using
          a mechanism such as OTP). This is just one simple way of configuring SASL.  Many
          other authentication mechanisms are available, and passwords
          can be stored in other places such as in LDAP or a SQL
          database.  Consult the full SASL documentation for
          details. Remember that if you configure your server to only allow
          certain SASL authentication mechanisms, this forces all
          connecting clients to have SASL support as well.  Any
          Subversion client built without SASL support (which includes
          all pre-1.5 clients) will be unable to authenticate.  On the
          one hand, this sort of restriction may be exactly what you
          want ( My clients must all use Kerberos! ).
          However, if you still want non-SASL clients to be able to
          authenticate, be sure to advertise the CRAM-MD5 mechanism as
          an option.  All clients are able to use CRAM-MD5, whether
          they have SASL capabilities or not. SASL encryption SASL is also able to perform data encryption if a
          particular mechanism supports it.  The built-in CRAM-MD5
          mechanism doesn&#39;t support encryption, but DIGEST-MD5 does,
          and mechanisms such as SRP actually require use of the
          OpenSSL library.  To enable or disable different levels of
          encryption, you can set two values in your repository&#39;s
           svnserve.conf  file: 
[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
 The  min-encryption  and
           max-encryption  variables control the
          level of encryption demanded by the server.  To disable
          encryption completely, set both values to 0.  To enable
          simple checksumming of data (i.e., prevent tampering and
          guarantee data integrity without encryption), set both
          values to 1.  If you wish to allow but not
          require encryption, set the minimum value to 0, and
          the maximum value to some bit length.  To require encryption
          unconditionally, set both values to numbers greater than 1.
          In our previous example, we require clients to do at least
          128-bit encryption, but no more than 256-bit
          encryption. Tunneling over SSH svnserve &#39;s built-in authentication (and
        SASL support) can be very handy, because it avoids the need to
        create real system accounts.  On the other hand, some
        administrators already have well-established SSH
        authentication frameworks in place.  In these situations, all
        of the project&#39;s users already have system accounts and the
        ability to  SSH into  the server machine. It&#39;s easy to use SSH in conjunction with
         svnserve .  The client simply uses the
         svn+ssh://  URL scheme to connect: 
$ whoami
harry

$ svn list svn+ssh://host.example.com/repos/project
harryssh@host.example.com&#39;s password:  *****

foo
bar
baz
 
 In this example, the Subversion client is invoking a local
         ssh  process, connecting to
         host.example.com , authenticating as the
        user  harryssh  (according to SSH user
        configuration), then spawning a private
         svnserve  process on the remote machine
        running as the user  harryssh .  The
         svnserve  command is being invoked in tunnel
        mode ( -t ), and its network protocol is being
         tunneled  over the encrypted connection by
         ssh , the tunnel agent.
        If the client performs a commit, the authenticated username
         harryssh  will be used as the author
        of the new revision. The important thing to understand here is that the
        Subversion client is  not  connecting to a
        running  svnserve  daemon.  This method of
        access doesn&#39;t require a daemon, nor does it notice one if
        present.  It relies wholly on the ability of
         ssh  to spawn a temporary
         svnserve  process, which then terminates
        when the network connection is closed. When using  svn+ssh://  URLs to access a
        repository, remember that it&#39;s the  ssh 
        program prompting for authentication, and
         not  the  svn  client
        program.  That means there&#39;s no automatic password-caching
        going on (see  ).
        The Subversion client often makes multiple connections to the
        repository, though users don&#39;t normally notice this due to the
        password caching feature.  When using
         svn+ssh://  URLs, however, users may be
        annoyed by  ssh  repeatedly asking for a
        password for every outbound connection.  The solution is to
        use a separate SSH password-caching tool such as
         ssh-agent  on a Unix-like system, or
         pageant  on Windows. When running over a tunnel, authorization is primarily
        controlled by operating system permissions to the repository&#39;s
        database files; it&#39;s very much the same as if Harry were
        accessing the repository directly via a
         file://  URL.  If multiple system users are
        going to be accessing the repository directly, you may want to
        place them into a common group, and you&#39;ll need to be careful
        about umasks (be sure to read   later in this
        chapter).  But even in the case of tunneling, you can still use the
         svnserve.conf  file to block access, by
        simply setting  auth-access = read 
        or  auth-access = none . Note
        that using any sort of  svnserve -enforced
        access control at all only makes sense if the users cannot 
        bypass it and access the repository directory directly using
        other tools (such as  cd  and
         vi ); implementing
        such restrictions is described in
         . You&#39;d think that the story of SSH tunneling would end
        here, but it doesn&#39;t.  Subversion allows you to create custom
        tunnel behaviors in your runtime  config 
        file (see  ).  For
        example, suppose you want to use RSH instead of
        SSH. We don&#39;t actually recommend this, since
        RSH is notably less secure than SSH.   In
        the  [tunnels]  section of your
         config  file, simply define it like
        this: 
[tunnels]
rsh = rsh
 And now, you can use this new tunnel definition by using a
        URL scheme that matches the name of your new variable:
         svn+rsh://host/path .  When using the new
        URL scheme, the Subversion client will actually be running the
        command  rsh host svnserve -t  behind the
        scenes.  If you include a username in the URL (e.g.,
         svn+rsh://username@host/path ), the client
        will also include that in its command ( rsh
        username@host svnserve -t ).  But you can define new
        tunneling schemes to be much more clever than that: 
[tunnels]
joessh = $JOESSH /opt/alternate/ssh -p 29934
 This example demonstrates a couple of things.  First, it
        shows how to make the Subversion client launch a very specific
        tunneling binary (the one located at
         /opt/alternate/ssh ) with specific
        options.  In this case, accessing an
         svn+joessh://  URL would invoke the
        particular SSH binary with  -p 29934  as
        arguments useful if you want the tunnel program to
        connect to a nonstandard port. Second, it shows how to define a custom environment
        variable that can override the name of the tunneling program.
        Setting the  SVN_SSH  environment variable is
        a convenient way to override the default SSH tunnel agent.
        But if you need to have several different overrides for
        different servers, each perhaps contacting a different port or
        passing a different set of options to SSH, you can use the
        mechanism demonstrated in this example.  Now if we were to set
        the  JOESSH  environment variable, its value
        would override the entire value of the tunnel
        variable $JOESSH  would be executed
        instead of  /opt/alternate/ssh -p
        29934 . SSH Configuration Tricks It&#39;s possible to control not only the way in which the
        client invokes  ssh , but also to control
        the behavior of  sshd  on your server
        machine.  In this section, we&#39;ll show how to control the
        exact  svnserve  command executed
        by  sshd , as well as how to have multiple
        users share a single system account. Initial setup To begin, locate the home directory of the account
          you&#39;ll be using to launch  svnserve .  Make
          sure the account has an SSH public/private keypair
          installed, and that the user can log in via public-key
          authentication.  Password authentication will not work,
          since all of the following SSH tricks revolve around using
          the SSH  authorized_keys  file. If it doesn&#39;t already exist, create the
           authorized_keys  file (on Unix,
          typically  ~/.ssh/authorized_keys ).
          Each line in this file describes a public key that is
          allowed to connect.  The lines are typically of the
          form: 
  ssh-dsa AAAABtce9euch  user@example.com
 The first field describes the type of key, the second
          field is the base64-encoded key itself, and the third field
          is a comment.  However, it&#39;s a lesser known fact that the
          entire line can be preceded by a  command 
          field: 
  command=&quot;program&quot; ssh-dsa AAAABtce9euch  user@example.com
 When the  command  field is set, the
          SSH daemon will run the named program instead of the
          typical tunnel-mode  svnserve  invocation that the
          Subversion client asks for.  This opens the door to a number
          of server-side tricks.  In the following examples, we
          abbreviate the lines of the file as: 
  command=&quot;program&quot; TYPE KEY COMMENT
 Controlling the invoked command Because we can specify the executed server-side command,
          it&#39;s easy to name a specific  svnserve 
          binary to run and to pass it extra arguments: 
  command=&quot;/path/to/svnserve -t -r /virtual/root&quot; TYPE KEY COMMENT
 In this example,  /path/to/svnserve 
          might be a custom wrapper script
          around  svnserve  which sets the umask (see
           ).  It also
          shows how to anchor  svnserve  in a virtual
          root directory, just as one often does when
          running  svnserve  as a daemon process.
          This might be done either to restrict access to parts of the
          system, or simply to relieve the user of having to type an
          absolute path in the  svn+ssh:// 
          URL. It&#39;s also possible to have multiple users share a single
          account.  Instead of creating a separate system account for
          each user, generate a public/private key pair for each
          person.  Then place each public key into
          the  authorized_keys  file, one per
          line, and use the  --tunnel-user 
          option: 
  command=&quot;svnserve -t --tunnel-user=harry&quot; TYPE1 KEY1 harry@example.com
  command=&quot;svnserve -t --tunnel-user=sally&quot; TYPE2 KEY2 sally@example.com
 This example allows both Harry and Sally to connect to
          the same account via public key authentication.  Each of
          them has a custom command that will be executed;
          the  --tunnel-user  option
          tells  svnserve  to assume that the named
          argument is the authenticated user.  Without
           --tunnel-user , it would appear as though
          all commits were coming from the one shared system
          account. A final word of caution: giving a user access to the
          server via public-key in a shared account might still allow
          other forms of SSH access, even if you&#39;ve set
          the  command  value
          in  authorized_keys .  For example, the
          user may still get shell access through SSH or be able to
          perform X11 or general port forwarding through your server.
          To give the user as little permission as possible, you may
          want to specify a number of restrictive options immediately
          after the  command : 
  command=&quot;svnserve -t --tunnel-user=harry&quot;,no-port-forwarding,no-agent-forw
arding,no-X11-forwarding,no-pty TYPE1 KEY1 harry@example.com
 Note that this all must be on one line truly on
          one line since SSH  authorized_keys 
          files do not even allow the conventional backslash character
          ( \ ) for line continuation.  The only
          reason we&#39;ve shown it with a line break is to fit it on
          the physical page of a book. httpd, the Apache HTTP Server The Apache HTTP Server is a  heavy-duty 
      network server that Subversion can leverage.  Via a custom
      module,  httpd  makes Subversion repositories
      available to clients via the WebDAV/DeltaV See
       . 
      protocol, which is an extension to HTTP 1.1.  This protocol
      takes the ubiquitous HTTP protocol that is the core of the World
      Wide Web, and adds writing specifically, versioned
      writing capabilities.  The result is a standardized,
      robust system that is conveniently packaged as part of the
      Apache 2.0 software, supported by numerous operating systems and
      third-party products, and doesn&#39;t require network administrators
      to open up yet another custom port. They really
      hate doing that.  While an Apache-Subversion
      server has more features than  svnserve , it&#39;s
      also a bit more difficult to set up.  With flexibility often
      comes more complexity. Much of the following discussion includes references to
      Apache configuration directives.  While some examples are given
      of the use of these directives, describing them in full is
      outside the scope of this chapter.  The Apache team maintains
      excellent documentation, publicly available on their web site at
       .  For example, a general
      reference for the configuration directives is located at
       . Also, as you make changes to your Apache setup, it is likely
      that somewhere along the way a mistake will be made.  If you are
      not already familiar with Apache&#39;s logging subsystem, you should
      become aware of it.  In your  httpd.conf 
      file are directives that specify the on-disk locations of the
      access and error logs generated by Apache (the
       CustomLog  and  ErrorLog 
      directives, respectively).
      Subversion&#39;s  mod_dav_svn  uses Apache&#39;s error
      logging interface as well.  You can always browse the contents
      of those files for information that might reveal the source of a
      problem that is not clearly noticeable otherwise. Prerequisites To network your repository over HTTP, you basically need
        four components, available in two packages.  You&#39;ll need
        Apache  httpd  2.0 or newer, the
         mod_dav  DAV module that comes with it,
        Subversion, and the  mod_dav_svn 
        filesystem provider module distributed with Subversion.
        Once you have all of those components, the process of
        networking your repository is as simple as: Getting httpd up and running with
            the  mod_dav  module Installing the  mod_dav_svn  backend
            to  mod_dav , which uses Subversion&#39;s
            libraries to access the repository Configuring your  httpd.conf 
            file to export (or expose) the repository You can accomplish the first two items either by
        compiling  httpd  and Subversion from
        source code or by installing prebuilt binary packages of
        them on your system.  For the most up-to-date information on
        how to compile Subversion for use with the Apache HTTP Server,
        as well as how to compile and configure Apache itself for
        this purpose, see the  INSTALL  file in
        the top level of the Subversion source code tree. Basic Apache Configuration Once you have all the necessary components installed on
        your system, all that remains is the configuration of Apache
        via its  httpd.conf  file.  Instruct Apache
        to load the  mod_dav_svn  module using the
         LoadModule  directive.  This directive must
        precede any other Subversion-related configuration items.  If
        your Apache was installed using the default layout, your
         mod_dav_svn  module should have been
        installed in the  modules  subdirectory of
        the Apache install location (often
         /usr/local/apache2 ).  The
         LoadModule  directive has a simple syntax,
        mapping a named module to the location of a shared library on
        disk: 
LoadModule dav_svn_module     modules/mod_dav_svn.so
 Apache interprets the  LoadModule 
        configuration item&#39;s library path as relative to its own
        server root.  If configured as previously shown, Apache will
        look for the Subversion DAV module shared library in its
        own  modules/  subdirectory.  Depending on
        how Subversion was installed on your system, you might need to
        specify a different path for this library altogether, perhaps
        even an absolute path such as in the following example: 
LoadModule dav_svn_module     C:/Subversion/lib/mod_dav_svn.so
 Note that if  mod_dav  was compiled as a
        shared object (instead of statically linked directly to the
         httpd  binary), you&#39;ll need a similar
         LoadModule  statement for it, too.  Be sure
        that it comes before the  mod_dav_svn  line: 
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
 At a later location in your configuration file, you now
        need to tell Apache where you keep your Subversion repository
        (or repositories).  The  Location  directive
        has an XML-like notation, starting with an opening tag and
        ending with a closing tag, with various other configuration
        directives in the middle.  The purpose of the
         Location  directive is to instruct Apache to
        do something special when handling requests that are directed
        at a given URL or one of its children.  In the case of
        Subversion, you want Apache to simply hand off support for
        URLs that point at versioned resources to the DAV layer.  You
        can instruct Apache to delegate the handling of all URLs whose
        path portions (the part of the URL that follows the server&#39;s
        name and the optional port number) begin with
         /repos/  to a DAV provider whose
        repository is located at
         /var/svn/repository  using the
        following  httpd.conf  syntax: 
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
&lt;/Location&gt;
 If you plan to support multiple Subversion repositories
        that will reside in the same parent directory on your local
        disk, you can use an alternative
        directive SVNParentPath to
        indicate that common parent directory.  For example, if you
        know you will be creating multiple Subversion repositories in
        a directory  /var/svn  that would be
        accessed via URLs such as
         http://my.server.com/svn/repos1 ,
         http://my.server.com/svn/repos2 , and so on, you
        could use the  httpd.conf  configuration
        syntax in the following example: 
&lt;Location /svn&gt;
  DAV svn

  # Automatically map any &quot;/svn/foo&quot; URL to repository /var/svn/foo
  SVNParentPath /var/svn
&lt;/Location&gt;
 Using this syntax, Apache will delegate the
        handling of all URLs whose path portions begin with
         /svn/  to the Subversion DAV provider,
        which will then assume that any items in the directory
        specified by the  SVNParentPath  directive
        are actually Subversion repositories.  This is a particularly
        convenient syntax in that, unlike the use of the
         SVNPath  directive, you don&#39;t have to
        restart Apache to add or remove hosted repositories. Be sure that when you define your new
         Location , it doesn&#39;t overlap with other
        exported locations.  For example, if your main
         DocumentRoot  is exported to
         /www , do not export a Subversion
        repository in  &lt;Location /www/repos&gt; .
        If a request comes in for the URI
         /www/repos/foo.c , Apache won&#39;t know
        whether to look for a file  repos/foo.c  in
        the  DocumentRoot , or whether to delegate
         mod_dav_svn  to return
         foo.c  from the Subversion repository.
        The result is often an error from the server of the form
         301 Moved Permanently . Server Names and the COPY Request Subversion makes use of the  COPY 
          request type to perform server-side copies of files and
          directories.  As part of the sanity checking done by the
          Apache modules, the source of the copy is expected to be
          located on the same machine as the destination of the copy.
          To satisfy this requirement, you might need to
          tell  mod_dav  the name you use as the
          hostname of your server.  Generally, you can use
          the  ServerName  directive in
           httpd.conf  to accomplish this. 
ServerName svn.example.com
 If you are using Apache&#39;s virtual hosting support via
          the  NameVirtualHost  directive, you may
          need to use the  ServerAlias  directive to
          specify additional names by which your server is known.
          Again, refer to the Apache documentation for full
          details. At this stage, you should strongly consider the question
        of permissions.  If you&#39;ve been running Apache for some time
        now as your regular web server, you probably already have a
        collection of content web pages, scripts, and such.
        These items have already been configured with a set of
        permissions that allows them to work with Apache, or more
        appropriately, that allows Apache to work with those files.
        Apache, when used as a Subversion server, will also need the
        correct permissions to read and write to your Subversion
        repository. You will need to determine a permission system setup that
        satisfies Subversion&#39;s requirements without messing up any
        previously existing web page or script installations.  This
        might mean changing the permissions on your Subversion
        repository to match those in use by other things that Apache
        serves for you, or it could mean using the
         User  and  Group 
        directives in  httpd.conf  to specify that
        Apache should run as the user and group that owns your
        Subversion repository.  There is no single correct way to set
        up your permissions, and each administrator will have
        different reasons for doing things a certain way.  Just be
        aware that permission-related problems are perhaps the most
        common oversight when configuring a Subversion repository for
        use with Apache. Authentication Options At this point, if you configured
         httpd.conf  to contain something such as the
        following: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
&lt;/Location&gt;
 your repository is  anonymously 
        accessible to the world.  Until you configure some
        authentication and authorization policies, the Subversion
        repositories that you make available via the
         Location  directive will be generally
        accessible to everyone.  In other words: Anyone can use a Subversion client to check out a
            working copy of a repository URL (or any of its
            subdirectories). Anyone can interactively browse the repository&#39;s
            latest revision simply by pointing a web browser to
            the repository URL. Anyone can commit to the repository. Of course, you might have already set up
        a  pre-commit  hook script to prevent
        commits (see  ).
        But as you read on, you&#39;ll see that it&#39;s also possible to use
        Apache&#39;s built-in methods to restrict access in specific
        ways. Requiring authentication defends against invalid users
          directly accessing the repository, but does not guard the
          privacy of valid users&#39; network activity.  See
            for how to
          configure your server to support SSL encryption, which can
          provide that extra layer of protection. Basic authentication The easiest way to authenticate a client is via the HTTP
          Basic authentication mechanism, which simply uses a username
          and password to verify a user&#39;s identity.  Apache provides
          the  htpasswd  utility See
           .  for managing files containing
          usernames and passwords. Basic authentication is  extremely 
            insecure, because it sends passwords over the network
            in very nearly plain text.  See
              for
            details on using the much safer Digest mechanism. First, create a password file and grant access to
          users Harry and Sally: 
$ ### First time: use -c to create the file
$ ### Use -m to use MD5 encryption of the password, which is more secure
$ htpasswd -c -m /etc/svn-auth.htpasswd harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/svn-auth.htpasswd sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
 Next, ensure that Apache has access to the modules which
          provide the Basic authentication and related
          functionality:   mod_auth_basic ,
           mod_authn_file , and
           mod_authz_user .  In many cases, these
          modules are compiled into  httpd  itself,
          but if not, you might need to explicitly load one or more of
          them using the  LoadModule  directive: 
LoadModule auth_basic_module   modules/mod_auth_basic.so
LoadModule authn_file_module   modules/mod_authn_file.so
LoadModule authz_user_module   moduels/mod_authz_user.so
 After ensuring the Apache has access to the required
          functionality, you&#39;ll need to add some more directives
          inside the  &lt;Location&gt;  block to tell
          Apache what type of authentication you wish to use, and just
          how to to so: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic
  AuthName &quot;Subversion repository&quot;
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd
&lt;/Location&gt;
 These directives work as follows: AuthName  is an arbitrary name
              that you choose for the authentication domain.  Most
              browsers display this name in the dialog box when
              prompting for username and password. AuthType  specifies the type of
              authentication to use. AuthBasicProvider  specifies the
              Basic authentication provider to use for the location.
              In our example, we wish to consult a local password
              file. AuthUserFile  specifies the
              location of the password file to use. However, this  &lt;Location&gt;  block
          doesn&#39;t yet do anything useful.  It merely tells Apache that
           if  authorization were required, it
          should challenge the Subversion client for a username and
          password.  (When authorization is required, Apache requires
          authentication as well.)  What&#39;s missing here, however, are
          directives that tell Apache  which sorts 
          of client requests require authorization; currently, none do.
          The simplest thing is to specify that  all 
          requests require authorization by adding
           Require valid-user  to the block: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Basic
  AuthName &quot;Subversion repository&quot;
  AuthType Basic
  AuthBasicProvider file
  AuthUserFile /etc/svn-auth.htpasswd

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
 Refer to  
          for more detail on the  Require  directive
          and other ways to set authorization policies. The default value of the
             AuthBasicProvider  option is
             file , so we won&#39;t bother including
            it in future examples.  Just know that if in a broader
            context you&#39;ve set this value to something else, you&#39;ll
            need to explicitly reset it to  file 
            within your Subversion  &lt;Location&gt; 
            block in order to get that behavior. Digest authentication Digest authentication is an improvement on Basic
          authentication which allows the server to verify a client&#39;s
          identity without sending the password over the network
          unprotected.  Both client and server create a non-reversible
          MD5 hash of the username, password, requested URI, and a
           nonce  (number used once) provided by
          the server and changed each time authentication is required.
          The client sends its hash to the server, and the server then
          verifies that the hashes match. Configuring Apache to use Digest authentication is
          straightforward.  You&#39;ll need to ensure that
          the  mod_auth_digest  module is available
          (instead of  mod_auth_basic ), and then
          make a few small variations on our prior example: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName &quot;Subversion repository&quot;
  AuthType Digest
  AuthDigestProvider file
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
 Notice that  AuthType  is now set to
           Digest , and we specify a different path
          for  AuthUserFile .  Digest authentication
          uses a different file format than Basic authentication, 
          created and managed using Apache&#39;s  htdigest 
          utility See
           .  rather than  htpasswd .
          Digest authentication also has the additional concept of a
           realm , which must match the value of the
           AuthName  directive. For digest authentication, the authentication provider
            is selected using the  AuthDigestProvider 
            as shown in the previous example.  As was the case with
            the  AuthBasicProvider  directive,
             file  is the default value of the
             AuthDigestProvider  option, so this
            line is not strictly required unless you need to override
            a different value thereof inherited from a broader
            configuration context. The password file can be created as follows: 
$ ### First time: use -c to create the file
$ htdigest -c /etc/svn-auth.htdigest &quot;Subversion repository&quot; harry
Adding password for harry in realm Subversion repository.
New password: *****
Re-type new password: *****
$ htdigest /etc/svn-auth.htdigest &quot;Subversion repository&quot; sally
Adding user sally in realm Subversion repository
New password: *******
Re-type new password: *******
$
 Authorization Options At this point, you&#39;ve configured authentication, but not
        authorization.  Apache is able to challenge clients and
        confirm identities, but it has not been told how to allow or
        restrict access to the clients bearing those identities.  This
        section describes two strategies for controlling access to
        your repositories. Blanket access control The simplest form of access control is to authorize
          certain users for either read-only access to a repository or
          read/write access to a repository. You can restrict access on all repository operations by
          adding  Require valid-user  directly inside
          the  &lt;Location&gt;  block.  The example
          from  
          allows only clients that successfully authenticate to do
          anything with the Subversion repository: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName &quot;Subversion repository&quot;
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only
  Require valid-user
&lt;/Location&gt;
 Sometimes you don&#39;t need to run such a tight ship.  For
          example, the server hosting Subversion&#39;s own source code at
            allows
          anyone in the world to perform read-only repository tasks (such as
          checking out working copies and browsing the repository),
          but restricts write operations to authenticated users.  The
           Limit  and  LimitExcept 
          directives allow for this type of selective restriction.
          Like the  Location  directive, these blocks
          have starting and ending tags, and you would nest them
          inside your  &lt;Location&gt; 
          block. The parameters present on the  Limit 
          and  LimitExcept  directives are HTTP
          request types that are affected by that block.  For example,
          to allow anonymous read-only operations, you would use the
           LimitExcept  directive (passing the
           GET ,  PROPFIND ,
           OPTIONS , and  REPORT 
          request type parameters) and place the previously mentioned
           Require valid-user  directive inside the
           &lt;LimitExcept&gt;  block instead of just
          inside the  &lt;Location&gt;  block. 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName &quot;Subversion repository&quot;
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Authenticated users only for non-read-only
  #                (write) operations; allow anonymous reads
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
 These are only a few simple examples.  For more in-depth
          information about Apache access control and the
           Require  directive, take a look at the
           Security  section of the Apache
          documentation&#39;s tutorials collection at  . Per-directory access control It&#39;s possible to set up finer-grained permissions using
           mod_authz_svn .  This Apache module grabs
          the various opaque URLs passing from client to server, asks
           mod_dav_svn  to decode them, and then
          possibly vetoes requests based on access policies defined in
          a configuration file. If you&#39;ve built Subversion from source code,
           mod_authz_svn  is automatically built
          and installed alongside  mod_dav_svn .
          Many binary distributions install it automatically as well.
          To verify that it&#39;s installed correctly, make sure it comes
          right after  mod_dav_svn &#39;s
           LoadModule  directive in
           httpd.conf : 
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
 To activate this module, you need to configure your
           &lt;Location&gt;  block to use the
           AuthzSVNAccessFile  directive, which
          specifies a file containing the permissions policy for paths
          within your repositories.  (In a moment, we&#39;ll discuss the
          format of that file.) Apache is flexible, so you have the option to configure
          your block in one of three general patterns.  To begin,
          choose one of these basic configuration patterns.  (The
          following examples are very simple; look at Apache&#39;s own
          documentation for much more detail on Apache authentication
          and authorization options.) The most open approach is to allow access to everyone.
          This means Apache never sends authentication challenges, and
          all users are treated as  anonymous .  (See
           .) A sample configuration for anonymous access 
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: None

  # Authorization: Path-based access control
  AuthzSVNAccessFile /path/to/access/file
&lt;/Location&gt;
 On the opposite end of the paranoia scale, you can
          configure Apache to authenticate all clients.
          This block unconditionally requires authentication via the
           Require valid-user  directive, and defines
          a means to authenticate valid users.  (See
           .) A sample configuration for authenticated access 
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName &quot;Subversion repository&quot;
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; authenticated users only
  AuthzSVNAccessFile /path/to/access/file
  Require valid-user
&lt;/Location&gt;
 A third very popular pattern is to allow a combination
          of authenticated and anonymous access.  For example, many
          administrators want to allow anonymous users to read certain
          repository directories, but restrict access to more
          sensitive areas to authenticated users.  In this setup, all
          users start out accessing the repository anonymously.  If
          your access control policy demands a real username at any
          point, Apache will demand authentication from the client.
          To do this, use both the  Satisfy Any 
          and  Require valid-user  directives.  (See
           .) A sample configuration for mixed
            authenticated/anonymous access 
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # Authentication: Digest
  AuthName &quot;Subversion repository&quot;
  AuthType Digest
  AuthUserFile /etc/svn-auth.htdigest

  # Authorization: Path-based access control; try anonymous access
  #                first, but authenticate if necessary
  AuthzSVNAccessFile /path/to/access/file
  Satisfy Any
  Require valid-user
&lt;/Location&gt;
 The next step is to create the authorization file
          containing access rules for particular paths within the
          repository.  We describe how later in this chapter, in
           . Disabling path-based checks The  mod_dav_svn  module goes through a
          lot of work to make sure that data you&#39;ve marked
           unreadable  doesn&#39;t get accidentally leaked.
          This means it needs to closely monitor all of the paths
          and file-contents returned by commands such as  svn
          checkout  and  svn update .
          If these commands encounter a path that isn&#39;t
          readable according to some authorization policy, the
          path is typically omitted altogether.  In the case of
          history or rename tracing for example, running a command such
          as  svn cat -r OLD foo.c  on a file that
          was renamed long ago the rename tracking will simply
          halt if one of the object&#39;s former names is determined to be
          read-restricted. All of this path checking can sometimes be quite
          expensive, especially in the case of  svn
          log .  When retrieving a list of revisions, the
          server looks at every changed path in each revision and
          checks it for readability.  If an unreadable path is
          discovered, it&#39;s omitted from the list of the revision&#39;s
          changed paths (normally seen with
          the  --verbose  ( -v ) option),
          and the whole log message is suppressed.  Needless to say,
          this can be time-consuming on revisions that affect a large
          number of files.  This is the cost of security: even if you
          haven&#39;t configured a module such as
           mod_authz_svn  at all, the
           mod_dav_svn  module is still asking Apache
           httpd  to run authorization checks on
          every path.  The  mod_dav_svn  module has
          no idea what authorization modules have been installed, so
          all it can do is ask Apache to invoke whatever might be
          present. On the other hand, there&#39;s also an escape hatch of
          sorts, which allows you to trade security features for
          speed.  If you&#39;re not enforcing any sort of per-directory
          authorization (i.e., not using
           mod_authz_svn  or similar module),
          you can disable all of this path checking.  In your
           httpd.conf  file, use the
           SVNPathAuthz  directive as shown in
           . Disabling path checks altogether 
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  SVNPathAuthz off
&lt;/Location&gt;
 The  SVNPathAuthz  directive
          is  on  by default.  When
          set to  off,  all path-based authorization
          checking is disabled;
           mod_dav_svn  stops invoking authorization
          checks on every path it discovers. Protecting network traffic with SSL Connecting to a repository via  http:// 
        means that all Subversion activity is sent across the network
        in the clear.  This means that actions such as checkouts,
        commits, and updates could potentially be intercepted by an
        unauthorized party  sniffing  network traffic.
        Encrypting traffic using SSL is a good way to protect
        potentially sensitive information over the network. If a Subversion client is compiled to use OpenSSL,
        it gains the ability to speak to an Apache server via
         https://  URLs, so all traffic is encrypted
        with a per-connection session key.  The WebDAV library used by
        the Subversion client is not only able to verify server
        certificates, but can also supply client certificates when
        challenged by the server. Subversion server SSL certificate configuration It&#39;s beyond the scope of this book to describe how to
          generate client and server SSL certificates and how to
          configure Apache to use them.  Many other references,
          including Apache&#39;s own documentation ( ),
          describe the process. SSL certificates from well-known entities generally
            cost money, but at a bare minimum, you can configure
            Apache to use a self-signed certificate generated with a
            tool such as OpenSSL ( ). While self-signed certificates are
            still vulnerable to a  man-in-the-middle 
            attack (before a client sees the certificate for the first
            time), such an attack is much more difficult for a casual
            observer to pull off, compared to sniffing unprotected
            passwords. Subversion client SSL certificate management When connecting to Apache via  https:// ,
          a Subversion client can receive two different types of
          responses: A server certificate A challenge for a client certificate Server certificate When the client receives a server certificate, it needs
            to verify that the server is who it claims to be. OpenSSL
            does this by examining the signer of the server certificate,
            or  certificate authority  (CA).  If
            OpenSSL is unable to automatically trust the CA, or if some
            other problem occurs (such as an expired certificate or
            hostname mismatch), the Subversion command-line client will
            ask you whether you want to trust the server certificate
            anyway: 
$ svn list https://host.example.com/repos/project

Error validating server certificate for &#39;https://host.example.com:443&#39;:
 - The certificate is not issued by a trusted authority.  Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: host.example.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, example.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
 This dialogue is essentially the same question you may
            have seen coming from your web browser (which is just
            another HTTP client like Subversion).  If you choose the
             (p) ermanent option, Subversion will
            cache the server certificate in your private runtime
             auth/  area, just as your username and
            password are cached (see  ), and will
            automatically trust the certificate in the future. Your runtime  servers  file also gives
            you the ability to make your Subversion client automatically
            trust specific CAs, either globally or on a per-host basis.
            Simply set the  ssl-authority-files 
            variable to a semicolon-separated list of PEM-encoded CA
            certificates: 
[global]
ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem
 Many OpenSSL installations also have a predefined set
            of  default  CAs that are nearly universally
            trusted.  To make the Subversion client automatically trust
            these standard authorities, set the
             ssl-trust-default-ca  variable to
             true . Client certificate challenge If the client receives a challenge for a certificate,
            the server is asking the client to prove its identity.
            The client must send back a certificate signed by a CA
            that the server trusts, along with a  challenge
            response  which proves that the client owns the
            private key associated with the certificate.  The private
            key and certificate are usually stored in an encrypted
            format on disk, protected by a passphrase.  When Subversion
            receives this challenge, it will ask you for the path to the
            encrypted file and the passphrase that protects it: 
$ svn list https://host.example.com/repos/project

Authentication realm: https://host.example.com:443
Client certificate filename: /path/to/my/cert.p12
Passphrase for &#39;/path/to/my/cert.p12&#39;:  ********
 Notice that the client credentials are stored in a
             .p12  file.  To use a client certificate
            with Subversion, it must be in PKCS#12 format, which is a
            portable standard.  Most web browsers are able to import
            and export certificates in that format.  Another option
            is to use the OpenSSL command-line tools to convert
            existing certificates into PKCS#12. The runtime  servers  file also
            allows you to automate this challenge on a per-host basis.
            If you set the  ssl-client-cert-file 
            and  ssl-client-cert-password  variables,
            Subversion can automatically respond to a client
            certificate challenge without prompting you: 
[groups]
examplehost = host.example.com

[examplehost]
ssl-client-cert-file = /path/to/my/cert.p12
ssl-client-cert-password = somepassword
 More security-conscious folk might want to exclude
             ssl-client-cert-password  to avoid
            storing the passphrase in the clear on disk. Tuning for Performance The Apache HTTP Server is built for performance, but you
        can improve upon its default configuration to get even better
        results out of your Subversion service offering.  In this
        section, we&#39;ll recommend some specific configuration changes
        to consider.  Understand, however, that some of
        the  httpd.conf  configuration options
        we&#39;ll be discussing herein affect the general behavior of your
        server, not merely the Subversion service.  As such, you need
        to consider the full breadth of your HTTP service offering to
        discern how modifications to these settings for Subversion&#39;s
        sake may affect your other services. KeepAlive By default, the Apache HTTP Server is configured to
          enable the re-use of a single server connection for multiple
          requests.  That&#39;s very beneficial for Subversion, because
          unlike many HTTP-based applications, Subversion can very
          quickly generate hundreds or thousands of requests against
          the server for a single operation, and the cost of opening a
          new connection to the server is non-trivial.  Subversion
          wants to squeeze as many requests as possible out of a
          single connection before that connection is terminated by
          the server.  The  KeepAlive  directive is the
          boolean flag which enables or disables this connection
          re-use facility, and as we indicated previously, by default
          its value is  On . But there&#39;s another directive which limits the number of
          requests a client is allowed to submit on a single
          connection:  the  MaxKeepAliveRequests 
          directive.  The default value for that option
          is  100 .  This was probably sufficient for
          older versions of Subversion, but Subversion 1.8 employs a
          different HTTP communications library (called Serf) which
          prefers to pipeline several smaller requests for specific bits
          of information rather than asking the server to transmit
          huge chunks of data in a single response.  We recommend that
          you increase the value of the
           MaxKeepAliveRequests  option
          to at least  1000 . 
#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to &quot;Off&quot; to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 1000
 Bulk updates The biggest difference between the way that Subversion
          1.8 clients and pre-1.8 clients behave is in how update-style
          operations ( svn checkout ,  svn
          update ,  svn switch , etc.) are
          handled.  Older clients which used the Neon HTTP library for
          communications preferred to ask the server for the entire
          payload of information required from the server in a single
          request.  Admins will have noticed that in their server
          logs, there would be some initial handshaking operations,
          and then a  REPORT  request with a massive
          response.  That response was the entire checkout/update
          dataset! Subversion clients which use the Serf HTTP
          library which includes all clients built atop the
          Subversion 1.8 still send the  REPORT 
          request, but with slightly different flags set inside that
          request.  These flags ask the server not to send all the
          data for the operation, but to instead send only a checklist
          of other more specific things that the client needs to
          subsequently fetch from the server in order to complete that
          operation.  In the server&#39;s  access_log ,
          that  REPORT  is followed by many smaller
          requests ( GET s and, in older versions of
          Subversion,  PROPFIND s). There are pros and cons to each approach.  As we&#39;ve
          mentioned, the so-called bulk updates generate considerably
          less information in the server logs, but a given Apache HTTP
          Server child process is completely consumed for the duration
          of what could be a lengthy operation.  Non-bulk updates
          offer opportunities for setting up content caches (which
          themselves can improve performance), but generate server log
          traffic which is whole orders of magnitude larger than the
          bulk update approach.  So, for one reason or another,
          administrators may desire to exert a little more control
          over which approach the clients use.  Subversion 1.6
          introduced the  SVNAllowBulkUpdates 
           mod_dav_svn  directive a simple
          boolean flag to allow admins to specify whether the
          server was allowed to honor bulk update requests.  In
          Subversion 1.8, this directive has expanded to include
          a  Prefer  value in addition to the
           On  and  Off  values it
          already supported. When  SVNAllowBulkUpdates 
          is set to  Prefer , supporting clients (1.8
          or newer) will try to use the bulk update approach unless
          otherwise configured. Extra Goodies We&#39;ve covered most of the authentication and authorization
        options for Apache and  mod_dav_svn .  But
        there are a few other nice features that Apache
        provides. Repository browsing One of the most useful benefits of an Apache/WebDAV
          configuration for your Subversion repository is that your
          versioned files and directories are immediately available
          for viewing via a regular web browser.  Since Subversion
          uses URLs to identify versioned resources, those URLs used
          for HTTP-based repository access can be typed directly into
          a web browser.  Your browser will issue an
          HTTP  GET  request for that URL; based on
          whether that URL represents a versioned directory or
          file,  mod_dav_svn  will respond with a
          directory listing or with file contents. URL syntax If the URLs do not contain any information about which
            version of the resource you wish to
            see,  mod_dav_svn  will answer with the
            youngest version.  This functionality has the wonderful
            side effect that you can pass around Subversion URLs to
            your peers as references to documents, and those URLs will
            always point at the latest manifestation of that document.
            Of course, you can even use the URLs as hyperlinks from
            other web sites, too. As of Subversion 1.6,  mod_dav_svn 
            supports a public URI syntax for examining older revisions
            of both files and directories.  The syntax uses the query
            string portion of the URL to specify either or both of a
            peg revision and operative revision, which Subversion will
            then use to determine which version of the file or
            directory to display to your web browser.  Add the query
            string name/value pair
             p= PEGREV ,
            where  PEGREV  is a revision
            number, to specify the peg revision you wish to apply to the
            request.  Use
             r= REV ,
            where  REV  is a revision number, to
            specify an operative revision. For example, if you wish to see the latest version of a
             README.txt  file located in your
            project&#39;s  /trunk , point your web
            browser to that file&#39;s repository URL, which might look
            something like the following: 
http://host.example.com/repos/project/trunk/README.txt
 If you now wish to see some older version of that
            file, add an operative revision to the URL&#39;s query
            string: 
http://host.example.com/repos/project/trunk/README.txt?r=1234
 What if the thing you&#39;re trying to view no longer exists
            in the youngest revision of the repository?  That&#39;s where a
            peg revision is handy: 
http://host.example.com/repos/project/trunk/deleted-thing.txt?p=321
 And of course, you can combine peg revision and
            operative revision specifiers to fine-tune the exact item
            you wish to view: 
http://host.example.com/repos/project/trunk/renamed-thing.txt?p=123&amp;r=21
 The previous URL would display revision 21 of the
            object which, in revision 123, was located
            at  /trunk/renamed-thing.txt  in the
            repository.  See   for a
            detailed explanation of these  peg revision 
            and  operative revision  concepts.  They can
            be a bit tricky to wrap your head around. Beginning with Subversion 1.8,  mod_dav_svn 
            has the ability to substitute keywords.  When mod_dav_svn
            finds the query argument  kw=1  added to
            the URL of a file, it will expand keywords when delivering
            the file&#39;s content.  Omitting the  kw 
            parameter or using any value besides  1 
            for that parameter will cause Subversion to use its
            default behavior, which is to deliver the file&#39;s content
            without any keywords expanded. For example, if you wish to see the latest version of a
             README.txt  file located in your
            project&#39;s  /trunk  with keywords
            expanded, add the query argument  kw=1  to the
            URL: 
http://host.example.com/repos/project/trunk/README.txt?kw=1
 As with client-side keyword expansion, only those keywords
            which are explicitly designated for expansion via the
             svn:keywords  property set on the file itself
            will be expanded.  See
              for a
            detailed description of the keyword substitution feature. As a reminder,  mod_dav_svn  offers only a
            limited repository browsing experience.  You can see directory
            listings and file contents, but no revision properties
            (such as commit log messages) or file/directory
            properties.  For folks who require more extensive browsing
            of repositories and their history, there are several
            third-party software packages which offer this.  Some
            examples include ViewVC ( ),
            Trac ( ) and WebSVN
            ( ).  These third-party
            tools don&#39;t affect  mod_dav_svn &#39;s
            built-in  browseability , and generally offer
            a much wider set of features, including the display of the
            aforementioned property sets, display of content
            differences between file revisions, and so on. Proper MIME type When browsing a Subversion repository, the web browser
            gets a clue about how to render a file&#39;s contents by
            looking at the  Content-Type:  header
            returned in Apache&#39;s response to the
            HTTP  GET  request.  The value of this
            header is some sort of MIME type.  By default, Apache will
            tell the web browsers that all repository files are of
            the  default  MIME type,
            typically  text/plain .  This can be
            frustrating, however, if a user wishes repository files to
            render as something more meaningful for example,
            it might be nice to have a  foo.html  file
            in the repository actually render as HTML when
            browsing. To make this happen, you need only to make sure that
            your files have the proper  svn:mime-type 
            set.  We discuss this in more detail in
             ,
            and you can even configure your client to automatically
            attach proper  svn:mime-type  properties
            to files entering the repository for the first time; see
             . Continuing our example, if one were to set
            the  svn:mime-type  property
            to  text/html  on
            file  foo.html , Apache would properly
            tell your web browser to render the file as HTML.  One
            could also attach proper  image/* 
            MIME-type properties to image files and ultimately get an
            entire web site to be viewable directly from a repository!
            There&#39;s generally no problem with this, as long as the web
            site doesn&#39;t contain any dynamically generated
            content. Customizing the look You generally will get more use out of URLs to
            versioned files after all, that&#39;s where the
            interesting content tends to lie.  But you might have
            occasion to browse a Subversion directory listing, where
            you&#39;ll quickly note that the generated HTML used to
            display that listing is very basic, and certainly not
            intended to be aesthetically pleasing (or even
            interesting).  To enable customization of these directory
            displays, Subversion provides an XML index feature.  A
            single  SVNIndexXSLT  directive in your
            repository&#39;s  Location  block of
             httpd.conf  will
            instruct  mod_dav_svn  to generate XML
            output when displaying a directory listing, and to
            reference the XSLT stylesheet of your choice: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNIndexXSLT &quot;/svnindex.xsl&quot;
   
&lt;/Location&gt;
 Using the  SVNIndexXSLT  directive
            and a creative XSLT stylesheet, you can make your
            directory listings match the color schemes and imagery
            used in other parts of your web site.  Or, if you&#39;d
            prefer, you can use the sample stylesheets provided in the
            Subversion source distribution&#39;s
             tools/xslt/  directory.
            Keep in mind that the path provided to the
             SVNIndexXSLT  directory is actually a
            URL path browsers need to be able to read your
            stylesheets to make use of them! Listing repositories If you&#39;re serving a collection of repositories from a
            single URL via the  SVNParentPath 
            directive, then it&#39;s also possible to have Apache display
            all available repositories to a web browser.  Just
            activate the  SVNListParentPath 
            directive: 
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNListParentPath on
   
&lt;/Location&gt;
 If a user now points her web browser to the
            URL  http://host.example.com/svn/ ,
            she&#39;ll see a list of all Subversion repositories sitting
            in  /var/svn .  Obviously, this can be
            a security problem, so this feature is turned off by
            default. Apache logging Because Apache is an HTTP server at heart, it contains
          fantastically flexible logging features.  It&#39;s beyond the
          scope of this book to discuss all of the ways logging can be
          configured, but we should point out that even the most
          generic  httpd.conf  file will cause
          Apache to produce two logs:
           error_log 
          and  access_log .  These logs may appear
          in different places, but are typically created in the
          logging area of your Apache installation.  (On Unix, they
          often live
          in  /usr/local/apache2/logs/ .) The  error_log  describes any internal
          errors that Apache runs into as it works.
          The  access_log  file records every
          incoming HTTP request received by Apache.  This makes it
          easy to see, for example, which IP addresses Subversion
          clients are coming from, how often particular clients use
          the server, which users are authenticating properly, and
          which requests succeed or fail. Unfortunately, because HTTP is a stateless protocol,
          even the simplest Subversion client operation generates
          multiple network requests.  It&#39;s very difficult to look at
          the  access_log  and deduce what the
          client was doing most operations look like a series
          of cryptic  PROPPATCH ,  GET ,
           PUT , and  REPORT 
          requests.  To make things worse, many client operations send
          nearly identical series of requests, so it&#39;s even harder to
          tell them apart. mod_dav_svn , however, can come to
          your aid.  By activating an  operational
          logging  feature, you can
          ask  mod_dav_svn  to create a separate log
          file describing what sort of high-level operations your
          clients are performing. To do this, you need to make use of
          Apache&#39;s  CustomLog  directive (which is
          explained in more detail in Apache&#39;s own documentation).
          Be sure to invoke this
          directive  outside  your
          Subversion  Location  block: 
&lt;Location /svn&gt;
  DAV svn
   
&lt;/Location&gt;

CustomLog logs/svn_logfile &quot;%t %u %{SVN-ACTION}e&quot; env=SVN-ACTION
 In this example, we&#39;re asking Apache to create a special
          logfile,  svn_logfile , in the standard
          Apache  logs  directory.
          The  %t  and  %u 
          variables are replaced by the time and username of the
          request, respectively.  The really important parts are the
          two instances of  SVN-ACTION .
          When Apache sees that variable, it substitutes the value of
          the  SVN-ACTION  environment variable,
          which is automatically set by  mod_dav_svn 
          whenever it detects a high-level client action. So, instead of having to interpret a
          traditional  access_log  like
          this: 
[26/Jan/2007:22:25:29 -0600] &quot;PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1&quot; 207 398
[26/Jan/2007:22:25:29 -0600] &quot;PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1&quot; 207 449
[26/Jan/2007:22:25:29 -0600] &quot;PROPFIND /svn/calc HTTP/1.1&quot; 207 647
[26/Jan/2007:22:25:29 -0600] &quot;REPORT /svn/calc/!svn/vcc/default HTTP/1.1&quot; 200 607
[26/Jan/2007:22:25:31 -0600] &quot;OPTIONS /svn/calc HTTP/1.1&quot; 200 188
[26/Jan/2007:22:25:31 -0600] &quot;MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1&quot; 201 227
 
 you can peruse a much more
          intelligible  svn_logfile  like
          this: 
[26/Jan/2007:22:24:20 -0600] - get-dir /tags r1729 props
[26/Jan/2007:22:24:27 -0600] - update /trunk r1729 depth=infinity
[26/Jan/2007:22:25:29 -0600] - status /trunk/foo r1729 depth=infinity
[26/Jan/2007:22:25:31 -0600] sally commit r1730
 In addition to the  SVN-ACTION 
          environment variable,  mod_dav_svn  also
          populates the  SVN-REPOS 
          and  SVN-REPOS-NAME  variables, which carry
          the filesystem path to the repository and the basename
          thereof, respectively.  You might wish to include references
          to one or both of these variables in
          your  CustomLog  format string, too,
          especially if you are combining usage information from
          multiple repositories into a single log file.  For an
          exhaustive list of all actions logged, see
           . Obviously, the more information that Apache logs about
          your Subversion activities, the more disk space on your
          server those logs consume.  It is non uncommon for
          high-traffic Subversion servers to generate many gigabytes
          of log information daily.  Obviously, logs are only valuable
          if they can be meaningfully processed, and huge log files
          can quickly become unwieldy.  There are various standard
          approaches to Apache HTTP Server log management which are
          outside the scope of this book.  Administrators are
          encouraged to use the log rotation and archival approach
          which works best for them. But what if Subversion is simply generating too much log
          information to be useful?  For example, in
           ,
          we mentioned that certain approaches that Subversion clients
          may take to checkouts and other update-style operations can
          cause rapid growth of your server logs as requests for
          individual pieces of the update data set are individually
          logged (whereas in previous version of Subversion, they
          might not have been).  In this case, you might consider
          using some Apache configuration magic to selectively silence
          some of that log activity. Apache HTTP Server&#39;s
           mod_setenvif  module offers
          a  SetEnvIf  directive which is handy for
          conditionally setting environment variables.  And as it
          turns out, the  CustomLog  directive can be
          told to conditionally log requests based on the state of
          environment variables.  The following is a sample
          configuration which instructs the server
          to  not  log  GET 
          and  PROPFIND  requests aimed at private
          Subversion URLs. 
# Matches everything, just to initialize the &quot;in_repos&quot; variable.
SetEnvIf Request_URI &quot;^&quot; in_repos=0

# Set &quot;in_repos&quot; if this is a request for a private Subversion URL.
SetEnvIf Request_URI &quot;/!svn/&quot; in_repos=1

# Set &quot;do_not_log&quot; for non-public request types we don&#39;t care to log.
SetEnvIf Request_Method &quot;GET&quot; do_not_log
SetEnvIf Request_Method &quot;PROPFIND&quot; do_not_log

# Unset &quot;do_not_log&quot; for URLs that aren&#39;t private Subversion URLs.
SetEnvIf in_repos 0 !do_not_log

# Log requests, but only if &quot;do_not_log&quot; isn&#39;t set.
CustomLog logs/access_log env=!do_not_log
 Using this configuration,  httpd  would
          still log  GET  requests aimed at public
          Subversion URLs.  These are the sorts of requests generated
          by a web browser as someone navigates the repository
          directly.  But  GET 
          and  PROPFIND  requests aimed at so-called
          &quot;private&quot; Subversion URLs which are the very sorts of
          requests used to fetch each and every individual file during
          a checkout operation won&#39;t get logged. Write-through proxying WebDAV proxies httpd, write-through proxies httpd write-through proxies master httpd write-through proxies slave One of the nice advantages of using Apache as a
          Subversion server is that it can be set up for simple
          replication.  For example, suppose that your team is
          distributed across four offices around the globe.  The
          Subversion repository can exist only in one of those
          offices, which means the other three offices will not enjoy
          accessing it they&#39;re likely to experience
          significantly slower traffic and response times when
          updating and committing code.  A powerful solution is to set
          up a system consisting of one  master 
          Apache server and several  slave 
          Apache servers.  If you place a slave server in each office,
          users can check out a working copy from whichever slave
          is closest to them.  All read requests go to their local
          slave.  Write requests get automatically routed to the
          single master server.  When the commit completes, the master
          then automatically  pushes  the new revision to
          each slave server using the  svnsync 
          replication tool. This configuration creates a huge perceptual speed
          increase for your users, because Subversion client traffic
          is typically 80 90% read requests.  And if those
          requests are coming from a  local 
          server, it&#39;s a huge win. In this section, we&#39;ll walk you through a standard setup
          of this single-master/multiple-slave system.  However, keep
          in mind that your servers must be running at least Apache
          2.2.0 (with  mod_proxy  loaded) and
          Subversion 1.5 ( mod_dav_svn ). Ours is just one example of how you might setup a
            Subversion write-through proxy configuration.  There are
            other approaches.  For example, rather than having the
            master server push changes out to every slave server, the
            slaves could periodically pull those changes from the
            master.  Or perhaps the master could push changes to a
            single slave, which then pushes the same change to the
            next slave, and so on down the line.  Administrators are
            encouraged to use this section for basic understanding
            of what happens in a Subversion WebDAV proxy deployment
            scenario, and then implement the specific approach that
            works best for their organization. Configure the servers First, configure your master server&#39;s
             httpd.conf  file in the usual way.
            Make the repository available at a certain URI location,
            and configure authentication and authorization however
            you&#39;d like.  After that&#39;s done, configure each of your
             slave  servers in the exact same way, but
            add the special  SVNMasterURI  directive
            to the block: 
&lt;Location /svn&gt;
  DAV svn
  SVNPath /var/svn/repos
  SVNMasterURI http://master.example.com/svn
   
&lt;/Location&gt;
 This new directive tells a slave server to redirect
            all write requests to the master.  (This is done
            automatically via Apache&#39;s  mod_proxy 
            module.)  Ordinary read requests, however, are still
            serviced by the slaves.  Be sure that your master and
            slave servers all have matching authentication and
            authorization configurations;  if they fall out of sync,
            it can lead to big headaches. Next, we need to deal with the problem of infinite
            recursion.  With the current configuration, imagine what
            will happen when a Subversion client performs a commit to
            the master server.  After the commit completes, the server
            uses  svnsync  to replicate the new
            revision to each slave.  But because
             svnsync  appears to be just another
            Subversion client performing a commit, the slave will
            immediately attempt to proxy the incoming write request
            back to the master!  Hilarity ensues. The solution to this problem is to have the master
            push revisions to a different
             &lt;Location&gt;  on the slaves.  This
            location is configured to  not  proxy
            write requests at all, but to accept normal commits from
            (and only from) the master&#39;s IP address: 
&lt;Location /svn-proxy-sync&gt;
  DAV svn
  SVNPath /var/svn/repos
  Order deny,allow
  Deny from all
  # Only let the server&#39;s IP address access this Location:
  Allow from 10.20.30.40
   
&lt;/Location&gt;
 Set up replication Now that you&#39;ve configured
            your  Location  blocks on master and
            slaves, you need to configure the master to replicate to
            the slaves.  Our walkthough uses  svnsync ,
            which is covered in more detail in
             . First, make sure that each slave repository has a
             pre-revprop-change  hook script which
            allows remote revision property changes.  (This is
            standard procedure for being on the receiving end of
             svnsync .) Then log into the master
            server and configure each of the slave repository URIs to
            receive data from the master repository on the local
            disk: 
$ svnsync init http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Copied properties for revision 0.

# Perform the initial replication

$ svnsync sync http://slave1.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
 

$ svnsync sync http://slave2.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
 

$ svnsync sync http://slave3.example.com/svn-proxy-sync \
               file:///var/svn/repos
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
 
 After this is done, we configure the master server&#39;s
             post-commit  hook script to invoke
             svnsync  on each slave server: 
#!/bin/sh
# Post-commit script to replicate newly committed revision to slaves

svnsync sync http://slave1.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave2.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync sync http://slave3.example.com/svn-proxy-sync \
             file:///var/svn/repos &gt; /dev/null 2&gt;&amp;1 &amp;
 The extra bits on the end of each line aren&#39;t
            necessary, but they&#39;re a sneaky way to allow the sync
            commands to run in the background so that the Subversion
            client isn&#39;t left waiting forever for the commit to
            finish.  In addition to this
             post-commit  hook, you&#39;ll need a
             post-revprop-change  hook as well so
            that when a user, say, modifies a log message, the slave
            servers get that change also: 
#!/bin/sh
# Post-revprop-change script to replicate revprop-changes to slaves

REV=${2}
svnsync copy-revprops http://slave1.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave2.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
svnsync copy-revprops http://slave3.example.com/svn-proxy-sync \
                      file:///var/svn/repos \
                      -r ${REV} &gt; /dev/null 2&gt;&amp;1 &amp;
 The only thing we&#39;ve left out here is what to do about
            user-level locks (of the  svn lock 
            variety).  Locks are enforced by the master server during
            commit operations; but all the information about locks is
            distributed during read operations such as  svn
            update  and  svn status  by the
            slave server.  As such, a fully functioning proxy setup
            needs to perfectly replicate lock information from the
            master server to the slave servers.  Unfortunately, most
            of the mechanisms that one might employ to accomplish this
            replication fall short in one way or
            another  tracks these problems. .  Many teams
            don&#39;t use Subversion&#39;s locking features at all, so this
            may be a nonissue for you.  Sadly, for those teams which
            do use locks, we have no recommendations on how to
            gracefully work around this shortcoming. Caveats Your master/slave replication system should now be
            ready to use.  A couple of words of warning are in order,
            however.  Remember that this replication isn&#39;t entirely
            robust in the face of computer or network crashes.  For
            example, if one of the automated
             svnsync  commands fails to complete for
            some reason, the slaves will begin to fall behind.  For
            example, your remote users will see that they&#39;ve committed
            revision 100, but then when they run  svn
            update , their local server will tell them that
            revision 100 doesn&#39;t yet exist!  Of course, the problem
            will be automatically fixed the next time another commit
            happens and the subsequent  svnsync  is
            successful the sync will replicate all waiting
            revisions.  But still, you may want to set up some sort of
            out-of-band monitoring to notice synchronization failures
            and force  svnsync  to run when things go
            wrong. Another limitation of the write-through proxy
            deployment model involves version mismatches of the
            version of Subversion which is installed, that
            is between the master and slave servers.  Each new
            release of Subversion may (and often does) add new
            features to the network protocol used between the clients
            and servers.  Since feature negotiation happens against
            the slave, it is the slave&#39;s protocol version and feature
            set which is used.  But write operations are passed
            through to the master server quite literally.  Therefore,
            there is always a risk that the slave server will answer a
            feature negotiation request from the client in way that is
            true for the slave, but untrue for the master if the
            master is running an older version of Subversion.  This
            could result in the client trying to use a new feature
            that the master doesn&#39;t understand, and failing.  There
            are a couple of known problems of this sort in Subversion
            1.7, which introduced a major revision of its HTTP
            protocol.  If you are deploying a Subversion 1.7 slave
            server in front of a pre-1.7 master, you&#39;ll want to
            configure your slave server&#39;s
            Subversion  &lt;Location&gt;  block with
            the  SVNAdvertiseV2Protocol Off 
            directive. For the best results possible, try to run the same
              version of Subversion on your master and slave
              servers. Can We Set Up Replication with svnserve? If you&#39;re using  svnserve  instead
              of Apache as your server, you can certainly configure
              your repository&#39;s hook scripts to invoke
               svnsync  as we&#39;ve shown here, thereby
              causing automatic replication from master to slaves.
              Unfortunately, at the time of this writing there is no way to
              make slave  svnserve  servers
              automatically proxy write requests back to the master
              server.  This means your users would only be able to
              check out read-only working copies from the slave
              servers.  You&#39;d have to configure your slave servers to
              disallow write access completely.  This might be useful
              for creating read-only  mirrors  of popular
              open source projects, but it&#39;s not a transparent
              proxying system. Other Apache features Several of the features already provided by Apache in
          its role as a robust web server can be leveraged for
          increased functionality or security in Subversion as well.
          The Subversion client is able to use SSL (the Secure Sockets
          Layer, discussed earlier).  If your Subversion client is
          built to support SSL, it can access your Apache server
          using  https://  and enjoy a high-quality
          encrypted network session. Equally useful are other features of the Apache and
          Subversion relationship, such as the ability to specify a
          custom port (instead of the default HTTP port 80) or a
          virtual domain name by which the Subversion repository
          should be accessed, or the ability to access the repository
          through an HTTP proxy. Finally, because  mod_dav_svn  is
          speaking a subset of the WebDAV/DeltaV protocol, it&#39;s
          possible to access the repository via third-party DAV
          clients.  Most modern operating systems (Win32, OS X, and
          Linux) have the built-in ability to mount a DAV server as a
          standard network  shared folder.  This is a
          complicated topic, but also wondrous when implemented.  For
          details, read  . Note that there are a number of other small tweaks one
          can make to  mod_dav_svn  that perhaps do
          not merit extensive coverage.  For those interested,
          however, we provide a complete list of
          all  httpd.conf  directives
          to which  mod_dav_svn  responds in
           . Subversion Apache HTTP Server Configuration Reference In the previous sections, we&#39;ve mentioned numerous
        directives that administrators can use in their
         httpd.conf  files to enable and configure
        their Subversion server offering, introducing each directive
        as we also introduce the functionality it toggles.  In this
        section, we&#39;ll quickly summarize  all  the
        configuration directives supported by both of the Apache HTTP
        Server modules which are provided as part of the standard
        Subversion distribution. mod_dav_svn configuration directives The following configuration directives are recognized
          and supported by Subversion&#39;s Apache HTTP Server module,
           mod_dav_svn . DAV svn Must be included in any
                 Directory  or  Location 
                block for a Subversion repository.  It
                tells  httpd  to use the Subversion
                backend for  mod_dav  to handle all
                requests. SVNActivitiesDB
               directory-path Specifies the location in the filesystem where the
                activities database should be stored.  By default,
                 mod_dav_svn  creates and uses a
                directory in the repository
                called  dav/activities.d .  The
                path specified with this option must be an absolute
                path. If specified for
                an  SVNParentPath 
                area,  mod_dav_svn  appends the
                basename of the repository to the path specified here.
                For example: 
&lt;Location /svn&gt;
  DAV svn

  # any &quot;/svn/foo&quot; URL will map to a repository in 
  # /net/svn.nfs/repositories/foo
  SVNParentPath         &quot;/net/svn.nfs/repositories&quot;

  # any &quot;/svn/foo&quot; URL will map to an activities db in
  #  /var/db/svn/activities/foo
  SVNActivitiesDB       &quot;/var/db/svn/activities&quot;
&lt;/Location&gt;
 SVNAdvertiseV2Protocol On|Off New to Subversion 1.7, this toggles
                whether  mod_dav_svn  advertises its
                support for the new version of its HTTP protocol also
                introduced in that version.  Most admins will not wish
                to use this directive (which is  On 
                by default), choosing instead to enjoy the performance
                benefits that the new protocol offers.  However, whena
                configuring a server as a write-through proxy to
                another server which does not support the new
                protocol, set this directive&#39;s value
                to  Off . SVNAllowBulkUpdates On|Off Toggles support for all-inclusive
                responses to update-style  REPORT 
                requests.  Subversion clients use
                 REPORT  requests to get information
                about directory tree checkouts and updates from
                 mod_dav_svn .  They can ask the
                server to send that information in one of two ways:
                with the entirety of the tree&#39;s information in one
                massive response, or with a
                 skelta  (a skeletal
                representation of a tree delta) which contains just
                enough information for the client to know what
                 additional  data to request from
                the server.  When this directive is included with a
                value of  Off ,
                 mod_dav_svn  will only ever respond
                to these  REPORT  requests with
                skelta responses, regardless of the type of responses
                requested by the client. Most folks won&#39;t need to use this directive at
                all.  It primarily exists for administrators who
                wish for security or auditing reasons to
                force Subversion clients to fetch individually all the
                files and directories needed for updates and
                checkouts, thus leaving an audit trail of
                 GET  and  PROPFIND 
                requests in Apache&#39;s logs.  The default value of this
                directive is  On . SVNAutoversioning On|Off When its value is
                 On , allows write requests from
                WebDAV clients to result in automatic commits.  A
                generic log message is auto-generated and attached to
                each revision.  If you enable autoversioning, you&#39;ll
                likely want to set  ModMimeUsePathInfo
                On  so that  mod_mime  can
                set  svn:mime-type  to the correct
                MIME type automatically (as best as
                 mod_mime  is able to, of course).
                For more information, see  .  The default value of this
                directive is  Off . SVNCacheFullTexts On|Off When set to  On , this tells
                Subversion to cache content fulltexts if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the  SVNInMemoryCacheSize 
                directive.)  The default value of this directive
                is  Off . SVNCacheTextDeltas On|Off When set to  On , this tells
                Subversion to cache content deltas if sufficient
                in-memory cache is available, which could offer a
                significant performance benefit to the server.  (See
                also the  SVNInMemoryCacheSize 
                directive.)  The default value of this directive
                is  Off . SVNCompressionLevel
               level Specifies the compression level used when sending
                file content over the network.  A value
                of  0  disables compression
                altogether, and  9  is the maximum
                value.   5  is the default
                value. SVNIndexXSLT
               directory-path Specifies the URI of an XSL transformation for
                directory indexes.  This directive is optional. SVNInMemoryCacheSize
               size Specifies the maximum size (in kbytes) per process
                of Subversion&#39;s in-memory object cache.  The default
                value is  16384 ; use a value
                of  0  to deactivate this cache
                altogether. SVNListParentPath On|Off When set to  On , allows
                a  GET 
                of  SVNParentPath , which results in
                a listing of all repositories under that path.  The
                default setting is
                 Off . SVNMasterURI
               url Specifies a URI to the master Subversion
                repository (used for a write-through proxy). SVNParentPath
               directory-path Specifies the location in the filesystem of a
                parent directory whose child directories are
                Subversion repositories.  In a configuration block for
                a Subversion repository, either this directive or
                 SVNPath  must be present, but not
                both. SVNPath
               directory-path Specifies the location in the
                filesystem for a Subversion repository&#39;s files.  In a
                configuration block for a Subversion repository,
                either this directive or
                 SVNParentPath  must be present, but
                not both. SVNPathAuthz On|Off|short_circuit Controls path-based authorization by enabling
                subrequests ( On ), disabling
                subrequests ( Off ; see  ),
                or querying  mod_authz_svn  directly
                ( short_circuit ).  The default
                value of this directive is  On . SVNReposName
               name Specifies the name of a Subversion repository for
                use in  HTTP GET  responses.  This
                value will be prepended to the title of all directory
                listings (which are served when you navigate to a
                Subversion repository with a web browser).  This
                directive is optional. Subversion will not use the repository name as
                   configured via this directive when trying to match
                   rules in access control files.  The repository names
                   used in that file&#39;s syntax are always derived from
                   the repository URL.  See
                     for details. SVNSpecialURI
               component Specifies the URI component (namespace) for
                special Subversion resources.  The default is
                 !svn , and most
                administrators will never use this directive.  Set
                this only if there is a pressing need to have a file
                named  !svn  in your repository.
                If you change this on a server already in use, it will
                break all of the outstanding working copies, and your
                users will hunt you down with pitchforks and flaming
                torches. SVNUseUTF8 On|Off When set to  On ,
                 mod_dav_svn  will communicate with
                hook scripts using repository root paths encoded in
                UTF-8, and will expect those scripts to likewise
                generate output (such as error messages) encoded in
                UTF-8.  The default value of this option
                is  Off , which means
                that  mod_dav_svn  assumes a 7-bit
                ASCII encoding for its hook script interactions.  This
                option is available as of Subversion 1.8. Administrators should ensure that the character
                  set and encoding expectations of hook scripts match
                  all the ways they might be invoked.  For example, if
                  one repository is served by both  httpd 
                  and  svnserve ,  svnserve 
                  should also be configured to use UTF-8 (by setting
                  an appropriate locale in its environment) if this
                  option is enabled for  mod_dav_svn .
                  Also, local filesystem paths containing non-ASCII
                  characters which will be accessed by those scripts
                  (such as repository root paths) must be properly
                  encoded in the filesystem to match the scripts&#39;
                  expectations. mod_authz_svn configuration directives The following configuration directives are provided
          by  mod_authz_svn , Subversion&#39;s path-based
          authorization Apache HTTP Server module.  For an in-depth
          description of using path-based authorization in Subversion,
          see  . AuthzForceUsernameCase Upper|Lower Set to  Upper 
                or  Lower  to perform case conversion
                of the specified sort on the authenticated username
                before checking it for authorization.  While usernames
                are compared in a case-sensitive fashion against those
                referenced in the authorization rules file, this
                directive can at least normalize variably-cased
                usernames into something consistent. AuthzSVNAccessFile
               file-path Consult  file-path  for
                access rules describing the permissions for paths in
                Subversion repository. AuthzSVNAnonymous On|Off Set to  Off  to disable two
                special-case behaviours of this module: interaction
                with the  Satisfy Any  directive and
                enforcement of the authorization policy even when no
                 Require  directives are present.
                The default value of this directive is
                 On . AuthzSVNAuthoritative On|Off Set to  Off  to allow access
                control to be passed along to lower modules.  The
                default value of this directive is
                 On . AuthzSVNNoAuthWhenAnonymousAllowed On|Off Set to  On  to suppress
                authentication and authorization for requests which
                anonymous users are allowed to perform.  The default
                value of this directive is
                 On . Path-Based Authorization Both Apache and  svnserve  are capable of
      granting (or denying) permissions to users.  Typically this is
      done over the entire repository: a user can read the repository
      (or not), and she can write to the repository (or not). It&#39;s also possible, however, to define finer-grained access
      rules.  One set of users may have permission to write to a
      certain directory in the repository, but not others; another
      directory might not even be readable by all but a few special
      people.  It&#39;s even possible to restrict access on a per file
      basis. Both Subversion servers use a common file format to describe
      these path-based access rules.  In this section, we will
      explain that file format, as well how to configure your
      Subversion server to use it for managing path-based
      authorization. Do You Really Need Path-Based Access Control? A lot of administrators setting up Subversion for the
        first time tend to jump into path-based access control without
        giving it a lot of thought.  The administrator usually knows
        which teams of people are working on which projects, so it&#39;s
        easy to jump in and grant certain teams access to certain
        directories and not others.  It seems like a natural thing,
        and it appeases the administrator&#39;s desire to maintain tight
        control of the repository. Note, though, that there are often invisible (and
        visible!) costs associated with this feature.  In the visible
        category, the server needs to do a lot more work to ensure
        that the user has the right to read or write each specific
        path; in certain situations, there&#39;s very noticeable
        performance loss.  In the invisible category, consider the
        culture you&#39;re creating.  Most of the time, while certain
        users  shouldn&#39;t  be committing changes to
        certain parts of the repository, that social contract doesn&#39;t
        need to be technologically enforced.  Teams can sometimes
        spontaneously collaborate with each other; someone may want to
        help someone else out by committing to an area she doesn&#39;t
        normally work on.  By preventing this sort of thing at the
        server level, you&#39;re setting up barriers to unexpected
        collaboration.  You&#39;re also creating a bunch of rules that
        need to be maintained as projects develop, new users are
        added, and so on.  It&#39;s a bunch of extra work to
        maintain. Remember that this is a version control system!  Even if
        somebody accidentally commits a change to something she
        shouldn&#39;t, it&#39;s easy to undo the change.  And if a user
        commits to the wrong place with deliberate malice, it&#39;s a
        social problem anyway, and that the problem needs to be dealt
        with outside Subversion. So, before you begin restricting users&#39; access rights, ask
        yourself whether there&#39;s a real, honest need for this, or
        whether it&#39;s just something that  sounds good  to
        an administrator.  Decide whether it&#39;s worth sacrificing some
        server speed, and remember that there&#39;s very little risk
        involved; it&#39;s bad to become dependent on technology as a
        crutch for social problems. A common theme in
        this book! As an example to ponder, consider that the Subversion
        project itself has always had a notion of who is allowed to
        commit where, but it&#39;s always been enforced socially.  This is
        a good model of community trust, especially for open source
        projects.  Of course, sometimes there  are 
        truly legitimate needs for path-based access control; within
        corporations, for example, certain types of data really can be
        sensitive, and access needs to be genuinely restricted to
        small groups of people. Getting Started with Path-Based Access Control Subversion offers path-based access control in Apache via
        the  mod_authz_svn  module, which must be
        loaded using the  LoadModule  directive
        in  httpd.conf  in the same fashion
        that  mod_dav_svn  itself is loaded.  To
        enable the use of this module for your repositories, you&#39;ll
        add the  AuthzSVNAccessFile  directive (again
        within the  httpd.conf  file) pointing to
        your own access rules file.  (For a full explanation, see
         .) To configure path-based authorization
        in  svnserve , simply point
        the  authz-db  configuration variable (within
        your  svnserve.conf  file) to your access
        rules file. Once your server knows where to look for your access
        rules, it&#39;s time to define those rules. The syntax of the Subversion access file is the same
        familiar one used by  svnserve.conf  and
        the runtime configuration files.  Lines that start with a hash
        ( # ) are ignored.  In its simplest form,
        each section names a versioned path and, optionally, the
        repository in which that path is found.  In other words,
        except for a few reserved sections, section names are of one
        of two forms: either  [repos-name:path] 
        or  [path] .  Authenticated usernames are the
        option names within each section, and an option&#39;s value
        describes that user&#39;s level of access to the repository path:
        either  r  (read-only) or  rw 
        (read/write).  If the user is not mentioned at all, no access is
        allowed. Paths used in access file sections must be specified
          using Subversion&#39;s  internal style , which
          mostly just means that they are encoded in UTF-8 and use
          forward slash ( / ) characters as directory
          separators (even on Windows systems).  Note also that these
          paths do not employ any character escaping mechanism (such
          as URI-encoding) spaces in path names should be
          represented exactly as such in access file section names
          ( [repos-name:path with spaces] ,
          e.g.) Here&#39;s a simple example demonstrating a piece of the
        access configuration which grants read access Sally, and
        read/write access to Harry, for the
        path  /branches/calc/bug-142  (and all its
        children) in the repository  calc : 
[calc:/branches/calc/bug-142]
harry = rw
sally = r
 Prior to version 1.7, Subversion treated repository names
          and paths in a case-insensitive fashion for the purposes of
          access control, converting them to lower case internally
          before comparing them against the contents of your access
          file.  It now does these comparisons case-sensitively.  If you
          upgraded to Subversion 1.7 from an older version, you should
          review your access files for case correctness. The name of a repository as evaluated by the authorization
        subsystem is derived directly from the repository&#39;s path.
        Exactly how this happens differs between to two server
        options.  mod_dav_svn  uses only the basename
        of the repository&#39;s root URL Any human-readable
        name for a repository configured via
        the  SVNReposName   httpd.conf 
        directive will be ignored by the authorization subsystem.
        Your access control file sections must refer to repositories
        by their server-sensitive paths as previously
        described. ,
        while  svnserve  uses the entire relative
        path from the serving root (as determined by
        its  --root  ( -r ) command-line
        option) to the repository. The differences in the ways that a repository&#39;s name is
          determined by each of  mod_dav_svn 
          and  svnserve  can cause problems when
          trying to serve a repository via both servers
          simultaneously.  Naturally, an administrator would prefer to
          point both servers&#39; configurations toward a common access
          file.  However, for this to work, you must ensure that the
          repository name portion of the file&#39;s section names are
          compatible with each server&#39;s idea of what the repository
          name should be for example, by
          configuring  svnserve &#39;s root to be the
          same as  mod_dav_svn &#39;s configured
           SVNParentPath , or by using a different
          access file per repository so that section names needn&#39;t
          reference the repository at all. If you&#39;re using the  SVNParentPath 
        directive, it&#39;s important to specify the repository names in
        your sections.  If you omit them, a section such as
         [/some/dir]  will match the path
         /some/dir  in  every 
        repository.  If you&#39;re using the  SVNPath 
        directive, however, it&#39;s fine to provide only paths in your
        sections after all, there&#39;s only one repository. Permissions are inherited from a path&#39;s parent directory.
        That means we can specify a subdirectory with a different
        access policy for Sally.  Let&#39;s continue our previous
        example, and grant Sally write access to a child of the branch
        that she&#39;s otherwise permitted only to read: 
[calc:/branches/calc/bug-142]
harry = rw
sally = r

# give sally write access only to the &#39;testing&#39; subdir
[calc:/branches/calc/bug-142/testing]
sally = rw
 Now Sally can write to the  testing 
        subdirectory of the branch, but can still only read other parts.
        Harry, meanwhile, continues to have complete read/write access
        to the whole branch. It&#39;s also possible to explicitly deny permission to someone
        via inheritance rules, by setting the username variable to
        nothing: 
[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
 In this example, Harry has read/write access to the
        entire  bug-142  tree, but has absolutely no
        access at all to the  secret  subdirectory
        within it. The thing to remember is that the most specific path
          always matches first.  The server tries to match the path
          itself, and then the parent of the path, then the parent of
          that, and so on.  The net effect is that mentioning a specific
          path in the access file will always override any permissions
          inherited from parent directories. Similarly, sections that specify a repository name have
          precedence over those that don&#39;t: if both
           [calc:/some/path]  and
           [/some/path]  are present, the former will be used
          and the latter ignored for  calc . By default, nobody has any access to any repository at all.
        That means that if you&#39;re starting with an empty file, you&#39;ll
        probably want to give at least read permission to all users at
        the roots of the repositories.  You can do this by using the
        asterisk variable ( * ), which means  all
        users : 
[/]
* = r
 This is a common setup; notice that no repository
        name is mentioned in the section name.  This makes all repositories
        world-readable to all users.  Once all users have read access to
        the repositories, you can give explicit
         rw  permission to certain users on specific
        subdirectories within specific repositories. Note that while all of the previous examples use
        directories, that&#39;s only because defining access rules on
        directories is the most common case.  You may similarly
        restrict access on file paths, too. 
[calendar:/projects/calendar/manager.ics]
harry = rw
sally = r
 Access Control Groups The access file also allows you to define whole groups of
        users, much like the Unix  /etc/group 
        file.  To do this, create a  groups  section
        in your access file, and then describe your groups within that
        section: each variable&#39;s name defines the name of the group,
        and its value is a comma-delimited list of usernames which
        are part of that group. 
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = harry, sally, joe, frank, jane
 Groups can be granted access control just like users.
        Distinguish them with an  at sign 
        ( @ ) prefix: 
[calc:/projects/calc]
@calc-developers = rw

[paint:/projects/paint]
jane = r
@paint-developers = rw
 Another important fact is that group permissions are not
        overridden by individual user permissions. Rather, the
         combination  of all matching permissions is
        granted.  In the prior example, Jane is a member of the
         paint-developers  group, which has read/write
        access.  Combined with the  jane = r  rule,
        this still gives Jane read/write access.  Permissions for group
        members can only be extended beyond the permissions the group
        already has. Restricting users who are part of a group to less
        than their group&#39;s permissions is impossible. Groups can also be defined to contain other groups: 
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = @calc-developers, @paint-developers
 Username Aliases Some authentication systems expect and carry relatively
        short usernames of the sorts we&#39;ve been describing
        here harry ,
         sally ,  joe , and so on.  But
        other authentication systems such as those which use LDAP
        stores or SSL client certificates may carry much more
        complex usernames.  For example, Harry&#39;s username in an
        LDAP-protected system might be  CN=Harold
        Hacker,OU=Engineers,DC=red-bean,DC=com .  With
        usernames like that, the access file can become quite bloated
        with long or obscure usernames that are easy to
        mistype. Fortunately, Subversion 1.5 introduced username aliases to
        the access file syntax.  Username aliases allow you to have to
        type the correct complex username only once, in a statement
        which assigns to it a more easily digestable alias. Username aliases are defined in the
        special  aliases  section of the access file,
        with each variable name in that section defining an alias, and
        the value of those variables carrying the real Subversion
        username which is being aliased. 
[aliases]
harry = CN=Harold Hacker,OU=Engineers,DC=red-bean,DC=com
sally = CN=Sally Swatterbug,OU=Engineers,DC=red-bean,DC=com
joe = CN=Gerald I. Joseph,OU=Engineers,DC=red-bean,DC=com
 
 Once you&#39;ve defined a set of aliases, you can refer to the
        users elsewhere in the access file via their aliases in all the
        same places you could have instead used their actual usernames.
        Simply prepend an ampersand to the alias to distinguish it from
        a regular username: 
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
paint-developers = &amp;frank, &amp;sally, &amp;jane
everyone = @calc-developers, @paint-developers
 You might also choose to use aliases if your users&#39;
        usernames change frequently.  Doing so allows you to need to
        update only the aliases table when these username changes occur,
        instead of doing global search-and-replace operations on the
        whole access file. Advanced Access Control Features Beginning with Subversion 1.5, the access file syntax also
        supports some  magic  tokens for helping you to
        make rule assignments based on the user&#39;s authentication
        class.  One such token is
        the  $authenticated  token.  Use this token
        where you would otherwise specify a username, alias, or group
        name in your authorization rules to declare the permissions
        granted to any user who has authenticated with any username at
        all.  Similarly employed is the  $anonymous 
        token, except that it matches everyone who has
         not  authenticated with a username. 
[calendar:/projects/calendar]
$anonymous = r
$authenticated = rw
 Another handy bit of access file syntax magic is the use
        of the tilde ( ~ ) character as an exclusion
        marker.  In your authorization rules, prefixing a username,
        alias, group name, or authentication class token with a tilde
        character will cause Subversion to apply the rule to users who
        do  not  match the rule.  Though somewhat
        unnecessarily obfuscated, the following block is equivalent to
        the one in the previous example: 
[calendar:/projects/calendar]
~$authenticated = r
~$anonymous = rw
 A less obvious example might be as follows: 
[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
calc-owners = &amp;hewlett, &amp;packard
calc = @calc-developers, @calc-owners

# Any calc participant has read-write access...
[calc:/projects/calc]
@calc = rw

# ...but only allow the owners to make and modify release tags.
[calc:/projects/calc/tags]
~@calc-owners = r
 Some Gotchas with Access Control If you&#39;re using Apache as your Subversion server and have
        made certain subdirectories of your repository unreadable to
        certain users, you need to be aware of a possible nonoptimal
        behavior with  svn checkout . Depending on which HTTP communication library the
        Subversion client is using, it may request that the entire
        payload of a checkout or update be delivered in a single
        (often large) response to the primary checkout/update request.
        When this happens, this single request is the
         only  opportunity Apache has to demand
        user authentication.  This has some odd side effects.  For
        example, if a certain subdirectory of the repository is
        readable only by user Sally, and user Harry checks out a
        parent directory, his client will respond to the initial
        authentication challenge as Harry.  As the server generates
        the large response, there&#39;s no way it can resend an
        authentication challenge when it reaches the special
        subdirectory; thus the subdirectory is skipped altogether,
        rather than asking the user to reauthenticate as Sally at the
        right moment. In a similar way, if the root of the repository is
        anonymously world-readable, the entire checkout will be done
        without authentication again, skipping the unreadable
        directory, rather than asking for authentication partway
        through. For more on this, see the blog
        post  Authz and Anon Authn Agony  at
         . High-level Logging Both the Apache  httpd 
      and  svnserve  Subversion servers provide
      support for high-level logging of Subversion operations.
      Configuring each of the server options to provide this level of
      logging is done differently, of course, but the output from each
      is designed to conform to a uniform syntax. To enable high-level logging in  svnserve ,
      you need only use the  --log-file  command-line
      option when starting the server, passing as the value to the
      option the file to which  svnserve  should
      write its log output. 
$ svnserve -d -r /path/to/repositories --log-file /var/log/svn.log
 Enabling the same in Apache is a bit more involved, but is
      essentially an extension of Apache&#39;s stock log output
      configuration mechanisms see
        for
      details. The following is a list of Subversion action log messages
      produced by its high-level logging mechanism, followed by one or
      more examples of the log message as it appears in the log
      output. Checkout or export 
checkout-or-export /path r62 depth=infinity
 Commit 
commit harry r100
 Diffs 
diff /path r15:20 depth=infinity ignore-ancestry
diff /path1@15 /path2@20 depth=infinity ignore-ancestry
 Fetch a directory 
get-dir /trunk r17 text
 Fetch a file 
get-file /path r20 props
 Fetch a file revision 
get-file-revs /path r12:15 include-merged-revisions
 Fetch merge information 
get-mergeinfo (/path1 /path2)
 Lock 
lock /path steal
 Log 
log (/path1,/path2,/path3) r20:90 discover-changed-paths revprops=()
 Replay revisions (svnsync) 
replay /path r19
 Revision property change 
change-rev-prop r50 propertyname
 Revision property list 
rev-proplist r34
 Status 
status /path r62 depth=infinity
 Switch 
switch /pathA /pathB@50 depth=infinity
 Unlock 
unlock /path break
 Update 
update /path r17 send-copyfrom-args
 As a convenience to administrators who wish to post-process
      their Subversion high-level logging output (perhaps for
      reporting or analysis purposes), Subversion source code
      distributions provide a Python module (located at
       tools/server-side/svn_server_log_parse.py )
      which can be used to parse Subversion&#39;s log output. Server Optimization Part of the due diligence when offering a service such as a
      Subversion server involves capacity planning and performance
      tuning.  Subversion doesn&#39;t tend to be particularly greedy in
      terms of server resources such as CPU cycles and memory, but any
      service can benefit from optimizations, especially when usage of
      the service skyrockets In Subversion&#39;s case, the
      skyrocketing affect is, of course, due to its cool name.  Well,
      that and its popularity, reliability, ease of
      use . .  In this section, we&#39;ll discuss
      some ways you can tweak your Subversion server configuration
      to offer even better performance and scalability. Data Caching Generally speaking, the most expensive part of a
        Subversion server&#39;s job is fetching data from the repository.
        Subversion 1.6 attempted to offset this cost by introducing
        some in-memory caching of certain classes of data read from
        the repository.  But Subversion 1.7 takes this a step further,
        not only caching the results of some of the more costly
        operations, but also by providing in each of the available
        servers the means by which fine-tune the size and some
        behaviors of the cache. For  svnserve , you can specify the size
        of the cache using the  --memory-cache-size 
        ( -M ) command-line option.  You can also
        dictate whether  svnserve  should attempt to
        cache content fulltexts and deltas via the
        boolean  --cache-fulltexts 
        and  --cache-txdeltas  options,
        respectively. 
$ svnserve -d -r /path/to/repositories \
           --memory-cache-size 1024 \
           --cache-txdeltas yes \
           --cache-fulltexts yes
 
$
 mod_dav_svn  provides the same degree of
        cache configurability via  httpd.conf 
        directives.
        The  SVNInMemoryCacheSize ,
         SVNCacheFullTexts ,
        and  SVNCacheTextDeltas  directives may be
        used at the server configuration level to control Subversion&#39;s
        data cache characteristics: 
&lt;IfModule dav_svn_module&gt;
  # Enable a 1 Gb Subversion data cache for both fulltext and deltas.
  SVNInMemoryCacheSize 1048576
  SVNCacheTextDeltas On
  SVNCacheFullTexts On
&lt;/IfModule&gt;
 So what settings should you use?  Certainly you need to
        consider what resources are available on your server.  To get
        any benefit out of the cache at all, you&#39;ll probably want to
        let the cache be at least large enough to hold all the files
        which are most commonly accessed in your repository (for
        example, your project&#39;s  trunk  directory
        tree). Setting the memory cache size to  0 
          will disable this enhanced caching mechanism and cause
          Subversion to fall back to using the older cache mechanisms
          introduced in Subversion 1.6. Currently, only repositories which make use of the FSFS
          backend data store make use of this data caching
          functionality. Network Compression of Data Compressing the data transmitted across the wire can
        greatly reduce the size of those network transmissions, but
        comes at the cost of server (and client) CPU cycles.
        Depending on your server&#39;s CPU capacity, the typical access
        patterns of the clients who use your servers, and the
        bandwidth of the networks between them, you might wish to fine
        tune just how hard your server will work to compress the data
        it sends across the wire.  To assist with this fine tuning
        process, Subversion 1.7 offers
        the  --compression  ( -c )
        option to  svnserve  and
        the  SVNCompressionLevel  directive
        for  mod_dav_svn .  Both accept a value which
        is an integer between 0 and 9 (inclusive), where 9 offers the
        best compression of wire data, and 0 disables compression
        altogether. For example, on a local area network (LAN) with 1-Gigabit
        connections, it might not make sense to have the server
        compress its network transmissions (which also forces the
        clients to decompress them), as the network itself is so fast
        that users won&#39;t really benefit from the smaller overall
        network payload.  On the other hand, servers which are
        accessed primarily by clients with low-bandwidth connections
        would be doing those clients a favor by minimizing the overall
        size of its network communications. Supporting Multiple Repository Access Methods You&#39;ve seen how a repository can be accessed in many
      different ways.  But is it possible or safe for your
      repository to be accessed by multiple methods simultaneously?
      The answer is yes, provided you use a bit of foresight. At any given time, these processes may require read and
      write access to your repository: Regular system users using a Subversion client (as
          themselves) to access the repository directly via
           file://  URLs Regular system users connecting to SSH-spawned private
           svnserve  processes (running as
          themselves), which access the repository An  svnserve  process either a
          daemon or one launched by
           inetd running as a particular fixed
          user An Apache  httpd  process, running as a
          particular fixed user The most common problem administrators run into is
      repository ownership and permissions.  Does every process (or
      user) in the preceding list have the rights to read and write the
      repository&#39;s underlying data files?  Assuming you have a
      Unix-like operating system, a straightforward approach might be
      to place every potential repository user into a
      new  svn  group, and make the repository wholly
      owned by that group.  But even that&#39;s not enough, because a
      process may write to the database files using an unfriendly
      umask one that prevents access by other users. So the next step beyond setting up a common group for
      repository users is to force every repository-accessing process
      to use a sane umask.  For users accessing the repository
      directly, you can make the  svn  program into a
      wrapper script that first runs  umask 002  and
      then runs the real  svn  client program.  You
      can write a similar wrapper script for the
       svnserve  program, and add a  umask
      002  command to Apache&#39;s own startup script,
       apachectl .  For example: 
$ cat /usr/bin/svn

#!/bin/sh

umask 002
/usr/bin/svn-real &quot;$@&quot;
 Another common problem is often encountered on Unix-like
      systems.  If your repository is backed by Berkeley DB, for
      example, it occasionally creates new log files to journal its
      actions.  Even if the Berkeley DB repository is wholly owned by
      the  svn  group, these newly created log files
      won&#39;t necessarily be owned by that same group, which then
      creates more permissions problems for your users.  A good
      workaround is to set the group SUID bit on the
      repository&#39;s  db  directory.  This causes all
      newly created log files to have the same group owner as the
      parent directory. Once you&#39;ve jumped through these hoops, your repository
      should be accessible by all the necessary processes.  It may
      seem a bit messy and complicated, but the problems of having
      multiple users sharing write access to common files are classic
      ones that are not often elegantly solved. Fortunately, most repository administrators will never
       need  to have such a complex configuration.
      Users who wish to access repositories that live on the same
      machine are not limited to using  file:// 
      access URLs they can typically contact the Apache HTTP
      server or  svnserve  using
       localhost  for the server name in their
       http://  or  svn://  URL.
      And maintaining multiple server processes for your Subversion
      repositories is likely to be more of a headache than necessary.
      We recommend that you choose a single server that best meets your
      needs and stick with it! The svn+ssh:// Server Checklist It can be quite tricky to get a bunch of users with
        existing SSH accounts to share a repository without
        permissions problems.  If you&#39;re confused about all the things
        that you (as an administrator) need to do on a Unix-like
        system, here&#39;s a quick checklist that resummarizes some of the
        topics discussed in this section: All of your SSH users need to be able to read and
            write to the repository, so put all the SSH users into a
            single group. Make the repository wholly owned by that group. Set the group permissions to read/write. Your users need to use a sane umask when accessing the
            repository, so make sure  svnserve 
            ( /usr/bin/svnserve , or wherever it
            lives in  $PATH ) is actually a wrapper
            script that runs  umask 002  and
            executes the real  svnserve 
            binary. Take similar measures when using
             svnlook  and
             svnadmin .  Either run them with a sane
            umask or wrap them as just described. Customizing Your Subversion Experience Version control can be a complex subject, as much art as
    science, that offers myriad ways of getting stuff done.
    Throughout this book, you&#39;ve read of the various Subversion
    command-line client subcommands and the options that modify their
    behavior.  In this chapter, we&#39;ll look into still more ways to
    customize the way Subversion works for you setting up the
    Subversion runtime configuration, using external helper
    applications, Subversion&#39;s interaction with the operating system&#39;s
    configured locale, and so on. Runtime Configuration Area Subversion provides many optional behaviors that the user can
      control.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options and to use them for every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area. runtime configuration The Subversion  runtime configuration
      area  is a two-tiered hierarchy of option names and
      their values.  Usually, this boils down to a special directory
      that contains configuration files (the first tier), which are
      just text files in standard INI format
      where  sections  provide the second tier.  You can
      easily edit these files using your favorite text editor (such as
      Emacs or vi), and they contain directives read by the client to
      determine which of several optional behaviors the user
      prefers. Configuration Area Layout runtime configuration per-user The first time the  svn  command-line
        client is executed, it creates a per-user configuration area.
        On Unix-like systems, this area appears as a directory
        named  .subversion  in the user&#39;s home
        directory.  On Win32 systems, Subversion creates a folder
        named  Subversion , typically inside
        the  Application Data  area of the user&#39;s
        profile directory (which, by the way, is usually a hidden
        directory).  However, on this platform, the exact location
        differs from system to system and is dictated by the Windows
        Registry. The  APPDATA 
        environment variable points to the  Application
        Data  area, so you can always refer to this folder
        as  %APPDATA%\Subversion . 
        We will refer to the per-user configuration area using its
        Unix name,  .subversion . runtime configuration system-wide In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  This gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area alone does not dictate
        mandatory policy the settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to the  svn 
        program have the final word on behavior.  On Unix-like
        platforms, the system-wide configuration area is
        expected to be the  /etc/subversion 
        directory; on Windows machines, it looks for a
         Subversion  directory inside the common
         Application Data  location (again, as
        specified by the Windows Registry).  Unlike the per-user
        case, the  svn  program does not attempt
        to create the system-wide configuration area. The per-user configuration area currently contains three
        files two configuration files ( config  and
         servers ), and a  README.txt  
        file, which describes the INI format.  At the time of their
        creation, the files contain default values for each of the
        supported Subversion options, mostly commented out and grouped
        with textual descriptions about how the values for the key
        affect Subversion&#39;s behavior.  To change a certain behavior,
        you need only to load the appropriate configuration file into
        a text editor, and to modify the desired option&#39;s value.  If at
        any time you wish to have the default configuration settings
        restored, you can simply remove (or rename) your configuration
        directory and then run some innocuous  svn 
        command, such as  svn --version .  A new
        configuration directory with the default contents will be
        created. runtime configuration command-line override Subversion also allows you to override individual
        configuration option values at the command line via
        the  --config-option  option, which is
        especially useful if you need to make a (very) temporary
        change in behavior.  For more about this option&#39;s proper
        usage, see  . The per-user configuration area also contains a cache of
        authentication data.  The  auth  directory
        holds a set of subdirectories that contain pieces of cached
        information used by Subversion&#39;s various supported
        authentication methods.  This directory is created in such a
        way that only the user herself has permission to read its
        contents. Configuration and the Windows Registry runtime configuration Windows Registry In addition to the usual INI-based configuration
        area, Subversion clients running on Windows platforms may also
        use the Windows Registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The  file/section  hierarchy is preserved
        as well, though addressed in a slightly different
        fashion in this schema, files and sections are just
        levels in the Registry key tree. Subversion looks for system-wide configuration values
        under the
         HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion 
        key.  For example, the  global-ignores  option,
        which is in the  miscellany  section of the
         config  file, would be found at
         HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores .
        Per-user configuration values should be stored under
         HKEY_CURRENT_USER\Software\Tigris.org\Subversion . Registry-based configuration options are parsed
         before  their file-based counterparts, so
        they are overridden by values found in the configuration files.  In
        other words, Subversion looks for configuration information in
        the following locations on a Windows system; lower-numbered
        locations take precedence over higher-numbered locations: Command-line options The per-user INI files The per-user Registry values The system-wide INI files The system-wide Registry values Also, the Windows Registry doesn&#39;t really support the
        notion of something being  commented out. 
        However, Subversion will ignore any option key whose name
        begins with a hash ( # ) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option. The  svn  command-line client never
        attempts to write to the Windows Registry and will not attempt
        to create a default configuration area there.  You can create
        the keys you need using the  REGEDIT 
        program.  Alternatively, you can create a
         .reg  file (such as the one in  ), and
        then double-click on that file&#39;s icon in the Explorer shell,
        which will cause the data to be merged into your
        Registry. Sample registration entries (.reg) file 
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
&quot;#http-auth-types&quot;=&quot;basic;digest;negotiate&quot;
&quot;#http-compression&quot;=&quot;yes&quot;
&quot;#http-library&quot;=&quot;&quot;
&quot;#http-proxy-exceptions&quot;=&quot;&quot;
&quot;#http-proxy-host&quot;=&quot;&quot;
&quot;#http-proxy-password&quot;=&quot;&quot;
&quot;#http-proxy-port&quot;=&quot;&quot;
&quot;#http-proxy-username&quot;=&quot;&quot;
&quot;#http-timeout&quot;=&quot;0&quot;
&quot;#neon-debug-mask&quot;=&quot;&quot;
&quot;#ssl-authority-files&quot;=&quot;&quot;
&quot;#ssl-client-cert-file&quot;=&quot;&quot;
&quot;#ssl-client-cert-password&quot;=&quot;&quot;
&quot;#ssl-pkcs11-provider&quot;=&quot;&quot;
&quot;#ssl-trust-default-ca&quot;=&quot;&quot;
&quot;#store-auth-creds&quot;=&quot;yes&quot;
&quot;#store-passwords&quot;=&quot;yes&quot;
&quot;#store-plaintext-passwords&quot;=&quot;ask&quot;
&quot;#store-ssl-client-cert-pp&quot;=&quot;yes&quot;
&quot;#store-ssl-client-cert-pp-plaintext&quot;=&quot;ask&quot;
&quot;#username&quot;=&quot;&quot;

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
&quot;#password-stores&quot;=&quot;windows-cryptoapi&quot;

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
&quot;#diff-cmd&quot;=&quot;&quot;
&quot;#diff-extensions&quot;=&quot;-u&quot;
&quot;#diff3-cmd&quot;=&quot;&quot;
&quot;#diff3-has-program-arg&quot;=&quot;&quot;
&quot;#editor-cmd&quot;=&quot;notepad&quot;
&quot;#merge-tool-cmd&quot;=&quot;&quot;

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
&quot;#enable-auto-props&quot;=&quot;no&quot;
&quot;#global-ignores&quot;=&quot;*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo *.rej *~ #*# .#* .*.swp .DS_Store&quot;
&quot;#interactive-conflicts&quot;=&quot;yes&quot;
&quot;#log-encoding&quot;=&quot;&quot;
&quot;#mime-types-file&quot;=&quot;&quot;
&quot;#no-unlock&quot;=&quot;no&quot;
&quot;#preserved-conflict-file-exts&quot;=&quot;doc ppt xls od?&quot;
&quot;#use-commit-times&quot;=&quot;no&quot;

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
 
        shows the contents of a  .reg  file, which
        contains some of the most commonly used configuration options
        and their default values.  Note the presence of both
        system-wide (for network proxy-related options) and per-user
        settings (editor programs and password storage, among others).
        Also note that all the options are effectively commented out.
        You need only to remove the hash ( # )
        character from the beginning of the option names and set the
        values as you desire. Runtime Configuration Options runtime configuration options In this section, we will discuss the specific
        runtime configuration options that Subversion currently 
        supports. General configuration The  config  file contains the rest
          of the currently available Subversion runtime
          options those not related to networking.  There are
          only a few options in use as of this writing, but they are
          again grouped into sections in expectation of future
          additions. The  [auth]  section contains settings
          related to Subversion&#39;s authentication and authorization
          against the repository.  It contains the following: password-stores This comma-delimited list specifies which (if any)
                system-provided password stores Subversion should
                attempt to use when saving and retrieving cached
                authentication credentials, and in what order
                Subversion should prefer them.  The default value is
                 gnome-keyring, kwallet, keychain,
                windows-crypto-api , representing the GNOME
                Keyring, KDE Wallet, Mac OS X Keychain, and Microsoft
                Windows cryptography API, respectively.  Listed stores
                which are not available on the system are
                ignored. store-passwords This option has been deprecated from
                the  config  file.  It now lives as
                a per-server configuration item in
                the  servers  configuration area.
                See  
                for details. store-auth-creds This option has been deprecated from
                the  config  file.  It now lives as
                a per-server configuration item in
                the  servers  configuration area.
                See  
                for details. The  [helpers]  section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are: diff-cmd This specifies the absolute path of a differencing
                program, used when Subversion generates
                 diff  output (such as when using the
                 svn diff  command).  By default,
                Subversion uses an internal differencing
                library setting this option will cause it to
                perform this task using an external program.  See
                  for
                more details on using such programs. diff-extensions Like the  --extensions 
                ( -x ) command-line option, this
                specifies additional options passed to the file
                content differencing engine.  The set of meaningful
                extension options differs depending on whether the
                client is using Subversion&#39;s internal differencing
                engine or an external mechanism.  See the output
                of  svn help diff  for details.
                The default value for this option
                is  -u . diff3-cmd This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program to
                merge changes made by the user with those received
                from the repository.  By default, Subversion uses an
                internal differencing library setting this
                option will cause it to perform this task using an
                external program.  See   for more
                details on using such programs. diff3-has-program-arg This flag should be set to  true 
                if the program specified by the
                 diff3-cmd  option accepts a
                 --diff-program  command-line
                parameter. editor-cmd This specifies the program Subversion will use to
                query the user for certain types of textual metadata
                or when interactively resolving conflicts.  See
                  for
                more details on using external text editors with
                Subversion. merge-tool-cmd This specifies the program that Subversion will
                use to perform three-way merge operations on your
                versioned files.  See   for more
                details on using such programs. The  [tunnels]  section allows you to
          define new tunnel schemes for use with
           svnserve  and  svn:// 
          client connections.  For more details, see  . The  miscellany  section is where
          everything that doesn&#39;t belong elsewhere winds
          up. Anyone for potluck
          dinner?   In this section, you can
          find: enable-auto-props This instructs Subversion to automatically set
                properties on newly added or imported files.  The
                default value is  no , so set this to
                 yes  to enable this feature.
                The  [auto-props]  section of this file
                specifies which properties are to be set on which files. global-ignores When running the  svn status 
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a  ?  character (see  ).  Sometimes it can
                be annoying to see uninteresting, unversioned
                items for example, object files that result from
                a program&#39;s compilation in this display.  The
                 global-ignores  option is a list of
                whitespace-delimited globs that describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is  *.o *.lo *.la *.al .libs *.so *.so.[0-9]*
                *.a *.pyc *.pyo *.rej *~ #*# .#* .*.swp
                .DS_Store . As well as  svn status , the
                 svn add  and  svn import 
                commands also ignore files that match the list
                when they are scanning a directory.  You can override this
                behavior for a single instance of any of these commands
                by explicitly specifying the filename, or by using
                the  --no-ignore  command-line flag. For information on finer-grained control of
                ignored items, see 
                 . interactive-conflicts This is a Boolean option that specifies whether
                Subversion should try to resolve conflicts
                interactively.  If its value is  yes 
                (which is the default value), Subversion will prompt
                the user for how to handle conflicts in the manner
                demonstrated in  .  Otherwise, it will simply flag the conflict and
                continue its operation, postponing resolution to a later
                time. log-encoding This variable sets the default character set
                encoding for commit log messages.  It&#39;s a permanent
                form of the  --encoding  option (see
                 ).  The Subversion
                repository stores log messages in UTF-8 and assumes
                that your log message is written using your operating
                system&#39;s native locale.  You should specify a
                different encoding if your commit messages are written
                in any other encoding. mime-types-file This option, new to Subversion 1.5, specifies the
                path of a MIME types mapping file, such as the
                 mime.types  file provided by the
                Apache HTTP Server.  Subversion uses this file to
                assign MIME types to newly added or imported files.
                See   and
                  for more about Subversion&#39;s detection and use of
                file content types. no-unlock This Boolean option corresponds to  svn
                commit &#39;s  --no-unlock 
                option, which tells Subversion not to release locks on
                files you&#39;ve just committed.  If this runtime option
                is set to  yes , Subversion will
                never release locks automatically, leaving you to run
                 svn unlock  explicitly.  It defaults
                to  no . preserved-conflict-file-exts The value of this option is a space-delimited list
                of file extensions that Subversion should preserve
                when generating conflict filenames.  By default, the
                list is empty.  This option is new to Subversion
                1.5. When Subversion detects conflicting file content
                changes, it defers resolution of those conflicts to the
                user.  To assist in the resolution, Subversion keeps
                pristine copies of the various competing versions of
                the file in the working copy.  By default, those
                conflict files have names constructed by appending to
                the original filename a custom extension such as
                 .mine  or
                 . REV 
                (where  REV  is a revision
                number).  A mild annoyance with this naming scheme is
                that on operating systems where a file&#39;s extension
                determines the default application used to open and
                edit that file, appending a custom extension prevents
                the file from being easily opened by its native
                application.  For example, if the file
                 ReleaseNotes.pdf  was conflicted,
                the conflict files might be named
                 ReleaseNotes.pdf.mine  or
                 ReleaseNotes.pdf.r4231 .  While
                your system might be configured to use Adobe&#39;s Acrobat
                Reader to open files whose extensions are
                 .pdf , there probably isn&#39;t an
                application configured on your system to open all
                files whose extensions are
                 .r4231 . You can fix this annoyance by using this
                configuration option, though.  For files with one of
                the specified extensions, Subversion will append to
                the conflict file names the custom extension just as
                before, but then also reappend the file&#39;s original
                extension.  Using the previous example, and assuming
                that  pdf  is one of the extensions
                configured in this list thereof, the conflict files
                generated for  ReleaseNotes.pdf 
                would instead be named
                 ReleaseNotes.pdf.mine.pdf  and
                 ReleaseNotes.pdf.r4231.pdf .
                Because each file ends in
                 .pdf , the correct default
                application will be used to view them. use-commit-times Normally your working copy files have timestamps
                that reflect the last time they were touched by any
                process, whether your own editor or some
                 svn  subcommand.  This is generally
                convenient for people developing software, because
                build systems often look at timestamps as a way of
                deciding which files need to be recompiled. In other situations, however, it&#39;s sometimes nice
                for the working copy files to have timestamps that
                reflect the last time they were changed in the
                repository.  The  svn export  command
                always places these  last-commit
                timestamps  on trees that it produces.  By
                setting this config variable to
                 yes , the  svn
                checkout ,  svn update ,
                 svn switch , and  svn
                revert  commands will also set last-commit
                timestamps on files that they touch. The  [auto-props]  section controls the
          Subversion client&#39;s ability to automatically set properties
          on files when they are added or imported.  It contains any
          number of key-value pairs in the
          format  PATTERN 
          =  PROPNAME = VALUE [; PROPNAME = VALUE 
          ...] , where  PATTERN  is
          a file pattern that matches one or more filenames and the
          rest of the line is a semicolon-delimited set of property
          assignments.  (If you need to use a semicolon in your
          property&#39;s name or value, you can escape it by doubling
          it.) 
$ cat ~/.subversion/config
 
[auto-props]
*.c = svn:eol-style=native
*.html = svn:eol-style=native;svn:mime-type=text/html;; charset=UTF8
*.sh = svn:eol-style=native;svn:executable
 
$ cd projects/myproject
$ svn status
?       www/index.html
$ svn add www/index.html
A         www/index.html
$ svn diff www/index.html
 

Property changes on: www/index.html
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/html; charset=UTF8
Added: svn:eol-style
## -0,0 +1 ##
+native
$
 Multiple matches on a file will result in
          multiple propsets for that file; however, there is no
          guarantee that auto-props will be applied in the order in
          which they are listed in the config file, so you can&#39;t have
          one rule  override  another.  You can find
          several examples of auto-props usage in the
           config  file.  Lastly, don&#39;t
          forget to set  enable-auto-props  to
           yes  in the  miscellany 
          section if you want to enable auto-props. Per-server configuration The  servers  file contains
          Subversion configuration options related to the network
          layers.  There are two special sections in this
          file [groups]  and
           [global] .  The  [groups] 
          section is essentially a cross-reference table.  The keys in
          this section are the names of other sections in the file;
          their values are  globs textual
          tokens that possibly contain wildcard
          characters that are compared against the hostnames of
          the machine to which Subversion requests are sent. 
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
 

[collabnet]
 
 When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the  [groups]  section.  If
          a match is made, Subversion then looks for a section in the
           servers  file whose name is the matched
          group&#39;s name.  From that section, it reads the actual network
          configuration settings. The  [global]  section contains the
          settings that are meant for all of the servers not matched
          by one of the globs under the  [groups] 
          section.  The options available in this section are
          exactly the same as those that are valid for the other server
          sections in the file (except, of course, the special
           [groups]  section), and are as
          follows: http-auth-types This is a semicolon-delimited list of HTTP
                authentication types which the client will deem
                acceptable.  Valid types
                are  basic ,  digest ,
                and  negotiate , with the default
                behavior being acceptance of any these authentication
                types.  A client which insists on not transmitting
                authentication credentials in cleartext might, for
                example, be configured such that the value of this
                option is
                 digest;negotiate omitting
                 basic  from the list.  (Note that
                this setting is only honored by Subversion&#39;s
                Neon-based HTTP provider module.) http-compression This specifies whether Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is  yes 
                (though compression will occur only if that capability
                is compiled into the network layer).  Set this to
                 no  to disable compression, such as
                when debugging network transmissions. http-library The  http-library  runtime
                configuration option allows users to specify
                (generally, or in a per-server-group fashion) which of
                the available WebDAV access modules they&#39;d prefer to
                use.  Prior to version 1.8, Subversion offered a pair
                of such modules: its original implementiation
                 libsvn_ra_neon  (selected by
                using the value  neon  for this
                option) and the newer  libsvn_ra_serf 
                (selected using the value  serf ).
                As of Subversion 1.8, only  libsvn_ra_serf 
                is supported.  This configuration option remains,
                though, because the runtime configuration area is
                version-agnostic.  Users with multiple versions of
                Subversion installed may still wish to enable the use
                of  libsvn_ra_neon  for sites which
                they access with an older version of Subversion. http-proxy-exceptions This specifies a comma-separated list of patterns
                for repository hostnames that should be accessed
                directly, without using the proxy machine.  The
                pattern syntax is the same as is used in the Unix
                shell for filenames.  A repository hostname matching
                any of these patterns will not be proxied. http-proxy-host This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly. http-proxy-password This specifies the password to supply to the proxy
                machine.  It defaults to an empty value. http-proxy-port This specifies the port number on the proxy host
                to use.  It defaults to an empty value. http-proxy-username This specifies the username to supply to the proxy
                machine.  It defaults to an empty value. http-timeout This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to time out, you should increase
                the value of this option.  The default value is
                 0 , which instructs the underlying
                HTTP library, Neon, to use its default timeout
                setting. neon-debug-mask This is an integer mask that the Neon HTTP library
                uses for choosing what type of debugging output to
                yield.  The default value is  0 ,
                which will silence all debugging output.  Prior to
                version 1.8, most Subversion clients used Neon (via
                the  libsvn_ra_neon  repository
                access module) for WebDAV/HTTP communications between
                the Subversion client and server.  Support
                for  libsvn_ra_neon  was dropped in
                Subversion 1.8, though, making this option obsolete
                for newer Subversion installations. ssl-authority-files This is a semicolon-delimited list of paths to files
                containing certificates of the certificate authorities
                (or CAs) that
                are accepted by the Subversion client when accessing the
                repository over HTTPS. ssl-client-cert-file If a host (or set of hosts) requires an SSL client
                certificate, you&#39;ll normally be prompted for a path to
                your certificate.  By setting this variable to that
                same path, Subversion will be able to find your client
                certificate automatically without prompting you.
                There&#39;s no standard place to store your certificate on
                disk; Subversion will grab it from any path you
                specify. ssl-client-cert-password If your SSL client certificate file is encrypted
                by a passphrase, Subversion will prompt you for the
                passphrase whenever the certificate is used.  If you
                find this annoying (and don&#39;t mind storing the
                password in the  servers  file),
                you can set this variable to the certificate&#39;s
                passphrase.  You won&#39;t be prompted anymore. ssl-pkcs11-provider The value of this option is the name of the
                PKCS#11 provider from which an SSL client certificate
                will be drawn (if the server asks for one).  This
                setting is only honored by Subversion&#39;s Neon-based
                HTTP provider module. ssl-trust-default-ca Set this variable to  yes  if you
                want Subversion to automatically trust the set of
                default CAs that ship with OpenSSL. store-auth-creds This setting is the same as
                 store-passwords , except that it
                enables or disables on-disk caching of
                 all  authentication information:
                usernames, passwords, server certificates, and any
                other types of cacheable credentials. store-passwords This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is  yes .  Set this to
                 no  to disable this on-disk password
                caching.  You can override this option for a single
                instance of the  svn  command using
                the  --no-auth-cache  command-line
                parameter (for those subcommands that support it).
                For more information regarding that, see
                 .
                Note that regardless of how this option is configured,
                Subversion will not store passwords in plaintext
                unless the  store-plaintext-passwords 
                option is also set to  yes . store-plaintext-passwords This variable is only important on UNIX-like systems.
                It controls what the Subversion client does in case
                the password for the current authentication realm can
                only be cached on disk in unencrypted form, in the
                 ~/.subversion/auth/  caching area.
                You can set it to  yes  or
                 no  to enable or disable caching of
                passwords in unencrypted form, respectively.
                The default setting is  ask , which causes
                the Subversion client to ask you each time a
                 new  password is about to be added to
                the  ~/.subversion/auth/  caching area. store-ssl-client-cert-pp This option controls whether Subversion will cache
                SSL client certificate passphrases provided by the
                user.  Its value defaults to  yes .
                Set this to  no  to disable this
                passphrase caching. store-ssl-client-cert-pp-plaintext This option controls whether Subversion, when
                attempting to cache an SSL client certificate
                passphrase, will be allowed to do so using its on-disk
                plaintext storage mechanism.  The default value of
                this option is  ask , which causes
                the Subversion client to ask you each time a
                 new  client certificate passphrase
                is about to be added to
                the  ~/.subversion/auth/  caching
                area.  Set this option&#39;s value
                to  yes  or  no  to
                indicate your preference and avoid related
                prompts. Localization localization Localization  is the act of making
      programs behave in a region-specific way.  When a program
      formats numbers or dates in a way specific to your part of the
      world or prints messages (or accepts input) in your native
      language, the program is said to
      be  localized .  This section describes
      steps Subversion has made toward localization. Understanding Locales Most modern operating systems have a notion of the
         current locale that is, the region or
        country whose localization conventions are honored.  These
        conventions typically chosen by some runtime
        configuration mechanism on the computer affect the way
        in which programs present data to the user, as well as the way
        in which they accept user input. On most Unix-like systems, you can check the values of the
        locale-related runtime configuration options by running the
         locale  command: 
$ locale
LANG=
LC_COLLATE=&quot;C&quot;
LC_CTYPE=&quot;C&quot;
LC_MESSAGES=&quot;C&quot;
LC_MONETARY=&quot;C&quot;
LC_NUMERIC=&quot;C&quot;
LC_TIME=&quot;C&quot;
LC_ALL=&quot;C&quot;
$
 The output is a list of locale-related environment
        variables and their current values.  In this example, the
        variables are all set to the default  C 
        locale, but users can set these variables to specific
        country/language code combinations.  For example, if one were
        to set the  LC_TIME  variable to
         fr_CA , programs would know to present
        time and date information formatted according to a
        French-speaking Canadian&#39;s expectations.  And if one were to
        set the  LC_MESSAGES  variable to
         zh_TW , programs would know to present
        human-readable messages in Traditional Chinese.  Setting the
         LC_ALL  variable has the effect of changing
        every locale variable to the same value.  The value of
         LANG  is used as a default value for any
        locale variable that is unset.  To see the list of available
        locales on a Unix system, run the command  locale
        -a . On Windows, locale configuration is done via the
         Regional and Language Options  control panel
        item.  There you can view and select the values of individual
        settings from the available locales, and even customize (at a
        sickening level of detail) several of the display formatting
        conventions. Subversion&#39;s Use of Locales The Subversion client,  svn , honors the
        current locale configuration in two ways.  First, it notices
        the value of the  LC_MESSAGES  variable and
        attempts to print all messages in the specified language.  For
        example: 
$ export LC_MESSAGES=de_DE
$ svn help cat
cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.
Aufruf: cat ZIEL[@REV]...
 
 This behavior works identically on both Unix and Windows
        systems.  Note, though, that while your operating system might
        have support for a certain locale, the Subversion client still
        may not be able to speak the particular language.  In order to
        produce localized messages, human volunteers must provide
        translations for each language.  The translations are written
        using the GNU gettext package, which results in translation
        modules that end with the  .mo  filename
        extension.  For example, the German translation file is named
         de.mo .  These translation files are
        installed somewhere on your system.  On Unix, they typically
        live in  /usr/share/locale/ , while
        on Windows they&#39;re often found in the
         share\locale\  folder in Subversion&#39;s
        installation area.  Once installed, a module is named after
        the program for which it provides translations.  For example, the
         de.mo  file may ultimately end up
        installed as
         /usr/share/locale/de/LC_MESSAGES/subversion.mo .
        By browsing the installed  .mo  files, you
        can see which languages the Subversion client is able to
        speak. internationalization UTF-8 The second way in which the locale is honored involves how
         svn  interprets your input.  The repository
        stores all paths, filenames, and log messages in Unicode,
        encoded as UTF-8.  In that sense, the repository is
         internationalized that is, the
        repository is ready to accept input in any human language.
        This means, however, that the Subversion client is responsible
        for sending only UTF-8 filenames and log messages into the
        repository.  To do this, it must convert the data
        from the native locale into UTF-8. For example, suppose you create a file named
         caffè.txt , and then when committing the
        file, you write the log message as  Adesso il caffè è
        più forte.   Both the filename and the log message contain
        non-ASCII characters, but because your locale is set to
         it_IT , the Subversion client knows to
        interpret them as Italian.  It uses an Italian character set
        to convert the data to UTF-8 before sending it off to the
        repository. Note that while the repository demands UTF-8 filenames and
        log messages, it  does not  pay attention
        to file contents.  Subversion treats file contents as opaque
        strings of bytes, and neither client nor server makes an
        attempt to understand the character set or encoding of the
        contents. Character Set Conversion Errors While using Subversion, you might get hit with an error
          related to character set conversions: 
svn: E000022: Can&#39;t convert string from native encoding to &#39;UTF-8&#39;:
 
svn: E000022: Can&#39;t convert string from &#39;UTF-8&#39; to native encoding:
 
 Errors such as this typically occur when the Subversion
          client has received a UTF-8 string from the repository, but
          not all of the characters in that string can be represented
          using the encoding of the current locale.  For example, if
          your locale is  en_US  but a collaborator
          has committed a Japanese filename, you&#39;re likely to see this
          error when you receive the file during an  svn
          update . The solution is either to set your locale to something
          that  can  represent the incoming UTF-8
          data, or to change the filename or log message in the
          repository.  (And don&#39;t forget to slap your collaborator&#39;s
          hand projects should decide on common languages ahead of
          time so that all participants are using the same
          locale.) Using External Editors The most obvious way to get data into Subversion is through
      the addition of files to version control, committing changes to
      those files, and so on.  But other pieces of
      information besides merely versioned file data live in your
      Subversion repository.  Some of these bits of
      information commit log messages, lock comments, and some
      property values tend to be textual in nature and are
      provided explicitly by users.  Most of this information can be
      provided to the Subversion command-line client using the
       --message  ( -m ) and
       --file  ( -F ) options with the
      appropriate subcommands. Each of these options has its pros and cons.  For example,
      when performing a commit,  --file 
      ( -F ) works well if you&#39;ve already prepared a
      text file that holds your commit log message.  If you didn&#39;t,
      though, you can use  --message 
      ( -m ) to provide a log message on the command
      line.  Unfortunately, it can be tricky to compose anything more
      than a simple one-line message on the command line.  Users want
      more flexibility multiline, free-form log message editing
      on demand. Subversion supports this by allowing you to specify an
      external text editor that it will launch as necessary
      to give you a more powerful input mechanism for this textual
      metadata.  There are several ways to tell Subversion which
      editor you&#39;d like use.  Subversion checks the following things,
      in the order specified, when it wants to launch such an
      editor: --editor-cmd  command-line option SVN_EDITOR  environment variable editor-cmd  runtime configuration option VISUAL  environment variable EDITOR  environment variable Possibly, a fallback value built into the Subversion
          libraries (not present in the official builds) The value of any of these options or variables is the
      beginning of a command line to be executed by the shell.
      Subversion appends to that command line a space and the pathname
      of a temporary file to be edited.  So, to be used with
      Subversion, the configured or specified editor needs to support
      an invocation in which its last command-line parameter is a file
      to be edited, and it should be able to save the file in place
      and return a zero exit code to indicate success. As noted, external editors can be used to provide commit log
      messages to any of the committing subcommands (such as
       svn commit  or  import ,
       svn mkdir  or  delete  when
      provided a URL target, etc.), and Subversion will try to
      launch the editor automatically if you don&#39;t specify either of
      the  --message  ( -m ) or
       --file  ( -F ) options.  The
       svn propedit  command is built almost entirely
      around the use of an external editor.  And beginning in version
      1.5, Subversion will also use the configured external text
      editor when the user asks it to launch an editor during
      interactive conflict resolution.  Oddly, there doesn&#39;t appear to
      be a way to use external editors to interactively provide lock
      comments. Using External Differencing and Merge Tools The interface between Subversion and external two- and three-way
      differencing tools harkens back to a time when Subversion&#39;s only
      contextual differencing capabilities were built around
      invocations of the GNU diffutils toolchain, specifically the
       diff  and  diff3  utilities.
      To get the kind of behavior Subversion needed, it called these
      utilities with more than a handful of options and parameters,
      most of which were quite specific to the utilities.  Some time
      later, Subversion grew its own internal differencing library,
      and as a failover mechanism, the  --diff-cmd  and
       --diff3-cmd  options were added to the
      Subversion command-line client so that users could more easily
      indicate that they preferred to use the GNU diff and diff3
      utilities instead of the newfangled internal diff library.  If
      those options were used, Subversion would simply ignore the
      internal diff library, and fall back to running those external
      programs, lengthy argument lists and all.  And that&#39;s where
      things remain today. It didn&#39;t take long for folks to realize that having such
      easy configuration mechanisms for specifying that Subversion
      should use the external GNU diff and diff3 utilities located at
      a particular place on the system could be applied toward the use
      of other differencing tools, too.  After all, Subversion didn&#39;t
      actually verify that the things it was being told to run were
      members of the GNU diffutils toolchain.  But the only
      configurable aspect of using those external tools is their
      location on the system not the option set, parameter
      order, and so on.  Subversion continues to throw all those GNU utility
      options at your external diff tool regardless of whether
      that program can understand those options.  And that&#39;s where
      things get unintuitive for most users. The decision on when to fire off a contextual two- or three-way
        diff as part of a larger Subversion operation is made entirely
        by Subversion and is affected by, among other things, whether
        the files being operated on are human-readable as
        determined by their  svn:mime-type  property.
        This means, for example, that even if you had the niftiest
        Microsoft Word-aware differencing or merging tool in the
        universe, it would never be invoked by Subversion as long as
        your versioned Word documents had a configured MIME type that
        denoted that they were not human-readable (such as
         application/msword ).  For more about MIME
        type settings, see  Much later, Subversion 1.5 introduced interactive resolution
      of conflicts (described in
       ).  One of the options
      that this feature provides to users is the ability to
      interactively launch a third-party merge tool.  If this action
      is taken, Subversion will check to see if the user has specified
      such a tool for use in this way.  Subversion will first check
      the  SVN_MERGE  environment variable for the
      name of an external merge tool.  If that variable is not set, it
      will look for the same information in the value of
      the  merge-tool-cmd  runtime configuration
      option.  Upon finding a configured external merge tool, it will
      invoke that tool. While the general purposes of the three-way differencing
        and merge tools are roughly the same (finding a way to make
        separate-but-overlapping file changes live in harmony),
        Subversion exercises each of these options at different times
        and for different reasons.  The internal three-way
        differencing engine and its optional external replacement are
        used when interaction with the user
        is  not  expected.  In fact, significant
        delay introduced by such a tool can actually result in the
        failure of some time-sensitive Subversion operations.  It&#39;s
        the external merge tool that is intended to be invoked
        interactively. Now, while the interface between Subversion and an external
      merge tool is significantly less convoluted than that between
      Subversion and the diff and diff3 tools, the likelihood of
      finding such a tool whose calling conventions exactly match what
      Subversion expects is still quite low.  The key to using
      external differencing and merge tools with Subversion is to use
      wrapper scripts, which convert the input from Subversion into
      something that your specific differencing tool can understand,
      and then convert the output of your tool back into a format that
      Subversion expects.  The following sections cover the specifics
      of those expectations. External diff Subversion calls external diff programs with parameters
        suitable for the GNU diff utility, and expects only that the
        external program will return with a successful error code per
        the GNU diff definition thereof.  For most alternative diff
        programs, only the sixth and seventh arguments the paths
        of the files that represent the left and right sides of the
        diff, respectively are of interest.  Note that
        Subversion runs the diff program once per modified file
        covered by the Subversion operation, so if your program runs
        in an asynchronous fashion (or is  backgrounded ),
        you might have several instances of it all running
        simultaneously.  Finally, Subversion expects that your program
        return an error code of 1 if your program detected
        differences, or 0 if it did not any other error code is
        considered a fatal error. The GNU diff manual
        page puts it this way:  An exit status of 0 means no
        differences were found, 1 means some differences were found,
        and 2 means trouble. 
        and  
        are templates for external diff tool wrappers in the Python
        and Windows batch scripting languages, respectively. diffwrap.py 
#!/usr/bin/env python
import sys
import os

# Configure your favorite diff program here.
DIFF = &quot;/usr/local/bin/my-diff-tool&quot;

# Subversion provides the paths we need as the last two parameters.
LEFT  = sys.argv[-2]
RIGHT = sys.argv[-1]

# Call the diff command (change the following line to make sense for
# your diff program).
cmd = [DIFF, &#39;--left&#39;, LEFT, &#39;--right&#39;, RIGHT]
os.execv(cmd[0], cmd)

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
 diffwrap.bat 
@ECHO OFF

REM Configure your favorite diff program here.
SET DIFF=&quot;C:\Program Files\Funky Stuff\My Diff Tool.exe&quot;

REM Subversion provides the paths we need as the last two parameters.
REM These are parameters 6 and 7 (unless you use svn diff -x, in
REM which case, all bets are off).
SET LEFT=%6
SET RIGHT=%7

REM Call the diff command (change the following line to make sense for
REM your diff program).
%DIFF% --left %LEFT% --right %RIGHT%

REM Return an errorcode of 0 if no differences were detected, 1 if some were.
REM Any other errorcode will be treated as fatal.
 External diff3 Subversion invokes three-way differencing programs to
        perform non-interactive merges.  When configured to use an
        external three-way differencing program, it executes that
        program with parameters suitable for the GNU diff3 utility,
        expecting that the external program will return with a
        successful error code and that the full file contents that
        result from the completed merge operation are printed on the
        standard output stream (so that Subversion can redirect them
        into the appropriate version-controlled file).  For most
        alternative merge programs, only the ninth, tenth, and
        eleventh arguments, the paths of the files which represent
        the  mine ,  older ,
        and  yours  inputs, respectively, are of
        interest.  Note that because Subversion depends on the output
        of your merge program, your wrapper script must not exit
        before that output has been delivered to Subversion.  When it
        finally does exit, it should return an error code of 0 if the
        merge was successful, or 1 if unresolved conflicts remain in
        the output any other error code is considered a fatal
        error.  
        and   are
        templates for external three-way differencing tool wrappers in
        the Python and Windows batch scripting languages,
        respectively. diff3wrap.py 
#!/usr/bin/env python
import sys
import os

# Configure your favorite three-way diff program here.
DIFF3 = &quot;/usr/local/bin/my-diff3-tool&quot;

# Subversion provides the paths we need as the last three parameters.
MINE  = sys.argv[-3]
OLDER = sys.argv[-2]
YOURS = sys.argv[-1]

# Call the three-way diff command (change the following line to make
# sense for your three-way diff program).
cmd = [DIFF3, &#39;--older&#39;, OLDER, &#39;--mine&#39;, MINE, &#39;--yours&#39;, YOURS]
os.execv(cmd[0], cmd)

# After performing the merge, this script needs to print the contents
# of the merged file to stdout.  Do that in whatever way you see fit.
# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
# remain in the result.  Any other errorcode will be treated as fatal.
 diff3wrap.bat 
@ECHO OFF

REM Configure your favorite three-way diff program here.
SET DIFF3=&quot;C:\Program Files\Funky Stuff\My Diff3 Tool.exe&quot;

REM Subversion provides the paths we need as the last three parameters.
REM These are parameters 9, 10, and 11.  But we have access to only
REM nine parameters at a time, so we shift our nine-parameter window
REM twice to let us get to what we need.
SHIFT
SHIFT
SET MINE=%7
SET OLDER=%8
SET YOURS=%9

REM Call the three-way diff command (change the following line to make
REM sense for your three-way diff program).
%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%

REM After performing the merge, this script needs to print the contents
REM of the merged file to stdout.  Do that in whatever way you see fit.
REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
REM remain in the result.  Any other errorcode will be treated as fatal.
 External merge Subversion optionally invokes an external merge tool as
        part of its support for interactive conflict resolution.  It
        provides as arguments to the merge tool the following: the
        path of the unmodified base file, the path of
        the  theirs  file (which contains upstream
        changes), the path of the  mine  file (which
        contains local modifications), the path of the file into which
        the final resolved contents should be stored by the merge
        tool, and the working copy path of the conflicted file
        (relative to the original target of the merge operation).  The
        merge tool is expected to return an error code of 0 to
        indicate success, or 1 to indicate failure.  
        and   are
        templates for external merge tool wrappers in the Python
        and Windows batch scripting languages, respectively. mergewrap.py 
#!/usr/bin/env python
import sys
import os

# Configure your favorite merge program here.
MERGE = &quot;/usr/local/bin/my-merge-tool&quot;

# Get the paths provided by Subversion.
BASE   = sys.argv[1]
THEIRS = sys.argv[2]
MINE   = sys.argv[3]
MERGED = sys.argv[4]
WCPATH = sys.argv[5]

# Call the merge command (change the following line to make sense for
# your merge program).
cmd = [DIFF3, &#39;--base&#39;, BASE, &#39;--mine&#39;, MINE, &#39;--theirs&#39;, THEIRS,
              &#39;--outfile&#39;, MERGED]
os.execv(cmd[0], cmd)

# Return an errorcode of 0 if the conflict was resolved; 1 otherwise.
# Any other errorcode will be treated as fatal.
 mergewrap.bat 
@ECHO OFF

REM Configure your favorite merge program here.
SET DIFF3=&quot;C:\Program Files\Funky Stuff\My Merge Tool.exe&quot;

REM Get the paths provided by Subversion.
SET BASE=%1
SET THEIRS=%2
SET MINE=%3
SET MERGED=%4
SET WCPATH=%5

REM Call the merge command (change the following line to make sense for
REM your merge program).
%DIFF3% --base %BASE% --mine %MINE% --theirs %THEIRS% --outfile %MERGED%

REM Return an errorcode of 0 if the conflict was resolved; 1 otherwise.
REM Any other errorcode will be treated as fatal.
 Summary Sometimes there&#39;s a single right way to do things; sometimes
      there are many.  Subversion&#39;s developers understand that while
      the majority of its exact behaviors are acceptable to most of
      its users, there are some corners of its functionality where
      such a universally pleasing approach doesn&#39;t exist.  In those
      places, Subversion offers users the opportunity to tell it how
       they  want it to behave. In this chapter, we explored Subversion&#39;s runtime
      configuration system and other mechanisms by which users can
      control those configurable behaviors.  If you are a developer,
      though, the next chapter will take you one step further.  It
      describes how you can further customize your Subversion
      experience by writing your own software against Subversion&#39;s
      libraries. Embedding Subversion API application programming interface API Subversion has a modular design: it&#39;s implemented as a
    collection of libraries written in C.  Each library has a
    well-defined purpose and application programming interface (API),
    and that interface is available not only for Subversion itself to
    use, but for any software that wishes to embed or otherwise
    programmatically control Subversion.  Additionally, Subversion&#39;s
    API is available not only to other C programs, but also to
    programs written in higher-level languages such as Python, Perl,
    Java, and Ruby. This chapter is for those who wish to interact with Subversion
    through its public API or its various language bindings.  If you
    wish to write robust wrapper scripts around Subversion
    functionality to simplify your own life, are trying to develop
    more complex integrations between Subversion and other pieces of
    software, or just have an interest in Subversion&#39;s various library
    modules and what they offer, this chapter is for you.  If,
    however, you don&#39;t foresee yourself participating with Subversion
    at such a level, feel free to skip this chapter with the
    confidence that your experience as a Subversion user will not be
    affected. Layered Library Design API layers Each of Subversion&#39;s core libraries can be said to
      exist in one of three main layers the Repository layer,
      the Repository Access (RA) layer, or the Client layer (see
        in the Preface).
      We will examine these layers shortly, but first, let&#39;s briefly
      summarize Subversion&#39;s various libraries.  For the sake of
      consistency, we will refer to the libraries by their
      extensionless Unix library names
      ( libsvn_fs ,  libsvn_wc ,
       mod_dav_svn , etc.). libsvn_client Primary interface for client
          programs libsvn_delta Tree and byte-stream differencing
          routines libsvn_diff Contextual differencing and merging
          routines libsvn_fs Filesystem commons and module
          loader libsvn_fs_base The Berkeley DB filesystem
          backend libsvn_fs_fs The native filesystem (FSFS)
          backend libsvn_ra Repository Access commons and module
          loader libsvn_ra_local The local Repository Access
          module libsvn_ra_serf Another (experimental) WebDAV Repository
          Access module libsvn_ra_svn The custom protocol Repository Access
          module libsvn_repos Repository interface libsvn_subr Miscellaneous helpful
          subroutines libsvn_wc The working copy management
          library mod_authz_svn Apache authorization module for Subversion
          repositories access via WebDAV mod_dav_svn Apache module for mapping WebDAV operations to
          Subversion ones The fact that the word  miscellaneous 
      appears only once in the previous list is a good sign.  The
      Subversion development team is serious about making sure that
      functionality lives in the right layer and libraries.  Perhaps
      the greatest advantage of the modular design is its lack of
      complexity from a developer&#39;s point of view.  As a developer,
      you can quickly formulate that kind of  big
      picture  that allows you to pinpoint the location of
      certain pieces of functionality with relative ease. Another benefit of modularity is the ability to replace a
      given module with a whole new library that implements the same
      API without affecting the rest of the code base.  In some sense,
      this happens within Subversion already.  The
       libsvn_ra_local ,
       libsvn_ra_serf , and
       libsvn_ra_svn  libraries each implement the
      same interface, all working as plug-ins to
       libsvn_ra .  And all three communicate with
      the Repository layer libsvn_ra_local 
      connects to the repository directly; the others do so over a
      network.  The  libsvn_fs_base  and
       libsvn_fs_fs  libraries are another pair of
      libraries that implement the same functionality in different
      ways both are plug-ins to the common
       libsvn_fs  library. The client itself also highlights the benefits of modularity
      in the Subversion design.  Subversion&#39;s
       libsvn_client  library is a one-stop shop
      for most of the functionality necessary for designing a working
      Subversion client (see  ).  So while the
      Subversion distribution provides only the  svn 
      command-line client program, several third-party
      programs provide various forms of graphical client UIs.
      These GUIs use the same APIs that the stock command-line client
      does.  This type of modularity has played a large role in the
      proliferation of available Subversion clients and IDE
      integrations and, by extension, to the tremendous adoption rate
      of Subversion itself. Repository Layer API layers Repository Layer When referring to Subversion&#39;s Repository layer, we&#39;re
        generally talking about two basic concepts the versioned
        filesystem implementation (accessed via
         libsvn_fs , and supported by its
         libsvn_fs_base  and
         libsvn_fs_fs  plug-ins), and the repository
        logic that wraps it (as implemented in
         libsvn_repos ).  These libraries provide
        the storage and reporting mechanisms for the various revisions
        of your version-controlled data.  This layer is connected to
        the Client layer via the Repository Access layer, and is, from
        the perspective of the Subversion user, the stuff at the
         other end of the line. repositories filesystem The Subversion filesystem is not a kernel-level filesystem
        that one would install in an operating system (such as the
        Linux ext2 or NTFS), but instead is a virtual filesystem.
        Rather than storing  files  and
         directories  as real files and directories (the
        kind you can navigate through using your favorite shell
        program), it uses one of two available abstract storage
        backends either a Berkeley DB database environment or a
        flat-file representation.  (To learn more about the two
        repository backends, see  .)  There has even
        been considerable interest by the development community in
        giving future releases of Subversion the ability to use other
        backend database systems, perhaps through a mechanism such as
        Open Database Connectivity (ODBC).  In fact, Google did
        something similar to this before launching the Google Code
        Project Hosting service:  they announced in mid-2006 that
        members of its open source team had written a new proprietary
        Subversion filesystem plug-in that used Google&#39;s ultra-scalable
        Bigtable database for its storage. repositories filesystem tree The filesystem API exported by
         libsvn_fs  contains the kinds of
        functionality you would expect from any other filesystem
        API you can create and remove files and directories,
        copy and move them around, modify file contents, and so on.
        It also has features that are not quite as common, such as the
        ability to add, modify, and remove metadata
        ( properties ) on each file or directory.
        Furthermore, the Subversion filesystem is a versioning
        filesystem, which means that as you make changes to your
        directory tree, Subversion remembers what your tree looked
        like before those changes.  And before the previous changes.
        And the previous ones.  And so on, all the way back through
        versioning time to (and just beyond) the moment you first
        started adding things to the filesystem. All the modifications you make to your tree are done
        within the context of a Subversion commit transaction.  The
        following is a simplified general routine for modifying your
        filesystem: Begin a Subversion commit transaction. Make your changes (adds, deletes, property
            modifications, etc.). Commit your transaction. Once you have committed your transaction, your filesystem
        modifications are permanently stored as historical artifacts.
        Each of these cycles generates a single new revision of your
        tree, and each revision is forever accessible as an immutable
        snapshot of  the way things were. The Transaction Distraction The notion of a Subversion transaction can become easily
          confused with the transaction support provided by the
          underlying database itself, especially given the former&#39;s
          close proximity to the Berkeley DB database code in
           libsvn_fs_base .  Both types of
          transaction exist to provide atomicity and isolation.  In
          other words, transactions give you the ability to perform a
          set of actions in an all-or-nothing fashion either all
          the actions in the set complete with success, or they all
          get treated as though  none  of them ever
          happened and in a way that does not interfere with
          other processes acting on the data. Database transactions generally encompass small
          operations related specifically to the modification of data
          in the database itself (such as changing the contents of a
          table row).  Subversion transactions are larger in scope,
          encompassing higher-level operations such as making
          modifications to a set of files and directories that are
          intended to be stored as the next revision of the filesystem
          tree.  If that isn&#39;t confusing enough, consider the fact
          that Subversion uses a database transaction during the
          creation of a Subversion transaction (so that if the
          creation of a Subversion transaction fails, the database will
          look as though we had never attempted that creation in the first
          place)! Fortunately for users of the filesystem API, the
          transaction support provided by the database system itself
          is hidden almost entirely from view (as should be expected
          from a properly modularized library scheme).  It is only
          when you start digging into the implementation of the
          filesystem itself that such things become visible (or
          interesting). Most of the functionality the filesystem
        interface provides deals with actions that occur on individual
        filesystem paths.  That is, from outside the filesystem, the
        primary mechanism for describing and accessing the individual
        revisions of files and directories comes through the use of
        path strings such as  /foo/bar , just as though
        you were addressing files and directories through your
        favorite shell program.  You add new files and directories by
        passing their paths-to-be to the right API functions.  You
        query for information about them by the same mechanism. Unlike most filesystems, though, a path alone is not
        enough information to identify a file or directory in
        Subversion.  Think of a directory tree as a two-dimensional
        system, where a node&#39;s siblings represent a sort of
        left-and-right motion, and navigating into the node&#39;s
        subdirectories represents a downward motion.    shows a typical
        representation of a tree as exactly that. Files and directories in two dimensions The difference here is that the Subversion filesystem has
        a nifty third dimension that most filesystems do not
        have Time! We understand that this may
        come as a shock to sci-fi fans who have long been under the
        impression that Time was actually
        the  fourth  dimension, and we apologize
        for any emotional trauma induced by our assertion of a
        different theory.   In the filesystem
        interface, nearly every function that has a
         path  argument also expects a
         root  argument.  This
         svn_fs_root_t  argument describes
        either a revision or a Subversion transaction (which is simply
        a revision in the making) and provides that third dimension
        of context needed to understand the difference between
         /foo/bar  in revision 32, and the same
        path as it exists in revision 98.    shows revision
        history as an added dimension to the Subversion filesystem
        universe. Versioning time the third dimension! As we mentioned earlier, the
         libsvn_fs  API looks and feels like any
        other filesystem, except that it has this wonderful versioning
        capability.  It was designed to be usable by any program
        interested in a versioning filesystem.  Not coincidentally,
        Subversion itself is interested in that functionality.  But
        while the filesystem API should be sufficient for basic file
        and directory versioning support, Subversion wants
        more and that is where  libsvn_repos 
        comes in. The Subversion repository library
        ( libsvn_repos ) sits (logically speaking)
        atop the  libsvn_fs  API, providing
        additional functionality beyond that of the underlying
        versioned filesystem logic.  It does not completely wrap each
        and every filesystem function only certain major steps
        in the general cycle of filesystem activity are wrapped by the
        repository interface.  Some of these include the creation and
        commit of Subversion transactions and the modification of
        revision properties.  These particular events are wrapped by
        the repository layer because they have hooks associated with
        them.  A repository hook system is not strictly related to
        implementing a versioning filesystem, so it lives in the
        repository wrapper library. The hooks mechanism is but one of the reasons for the
        abstraction of a separate repository library from the rest of
        the filesystem code.  The  libsvn_repos 
        API provides several other important utilities to Subversion.
        These include the abilities to: Create, open, destroy, and perform recovery steps on a
            Subversion repository and the filesystem included in that
            repository. Describe the differences between two filesystem
            trees. Query for the commit log messages associated with all
            (or some) of the revisions in which a set of files was
            modified in the filesystem. Generate a human-readable  dump  of the
            filesystem a complete representation of the revisions in
            the filesystem. Parse that dump format, loading the dumped revisions
            into a different Subversion repository. As Subversion continues to evolve, the repository library
        will grow with the filesystem library to offer increased
        functionality and configurable option support. Repository Access Layer API layers Repository Access (RA) Layer If the Subversion Repository layer is at  the other
        end of the line,  the Repository Access (RA) layer is
        the line itself.  Charged with marshaling data between the
        client libraries and the repository, this layer includes the
         libsvn_ra  module loader library, the RA
        modules themselves (which currently includes
         libsvn_ra_local ,
         libsvn_ra_serf , and
         libsvn_ra_svn ), and any additional
        libraries needed by one or more of those RA modules (such as
        the  mod_dav_svn  Apache module or
         libsvn_ra_svn &#39;s server,
         svnserve ). repository URL Since Subversion uses URLs to identify its repository
        resources, the protocol portion of the URL scheme (usually
         file:// ,  http:// ,
         https:// ,  svn:// , or
         svn+ssh:// ) is used to determine which RA
        module will handle the communications.  Each module registers
        a list of the protocols it knows how to  speak 
        so that the RA loader can, at runtime, determine which module
        to use for the task at hand.  You can determine which RA
        modules are available to the Subversion command-line client,
        and what protocols they claim to support, by running
         svn --version : 
$ svn --version
svn, version 1.8.0-dev (under development)
   compiled Jan  8 2013, 11:45:25 on i686-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles &#39;svn&#39; scheme
* ra_local : Module for accessing a repository on local disk.
  - handles &#39;file&#39; scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - handles &#39;http&#39; scheme
  - handles &#39;https&#39; scheme

$
 The public API exported by the RA layer contains
        functionality necessary for sending and receiving versioned
        data to and from the repository.  And each of the available RA
        plug-ins is able to perform that task using a specific
        protocol libsvn_ra_serf  speaks HTTP/WebDAV
        (optionally using SSL encryption) with an Apache HTTP Server
        that is running the  mod_dav_svn 
        Subversion server module;  libsvn_ra_svn 
        speaks a custom network protocol with the
         svnserve  program; and so on. For those who wish to access a Subversion repository
        using still another protocol, that is precisely why the
        Repository Access layer is modularized!  Developers can simply
        write a new library that implements the RA interface on one
        side and communicates with the repository on the other.  Your
        new library can use existing network protocols or you can
        invent your own.  You could use interprocess communication
        (IPC) calls, or let&#39;s get crazy, shall we? you
        could even implement an email-based protocol.  Subversion
        supplies the APIs; you supply the creativity. Client Layer API layers Client Layer On the client side, the Subversion working copy is where
        all the action takes place.  The bulk of functionality
        implemented by the client-side libraries exists for the sole
        purpose of managing working copies directories full of
        files and other subdirectories that serve as a sort of local,
        editable  reflection  of one or more repository
        locations and propagating changes to and from the
        Repository Access layer. administrative directory Subversion&#39;s working copy library,
         libsvn_wc , is directly responsible for
        managing the data in the working copies.  To accomplish this,
        the library stores administrative information about the
        working copy within a special subdirectory.  This
        subdirectory, named  .svn , is present in
        each working copy and contains various other files
        and directories that record state and provide a private
        workspace for administrative action.  For those familiar with
        CVS, this  .svn  subdirectory is similar in
        purpose to the  CVS  administrative
        directories found in CVS working copies. The Subversion client library,
         libsvn_client , has the broadest
        responsibility; its job is to mingle the functionality of the
        working copy library with that of the Repository Access layer,
        and then to provide the highest-level API to any application
        that wishes to perform general revision control actions.  For
        example, the function
         svn_client_checkout()  takes a URL as an
        argument.  It passes this URL to the RA layer and opens an
        authenticated session with a particular repository.  It then
        asks the repository for a certain tree, and sends this tree
        into the working copy library, which then writes a full
        working copy to disk ( .svn  directories
        and all). The client library is designed to be used by any
        application.  While the Subversion source code includes a
        standard command-line client, it should be very easy to write
        any number of GUI clients on top of the client library.  New
        GUIs (or any new client, really) for Subversion need not be
        clunky wrappers around the included command-line
        client they have full access via the
         libsvn_client  API to the same functionality,
        data, and callback mechanisms that the command-line client
        uses.  In fact, the Subversion source code tree contains a
        small C program (which you can find at
         tools/examples/minimal_client.c ) that
        exemplifies how to wield the Subversion API to create a simple
        client program. Binding Directly A Word About Correctness Why should your GUI program bind directly with a
           libsvn_client  instead of acting as a
          wrapper around a command-line program?  Besides simply being
          more efficient, it can be more correct as well.  A
          command-line program (such as the one supplied with
          Subversion) that binds to the client library needs to
          effectively translate feedback and requested data bits from
          C types to some form of human-readable output.  This type of
          translation can be lossy.  That is, the program may not
          display all of the information harvested from the API or may
          combine bits of information for compact
          representation. If you wrap such a command-line program with yet another
          program, the second program has access only to
          already interpreted (and as we mentioned, likely incomplete)
          information, which it must  again 
          translate into  its  representation
          format.  With each layer of wrapping, the integrity of the
          original data is potentially tainted more and more, much
          like the result of making a copy of a copy (of a copy )
          of a favorite audio or video cassette. But the most compelling argument for binding directly to
          the APIs instead of wrapping other programs is that the
          Subversion project makes compatibility promises regarding
          its APIs.  Across minor versions of those APIs (such as
          between 1.3 and 1.4), no function&#39;s prototype will change.
          In other words, you aren&#39;t forced to update your program&#39;s
          source code simply because you&#39;ve upgraded to a new version
          of Subversion.  Certain functions might be deprecated, but
          they still work, and this gives you a buffer of time to
          eventually embrace the newer APIs.  These kinds of
          compatibility promises do not exist for Subversion
          command-line program output, which is subject to change from
          release to release. Using the APIs Developing applications against the Subversion library APIs
      is fairly straightforward.  Subversion is primarily a set of C
      libraries, with header ( .h ) files that live
      in the  subversion/include  directory of the
      source tree.  These headers are copied into your system
      locations (e.g.,  /usr/local/include )
      when you build and install Subversion itself from source.  These
      headers represent the entirety of the functions and types meant
      to be accessible by users of the Subversion libraries.  The
      Subversion developer community is meticulous about ensuring that
      the public API is well documented refer directly to the
      header files for that documentation. When examining the public header files, the first thing you
      might notice is that Subversion&#39;s datatypes and functions are
      namespace-protected.  That is, every public Subversion symbol
      name begins with  svn_ , followed by a short
      code for the library in which the symbol is defined (such as
       wc ,  client ,
       fs , etc.), followed by a single underscore
      ( _ ), and then the rest of the symbol name.
      Semipublic functions (used among source files of a given
      library but not by code outside that library, and found inside
      the library directories themselves) differ from this naming
      scheme in that instead of a single underscore after the library
      code, they use a double underscore
      ( _ _ ).  Functions that are private to
      a given source file have no special prefixing and are declared
       static .  Of course, a compiler isn&#39;t
      interested in these naming conventions, but they help to clarify
      the scope of a given function or datatype. Another good source of information about programming against
      the Subversion APIs is the project&#39;s own hacking guidelines,
      which you can find at
       .  This document contains useful information, which, while
      aimed at developers and would-be developers of Subversion
      itself, is equally applicable to folks developing against
      Subversion as a set of third-party
      libraries. After all, Subversion uses
      Subversion&#39;s APIs, too. The Apache Portable Runtime Library Along with Subversion&#39;s own datatypes, you will see many
        references to datatypes that begin with
         apr_ symbols from the Apache Portable
        Runtime (APR) library.  APR is Apache&#39;s portability library,
        originally carved out of its server code as an attempt to
        separate the OS-specific bits from the OS-independent portions
        of the code.  The result was a library that provides a generic
        API for performing operations that differ mildly or
        wildly from OS to OS.  While the Apache HTTP Server was
        obviously the first user of the APR library, the Subversion
        developers immediately recognized the value of using APR as
        well.  This means that there is practically no OS-specific
        code in Subversion itself.  Also, it means that the Subversion
        client compiles and runs anywhere that the Apache HTTP Server
        does.  Currently, this list includes all flavors of Unix,
        Win32, BeOS, OS/2, and Mac OS X. In addition to providing consistent implementations of
        system calls that differ across operating
        systems, Subversion uses ANSI system calls and
        datatypes as much as possible.  APR gives
        Subversion immediate access to many custom datatypes, such as
        dynamic arrays and hash tables.  Subversion uses these types
        extensively.  But perhaps the most pervasive APR datatype,
        found in nearly every Subversion API prototype, is the
         apr_pool_t the APR memory pool.
        Subversion uses pools internally for all its memory allocation
        needs (unless an external library requires a different memory
        management mechanism for data passed through its
        API), Neon and Berkeley DB are examples of such
        libraries.  and while a person coding against
        the Subversion APIs is not required to do the same,
        she  is  required to provide pools to the
        API functions that need them.  This means that users of the
        Subversion API must also link against APR, must
        call  apr_initialize()  to initialize the
        APR subsystem, and then must create and manage pools for use
        with Subversion API calls, typically by
        using  svn_pool_create() ,
         svn_pool_clear() , and
         svn_pool_destroy() . Programming with Memory Pools API memory pools Almost every developer who has used the C programming
          language has at some point sighed at the daunting task of
          managing memory usage.  Allocating enough memory to use,
          keeping track of those allocations, freeing the memory when
          you no longer need it these tasks can be quite
          complex.  And of course, failure to do those things properly
          can result in a program that crashes itself, or worse,
          crashes the computer. Higher-level languages, on the other hand, either take
          the job of memory management away from you completely or
          make it something you toy with only when doing extremely
          tight program optimization.  Languages such as Java and
          Python use  garbage collection ,
          allocating memory for objects when needed, and automatically
          freeing that memory when the object is no longer in
          use. APR provides a middle-ground approach called
           pool-based memory management .  It
          allows the developer to control memory usage at a lower
          resolution per chunk (or  pool ) of
          memory, instead of per allocated object.  Rather than using
           malloc()  and friends to allocate enough
          memory for a given object, you ask APR to allocate the
          memory from a memory pool.  When you&#39;re finished using the
          objects you&#39;ve created in the pool, you destroy the entire
          pool, effectively de-allocating the memory consumed by
           all  the objects you allocated from it.
          Thus, rather than keeping track of individual objects that
          need to be de-allocated, your program simply considers the
          general lifetimes of those objects and allocates the objects
          in a pool whose lifetime (the time between the pool&#39;s
          creation and its deletion) matches the object&#39;s
          needs. Functions and Batons API batons To facilitate  streamy  (asynchronous) behavior
        and provide consumers of the Subversion C API with hooks for
        handling information in customizable ways, many functions in
        the API accept pairs of parameters: a pointer to a callback
        function, and a pointer to a blob of memory called
        a  baton  that carries context
        information for that callback function.  Batons are typically
        C structures with additional information that the callback
        function needs but which is not given directly to the callback
        function by the driving API function. URL and Path Requirements With remote version control operation as the whole point
        of Subversion&#39;s existence, it makes sense that some attention
        has been paid to internationalization (i18n) support.  After
        all, while  remote  might mean  across the
        office,  it could just as well mean  across the
        globe.  To facilitate this, all of Subversion&#39;s public
        interfaces that accept path arguments expect those paths to be
        canonicalized which is most easily accomplished by
        passing them through  svn_dirent_canonicalize() 
        or  svn_uri_canonicalize()  (depending on
        whether you are canonicalizing a local system path or a URL,
        respectively) and encoded in UTF-8.  This means, for
        example, that any new client binary that drives the
         libsvn_client  interface needs to first
        convert paths from the locale-specific encoding to UTF-8
        before passing those paths to the Subversion libraries, and
        then reconvert any resultant output paths from Subversion
        back into the locale&#39;s encoding before using those paths for
        non-Subversion purposes.  Fortunately, Subversion provides a
        suite of functions (see
         subversion/include/svn_utf.h ) that 
        any program can use to do these conversions. Also, Subversion APIs require all URL parameters to be
        properly URI-encoded.  So, instead of passing
         file:///home/username/My File.txt  as the URL of a
        file named  My File.txt , you need to pass
         file:///home/username/My%20File.txt .  Again,
        Subversion supplies helper functions that your application can
        use svn_path_uri_encode()  and
         svn_path_uri_decode() , for URI encoding
        and decoding, respectively. Using Languages Other Than C and C++ If you are interested in using the Subversion libraries in
        conjunction with something other than a C program say, a
        Python or Perl script Subversion has some support for this
        via the Simplified Wrapper and Interface Generator (SWIG).  The
        SWIG bindings for Subversion are located in
         subversion/bindings/swig .  They are still
        maturing, but they are usable.  These bindings allow you
        to call Subversion API functions indirectly, using wrappers that
        translate the datatypes native to your scripting language into
        the datatypes needed by Subversion&#39;s C libraries. Significant efforts have been made toward creating
        functional SWIG-generated bindings for Python, Perl, and Ruby.
        To some extent, the work done preparing the SWIG interface
        files for these languages is reusable in efforts to generate
        bindings for other languages supported by SWIG (which include
        versions of C#, Guile, Java, MzScheme, OCaml, PHP, and Tcl,
        among others).  However, some extra programming is required to
        compensate for complex APIs that SWIG needs some help
        translating between languages.  For more information on SWIG
        itself, see the project&#39;s web site at  . Subversion also has language bindings for Java.  The
        javahl bindings (located in
         subversion/bindings/java  in the
        Subversion source tree) aren&#39;t SWIG-based, but are instead a
        mixture of Java and hand-coded JNI.  Javahl covers most
        Subversion client-side APIs and is specifically targeted at
        implementors of Java-based Subversion clients and IDE
        integrations. Subversion&#39;s language bindings tend to lack the level of
        developer attention given to the core Subversion modules, but
        can generally be trusted as production-ready.  A number of
        scripts and applications, alternative Subversion GUI clients,
        and other third-party tools are successfully using
        Subversion&#39;s language bindings today to accomplish their
        Subversion integrations. It&#39;s worth noting here that there are other options for
        interfacing with Subversion using other languages:  alternative
        bindings for Subversion that aren&#39;t provided by the
        Subversion development community at all.  There
        are a couple of popular ones we feel are especially
        noteworthy.  First, Barry Scott&#39;s PySVN bindings ( ) are a popular option for
        binding with Python.  PySVN boasts of a more Pythonic
        interface than the more C-like APIs provided by Subversion&#39;s
        own Python bindings.  And if you&#39;re looking for a pure Java
        implementation of Subversion, check out SVNKit ( ), which is Subversion rewritten
        from the ground up in Java. SVNKit Versus javahl In 2005, a small company called TMate announced the
          1.0.0 release of JavaSVN a pure Java implementation of
          Subversion.  Since then, the project has been renamed to
          SVNKit (available at  )
          and has seen great success as a provider of Subversion
          functionality to various Subversion clients, IDE
          integrations, and other third-party tools. The SVNKit library is interesting in that, unlike the
          javahl library, it is not merely a wrapper around the
          official Subversion core libraries.  In fact, it shares no
          code with Subversion at all.  But while it is easy to
          confuse SVNKit with javahl, and easier still to not even
          realize which of these libraries you are using, folks should
          be aware that SVNKit differs from javahl in some significant
          ways.  First, while SVNKit is developed as open source
          software just like Subversion, SVNKit&#39;s license is more
          restrictive than that of
          Subversion. Redistributions in any form must
          be accompanied by information on how to obtain complete
          source code for the software that uses SVNKit and any
          accompanying software that uses the software that uses
          SVNKit. See  
          for details.   Finally, by aiming to be a
          pure Java Subversion library, SVNKit is limited in which
          portions of Subversion can be reasonably cloned while still
          keeping up with Subversion&#39;s releases.  This has already
          happened once SVNKit cannot access BDB-backed
          Subversion repositories via the  file:// 
          protocol because there&#39;s no pure Java implementation of
          Berkeley DB that is file-format-compatible with the native
          implementation of that library. That said, SVNKit has a well-established track record of
          reliability.  And a pure Java solution is much more robust
          in the face of programming errors a bug in SVNKit
          might raise a catchable Java Exception, but a bug in the
          Subversion core libraries as accessed via javahl can bring
          down your entire Java Runtime Environment.  So, weigh the
          costs when choosing a Java-based Subversion
          implementation. Code Samples 
        contains a code segment (written in C) that illustrates some
        of the concepts we&#39;ve been discussing.  It uses both the
        repository and filesystem interfaces (as can be determined by
        the prefixes  svn_repos_  and
         svn_fs_  of the function names,
        respectively) to create a new revision in which a directory is
        added.  You can see the use of an APR pool, which is passed
        around for memory allocation purposes.  Also, the code reveals
        a somewhat obscure fact about Subversion error
        handling all Subversion errors must be explicitly
        handled to avoid memory leakage (and in some cases,
        application failure). Using the repository layer 
/* Convert a Subversion error into a simple boolean error code.
 *
 * NOTE:  Subversion errors must be cleared (using svn_error_clear())
 *        because they are allocated from the global pool, else memory
 *        leaking occurs.
 */
#define INT_ERR(expr)                           \
  do {                                          \
    svn_error_t *__temperr = (expr);            \
    if (__temperr)                              \
      {                                         \
        svn_error_clear(__temperr);             \
        return 1;                               \
      }                                         \
    return 0;                                   \
  } while (0)

/* Create a new directory at the path NEW_DIRECTORY in the Subversion
 * repository located at REPOS_PATH.  Perform all memory allocation in
 * POOL.  This function will create a new revision for the addition of
 * NEW_DIRECTORY.  Return zero if the operation completes
 * successfully, nonzero otherwise.
 */
static int
make_new_directory(const char *repos_path,
                   const char *new_directory,
                   apr_pool_t *pool)
{
  svn_error_t *err;
  svn_repos_t *repos;
  svn_fs_t *fs;
  svn_revnum_t youngest_rev;
  svn_fs_txn_t *txn;
  svn_fs_root_t *txn_root;
  const char *conflict_str;

  /* Open the repository located at REPOS_PATH. 
   */
  INT_ERR(svn_repos_open(&amp;repos, repos_path, pool));

  /* Get a pointer to the filesystem object that is stored in REPOS. 
   */
  fs = svn_repos_fs(repos);

  /* Ask the filesystem to tell us the youngest revision that
   * currently exists. 
   */
  INT_ERR(svn_fs_youngest_rev(&amp;youngest_rev, fs, pool));

  /* Begin a new transaction that is based on YOUNGEST_REV.  We are
   * less likely to have our later commit rejected as conflicting if we
   * always try to make our changes against a copy of the latest snapshot
   * of the filesystem tree. 
   */
  INT_ERR(svn_repos_fs_begin_txn_for_commit2(&amp;txn, repos, youngest_rev,
                                             apr_hash_make(pool), pool));

  /* Now that we have started a new Subversion transaction, get a root
   * object that represents that transaction. 
   */
  INT_ERR(svn_fs_txn_root(&amp;txn_root, txn, pool));
  
  /* Create our new directory under the transaction root, at the path
   * NEW_DIRECTORY. 
   */
  INT_ERR(svn_fs_make_dir(txn_root, new_directory, pool));

  /* Commit the transaction, creating a new revision of the filesystem
   * which includes our added directory path.
   */
  err = svn_repos_fs_commit_txn(&amp;conflict_str, repos, 
                                &amp;youngest_rev, txn, pool);
  if (! err)
    {
      /* No error?  Excellent!  Print a brief report of our success.
       */
      printf(&quot;Directory &#39;%s&#39; was successfully added as new revision &quot;
             &quot;&#39;%ld&#39;.\n&quot;, new_directory, youngest_rev);
    }
  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)
    {
      /* Uh-oh.  Our commit failed as the result of a conflict
       * (someone else seems to have made changes to the same area 
       * of the filesystem that we tried to modify).  Print an error
       * message.
       */
      printf(&quot;A conflict occurred at path &#39;%s&#39; while attempting &quot;
             &quot;to add directory &#39;%s&#39; to the repository at &#39;%s&#39;.\n&quot;, 
             conflict_str, new_directory, repos_path);
    }
  else
    {
      /* Some other error has occurred.  Print an error message.
       */
      printf(&quot;An error occurred while attempting to add directory &#39;%s&#39; &quot;
             &quot;to the repository at &#39;%s&#39;.\n&quot;, 
             new_directory, repos_path);
    }

  INT_ERR(err);
} 
 Note that in  , the code could
        just as easily have committed the transaction using
         svn_fs_commit_txn() .  But the filesystem
        API knows nothing about the repository library&#39;s hook
        mechanism.  If you want your Subversion repository to
        automatically perform some set of non-Subversion tasks every
        time you commit a transaction (e.g., sending an
        email that describes all the changes made in that transaction
        to your developer mailing list), you need to use the
         libsvn_repos -wrapped version of that
        function, which adds the hook triggering
        functionality in this case,
         svn_repos_fs_commit_txn() .  (For more
        information regarding Subversion&#39;s repository hooks, see  .) Now let&#39;s switch languages.    is a
        sample program that uses Subversion&#39;s SWIG Python bindings to
        recursively crawl the youngest repository revision, and to
        print the various paths reached during the crawl. Using the repository layer with Python 
#!/usr/bin/python

&quot;&quot;&quot;Crawl a repository, printing versioned object path names.&quot;&quot;&quot;

import sys
import os.path
import svn.fs, svn.core, svn.repos

def crawl_filesystem_dir(root, directory):
    &quot;&quot;&quot;Recursively crawl DIRECTORY under ROOT in the filesystem, and return
    a list of all the paths at or below DIRECTORY.&quot;&quot;&quot;

    # Print the name of this path.
    print directory + &quot;/&quot;
    
    # Get the directory entries for DIRECTORY.
    entries = svn.fs.svn_fs_dir_entries(root, directory)

    # Loop over the entries.
    names = entries.keys()
    for name in names:
        # Calculate the entry&#39;s full path.
        full_path = directory + &#39;/&#39; + name

        # If the entry is a directory, recurse.  The recursion will return
        # a list with the entry and all its children, which we will add to
        # our running list of paths.
        if svn.fs.svn_fs_is_dir(root, full_path):
            crawl_filesystem_dir(root, full_path)
        else:
            # Else it&#39;s a file, so print its path here.
            print full_path

def crawl_youngest(repos_path):
    &quot;&quot;&quot;Open the repository at REPOS_PATH, and recursively crawl its
    youngest revision.&quot;&quot;&quot;
    
    # Open the repository at REPOS_PATH, and get a reference to its
    # versioning filesystem.
    repos_obj = svn.repos.svn_repos_open(repos_path)
    fs_obj = svn.repos.svn_repos_fs(repos_obj)

    # Query the current youngest revision.
    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj)
    
    # Open a root object representing the youngest (HEAD) revision.
    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev)

    # Do the recursive crawl.
    crawl_filesystem_dir(root_obj, &quot;&quot;)
    
if __name__ == &quot;__main__&quot;:
    # Check for sane usage.
    if len(sys.argv) != 2:
        sys.stderr.write(&quot;Usage: %s REPOS_PATH\n&quot;
                         % (os.path.basename(sys.argv[0])))
        sys.exit(1)

    # Canonicalize the repository path.
    repos_path = svn.core.svn_dirent_canonicalize(sys.argv[1])

    # Do the real work.
    crawl_youngest(repos_path)
 This same program in C would need to deal with APR&#39;s
        memory pool system.  But Python handles memory usage
        automatically, and Subversion&#39;s Python bindings adhere to that
        convention.  In C, you&#39;d be working with custom datatypes
        (such as those provided by the APR library) for representing
        the hash of entries and the list of paths, but Python has
        hashes (called  dictionaries ) and lists as
        built-in datatypes, and it provides a rich collection of
        functions for operating on those types.  So SWIG (with the
        help of some customizations in Subversion&#39;s language bindings
        layer) takes care of mapping those custom datatypes into the
        native datatypes of the target language.  This provides a more
        intuitive interface for users of that language. The Subversion Python bindings can be used for working
        copy operations, too.  In the previous section of this
        chapter, we mentioned the  libsvn_client 
        interface and how it exists for the sole purpose of
        simplifying the process of writing a Subversion client.    is a brief
        example of how that library can be accessed via the SWIG
        Python bindings to re-create a scaled-down version of the
         svn status  command. A Python status crawler 
#!/usr/bin/env python

&quot;&quot;&quot;Crawl a working copy directory, printing status information.&quot;&quot;&quot;

import sys
import os.path
import getopt
import svn.core, svn.client, svn.wc

def generate_status_code(status):
    &quot;&quot;&quot;Translate a status value into a single-character status code,
    using the same logic as the Subversion command-line client.&quot;&quot;&quot;
    code_map = { svn.wc.svn_wc_status_none        : &#39; &#39;,
                 svn.wc.svn_wc_status_normal      : &#39; &#39;,
                 svn.wc.svn_wc_status_added       : &#39;A&#39;,
                 svn.wc.svn_wc_status_missing     : &#39;!&#39;,
                 svn.wc.svn_wc_status_incomplete  : &#39;!&#39;,
                 svn.wc.svn_wc_status_deleted     : &#39;D&#39;,
                 svn.wc.svn_wc_status_replaced    : &#39;R&#39;,
                 svn.wc.svn_wc_status_modified    : &#39;M&#39;,
                 svn.wc.svn_wc_status_conflicted  : &#39;C&#39;,
                 svn.wc.svn_wc_status_obstructed  : &#39;~&#39;,
                 svn.wc.svn_wc_status_ignored     : &#39;I&#39;,
                 svn.wc.svn_wc_status_external    : &#39;X&#39;,
                 svn.wc.svn_wc_status_unversioned : &#39;?&#39;,
               }
    return code_map.get(status, &#39;?&#39;)

def do_status(wc_path, verbose, prefix):
    # Build a client context baton.
    ctx = svn.client.svn_client_create_context()

    def _status_callback(path, status):
        &quot;&quot;&quot;A callback function for svn_client_status.&quot;&quot;&quot;

        # Print the path, minus the bit that overlaps with the root of
        # the status crawl
        text_status = generate_status_code(status.text_status)
        prop_status = generate_status_code(status.prop_status)
        prefix_text = &#39;&#39;
        if prefix is not None:
            prefix_text = prefix + &quot; &quot;
        print &#39;%s%s%s  %s&#39; % (prefix_text, text_status, prop_status, path)
        
    # Do the status crawl, using _status_callback() as our callback function.
    revision = svn.core.svn_opt_revision_t()
    revision.type = svn.core.svn_opt_revision_head
    svn.client.svn_client_status2(wc_path, revision, _status_callback,
                                  svn.core.svn_depth_infinity, verbose,
                                  0, 0, 1, ctx)

def usage_and_exit(errorcode):
    &quot;&quot;&quot;Print usage message, and exit with ERRORCODE.&quot;&quot;&quot;
    stream = errorcode and sys.stderr or sys.stdout
    stream.write(&quot;&quot;&quot;Usage: %s OPTIONS WC-PATH

  Print working copy status, optionally with a bit of prefix text.

Options:
  --help, -h    : Show this usage message
  --prefix ARG  : Print ARG, followed by a space, before each line of output
  --verbose, -v : Show all statuses, even uninteresting ones
&quot;&quot;&quot; % (os.path.basename(sys.argv[0])))
    sys.exit(errorcode)
    
if __name__ == &#39;__main__&#39;:
    # Parse command-line options.
    try:
        opts, args = getopt.getopt(sys.argv[1:], &quot;hv&quot;,
                                   [&quot;help&quot;, &quot;prefix=&quot;, &quot;verbose&quot;])
    except getopt.GetoptError:
        usage_and_exit(1)
    verbose = 0
    prefix = None
    for opt, arg in opts:
        if opt in (&quot;-h&quot;, &quot;--help&quot;):
            usage_and_exit(0)
        if opt in (&quot;--prefix&quot;):
            prefix = arg
        if opt in (&quot;-v&quot;, &quot;--verbose&quot;):
            verbose = 1
    if len(args) != 1:
        usage_and_exit(2)
            
    # Canonicalize the working copy path.
    wc_path = svn.core.svn_dirent_canonicalize(args[0])

    # Do the real work.
    try:
        do_status(wc_path, verbose, prefix)
    except svn.core.SubversionException, e:
        sys.stderr.write(&quot;Error (%d): %s\n&quot; % (e.apr_err, e.message))
        sys.exit(1)
 As was the case in
         ,
        this program is pool-free and uses, for the most part, normal
        Python datatypes. Run user-provided paths
          through the appropriate canonicalization function
          ( svn_dirent_canonicalize()  or
           svn_uri_canonicalize() ) before passing
          them to other API functions.  Failure to do so can trigger
          assertions in the underlying Subversion C library which
          translate into rather immediate and unceremonious program
          abortion. Of particular interest to users of the Python flavor of
        Subversion&#39;s API is the implementation of callback functions.
        As previously mentioned, Subversion&#39;s C API makes liberal use
        of the callback function/baton paradigm.  API functions which
        in C accept a function and baton pair only accept a callback
        function parameter in Python.  How, then, does the caller pass
        arbitrary context information to the callback function?  In
        Python, this is done by taking advantage of Python&#39;s scoping
        rules and default argument values.  You can see this in action
        in  .
        The  svn_client_status2()  function is
        given a callback function
        ( _status_callback() ) but no
        baton _status_callback()  gets
        access to the user-provided prefix string because that
        variable falls into the scope of the function
        automatically. Summary One of Subversion&#39;s greatest features isn&#39;t something you
      get from running its command-line client or other tools.  It&#39;s
      the fact that Subversion was designed modularly and provides a
      stable, public API so that others like yourself,
      perhaps can write custom software that drives Subversion&#39;s
      core logic. In this chapter, we took a closer look at Subversion&#39;s
      architecture, examining its logical layers and describing that
      public API, the very same API that Subversion&#39;s own layers use
      to communicate with each other.  Many developers have found
      interesting uses for the Subversion API, from simple repository
      hook scripts, to integrations between Subversion and some other
      application, to completely different version control systems.
      What unique itch will  you  scratch with
      it? Copyright Copyright (c) 2002-2013 Ben Collins-Sussman, Brian
    W. Fitzpatrick, C. Michael Pilato. This work is licensed under the Creative Commons Attribution
    License.  To view a copy of this license, visit
      or
    send a letter to Creative Commons, 559 Nathan Abbott Way,
    Stanford, California 94305, USA. A summary of the license is given below, followed by the full
    legal text. 
You are free:

    * to copy, distribute, display, and perform the work
    * to make derivative works
    * to make commercial use of the work

Under the following conditions:
    
Attribution. You must give the original author credit.

    * For any reuse or distribution, you must make clear to others the
      license terms of this work.

    * Any of these conditions can be waived if you get permission from
      the author.

Your fair use and other rights are in no way affected by the above.

The above is a summary of the full license below.

====================================================================

Creative Commons Legal Code
Attribution 2.0

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN
ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
INFORMATION ON AN &quot;AS-IS&quot; BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR
DAMAGES RESULTING FROM ITS USE.

License

THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
CREATIVE COMMONS PUBLIC LICENSE (&quot;CCPL&quot; OR &quot;LICENSE&quot;). THE WORK IS
PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE
WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS
PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS
YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF
SUCH TERMS AND CONDITIONS.

1. Definitions

   a. &quot;Collective Work&quot; means a work, such as a periodical issue,
      anthology or encyclopedia, in which the Work in its entirety in
      unmodified form, along with a number of other contributions,
      constituting separate and independent works in themselves, are
      assembled into a collective whole. A work that constitutes a
      Collective Work will not be considered a Derivative Work (as
      defined below) for the purposes of this License.

   b. &quot;Derivative Work&quot; means a work based upon the Work or upon the
      Work and other pre-existing works, such as a translation,
      musical arrangement, dramatization, fictionalization, motion
      picture version, sound recording, art reproduction, abridgment,
      condensation, or any other form in which the Work may be recast,
      transformed, or adapted, except that a work that constitutes a
      Collective Work will not be considered a Derivative Work for the
      purpose of this License. For the avoidance of doubt, where the
      Work is a musical composition or sound recording, the
      synchronization of the Work in timed-relation with a moving
      image (&quot;synching&quot;) will be considered a Derivative Work for the
      purpose of this License.

   c. &quot;Licensor&quot; means the individual or entity that offers the Work
      under the terms of this License.

   d. &quot;Original Author&quot; means the individual or entity who created the Work.

   e. &quot;Work&quot; means the copyrightable work of authorship offered under
      the terms of this License.

   f. &quot;You&quot; means an individual or entity exercising rights under this
      License who has not previously violated the terms of this
      License with respect to the Work, or who has received express
      permission from the Licensor to exercise rights under this
      License despite a previous violation.

2. Fair Use Rights. Nothing in this license is intended to reduce,
   limit, or restrict any rights arising from fair use, first sale or
   other limitations on the exclusive rights of the copyright owner
   under copyright law or other applicable laws.

3. License Grant. Subject to the terms and conditions of this License,
   Licensor hereby grants You a worldwide, royalty-free,
   non-exclusive, perpetual (for the duration of the applicable
   copyright) license to exercise the rights in the Work as stated
   below:

   a. to reproduce the Work, to incorporate the Work into one or more
      Collective Works, and to reproduce the Work as incorporated in
      the Collective Works;

   b. to create and reproduce Derivative Works;

   c. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission the Work including as incorporated in
      Collective Works;

   d. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission Derivative Works.

   e.

      For the avoidance of doubt, where the work is a musical composition:

         i. Performance Royalties Under Blanket Licenses. Licensor
            waives the exclusive right to collect, whether
            individually or via a performance rights society
            (e.g. ASCAP, BMI, SESAC), royalties for the public
            performance or public digital performance (e.g. webcast)
            of the Work.

        ii. Mechanical Rights and Statutory Royalties. Licensor waives
            the exclusive right to collect, whether individually or
            via a music rights agency or designated agent (e.g. Harry
            Fox Agency), royalties for any phonorecord You create from
            the Work (&quot;cover version&quot;) and distribute, subject to the
            compulsory license created by 17 USC Section 115 of the US
            Copyright Act (or the equivalent in other jurisdictions).

   f. Webcasting Rights and Statutory Royalties. For the avoidance of
      doubt, where the Work is a sound recording, Licensor waives the
      exclusive right to collect, whether individually or via a
      performance-rights society (e.g. SoundExchange), royalties for
      the public digital performance (e.g. webcast) of the Work,
      subject to the compulsory license created by 17 USC Section 114
      of the US Copyright Act (or the equivalent in other
      jurisdictions).

The above rights may be exercised in all media and formats whether now
known or hereafter devised. The above rights include the right to make
such modifications as are technically necessary to exercise the rights
in other media and formats. All rights not expressly granted by
Licensor are hereby reserved.

4. Restrictions.The license granted in Section 3 above is expressly
   made subject to and limited by the following restrictions:

   a. You may distribute, publicly display, publicly perform, or
      publicly digitally perform the Work only under the terms of this
      License, and You must include a copy of, or the Uniform Resource
      Identifier for, this License with every copy or phonorecord of
      the Work You distribute, publicly display, publicly perform, or
      publicly digitally perform. You may not offer or impose any
      terms on the Work that alter or restrict the terms of this
      License or the recipients&#39; exercise of the rights granted
      hereunder. You may not sublicense the Work. You must keep intact
      all notices that refer to this License and to the disclaimer of
      warranties. You may not distribute, publicly display, publicly
      perform, or publicly digitally perform the Work with any
      technological measures that control access or use of the Work in
      a manner inconsistent with the terms of this License
      Agreement. The above applies to the Work as incorporated in a
      Collective Work, but this does not require the Collective Work
      apart from the Work itself to be made subject to the terms of
      this License. If You create a Collective Work, upon notice from
      any Licensor You must, to the extent practicable, remove from
      the Collective Work any reference to such Licensor or the
      Original Author, as requested. If You create a Derivative Work,
      upon notice from any Licensor You must, to the extent
      practicable, remove from the Derivative Work any reference to
      such Licensor or the Original Author, as requested.

   b. If you distribute, publicly display, publicly perform, or
      publicly digitally perform the Work or any Derivative Works or
      Collective Works, You must keep intact all copyright notices for
      the Work and give the Original Author credit reasonable to the
      medium or means You are utilizing by conveying the name (or
      pseudonym if applicable) of the Original Author if supplied; the
      title of the Work if supplied; to the extent reasonably
      practicable, the Uniform Resource Identifier, if any, that
      Licensor specifies to be associated with the Work, unless such
      URI does not refer to the copyright notice or licensing
      information for the Work; and in the case of a Derivative Work,
      a credit identifying the use of the Work in the Derivative Work
      (e.g., &quot;French translation of the Work by Original Author,&quot; or
      &quot;Screenplay based on original Work by Original Author&quot;). Such
      credit may be implemented in any reasonable manner; provided,
      however, that in the case of a Derivative Work or Collective
      Work, at a minimum such credit will appear where any other
      comparable authorship credit appears and in a manner at least as
      prominent as such other comparable authorship credit.

5. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR
WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,
STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,
NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,
OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT
DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED
WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.

6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY
   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY
   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE
   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE
   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
   DAMAGES.

7. Termination

   a. This License and the rights granted hereunder will terminate
      automatically upon any breach by You of the terms of this
      License. Individuals or entities who have received Derivative
      Works or Collective Works from You under this License, however,
      will not have their licenses terminated provided such
      individuals or entities remain in full compliance with those
      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any
      termination of this License.

   b. Subject to the above terms and conditions, the license granted
      here is perpetual (for the duration of the applicable copyright
      in the Work). Notwithstanding the above, Licensor reserves the
      right to release the Work under different license terms or to
      stop distributing the Work at any time; provided, however that
      any such election will not serve to withdraw this License (or
      any other license that has been, or is required to be, granted
      under the terms of this License), and this License will continue
      in full force and effect unless terminated as stated above.

8. Miscellaneous

   a. Each time You distribute or publicly digitally perform the Work
      or a Collective Work, the Licensor offers to the recipient a
      license to the Work on the same terms and conditions as the
      license granted to You under this License.

   b. Each time You distribute or publicly digitally perform a
      Derivative Work, Licensor offers to the recipient a license to
      the original Work on the same terms and conditions as the
      license granted to You under this License.

   c. If any provision of this License is invalid or unenforceable
      under applicable law, it shall not affect the validity or
      enforceability of the remainder of the terms of this License,
      and without further action by the parties to this agreement,
      such provision shall be reformed to the minimum extent necessary
      to make such provision valid and enforceable.

   d. No term or provision of this License shall be deemed waived and
      no breach consented to unless such waiver or consent shall be in
      writing and signed by the party to be charged with such waiver
      or consent.

   e. This License constitutes the entire agreement between the
      parties with respect to the Work licensed here. There are no
      understandings, agreements or representations with respect to
      the Work not specified here. Licensor shall not be bound by any
      additional provisions that may appear in any communication from
      You. This License may not be modified without the mutual written
      agreement of the Licensor and You.

Creative Commons is not a party to this License, and makes no warranty
whatsoever in connection with the Work. Creative Commons will not be
liable to You or any party on any legal theory for any damages
whatsoever, including without limitation any general, special,
incidental or consequential damages arising in connection to this
license. Notwithstanding the foregoing two (2) sentences, if Creative
Commons has expressly identified itself as the Licensor hereunder, it
shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that the
Work is licensed under the CCPL, neither party will use the trademark
&quot;Creative Commons&quot; or any related trademark or logo of Creative
Commons without the prior written consent of Creative Commons. Any
permitted use will be in compliance with Creative Commons&#39;
then-current trademark usage guidelines, as may be published on its
website or otherwise made available upon request from time to time.

Creative Commons may be contacted at http://creativecommons.org/.

====================================================================
 Karl Fogel Chicago, March 14, 2004. Foreword A bad Frequently Asked Questions (FAQ) sheet is one that is
    composed not of the questions people actually ask, but of the
    questions the FAQ&#39;s author  wishes  people
    would ask.  Perhaps you&#39;ve seen the type before: Q: How can I use Glorbosoft XYZ to maximize team
      productivity? A: Many of our customers want to know how they can
      maximize productivity through our patented office groupware
      innovations.  The answer is simple.  First, click on the
       File  menu, scroll down to
       Increase Productivity ,
      then The problem with such FAQs is that they are not, in a
    literal sense, FAQs at all.  No one ever called the tech support
    line and asked,  How can we maximize
    productivity?   Rather, people asked highly specific
    questions, such as  How can we change the calendaring system
    to send reminders two days in advance instead of one? 
    and so on.  But it&#39;s a lot easier to make up imaginary
    Frequently Asked Questions than it is to discover the real ones.
    Compiling a true FAQ sheet requires a sustained, organized
    effort: over the lifetime of the software, incoming questions
    must be tracked, responses monitored, and all gathered into a
    coherent, searchable whole that reflects the collective
    experience of users in the wild.  It calls for the patient,
    observant attitude of a field naturalist.  No grand
    hypothesizing, no visionary pronouncements here open eyes
    and accurate note-taking are what&#39;s needed most. What I love about this book is that it grew out of just such
    a process, and shows it on every page.  It is the direct result
    of the authors&#39; encounters with users.  It began with Ben
    Collins-Sussman&#39;s observation that people were asking the same
    basic questions over and over on the Subversion mailing lists:
    what are the standard workflows to use with Subversion?  Do
    branches and tags work the same way as in other version control
    systems?  How can I find out who made a particular change? Frustrated at seeing the same questions day after day, Ben
    worked intensely over a month in the summer of 2002 to write
     The Subversion Handbook , a 60-page
    manual that covered all the basics of using Subversion.  The
    manual made no pretense of being complete, but it was
    distributed with Subversion and got users over that initial hump
    in the learning curve.  When O&#39;Reilly decided to
    publish a full-length Subversion book, the path of least
    resistance was obvious: just expand the Subversion
    handbook. The three coauthors of the new book were thus presented
    with an unusual opportunity.  Officially, their task was to
    write a book top-down, starting from a table of contents and an
    initial draft.  But they also had access to a steady
    stream indeed, an uncontrollable geyser of bottom-up
    source material.  Subversion was already in the hands of
    thousands of early adopters, and those users were giving tons of
    feedback, not only about Subversion, but also about its existing
    documentation. During the entire time they wrote this book, Ben, Mike, and
    Brian haunted the Subversion mailing lists and chat rooms
    incessantly, carefully noting the problems users were having in
    real-life situations.  Monitoring such feedback was part of their
    job descriptions at CollabNet anyway, and it gave them a huge
    advantage when they set out to document Subversion.  The book
    they produced is grounded firmly in the bedrock of experience,
    not in the shifting sands of wishful thinking; it combines the
    best aspects of user manual and FAQ sheet.  This duality might
    not be noticeable on a first reading.  Taken in order, front to
    back, the book is simply a straightforward description of a
    piece of software.  There&#39;s the overview, the obligatory guided
    tour, the chapter on administrative configuration, some advanced
    topics, and of course, a command reference and troubleshooting
    guide.  Only when you come back to it later, seeking the
    solution to some specific problem, does its authenticity shine
    out: the telling details that can only result from encounters
    with the unexpected, the examples honed from genuine use cases,
    and most of all the sensitivity to the user&#39;s needs and the
    user&#39;s point of view. Of course, no one can promise that this book will answer
    every question you have about Subversion.  Sometimes the
    precision with which it anticipates your questions will seem
    eerily telepathic; yet occasionally, you will stumble into a
    hole in the community&#39;s knowledge and come away empty-handed.
    When this happens, the best thing you can do is email
     users@subversion.apache.org  and present your
    problem.  The authors are still there and still watching, and the
    authors include not just the three listed on the cover, but many others
    who contributed corrections and original material.  From the
    community&#39;s point of view, solving your problem is merely a
    pleasant side effect of a much larger project namely,
    slowly adjusting this book, and ultimately Subversion itself, to
    more closely match the way people actually use it.  They are
    eager to hear from you, not only because they can help you, but
    because you can help them.  With Subversion, as with all active
    free software projects,  you are not
    alone . Let this book be your first companion. Subversion Repository Hook Reference Subversion repositories provide a number of event hooks
      which are essentially opportunities for administrators to extend
      Subversion&#39;s functionality at key moments of key operations.
      Repository hooks are implemented as programs executed by
      Subversion itself at those key moments before and after a
      commit, before and after a user locks a file, and so on. For each hook it provides, Subversion will attempt to
      execute the program of that hook&#39;s name which is found in
      the  hooks/  subdirectory of the repository&#39;s
      on-disk directory structure.  For example, on a Unix system, the
      start-commit hook script would be installed at
       REPOS_PATH /hooks/start-commit ,
      where it could be a binary executable program, a shell script, a
      Python program, etc.  On a Windows system, the program would be
      installed in the same location, but would be
      named  START-COMMIT.EXE 
      or  START-COMMIT.BAT  instead of
      simply  start-commit . This reference guide describes the various hooks which
      Subversion offers to administrators, detailing when the hook is
      invoked, its input parameters, and how its behavior affects the
      Subversion workflow. hook scripts start-commit start-commit Notification of the beginning of a commit. start-commit
         REPOS-PATH 
         USER 
         CAPABILITIES 
         TXN-NAME Description The start-commit hook is run immediately after the
        commit transaction is created and its initial properties
        set.  It is typically used as an early termination
        mechanism, avoiding what could be a lengthy commit process
        which would eventually fail at a later phase anyway due to a
        user&#39;s lack of commit privileges or some other commit
        metadata validation failure. If the start-commit hook program returns a nonzero exit
        value, the commit process is stopped, the commit transaction
        is destroyed, and anything printed to
         stderr  is marshalled back to the
        client. The start-commit hook is not a suitable place to
        evaluate the substance of a particular commit, as it is
        invoked before any file or directory change information has
        been transmitted.  Use the pre-commit hook script (which is
        described in   elsewhere in this reference) for that purpose. Prior to Subversion 1.8, the Subversion invoked the
          start-commit hook  before  creating the
          commit transaction.  Failure of the script resulted in that
          transaction not being created at all.  This was changed in
          Subversion 1.8, though, to allow implementations of the
          start-commit hook access to the transaction&#39;s properties,
          which can include (among other things) the revision log
          associated with the commit. Input Parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Authenticated username attempting the commit Colon-separated list of
            capabilities that a client passes to the server,
            including  depth ,
             mergeinfo , and
             log-revprops  (new in Subversion 1.5) Commit transaction name (new in Subversion 1.8) Common uses Access control (e.g., temporarily lock out commits for
        some reason). A means to allow access only from clients that have
        certain capabilities. hook scripts pre-commit pre-commit Notification just prior to commit completion. pre-commit
         REPOS-PATH 
         TXN-NAME Description The  pre-commit  hook is run just
        before a commit transaction is promoted to a new revision.
        Typically, this hook is used to protect against commits that
        are disallowed due to content or location (e.g., your
        site might require that all commits to a certain branch
        include a ticket number from the bug tracker, or that the
        incoming log message is nonempty). If the  pre-commit  hook program
        returns a nonzero exit value, the commit is aborted, the
        commit transaction is removed, and anything printed to
         stderr  is marshalled back to the client. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Commit transaction name Additionally, Subversion passes any lock tokens provided
        by the committing client to the hook script via standard
        input.  When present, these are formatted as a single line
        containing the string  LOCK-TOKENS: ,
        followed by additional lines one per lock
        token which contain the lock token information.  Each
        lock token information line consists of the URI-escaped
        repository filesystem path associated with the lock,
        followed by the pipe ( | ) separator
        character, and finally the lock token string. Common uses Change validation and control hook scripts post-commit post-commit Notification of a successful commit. post-commit
         REPOS-PATH 
         REVISION Description The  post-commit  hook is run after the
        transaction is committed and a new revision is created.  Most
        people use this hook to send out descriptive emails about
        the commit or to notify some other tool (such as an issue
        tracker) that a commit has happened.  Some configurations
        also use this hook to trigger backup processes. If the  post-commit  hook returns a
        nonzero exit status, the commit  will
        not  be aborted since it has already
        completed.  However, anything that the hook printed
        to  stderr  will be marshalled back to the
        client, making it easier to diagnose hook failures. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Revision number created by the commit Common uses Commit notification; tool integration hook scripts pre-revprop-change pre-revprop-change Notification of a revision property change
        attempt. pre-revprop-change
         REPOS-PATH 
         REVISION 
         USER 
         PROPNAME 
         ACTION Description The  pre-revprop-change  hook is run
        immediately prior to the modification of a revision property
        when performed outside the scope of a normal commit.  Unlike
        the other hooks, the default state of this one is to deny
        the proposed action.  The hook must actually exist and
        return a zero exit value before a revision property
        modification can happen. If the  pre-revprop-change  hook doesn&#39;t
        exist, isn&#39;t executable, or returns a nonzero exit value, no
        change to the property will be made, and anything printed
        to  stderr  is marshalled back to the
        client. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Revision whose property is about to be modified Authenticated username attempting the property change Name of the property changed Change description:  A  (added),
             D  (deleted), or  M 
            (modified) Additionally, Subversion passes the intended new value
         of the property to the hook program via standard
         input. Common uses Access control; change validation and control hook scripts post-revprop-change post-revprop-change Notification of a successful revision property 
        change. post-revprop-change
         REPOS-PATH 
         REVISION 
         USER 
         PROPNAME 
         ACTION Description The  post-revprop-change  hook is run
        immediately after the modification of a revision property
        when performed outside the scope of a normal commit.  As you can
        derive from the description of its counterpart, the
         pre-revprop-change  hook, this hook will
        not run at all unless
        the  pre-revprop-change  hook is
        implemented.  It is typically used to send email
        notification of the property change. If the  post-revprop-change  hook returns a
        nonzero exit status, the change  will
        not  be aborted since it has already
        completed.  However, anything that the hook printed
        to  stderr  will be marshalled back to the
        client, making it easier to diagnose hook failures. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Revision whose property was modified Authenticated username of the person making the change Name of the property changed Change description:  A  (added),
             D  (deleted), or  M 
            (modified) Additionally, Subversion passes to the hook program, via
        standard input, the previous value of the property. Common uses Property change notification hook scripts pre-lock pre-lock Notification of a path lock attempt. pre-lock
         REPOS-PATH 
         PATH 
         USER 
         COMMENT 
         STEAL Description The  pre-lock  hook runs whenever
        someone attempts to lock a path.  It can be used to prevent
        locks altogether or to create a more complex policy
        specifying exactly which users are allowed to lock
        particular paths.  If the hook notices a preexisting lock,
        it can also decide whether a user is allowed
        to  steal  the existing lock. If the  pre-lock  hook program returns
        a nonzero exit value, the lock action is aborted and
        anything printed to  stderr  is
        marshalled back to the client. The hook program may optionally dictate the lock token
        which will be assigned to the lock by printing the desired
        lock token to standard output.  Because of this,
        implementations of this hook should carefully avoid
        unexpected output sent to standard output. If the  pre-lock  script takes
          advantage of lock token dictation feature, the
          responsibility of generating a  unique 
          lock token falls to the script itself.  Failure to
          generate unique lock tokens may result in
          undefined and very likely,
          undesired behavior. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Versioned path that is to be locked Authenticated username of the person attempting the 
            lock Comment provided when the lock was created 1  if the user is attempting to
            steal an existing lock;  0 
            otherwise Common uses Access control hook scripts post-lock post-lock Notification of a successful path lock. post-lock
         REPOS-PATH 
         USER Description The  post-lock  hook runs after one or
        more paths have been locked.  It is typically used to send
        email notification of the lock event. If the  post-lock  hook returns a
        nonzero exit status, the lock  will
        not  be aborted since it has already
        completed.  However, anything that the hook printed
        to  stderr  will be marshalled back to the
        client, making it easier to diagnose hook failures. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Authenticated username of the person who locked the 
            paths Additionally, the list of paths locked is passed to the
        hook program via standard input, one path per line. Common uses Lock notification hook scripts pre-unlock pre-unlock Notification of a path unlock attempt. pre-unlock
         REPOS-PATH 
         PATH 
         USER 
         TOKEN 
         BREAK-UNLOCK Description The  pre-unlock  hook runs whenever
        someone attempts to remove a lock on a file.  It can be used
        to create policies that specify which users are allowed to
        unlock particular paths.  It&#39;s particularly important for
        determining policies about lock breakage.  If user A locks a
        file, is user B allowed to break the lock?  What if the lock
        is more than a week old?  These sorts of things can be
        decided and enforced by the hook. If the  pre-unlock  hook program
        returns a nonzero exit value, the unlock action is aborted
        and anything printed to  stderr  is marshalled back to the
        client. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Versioned path which is to be unlocked Authenticated username of the person attempting the 
            unlock Lock token associated with the lock which is to be
            removed 1  if the user is attempting to
            break the lock;  0  otherwise Common uses Access control hook scripts post-unlock post-unlock Notification of a successful path unlock. post-unlock
         REPOS-PATH 
         USER Description The  post-unlock  hook runs after one
        or more paths have been unlocked.  It is typically used to
        send email notification of the unlock event. If the  post-unlock  hook returns a
        nonzero exit status, the unlock  will
        not  be aborted since it has already
        completed.  However, anything that the hook printed
        to  stderr  will be marshalled back to the
        client, making it easier to diagnose hook failures. Input parameter(s) The command-line arguments passed to the hook program,
        in order, are: Repository path Authenticated username of the person who unlocked the 
            paths Additionally, the list of paths unlocked is passed to the
        hook program via standard input, one path per line. Common uses Unlock notification svn Reference Subversion Command-Line Client svn  is the official command-line client
      of Subversion.  Its functionality is offered via a collection of
      task-specific subcommands, most of which accept a number of
      options for fine-grained control of the program&#39;s
      behavior. When using the  svn  program, subcommands
      and other non-option arguments must appear in a specified order
      on the command line.  Options, on the other hand, may appear
      anywhere on the command line (after the program name, of
      course), and in general, their order is irrelevant.  For
      example, all of the following are valid ways to use  svn
      status , and are interpreted in exactly the same
      way: 
$ svn -vq status myfile
$ svn status -v -q myfile
$ svn -q status -v myfile
$ svn status -vq myfile
$ svn status myfile -qv
 The following sections describe each of the various
      subcommands and options provided by the  svn 
      command-line client program, including some examples of each
      subcommand&#39;s typical uses. While Subversion has different options for its
      subcommands, all options exist in a single
      namespace that is, each option is guaranteed to mean the
      roughly same thing regardless of the subcommand you use it
      with.  For example,  --verbose 
      ( -v ) always means  verbose
      output,  regardless of the subcommand you use it
      with. The  svn  command-line client usually
      exits quickly with an error if you pass it an option which
      does not apply to the specified subcommand.  But as of
      Subversion 1.5, several of the options which apply to
      all or nearly all of the subcommands have been
      deemed acceptable by all subcommands, even if they have no
      effect on some of them.  (This change was made primarily to
      improve the client&#39;s ability to called from custom wrapping
      scripts.)  These options appear grouped together in the
      command-line client&#39;s usage messages as global options, as can
      be seen in the following bit of output: 
$ svn help upgrade
upgrade: Upgrade the metadata storage format for a working copy.
usage: upgrade [WCPATH...]

  Local modifications are preserved.

Valid options:
  -q [--quiet]             : print nothing, or only summary information

Global options:
  --username ARG           : specify a username ARG
  --password ARG           : specify a password ARG
  --no-auth-cache          : do not cache authentication tokens
  --non-interactive        : do no interactive prompting
  --trust-server-cert      : accept SSL server certificates from unknown
                             certificate authorities without prompting (but only
                             with &#39;--non-interactive&#39;)
  --config-dir ARG         : read user configuration files from directory ARG
  --config-option ARG      : set user configuration option in the format:
                                 FILE:SECTION:OPTION=[VALUE]
                             For example:
                                 servers:global:http-library=serf
$
 svn  subcommands recognize the following
      options: svn Options --accept ACTION Specifies an action for automatic conflict
            resolution, disabling the interactive prompts which ask
            the user how to handle each conflict as it is noticed.
            Though which of the specific actions are applicable
            differs depending on which subcommand is in use,
            Subversion supports the following long (and short)
            values for  ACTION : postpone 
                ( p ) Take no resolution action at all and instead
                  allow the conflicts to be recorded for future
                  resolution. edit 
                ( e ) Open each conflicted file in a text editor for
                  manual resolution of line-based conflicts. launch 
                ( l ) Launch an interactive merge conflict
                  resolution tool for each conflicted file. base Choose the file that was the (unmodified)
                   BASE  revision before you tried
                  to integrate changes from the server into
                  your working copy. working Assuming that you&#39;ve manually handled the
                  conflict resolution, choose the version of the file
                  as it currently stands in your working copy. mine-full 
                ( mf ) Resolve conflicted files by preserving all
                  local modifications and discarding all changes
                  fetched from the server during the operation which
                  caused the conflict. theirs-full 
                ( tf ) Resolve conflicted files by discarding all
                  local modifications and integrating all changes
                  fetched from the server during the operation which
                  caused the conflict. mine-conflict 
                ( mc ) Resolve conflicted files by preferring local
                  modifications over the changes fetched from the
                  server in conflicting regions of each file&#39;s
                  content. theirs-conflict 
                ( tc ) Resolve conflicted files by preferring the
                  changes fetched from the server over local
                  modifications in conflicting regions of each file&#39;s
                  content. Consult the output of  svn help
             SUBCOMMAND  to see
            exactly which actions are supported by the specific
            subcommand of interest. --allow-mixed-revisions Disables the verification performed by default
            by  svn merge  as of Subversion
            1.7 that the target of a merge operation and all
            of its children are at a uniform revision.  While
            merging into a single-revision working copy target is
            the recommended best practice, this option may be used
            to permit merges into mixed-revision working copies as
            necessary. --auto-props Enables automatic property assignment (per runtime
            configuration rules), overriding the
             enable-auto-props  runtime
            configuration directive. --change  ( -c )  ARG Perform the requested operation using a specific
             change .  Generally speaking, this option
            is syntactic sugar for  -r
             ARG-1 : ARG .
            Some subcommands permit a comma-separated list of
            revision number arguments (e.g.,  -c
             ARG1 , ARG2 , ARG3 ).
            Alternatively, you can provide two arguments separated
            by a dash (as
            in  -c  ARG1 - ARG2 )
            to identify the range of revisions
            between  ARG1 
            and  ARG2 , inclusive.
            Finally, if the revision argument is negated, the
            implied revision range is reversed:  -c
            -45  is equivalent to  -r
            45:44 . --changelist  ( --cl )  ARG Instructs Subversion to operate only on members of the changelist named
             ARG .  You can use this option
            multiple times to specify sets of changelists. --config-dir DIR Instructs Subversion to read configuration
            information from the specified directory instead of the
            default location ( .subversion  in
            the user&#39;s home directory). This option is accepted by
              all  svn  subcommands. --config-option CONFSPEC Sets, for the duration of the command, the value of
            a runtime configuration
            option.   CONFSPEC  is a string
            which specifies the configuration option namespace, name
            and value that you&#39;d like to assign, formatted as
             FILE : SECTION : OPTION =[ VALUE ].
            In this syntax,  FILE 
            and  SECTION  are the runtime
            configuration file (either  config 
            or  servers ) and the section thereof,
            respectively, which contain the option whose value you
            wish to change.   OPTION  is,
            of course, the option itself,
            and  VALUE  the value (if any)
            you wish to assign to the option.  For example, to
            temporarily disable the use of the automatic property
            setting feature,
            use  --config-option=config:miscellany:enable-auto-props=no .
            You can use this option multiple times to change
            multiple option values simultaneously. This option is accepted by
              all  svn  subcommands. --depth ARG Instructs Subversion to limit the scope of an
            operation to a particular tree
            depth.   ARG  is one of
             empty  (only the target
            itself),  files  (the target and any
            immediate file children thereof),
             immediates  (the target and any
            immediate children thereof), or
             infinity  (the target and all of its
            descendants full recursion). --diff Enables a special output mode for  svn
            log  which includes a difference report (a
            la  svn diff ) as part of each
            revision&#39;s information. --diff-cmd CMD Specifies an external program to use to show
            differences between files.  When  svn
            diff  is invoked without this option, it uses
            Subversion&#39;s internal differencing engine, which provides
            unified diffs by default.  If you want to use an
            external differencing program, use  --diff-cmd .
            You can then pass options to the specified program using the
             --extensions  ( -x )
            option. --diff3-cmd CMD Specifies an external 3-way differencing program
            (used to merge line-based changes into files). --dry-run Goes through all the motions of running a command,
            but makes no actual changes either on disk or in
            the repository. --editor-cmd CMD Specifies an external program to use to edit a log message
            or a property value.  See the  editor-cmd 
            section in  
            for ways to specify a default editor. --encoding ENC Tells Subversion that your commit message is
            composed using the character encoding provided.  The
            default character encoding is derived from your
            operating system&#39;s native locale; use this option if
            your commit message is composed using any other
            encoding. --extensions  ( -x )  ARG Specifies customizations which Subversion should
            make when performing difference calculations.  Valid
            extensions include: --ignore-space-change  ( -b ) Ignore changes in the amount of white space. --ignore-all-space  ( -w ) Ignore all white space. --ignore-eol-style Ignore changes in EOL (end-of-line) style. --show-c-function  ( -p ) Show C function names in the diff output. --unified  ( -u ) Show three lines of unified diff context. The default value of  ARG 
            is  -u .  If you wish to pass multiple
            arguments, you must enclose all of them in quotes. Note that when Subversion is configured to invoke an
            external diff command, the value of
            the  --extension  ( -x )
            option isn&#39;t restricted to the previously mentioned
            options, but may be  any  additional
            arguments which Subversion should pass to that command. --file  ( -F )  FILENAME Uses the contents of the named file for the
            specified subcommand.  Different subcommands do
            different things with this content.  For example,
             svn commit  uses the content as a
            commit log message, whereas  svn
            propset  uses it as a property value. --force Forces a particular command or operation to run.
            Subversion will prevent you from performing some
            operations in normal usage, but you can pass this option
            to tell Subversion  I know what I&#39;m doing as well
            as the possible repercussions of doing it, so let me at
            &#39;em.  This option is the programmatic equivalent
            of doing your own electrical work with the power
            on if you don&#39;t know what you&#39;re doing, you&#39;re
            likely to get a nasty shock. --force-log Forces a suspicious parameter passed to the
             --message  ( -m ) or
             --file  ( -F ) option to
            be accepted as valid.  By default, Subversion will
            produce an error if parameters to these options look
            like they might instead be targets of the subcommand.
            For example, if you pass a versioned file&#39;s path to the
             --file  ( -F ) option,
            Subversion will assume you&#39;ve made a mistake, that the
            path was instead intended as the target of the
            operation, and that you simply failed to provide some
            other unversioned file as the source of your
            log message.  To assert your intent and override these
            types of errors, pass the  --force-log 
            option to subcommands that accept log messages. --git Enables a special output mode for  svn
            diff  designed for cross-compatibility with the
            popular Git distributed version control system. --help  ( -h ,  -? ) If used with one or more subcommands, shows the
            built-in help text for each.  If used alone, it displays
            the general client help text. --ignore-ancestry Tells Subversion to ignore ancestry when calculating
            differences (rely on path contents alone).  Also disables
             
            when used with the  svn merge  subcommand.
         --ignore-externals Tells Subversion to ignore externals definitions and
            the external working copies managed by them. --ignore-keywords Disables keyword expansion. --ignore-whitespace Instructs  svn patch  to ignore
            whitespace when attempting to identify patch
            context. --incremental Prints output in a format suitable for
            concatenation to prior similar output. --internal-diff Instructs Subversion to use its built-in
            differencing engine despite any external differencing
            mechanism that may be specified for use in the user&#39;s
            runtime configuration. --keep-changelists Tells Subversion not to remove the changelist assigments
            from working copy items after committing. --keep-local Keeps the local copy of a file or directory (used
            with the  svn delete  command). --limit  ( -l )  NUM Shows only the first  NUM 
            log messages. --message  ( -m )  MESSAGE Indicates that you will specify either a log message
            or a lock comment on the command line, following this
            option.  For example: 
$ svn commit -m &quot;They don&#39;t make Sunday.&quot;
 --native-eol ARG Causes  svn export  to use a
            specific end-of-line sequence as if it was the native
            sequence for the client platform.
             ARG  may be one
            of  CR ,  LF ,
            or  CRLF . --new ARG Uses  ARG  as the newer
            target (for use with  svn diff ). --no-auth-cache Prevents caching of authentication information
            (e.g., username and password) in the Subversion runtime
            configuration directories. This option is accepted by
              all  svn  subcommands. --no-auto-props Disables automatic property setting, overriding the
             enable-auto-props  runtime
            configuration directive. --no-diff-deleted Prevents Subversion from printing differences for
            deleted files.  The default behavior when you remove a
            file is for  svn diff  to print the
            same differences that you would see if you had kept
            the file but removed all of its content. --no-ignore Shows files in the status listing or adds/imports files
            that would normally be omitted since they match a pattern
            in the  global-ignores  configuration
            option or the  svn:ignore  or
             svn:global-ignores properties.  See   and   for more
            information. --no-unlock Tells Subversion not to automatically unlock files.
            (The default commit behavior is to unlock all files
            listed as part of the commit.)  See
              for more
            information. --non-interactive Disables all interactive prompting.  Some examples
            of interactive prompting include requests for
            authentication credentials and conflict resolution
            decisions.  This is useful if you&#39;re running Subversion
            inside an automated script and it&#39;s more appropriate to
            have Subversion fail than to prompt for more
            information. This option is accepted by
              all  svn  subcommands. --non-recursive  ( -N ) Deprecated .  Stops a subcommand
            from recursing into subdirectories.  Most subcommands
            recurse by default, but some do not.  Users should avoid
            this option and use the more precise  --depth 
            option instead.  For most subcommands, specifying
             --non-recursive  produces behavior which
            is the same as if you&#39;d specified
             --depth=files , but there are exceptions:
            non-recursive  svn status  operates at the
             immediates  depth, and the  non-recursive
            forms of  svn revert ,
             svn add , and  svn commit 
            operate at an  empty  depth. --notice-ancestry Pays attention to ancestry when calculating 
            differences. --old ARG Uses  ARG  as the older
            target (for use with  svn diff ). --parents Creates and adds nonexistent or nonversioned parent
            subdirectories to the working copy or repository as part
            of an operation.  This is useful for automatically
            creating multiple subdirectories where none currently
            exist.  If performed on a URL, all the directories will
            be created in a single commit. --password PASSWD Specifies the password to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. This option is accepted by
              all  svn  subcommands. --quiet  ( -q ) Requests that the client print only essential
            information while performing an operation. --record-only Enables a special mode of  svn
          merge  in which the specified merge operation is
          recorded in the local merge tracking information, but is
          not actually performed. --recursive  ( -R ) Makes a subcommand recurse into subdirectories.
            (Most subcommands recurse by default.) --reintegrate Deprecated.  Used with the  svn merge 
            subcommand to merge changes from a feature branch back into
            the feature branch&#39;s ancestor branch.  Since Subversion 1.8
            the  svn merge  subcommand automatically
            detects this scenario and performs the appropriate merge.
            See
             
            for details. --relocate Deprecated.  When used with the  svn
            switch  subcommand, changes the location of the
            repository that your working copy references.  The
            preferred approach as of Subversion 1.7, however, is to
            use the  svn relocate  subcommand.  See
              for more
            details and an example. --remove Used with  svn changelist  to
            disassociate rather than associate (which is the
            default operation) the target(s) from a
            changelist. --reverse-diff Causes  svn patch  to interpret the
            input patch instructions in reverse treating added
            lines as removed ones and vice-versa. --revision  ( -r )  REV Specifies a revision (or range of revisions) on with
            which to operate.  You can provide revision numbers,
            keywords, or dates (in curly braces) as arguments to the
            revision option.  If you wish to offer a range of
            revisions, you can provide two revisions separated by a
            colon.  For example: 
$ svn log -r 1729
$ svn log -r 1729:HEAD
$ svn log -r 1729:1744
$ svn log -r {2001-12-04}:{2002-02-17}
$ svn log -r 1729:{2002-02-17}
 See   for more
            information. --revprop Operates on a revision property instead of a
            property specific to a file or directory.  This option
            requires that you also pass a revision with the
             --revision  ( -r )
            option. --search ARG Filters log messages to show only those that match
            the search pattern  ARG .  Log
            messages are displayed only if the provided search
            pattern matches any of the author, date, log message
            text (unless  --quiet  is used), or, if
            the  --verbose  option is also provided,
            a changed path.  If multiple  --search 
            options are provided, a log message is shown if it
            matches any of the provided search patterns.  If
             --limit  is used, it restricts the
            number of log messages searched, rather than
            restricting the output to a particular number of
            matching log messages. The search pattern may include &quot;glob syntax&quot;
            wildcards: ? Matches any single character. * Matches a sequence of arbitrary characters. [ABC] Matches any of the characters listed inside the
                  brackets. --search-and ARG The option&#39;s argument is combined with the pattern from
            the previous  --search 
            or  --search-and  option on the command
            line.  Log message is shown only if it matches the
            combined search pattern. --set-depth ARG Sets the sticky depth on a directory in a working copy
            to one of  exclude ,  empty ,
             files ,  immediates ,
            or  infinity .  For detailed coverage
            of what these mean and how to use this option, see
             . --show-copies-as-adds Enables a special output mode for  svn
            diff  in which the content difference for a
            file created via a copy operation appears as it would
            for a brand new file (with each line therein appearing
            as an addition to an empty file) rather than as a delta
            against the original file from which the copy was
            created. --show-inherited-props Causes  svn propget  and  
            svn proplist  to display the versioned properties
            inherited by the target file or directory. --show-revs ARG Used to make  svn mergeinfo 
            display certain classes of merge tracking
            information.   ARG  may be
            either  merged 
            or  eligible , indicating a desire to
            see revisions either already merged or eligible for future
            merge from the specified source URL, respectively. --show-updates  ( -u ) Causes the client to display information about
            which files in your working copy are out of date.
            This doesn&#39;t actually update any of your
            files it just shows you which files will be
            updated if you then use  svn update . --stop-on-copy Causes a Subversion subcommand that traverses
            the history of a versioned resource to stop harvesting
            that historical information when a copy that is, a
            location in history where that resource was copied from
            another location in the repository is
            encountered. --strict Causes Subversion to use strict semantics, a notion
            that is rather vague unless talking about specific
            subcommands (namely,  svn propget ). --strip NUM Used by  svn patch  to
            ignore  NUM  leading path
            components found on paths specified in the patch input
            file. --summarize Display only high-level summary notifications about
            the operation instead of its detailed output. --targets FILENAME Tells Subversion to read additional target paths for
            the operation from  FILENAME .
             FILENAME  should contain one
            path per line, with each path expected to use the same
            encoding and formatting that it would if you had
            specified it directly as an argument on the command
            line. --trust-server-cert When used with  --non-interactive ,
            instructs Subversion to accept SSL server certificates
            issued by unknown certificate authorities without first
            prompting the user.  For security&#39;s sake, you should use
            this option only when the integrity of the remote server
            and the network path between it and your client is known
            to be trustworthy. This option is accepted by
              all  svn  subcommands. --use-merge-history  ( -g ) Uses or displays additional information from merge
            history. --username NAME Specifies the username to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. This option is accepted by
              all  svn  subcommands. --verbose  ( -v ) Requests that the client print out as much
            information as it can while running any subcommand.
            This may result in Subversion printing out additional
            fields, detailed information about every file, or
            additional information regarding its actions. --version Prints the client version info.  This information
            includes not only the version number of the client, but
            also a listing of all repository access modules that the
            client can use to access a Subversion repository.
            With  --quiet  ( -q ) it
            prints only the version number in a compact form. --with-all-revprops Used with the  --xml  option
          to  svn log , instructs Subversion to
          retrieve and display all revision properties the
          standard ones used internally by Subversion as well as any
          user-defined ones in the log output. --with-no-revprops Used with the  --xml  option
          to  svn log , instructs Subversion to
          omit all revision properties including the standard
          log message, author, and revision datestamp from the
          log output. --with-revprop ARG When used with any command that writes to the
            repository, sets the revision property, using the
             NAME=VALUE  format,
             NAME  to
             VALUE .  When used with
             svn log  in  --xml  mode, this displays the value of
             ARG  in the log output. --xml Prints output in XML format.  XML schemas for the
            output (in RELAX NG format) are maintained in
            the  subversion/svn/schema/ 
            directory of the Subversion source tree. svn subcommands add svn add Add files, directories, or symbolic links. svn add PATH... Description Schedule files, directories, or symbolic links in your
        working copy for addition to the repository.  They will be
        uploaded and added to the repository on your next commit.
        If you add something and change your mind before
        committing, you can unschedule the addition using
         svn revert . Options Examples To add a file to your working copy: 
$ svn add foo.c 
A         foo.c
 When adding a directory, the default behavior of
         svn add  is to recurse: 
$ svn add testdir
A         testdir
A         testdir/a
A         testdir/b
A         testdir/c
A         testdir/d
 You can add a directory without adding its
        contents: 
$ svn add --depth=empty otherdir
A         otherdir
 Attempts to schedule the addition of an item which is
        already versioned will fail by default.  This behavior
        foils the most common scenario under which users attempt
        this: when trying to get to Subversion to recursively
        examine a versioned directory and add any unversioned
        items inside of it.  To override the default behavior and
        force Subversion to recurse into already-versioned
        directories, pass the  --force 
        option: 
$ svn add versioned-dir
svn: warning: W150002: &#39;/home/cmpilato/projects/subversion/site&#39; is already un\
der version control
$ svn add versioned-dir --force
A         versioned-dir/foo.c
A         versioned-dir/somedir/bar.c
A  (bin)  versioned-dir/otherdir/docs/baz.doc
 
 svn subcommands blame svn blame (praise, annotate, ann) Show author and revision information inline
        for the specified files or URLs. svn blame TARGET[@REV]... Description Show author and revision information inline for the
        specified files or URLs.  Each line of text is annotated
        at the beginning with the author (username) and the
        revision number for the last change to that line. Options Examples If you want to see blame-annotated source for
         readme.txt  in your test
        repository: 
$ svn blame http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     5      harry Don&#39;t bother reading it.  The boss is a knucklehead.
     3      sally 
 
 Now, just because  svn blame  says
        that Harry last modified  readme.txt 
        in revision 5, understand that this subcommand is by
        default very picky about what constitutes a change.
        Before clubbing Harry over the head for what appears to be
        insubordination, first consider that perhaps the change he
        made to the file might have been only to its specific
        character content, not to its overall semantic meaning.
        Perhaps his changes were the result of blindly running a
        whitespace cleanup script on this file.  You might need
        to examine the specific differences and related log
        message to understand exactly what Harry did to this file
        in revision 5. 
$ svn log -c 5 http://svn.red-bean.com/repos/test/readme.txt
------------------------------------------------------------------------
r5 | harry | 2008-05-29 07:26:12 -0600 (Thu, 29 May 2008) | 1 line

Commit the results of &#39;double-space-after-period.sh&#39;.

------------------------------------------------------------------------
$ svn diff -c 5 http://svn.red-bean.com/repos/test/readme.txt
Index: http://svn.red-bean.com/repos/test/readme.txt
===================================================================
--- http://svn.red-bean.com/repos/test/readme.txt    (revision 4)
+++ http://svn.red-bean.com/repos/test/readme.txt    (revision 5)
@@ -1,5 +1,5 @@
 This is a README file.
-Don&#39;t bother reading it. The boss is a knucklehead.
+Don&#39;t bother reading it.  The boss is a knucklehead.
  
 INSTRUCTIONS
 ============
$
 Sure enough, Harry only changed the whitespace in that
        line.  Fortunately, the  --extensions 
        ( -x ) option can help you better determine
        the last time that a  meaningful 
        change was made to a given line of text.  For example,
        here&#39;s how you can see the annotation information while
        disregarding mere whitespace changes: 
$ svn blame -x -b http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     4       jess Don&#39;t bother reading it.  The boss is a knucklehead.
     3      sally 
 
 If you use the  --xml  option, you can
        get XML output describing the blame annotations, but not
        the contents of the lines themselves: 
$ svn blame --xml http://svn.red-bean.com/repos/test/readme.txt
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;blame&gt;
&lt;target
   path=&quot;readme.txt&quot;&gt;
&lt;entry
   line-number=&quot;1&quot;&gt;
&lt;commit
   revision=&quot;3&quot;&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-25T19:12:31.428953Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;entry
   line-number=&quot;2&quot;&gt;
&lt;commit
   revision=&quot;5&quot;&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-05-29T13:26:12.293121Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;entry
   line-number=&quot;3&quot;&gt;
 
&lt;/entry&gt;
&lt;/target&gt;
&lt;/blame&gt;
$
 svn subcommands cat svn cat Output the contents of the specified files or
        URLs. svn cat TARGET[@REV]... Description Output the contents of the specified files or URLs.
        For listing the contents of directories, see  svn
        list  later in this chapter. Options Examples If you want to view  readme.txt  in
        your repository without checking it out: 
$ svn cat http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
Don&#39;t bother reading it.  The boss is a knucklehead.
 
INSTRUCTIONS
============

Step 1:  Do this.

Step 2:  Do that.
$
 You can view specific versions of files, too. 
$ svn cat -r 3 http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
 
INSTRUCTIONS
============

Step 1:  Do this.

Step 2:  Do that.
$
 You might develop a reflex action of
          using  svn cat  to view your working
          file contents.  But keep in mind that the default peg
          revision for  svn cat  when used on a
          working copy file target is  BASE , the
          unmodified base revision of that file.  Don&#39;t be
          surprised when a simple  svn cat
          /path/to/file  invocation fails to display
          your local modifications to that file! If your working copy is out of date (or you have
          local modifications) and you want to see the
           HEAD  revision of a file in your
          working copy, use the  --revision 
          ( -r ) option:   svn cat -r
          HEAD  FILENAME svn subcommands changelist svn changelist (cl) Associate (or deassociate) local paths with a
        changelist. changelist CLNAME TARGET... changelist --remove TARGET... Description Used for dividing files in a working copy into a
        changelist (logical named grouping) in order to allow
        users to easily work on multiple file collections within a
        single working copy. Options Example Edit three files, add them to a changelist, then
        commit only files in that changelist: 
$ svn changelist issue1729 foo.c bar.c baz.c
A [issue1729] foo.c
A [issue1729] bar.c
A [issue1729] baz.c
$ svn status
A       someotherfile.c
A       test/sometest.c

--- Changelist &#39;issue1729&#39;:
A       foo.c
A       bar.c
A       baz.c
$ svn commit --changelist issue1729 -m &quot;Fixing Issue 1729.&quot;
Adding         bar.c
Adding         baz.c
Adding         foo.c
Transmitting file data ...
Committed revision 2.
$ svn status
A       someotherfile.c
A       test/sometest.c
$
 Note that in the previous example, only the files in
        changelist  issue1729  were
        committed. svn subcommands checkout svn checkout (co) Check out a working copy from a repository. svn checkout URL[@REV]... [PATH] Description Check out a working copy from a repository.  If
         PATH  is omitted, the
        basename of the URL will be used as the destination.
        If multiple URLs are given, each will be checked out into a
        subdirectory of  PATH , with the
        name of the subdirectory being the basename of the
        URL. Options Examples Check out a working copy into a directory called
         mine : 
$ svn checkout file:///var/svn/repos/test mine
A    mine/a
A    mine/b
A    mine/c
A    mine/d
Checked out revision 20.
$ ls
mine
$
 Check out two different directories into two separate
        working copies: 
$ svn checkout file:///var/svn/repos/test \
               file:///var/svn/repos/quiz
A    test/a
A    test/b
A    test/c
A    test/d
Checked out revision 20.
A    quiz/l
A    quiz/m
Checked out revision 13.
$ ls
quiz  test
$
 Check out two different directories into two separate
        working copies, but place both into a directory called
         working-copies : 
$ svn checkout file:///var/svn/repos/test \
               file:///var/svn/repos/quiz \
               working-copies
A    working-copies/test/a
A    working-copies/test/b
A    working-copies/test/c
A    working-copies/test/d
Checked out revision 20.
A    working-copies/quiz/l
A    working-copies/quiz/m
Checked out revision 13.
$ ls
working-copies
 If you interrupt a checkout (or something else
        interrupts your checkout, such as loss of connectivity,
        etc.), you can restart it either by issuing the identical
        checkout command again or by updating the incomplete
        working copy: 
$ svn checkout file:///var/svn/repos/test mine
A    mine/a
A    mine/b
^C
svn: E200015: Caught signal
$ svn checkout file:///var/svn/repos/test mine
A    mine/c
^C
svn: E200015: Caught signal
$ svn update mine
Updating &#39;mine&#39;:
A    mine/d
Updated to revision 20.
$
 If you wish to check out some revision other than the
        most recent one, you can do so by providing the
         --revision  ( -r ) option
        to the  svn checkout  command: 
$ svn checkout -r 2 file:///var/svn/repos/test mine
A    mine/a
Checked out revision 2.
$
 Prior to version 1.7, Subversion would complain by
        default if you try to check out a directory atop an
        existing directory which contains files or subdirectories
        that the checkout itself would have created.  Subversion
        1.7 handles this situation differently, allowing the
        checkout to proceed but marking any obstructing objects as
        tree conflicts.  Use the  --force  option
        to override this safeguard.  When you check out with
        the  --force  option, any unversioned file
        in the checkout target tree which ordinarily would
        obstruct the checkout will still become versioned, but
        Subversion will preserve its contents as-is.  If those
        contents differ from the repository file at that path
        (which was downloaded as part of the checkout), the file
        will appear to have local modifications the changes
        required to transform the versioned file you checked out
        into the unversioned file you had before checking
        out when the checkout completes. 
$ mkdir project
$ mkdir project/lib
$ touch project/lib/file.c
$ svn checkout file:///var/svn/repos/project/trunk project --force
E    project/lib
A    project/lib/subdir
E    project/lib/file.c
A    project/lib/anotherfile.c
A    project/include/header.h
Checked out revision 21.
$ svn status wc
M       project/lib/file.c
$ svn diff wc
Index: project/lib/file.c
===================================================================
--- project/lib/file.c    (revision 1)
+++ project/lib/file.c    (working copy)
@@ -3 +0,0 @@
-/* file.c: Code for acting file-ishly. */
-#include &lt;stdio.h&gt;
-/* Not feeling particularly creative today. */

$
 As in another other working copy, you have the choices
        typically available:  reverting some or all of those
        local  modifications , committing them, or
        continuing to modify your working copy. This feature is especially useful for performing
        in-place imports of unversioned directory trees.  By first
        importing the tree into the repository, and then checking
        out new repository location atop the unversioned tree with
        the  --force  option, you effectively
        transform the unversioned tree into a working
        copy. 
$ svn mkdir -m &quot;Create newproject project root.&quot; \
      file://var/svn/repos/newproject
$ svn import -m &quot;Import initial newproject codebase.&quot; newproject \
      file://var/svn/repos/newproject/trunk
Adding         newproject/include
Adding         newproject/include/newproject.h
Adding         newproject/lib
Adding         newproject/lib/helpers.c
Adding         newproject/lib/base.c
Adding         newproject/notes
Adding         newproject/notes/README

Committed revision 22.
$ svn checkout file://`pwd`/repos-1.6/newproject/trunk newproject --force
E    newproject/include
E    newproject/include/newproject.h
E    newproject/lib
E    newproject/lib/helpers.c
E    newproject/lib/base.c
E    newproject/notes
E    newproject/notes/README
Checked out revision 2.
$ svn status newproject
$
 svn subcommands cleanup svn cleanup Recursively clean up the working copy svn cleanup [PATH...] Description Recursively clean up the working copy, removing
        working copy locks and resuming unfinished operations.  If
        you ever get a  working copy locked 
        error, run this command to remove stale locks and get your
        working copy into a usable state again. If, for some reason, an  svn update 
        fails due to a problem running an external diff program
        (e.g., user input or network failure), pass the
         --diff3-cmd  to allow the cleanup process
        to complete any required merging using your external diff
        program.  You can also specify any configuration directory
        with the  --config-dir  option, but you
        should need these options extremely infrequently. Options Examples Well, there&#39;s not much to the examples here, as
         svn cleanup  generates no output.  If
        you pass no  PATH , then
         .  is used: 
$ svn cleanup
$ svn cleanup /var/svn/working-copy
 svn subcommands commit svn commit (ci) Send changes from your working copy to the repository. svn commit [PATH...] Description Send changes from your working copy to the repository.
        If you do not supply a log message with your commit by
        using either the  --file 
        ( -F ) or  --message 
        ( -m ) option,
         svn  will launch your editor for you
        to compose a commit message.  See the
         editor-cmd  list entry in  . svn commit  will send any lock
        tokens that it finds and will release locks on all
         PATH s committed (recursively)
        unless  --no-unlock  is passed. If you begin a commit and Subversion launches your
          editor to compose the commit message, you can still
          abort without committing your changes.  If you want to
          cancel your commit, just quit your editor without saving
          your commit message and Subversion will prompt you to
          either abort the commit, continue with no message, or
          edit the message again. Options Examples Commit a simple modification to a file with the
        commit message on the command line and an implicit
        target of your current directory
        ( . ): 
$ svn commit -m &quot;added howto section.&quot;
Sending        a
Transmitting file data .
Committed revision 3.
 Commit a modification to the file
         foo.c  (explicitly specified on the
        command line) with the commit message in a file named
         msg : 
$ svn commit -F msg foo.c
Sending        foo.c
Transmitting file data .
Committed revision 5.
 If you want to use a file that&#39;s under version control
        for your commit message with  --file 
        ( -F ), you need to pass the
         --force-log  option: 
$ svn commit -F file_under_vc.txt foo.c
svn: E205004: Log message file is a versioned file; use &#39;--force-log&#39; to override

$ svn commit --force-log -F file_under_vc.txt foo.c
Sending        foo.c
Transmitting file data .
Committed revision 6.
 To commit a file scheduled for deletion: 
$ svn commit -m &quot;removed file &#39;c&#39;.&quot;
Deleting       c

Committed revision 7.
 svn subcommands copy svn copy (cp) Copy a file or directory in a working copy or
        in the repository. svn copy SRC[@REV]... DST Description Copy one or more files in a working copy or in the
        repository.  SRC  and
         DST  can each be either a
        working copy (WC) path or URL.  When copying multiple
        sources, add the copies as immediate children
        of  DST  (which, of course, must
        be a directory). WC   WC Copy and schedule an item for
                addition (with history). WC   URL Immediately commit a copy of WC to URL. URL   WC Check out URL into WC and schedule it for
                addition. URL   URL Complete server-side copy.  This is
                usually used to branch and tag. If no peg revision (i.e.,
         @REV ) is supplied, by default
        the  BASE  revision will be used for
        files copied from the working copy, while the
         HEAD  revision will be used for files
        copied from a URL. You can only copy files within a single repository.
          Subversion does not support cross-repository copying. Options Examples Copy an item within your working copy (this
        schedules the copy nothing goes into the repository
        until you commit): 
$ svn copy foo.txt bar.txt
A         bar.txt
$ svn status
A  +    bar.txt
 Copy several files in a working copy into a
        subdirectory: 
$ svn copy bat.c baz.c qux.c src
A         src/bat.c
A         src/baz.c
A         src/qux.c
 Copy revision 8 of  bat.c  into your
        working copy under a different name: 
$ svn copy -r 8 bat.c ya-old-bat.c
A         ya-old-bat.c
 Copy an item in your working copy to a URL in the
        repository (this is an immediate commit, so you must supply a
        commit message): 
$ svn copy near.txt file:///var/svn/repos/test/far-away.txt -m &quot;Remote copy.&quot;

Committed revision 8.
 Copy an item from the repository to your working
        copy (this just schedules the copy nothing goes into the
        repository until you commit): 
$ svn copy file:///var/svn/repos/test/far-away -r 6 near-here
A         near-here
 This is the recommended way to resurrect a dead
          file in your repository! And finally, copy between two URLs: 
$ svn copy file:///var/svn/repos/test/far-away \
           file:///var/svn/repos/test/over-there -m &quot;remote copy.&quot;

Committed revision 9.
 
$ svn copy file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease -m &quot;tag tree&quot;

Committed revision 12.
 This is the easiest way to  tag  a
          revision in your repository just  svn
          copy  that revision (usually
           HEAD ) into your  tags  directory. And don&#39;t worry if you forgot to tag you can
        always specify an older revision and tag anytime: 
$ svn copy -r 11 file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease \
           -m &quot;Forgot to tag at rev 11&quot;

Committed revision 13.
 svn subcommands delete svn delete (del, remove, rm) Delete an item from a working copy
        or the repository. svn delete PATH... svn delete URL... Description Items specified by  PATH  are
        scheduled for deletion upon the next commit.  Files (and
        directories that have not been committed) are immediately
        removed from the working copy unless the
         --keep-local  option is given.  The
        command will not remove any unversioned or modified items;
        use the  --force  option to override this
        behavior. Items specified by URL are deleted from
        the repository via an immediate commit.  Multiple URLs are
        committed atomically. Options Examples Using  svn  to delete a file from
        your working copy deletes your local copy of the file, but
        it merely schedules the file to be deleted from the
        repository.  When you commit, the file is deleted in the
        repository. 
$ svn delete myfile
D         myfile

$ svn commit -m &quot;Deleted file &#39;myfile&#39;.&quot;
Deleting       myfile
Transmitting file data .
Committed revision 14.
 Deleting a URL, however, is immediate, so you have
        to supply a log message: 
$ svn delete -m &quot;Deleting file &#39;yourfile&#39;&quot; \
             file:///var/svn/repos/test/yourfile

Committed revision 15.
 Here&#39;s an example of how to force deletion of a file
        that has local mods: 
$ svn delete over-there 
svn: E195006: Use --force to override this restriction (local modifications m\
ay be lost)
svn: E195006: &#39;/home/sally/project/over-there&#39; has local modifications -- com\
mit or revert them first
$ svn delete --force over-there 
D         over-there
$
 Use the  --keep-local  option to
        override the default  svn delete 
        behavior of also removing the target file that was
        scheduled for versioned deletion.  This is helpful when
        you realize that you&#39;ve accidentally committed the
        addition of a file that you need to keep around in your
        working copy, but which shouldn&#39;t have been added to
        version control. 
$ svn delete --keep-local conf/program.conf
D         conf/program.conf

$ svn commit -m &quot;Remove accidentally-added configuration file.&quot;
Deleting       conf/program.conf
Transmitting file data .
Committed revision 21.
$ svn status
?       conf/program.conf
$
 The behavior of the  --keep-local 
          option does not propagate to other working copies which
          contain the items you&#39;ve scheduled for deletion.  If you
          commit the deletion of those items they will remain in
          your working copy, but they will be deleted from other
          working copies which contain them when those working
          copies are then updated. svn subcommands diff svn diff (di) This displays the differences between two revisions or paths. diff [-c M | -r N[:M]] [TARGET[@REV]...] diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] [PATH...] diff OLD-URL[@OLDREV] NEW-URL[@NEWREV] Description Display the differences between two paths.  You can
        use  svn diff  in the following ways: Use just  svn diff  to display local
            modifications in a working copy. Display the changes made to
             TARGET s as they are seen in
             REV  between two revisions.
             TARGET s may be all working copy
            paths or all  URL s.  If
             TARGET s are working copy paths,
             N  defaults to
             BASE  and  M 
            to the working copy; if  TARGET s
            are  URL s,
             N  must be specified and
             M  defaults to
             HEAD .  The  -c M  option
            is equivalent to  -r N:M  where  N =
            M-1 .  Using  -c -M  does the
            reverse:  -r M:N  where  N =
            M-1 . Display the differences between
             OLD-TGT  as it was seen in
             OLDREV  and
             NEW-TGT  as it was seen in
             NEWREV .
             PATH s, if given, are relative
            to  OLD-TGT  and
             NEW-TGT  and restrict the output
            to differences for those paths.
             OLD-TGT  and
             NEW-TGT  may be working copy
            paths or  URL[@REV] .
             NEW-TGT  defaults to
             OLD-TGT  if not specified.
             -r N 
            makes  OLDREV  default to
             N ;  -r N:M 
            makes  OLDREV  default to
             N  and
             NEWREV  default to
             M . svn diff OLD-URL[@OLDREV]
        NEW-URL[@NEWREV]  is shorthand for  svn
        diff --old=OLD-URL[@OLDREV]
        --new=NEW-URL[@NEWREV]. svn diff -r N:M URL  is shorthand
        for  svn diff -r N:M --old=URL
        --new=URL . svn diff [-r N[:M]] URL1[@N]
        URL2[@M]  is shorthand for  svn diff [-r
        N[:M]] --old=URL1 --new=URL2 . If  TARGET  is a URL, then
        revs  N  and  M  can be
        given either via the
         --revision  ( -r ) option
        or by using the
         @  notation as described earlier. If  TARGET  is a working copy
        path, the default behavior (when no
         --revision  ( -r ) option
        is provided) is to display the differences between the
        base and working copies
        of  TARGET .  If a
         --revision  ( -r ) option
        is specified in this scenario, though, it means: --revision N:M The server compares  TARGET@N 
              and  TARGET@M . --revision N The client compares
               TARGET@N 
              against the working copy. If the alternate syntax is used, the server compares
         URL1  and
         URL2  at revisions
         N  and
         M , respectively.  If either
         N  or
         M  is omitted, a value of
         HEAD  is assumed. By default,  svn diff  ignores the
        ancestry of files and merely compares the contents of the
        two files being compared.  If you use
         --notice-ancestry , the ancestry of the
        paths in question will be taken into consideration when
        comparing revisions (i.e., if you run  svn
        diff  on two files with identical contents but
        different ancestry, you will see the entire contents of
        the file as having been removed and added again). Options Examples Compare  BASE  and your working copy
        (one of the most popular uses of  svn
        diff ): 
$ svn diff COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 4404)
+++ COMMITTERS    (working copy)
 
 See what changed in the file
         COMMITTERS  revision 9115: 
$ svn diff -c 9115 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 3900)
+++ COMMITTERS    (working copy)
 
 See how your working copy&#39;s modifications compare
        against an older revision: 
$ svn diff -r 3900 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 3900)
+++ COMMITTERS    (working copy)
 
 Compare revision 3000 to revision 3500 using  @ 
        syntax: 
$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 \
           http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 3000)
+++ COMMITTERS    (revision 3500)
 
 Compare revision 3000 to revision 3500 using range
        notation (pass only the one URL in this
        case): 
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 3000)
+++ COMMITTERS    (revision 3500)
 
 Compare revision 3000 to revision 3500 of all the files in
         trunk  using range notation: 
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk
 Compare revision 3000 to revision 3500 of only three
        files in  trunk  using range
        notation: 
$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk \
       COMMITTERS README HACKING
 If you have a working copy, you can obtain the
        differences without typing in the long URLs: 
$ svn diff -r 3000:3500 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS    (revision 3000)
+++ COMMITTERS    (revision 3500)
 
 Use  --diff-cmd 
         CMD   --extensions 
        ( -x ) to pass arguments directly to the
        external diff program: 
$ svn diff --diff-cmd /usr/bin/diff -x &quot;-i -b&quot; COMMITTERS 
Index: COMMITTERS
===================================================================
0a1,2
&gt; This is a test
&gt; 
$
 Lastly, you can use the  --xml  option
        along with the  --summarize  option to view
        XML describing the changes that occurred between
        revisions, but not the contents of the diff itself: 
$ svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 \
           http://svn.red-bean.com/repos/test
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;diff&gt;
&lt;paths&gt;
&lt;path
   props=&quot;none&quot;
   kind=&quot;file&quot;
   item=&quot;modified&quot;&gt;http://svn.red-bean.com/repos/test/sandwich.txt&lt;/path&gt;
&lt;path
   props=&quot;none&quot;
   kind=&quot;file&quot;
   item=&quot;deleted&quot;&gt;http://svn.red-bean.com/repos/test/burrito.txt&lt;/path&gt;
&lt;path
   props=&quot;none&quot;
   kind=&quot;dir&quot;
   item=&quot;added&quot;&gt;http://svn.red-bean.com/repos/test/snacks&lt;/path&gt;
&lt;/paths&gt;
&lt;/diff&gt;
 svn subcommands export svn export Export a clean directory tree. svn export [-r REV] URL[@PEGREV] [PATH] svn export [-r REV] PATH1[@PEGREV] [PATH2] Description The first form exports a clean directory tree from the
        repository specified by  URL at revision
         REV  if it is given; otherwise,
        at  HEAD , into
         PATH .  If
         PATH  is omitted, the last
        component of the  URL  is used
        for the local directory name. The second form exports a clean directory tree from
        the working copy specified by
         PATH1  into
         PATH2 .  All local changes will
        be preserved, but files not under version control will not
        be copied. Options Examples Export from your working copy (doesn&#39;t print every
        file and directory): 
$ svn export a-wc my-export
Export complete.
 Export directly from the repository (prints every
        file and directory): 
$ svn export file:///var/svn/repos my-export
A    my-export/test
A    my-export/quiz
 
Exported revision 15.
 When rolling operating-system-specific release
        packages, it can be useful to export a tree that uses a
        specific EOL character for line endings.  The
         --native-eol  option will do this, but it
        affects only files that have  svn:eol-style =
        native  properties attached to them.  For
        example, to export a tree with all CRLF line endings
        (possibly for a Windows  .zip  file
        distribution): 
$ svn export file:///var/svn/repos my-export --native-eol CRLF
A    my-export/test
A    my-export/quiz
 
Exported revision 15.
 You can specify  LR ,
         CR , or  CRLF  as a
        line-ending type with the  --native-eol 
        option. svn subcommands help svn help (h, ?) Help! svn help [SUBCOMMAND...] Description This is your best friend when you&#39;re using
        Subversion and this book isn&#39;t within reach! Options None svn subcommands import svn import Commit an unversioned file or tree into the 
        repository. svn import [PATH] URL Description Recursively commit a copy of
         PATH  to
         URL .  If
         PATH  is omitted,
         .  is assumed.  Parent
        directories are created in the repository as necessary.
        Unversionable items such as device files and pipes are
        ignored even if  --force  is
        specified. Options Examples This imports the local directory
         myproj  into
         trunk/misc  in your repository.  The
        directory  trunk/misc  need not exist
        before you import into it svn
        import  will recursively create directories for
        you. 
$ svn import -m &quot;New import&quot; myproj \
             http://svn.red-bean.com/repos/trunk/misc
Adding         myproj/sample.txt
 
Transmitting file data .........
Committed revision 16.
 Be aware that this will  not 
        create a directory named  myproj  in
        the repository.  If that&#39;s what you want, simply add
         myproj  to the end of the URL: 
$ svn import -m &quot;New import&quot; myproj \
            http://svn.red-bean.com/repos/trunk/misc/myproj
Adding         myproj/sample.txt
 
Transmitting file data .........
Committed revision 16.
 After importing data, note that the original tree is
         not  under version control.  To start
        working, you still need to  svn checkout 
        a fresh working copy of the tree. svn subcommands info svn info Display information about a local or remote 
        item. svn info [TARGET[@REV]...] Description Print information about the working copy paths or URLs
        specified.  The information displayed for each path may
        include (as pertinent to the object at that path): information about the repository in which
          the object is versioned the most recent commit made to the
          specified version of the object any user-level locks held on the
          object local scheduling information (added,
          deleted, copied, etc.) local conflict information Options Examples svn info  will show you all the
        useful information that it has for items in your working
        copy.  It will show information for files: 
$ svn info foo.c
Path: foo.c
Name: foo.c
Working Copy Root Path: /home/sally/projects/test
URL: http://svn.red-bean.com/repos/test/foo.c
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 4417
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 20
Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)
Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)
Checksum: d6aeb60b0662ccceb6bce4bac344cb66
 It will also show information for directories: 
$ svn info vendors
Path: vendors
Working Copy Root Path: /home/sally/projects/test
URL: http://svn.red-bean.com/repos/test/vendors
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 19
Node Kind: directory
Schedule: normal
Last Changed Author: harry
Last Changed Rev: 19
Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)
 svn info  also acts on URLs (also
         note that the file  readme.doc  in
         this example is locked, so lock information is also
         provided): 
$ svn info http://svn.red-bean.com/repos/test/readme.doc
Path: readme.doc
Name: readme.doc
URL: http://svn.red-bean.com/repos/test/readme.doc
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 1
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 42
Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)
Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2
Lock Owner: harry
Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)
Lock Comment (1 line):
My test lock comment
 Lastly,  svn info  output is
         available in XML format by passing
         the  --xml  option: 
$ svn info --xml http://svn.red-bean.com/repos/test
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;info&gt;
&lt;entry
   kind=&quot;dir&quot;
   path=&quot;.&quot;
   revision=&quot;1&quot;&gt;
&lt;url&gt;http://svn.red-bean.com/repos/test&lt;/url&gt;
&lt;repository&gt;
&lt;root&gt;http://svn.red-bean.com/repos/test&lt;/root&gt;
&lt;uuid&gt;5e7d134a-54fb-0310-bd04-b611643e5c25&lt;/uuid&gt;
&lt;/repository&gt;
&lt;wc-info&gt;
&lt;schedule&gt;normal&lt;/schedule&gt;
&lt;depth&gt;infinity&lt;/depth&gt;
&lt;/wc-info&gt;
&lt;commit
   revision=&quot;1&quot;&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2003-01-15T23:35:12.847647Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;/info&gt;
 svn subcommands list svn list (ls) List directory entries in the repository. svn list [TARGET[@REV]...] Description List each  TARGET  file and
        the contents of each  TARGET 
        directory as they exist in the repository.  If
         TARGET  is a working copy path,
        the corresponding repository URL will be used. The default  TARGET  is
         . , meaning the
        repository URL of the current working copy
        directory. With  --verbose 
        ( -v ),  svn list  shows
        the following fields for each item: Revision number of the last
          commit Author of the last commit If locked, the letter  O  (see the preceding section on   for details). Size (in bytes) Date and time of the last
          commit With  --xml , output is in XML format
        (with a header and an enclosing document element unless
         --incremental  is also specified).  All of
        the information is present; the  --verbose 
        ( -v ) option is not accepted. Options Examples svn list  is most useful if you
        want to see what files a repository has without
        downloading a working copy: 
$ svn list http://svn.red-bean.com/repos/test/support
README.txt
INSTALL
examples/
 
 You can pass the  --verbose 
        ( -v ) option for additional information,
        rather like the Unix command
         ls -l : 
$ svn list -v file:///var/svn/repos
     16 sally         28361 Jan 16 23:18 README.txt
     27 sally             0 Jan 18 15:27 INSTALL
     24 harry               Jan 18 11:27 examples/
 You can also get  svn list  output in
        XML format with the  --xml  option: 
$ svn list --xml http://svn.red-bean.com/repos/test
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;lists&gt;
&lt;list
   path=&quot;http://svn.red-bean.com/repos/test&quot;&gt;
&lt;entry
   kind=&quot;dir&quot;&gt;
&lt;name&gt;examples&lt;/name&gt;
&lt;size&gt;0&lt;/size&gt;
&lt;commit
   revision=&quot;24&quot;&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-01-18T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
...
&lt;/list&gt;
&lt;/lists&gt;
 For further details, see the earlier section  . svn subcommands lock svn lock Lock working copy paths or URLs in the
          repository so that no other user can commit changes to
          them. svn lock TARGET... Description Lock each  TARGET .  If any
         TARGET  is already locked by
        another user, print a warning and continue locking the
        rest of the  TARGET s.  Use
         --force  to steal a lock from another user
        or working copy. Options Examples Lock two files in your working copy: 
$ svn lock tree.jpg house.jpg
&#39;tree.jpg&#39; locked by user &#39;harry&#39;.
&#39;house.jpg&#39; locked by user &#39;harry&#39;.
 Lock a file in your working copy that is currently
        locked by another user: 
$ svn lock tree.jpg
svn: warning: W160035: Path &#39;/tree.jpg is already locked by user &#39;sally&#39; in fi
lesystem &#39;/var/svn/repos/db&#39;
$ svn lock --force tree.jpg
&#39;tree.jpg&#39; locked by user &#39;harry&#39;.
 Lock a file without a working copy: 
$ svn lock http://svn.red-bean.com/repos/test/tree.jpg
&#39;tree.jpg&#39; locked by user &#39;harry&#39;.
 For further details, see  . svn subcommands log svn log Display commit log messages. svn log [PATH] svn log URL[@REV] [PATH...] Description Shows log messages from the repository.
        If no arguments are supplied,  svn
        log  shows the log messages for all files and
        directories inside (and including) the current working
        directory of your working copy.  You can refine the
        results by specifying a path, one or more revisions, or
        any combination of the two.  The default revision range
        for a local path is  BASE:1 . If you specify a URL alone, it prints log
        messages for everything the URL contains.  If you
        add paths past the URL, only messages for those paths
        under that URL will be printed.  The default revision range
        for a URL is  HEAD:1 . With  --verbose 
        ( -v ),  svn log  will
        also print all affected paths with each log message.
        With  --quiet 
        ( -q ),  svn log  will not
        print the log message body itself, this is compatible
        with  --verbose 
        ( -v ). Each log message is printed just once, even if more
        than one of the affected paths for that revision were
        explicitly requested.  Logs follow copy history by
        default.  Use  --stop-on-copy  to disable
        this behavior, which can be useful for determining branch
        points. Options Examples You can see the log messages for all the paths that
        changed in your working copy by running  svn
        log  from the top: 
$ svn log
------------------------------------------------------------------------
r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Tweak.
------------------------------------------------------------------------
r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines
 
 Examine all log messages for a particular file in
        your working copy: 
$ svn log foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
 
 If you don&#39;t have a working copy handy, you can log
        a URL: 
$ svn log http://svn.red-bean.com/repos/test/foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
 
 If you want several distinct paths underneath the
        same URL, you can use the  URL [PATH...] 
        syntax: 
$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
 
 The  --verbose  ( -v )
        option causes  svn log  to include
        information about the paths that were changed in each
        displayed revision.  These paths appear, one path per line
        of output, with action codes that indicate what type of
        change was made to the path. 
$ svn log -v http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line
Changed paths:
   M /foo.c

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line
Changed paths:
   A /bar.c

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
 
 svn log  uses just a handful of action codes,
        and they are similar to the
        ones the  svn update 
        command uses: A The item was added. D The item was deleted. M Properties or textual contents on the
            item were changed. R The item was replaced by a different one
            at the same location. In addition to the action codes which precede the
        changed paths,  svn log  with
        the  --verbose  ( -v )
        option will note whether a path was added or replaced as
        the result of a copy operation.  It does so by
        printing  (from
         COPY-FROM-PATH : COPY-FROM-REV ) 
        after such paths. When you&#39;re concatenating the results of multiple
        calls to the log command, you may want to use the
         --incremental  option.  svn
        log  normally prints out a dashed line at the
        beginning of a log message, after each subsequent log
        message, and following the final log message.  If you
        ran  svn log  on a range of two
        revisions, you would get this: 
$ svn log -r 14:15
------------------------------------------------------------------------
r14 |  

------------------------------------------------------------------------
r15 |  

------------------------------------------------------------------------
 However, if you wanted to gather two nonsequential log
        messages into a file, you might do something like
        this: 
$ svn log -r 14 &gt; mylog
$ svn log -r 19 &gt;&gt; mylog
$ svn log -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 |  

------------------------------------------------------------------------
------------------------------------------------------------------------
r19 |  

------------------------------------------------------------------------
------------------------------------------------------------------------
r27 |  

------------------------------------------------------------------------
 You can avoid the clutter of the double dashed lines
        in your output by using the  --incremental 
        option: 
$ svn log --incremental -r 14 &gt; mylog
$ svn log --incremental -r 19 &gt;&gt; mylog
$ svn log --incremental -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 |  

------------------------------------------------------------------------
r19 |  

------------------------------------------------------------------------
r27 |  
 The  --incremental  option provides
        similar output control when using the
         --xml  option: 
$ svn log --xml --incremental -r 1 sandwich.txt
&lt;logentry
   revision=&quot;1&quot;&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-06-03T06:35:53.048870Z&lt;/date&gt;
&lt;msg&gt;Initial Import.&lt;/msg&gt;
&lt;/logentry&gt;
 Sometimes when you run  svn log  on
          a specific path and a specific revision, you see no log
          information output at all, as in the following: 
$ svn log -r 20 http://svn.red-bean.com/untouched.txt
------------------------------------------------------------------------
 That just means the path wasn&#39;t modified in that
          revision.  To get log information for that revision,
          either run the log operation against the repository&#39;s
          root URL, or specify a path that you happen to know was
          changed in that revision: 
$ svn log -r 20 touched.txt 
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.
------------------------------------------------------------------------
 Beginning with Subversion 1.7, users can take
        advantage of a special output mode which combines the
        information from  svn log  with what you
        would see when running  svn diff  on the
        same targets for each revision of the log.  Simply
        invoke  svn log  with
        the  --diff  option to trigger this output
        mode. 
$ svn log -r 20 touched.txt --diff
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.

Index: touched.txt
===================================================================
--- touched.txt    (revision 19)
+++ touched.txt    (revision 20)
@@ -1 +1,2 @@
 This is the file &#39;touched.txt&#39;.
+We add such exciting text to files around here!
------------------------------------------------------------------------
$
 As with  svn diff , you may also make
        use of many of the various options which control the way
        the difference is generated,
        including  --depth ,  --diff-cmd ,
        and  --extensions 
        ( -x ). 
        Beginning with Subversion 1.8, users can filter  svn log 
        output using  --search  and  --search-and 
        options.  When using these options, a log message is shown only if a
        revision&#39;s author, date, log message text, or list of changed paths,
        matches a search pattern. Searching by changed patch requies
         --verbose  option, otherwise  svn log 
        does not show changed paths therefore they can&#39;t be filtered.
       
        The search pattern may include &quot;glob syntax&quot;
        wildcards:
       ? 
              Matches any single character.
             * 
              Matches a sequence of arbitrary
              characters.
             [ABC] 
              Matches any of the characters listed inside the brackets.
             
        Using multiple  --search  parameters will show log messages
        that match the pattern specified at least in one of the options.  For example:
       
$ svn log --search sally --search harry https://svn.red-bean.com/repos/test
------------------------------------------------------------------------
r1701 | sally | 2011-10-12 22:35:30 -0600 (Wed, 12 Oct 2011) | 1 line

Add a reminder.
------------------------------------------------------------------------
r1564 | harry | 2011-10-09 22:35:30 -0600 (Sun, 09 Oct 2011) | 1 line

Merge r1560 to the 1.0.x branch.
------------------------------------------------------------------------
$
         
        Using  --search  with  --search-and  options will show log messages
        that match the combined pattern from both options. For example:
       
$ svn log --verbose --search sally --search-and /foo/bar https://svn.red-bean.com/repos/test
------------------------------------------------------------------------
r1555 | sally | 2011-07-15 22:33:14 -0600 (Fri, 15 Jul 2011) | 1 line
Changed paths:
M /foo/bar/src.c

Typofix.
------------------------------------------------------------------------
r1530 | sally | 2011-07-13 07:24:11 -0600 (Wed, 13 Jul 2011) | 1 line
Changed paths:
M /foo/bar
M /foo/build

Fix up some svn:ignore properties.
------------------------------------------------------------------------
$
 --search  and  --search-and 
          options does not actually perform a search.  They just filter
          the  svn log  output to display only log
          messages that match the specified pattern.  Therefore, if
           --limit  is used, it restricts the number
          of log messages searched, rather than restricting the
          output to a particular number of matching log messages.
         svn subcommands merge svn merge Apply the differences between two sources to a
      working copy path. svn merge SOURCE[@REV] [TARGET_WCPATH] svn merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH] svn merge SOURCE1[@N] SOURCE2[@M] [TARGET_WCPATH] Description In all three forms
         TARGET_WCPATH  is
        the working copy path that will receive the differences. If
         TARGET_WCPATH  is omitted, the
        changes are applied to the current working directory,
        unless the sources have identical basenames that match a
        file within the current working directory.  In
        that case, the differences will be applied to that
        file. In the first two forms,  SOURCE 
        can be either a URL or a working copy path (in which case its
        corresponding URL is used). If the peg revision
         REV  is not specified, then
         HEAD  is assumed.  In the third form the
        same rules apply for
         SOURCE1 ,
         SOURCE2 ,
         M , and  N 
        with the only difference being that if either source is a
        working copy path, then the peg revisions
         must  be explicitly stated. Automatic Merges The first form is called an  automatic
            merge  and is used to perform  sync 
            and  reintegrate  merges.
             Sync  merges merge eligible changes to a
            branch ( TARGET_WCPATH ) from
            the branch&#39;s ancestor branch
            ( SOURCE ).
             Eligible  changes are defined as those that
            were not previously merged from
            ( SOURCE ) to
            ( TARGET_WCPATH ).  See
             .
             Reintegrate  merges merge changes from a
            feature branch ( SOURCE )
            back into the feature branch&#39;s ancestor branch
            ( TARGET_WCPATH ), see
             
            and
             .
             Cherrypick Merges The second form is called a  cherry-pick 
            merge and is used to merge an explicitly defined set of
            changes from one branch to another.
             SOURCE  in revision
             REV  is compared as it existed
            between revisions  N  and
             M  for each revision range
            provided.  See
              for more
            information. Multiple  -c  and/or
               -r  instances may be specified, and
              mixing of forward and reverse ranges is allowed 
              the ranges are internally compacted to their minimum
              representation before merging begins (which may result
              in a no-op merge or conflicts that cause the merge to
              stop before merging all of the requested revisions). 2-URL Merges In the third form, called a  2-URL Merge ,
            the difference between  SOURCE1 
            at revision  N  and
             SOURCE2  at revision
             M  is generated and applied to
             TARGET_WCPATH .  The revisions
            default to  HEAD  if omitted. If
         
        is active, then Subversion will internally track metadata
        (i.e. the  svn:mergeinfo  property) about
        merge operations when the two merge sources are ancestrally
        related if the first source is an ancestor of the
        second or vice versa this is guaranteed to be the case
        when performing automatic merges.  Subversion will also take
        preexisting merge metadata on the working copy target into
        account when determining what revisions to merge and in an
        effort to avoid repeat merges and needless conflicts it may
        only merge a subset of the requested ranges. Unlike  svn diff , the merge command
        takes the ancestry of a file into consideration when
        performing a merge operation. This is very important when
        you&#39;re merging changes from one branch into another and you&#39;ve
        renamed a file on one branch but not the other. The  --ignore-ancestry  option will cause
         
        to be disabled and makes merge act like
         svn diff , ignoring the ancestry of files
        when merging. Options Examples Reintegrate a branch back into the trunk assuming
        that you have an up-to-date working copy of the trunk (the
         --verbose  option prints additional
        information regarding what the merge is doing prior to
        actually applying any diff; useful in very large which
        might take a significant amount of time to complete): 
$ svn merge ^/branches/feature-branch-calc-enhancements trunk --verbose
checking branch relationship...
calculating automatic merge...
merging...
--- Merging r12 through r37 into &#39;trunk&#39;:
U    trunk/calc/brush.c
--- Recording mergeinfo for merge of r12 through r37 into &#39;trunk&#39;:
 U   trunk

$ # build, test, verify, ...

$ svn commit trunk -m &quot;Reintegrate the calc enhancements back to trunk!&quot;
Sending        trunk
Sending        trunk/calc/brush.c
Transmitting file data .
Committed revision 38.
 Cherry-pick merge a single change to a file: 
$ svn merge ^/trunk/calc/brush.c branches/1.x/calc/brush.c -c38
--- Merging r38 into &#39;branches/1.x/calc/brush.c&#39;:
U    branches/1.x/calc/brush.c
--- Recording mergeinfo for merge of r38 into &#39;branches/1.x/calc/brush.c&#39;:
 G   branches/1.x/calc/brush.c
 Merge the differences between two unrelated branches
      into a third branch: 
$ svn merge ^/vendor-drop/vendor-1.0 ^/vendor-drop/vendor-1.1 \
            trunk --ignore-ancestry
--- Merging differences between repository URLs into &#39;trunk&#39;:
U    trunk/draw/draw.py
 svn subcommands mergeinfo svn mergeinfo Query merge-related information.  See   for
        details. svn mergeinfo SOURCE_URL[@REV] [TARGET[@REV]] Description Query information related to merges (or potential
        merges) between  SOURCE-URL  and
         TARGET .  If
        the  --show-revs  option is not provided,
        display a graphical representation of revisions which have
        been fully merged from  SOURCE-URL 
        to  TARGET .  Otherwise, list
        either the  merged 
        or  eligible  revisions as specified by
        the  --show-revs  option. Options Examples Graphical summary of the merges from one branch to
        another: 
$ svn mergeinfo ^/trunk feature-branch
    youngest  last               repos.
    common    full     tip of    path of
    ancestor  merge    branch    branch

    11        16       33
    |         |        |
  -------| |------------         trunk
     \         \
      \         \
       --| |------------         feature-branch
                       |
                       33
 List the operative revisions merged from one branch to
        another: 
$ svn mergeinfo ^/trunk feature-branch --show-revs merged
r15
r16
 List the operative revisions eligible to be merged from
        one branch to another: 
$ svn mergeinfo ^/trunk feature-branch --show-revs eligible
r28
r30
 svn subcommands mkdir svn mkdir Create a new directory under version control. svn mkdir PATH... svn mkdir URL... Description Create a directory with a name given by the final
        component of the  PATH  or  URL .
        A directory specified by a working copy
         PATH  is scheduled for addition
        in the working copy.  A directory specified by a URL is
        created in the repository via an immediate commit.
        Multiple directory URLs are committed atomically.  In both
        cases, all the intermediate directories must already exist
        unless the  --parents  option is
        used. Options Examples Create a directory in your working copy: 
$ svn mkdir newdir
A         newdir
 Create one in the repository (this is an instant commit, so a
        log message is required): 
$ svn mkdir -m &quot;Making a new dir.&quot; http://svn.red-bean.com/repos/newdir

Committed revision 26.
 svn subcommands move svn move (mv) Move a file or directory. svn move SRC... DST Description This command moves files or directories in your
        working copy or in the repository. This command is equivalent to an  svn
          copy  followed by  svn
          delete . When moving multiple sources, they will be added as
        children of  DST , which must be
        a directory. Subversion does not support moving between working
          copies and URLs.  In addition, you can only move files
          within a single repository Subversion does not
          support cross-repository moving.  Subversion supports
          the following types of moves within a single repository: WC   WC Move and schedule a file or directory for
              addition (with history). URL   URL Complete server-side rename. When moving large trees you should be aware that the
        URL   URL moves are lighter than WC   WC moves. Moving
        nodes inside a working copy does more than just change directory
        listings (it will copy files, manage temporary files, and expand
        keywords) and may be significantly slower. Also bear in mind that a WC   WC move in a
        mixed-revision working copy may yield unexpected results
        (see  ). Options Examples Move a file in your working copy: 
$ svn move foo.c bar.c
A         bar.c
D         foo.c
 Move several files in your working copy into a
        subdirectory: 
$ svn move baz.c bat.c qux.c src
A         src/baz.c
D         baz.c
A         src/bat.c
D         bat.c
A         src/qux.c
D         qux.c
 Move a file in the repository (this is an immediate commit,
        so it requires a commit message): 
$ svn move -m &quot;Move a file&quot; http://svn.red-bean.com/repos/foo.c \
                            http://svn.red-bean.com/repos/bar.c

Committed revision 27.
 svn subcommands patch svn patch Apply changes represented in a unidiff patch to
        the working copy. svn patch PATCHFILE [WCPATH] Description This subcommand will apply changes described a
        unidiff-formatted patch
        file  PATCHFILE  to the working
        copy  WCPATH .  As with most
        other working copy subcommands,
        if  WCPATH  is omitted, the
        changes are applied to the current working directory.  A
        unidiff patch suitable for application to a working copy
        can be produced with the  svn diff 
        command or third-party differencing tools.  Any
        non-unidiff content found in the patch file is
        ignored. Changes listed in the patch file will either be
        applied or rejected.  If a change does not match at its
        exact line offset, it may be applied earlier or later in
        the file if a match is found elsewhere for the surrounding
        lines of context provided by the patch.  A change may also
        be applied with  fuzz meaning,
        one or more lines of context are ignored when attempting
        to match the change location.  If no matching context can
        be found for a change, the change conflicts and will be
        written to a reject file which bears the extension
         .svnpatch.rej . svn patch  reports a status line for
        patched file or directory using letter codes, very similar
        to the way that  svn update  provides
        notification.  The letter codes have the following
        meanings: A Added D Deleted C Conflicted G Merged U Updated Changes applied with an offset or fuzz are reported on
        lines starting with the &#39; &gt; &#39;
        symbol. You should review such changes carefully. If the patch removes all content from a file, that
        file is automatically scheduled for deletion.  Likewise,
        if the patch creates a new file, that file is
        automatically scheduled for addition.  Use  svn
        revert  to undo undesired deletions and
        additions. Options Examples Apply a simple patch file generated by
        the  svn diff  command.  Our patch file
        will create a new file, delete another file, and modify a
        third&#39;s contents and properties.  Here&#39;s the patch file
        itself (which we&#39;ll assume is creatively named
         PATCH ): 
Index: deleted-file
===================================================================
--- deleted-file    (revision 3)
+++ deleted-file    (working copy)
@@ -1 +0,0 @@
-This file will be deleted.
Index: changed-file
===================================================================
--- changed-file    (revision 4)
+++ changed-file    (working copy)
@@ -1,6 +1,6 @@
 The letters in a line of text
 Could make your day much better.
 But expanded into paragraphs,
-I&#39;d tell of kangaroos and calves
+I&#39;d tell of monkeys and giraffes
 Until you were all smiles and laughs
 From my letter made of letters.

Property changes on: changed-file
___________________________________________________________________
Added: propname
## -0,0 +1 ##
+propvalue
Index: added-file
===================================================================
--- added-file    (revision 0)
+++ added-file    (working copy)
@@ -0,0 +1 @@
+This is an added file.
 We can apply the previous patch file to another
        working copy from our repository using  svn
        patch , and verify that it did the right thing by
        using  svn diff : 
$ cd /some/other/workingcopy
$ svn patch /path/to/PATCH
D         deleted-file
UU        changed-file
A         added-file
$ svn diff
Index: deleted-file
===================================================================
--- deleted-file    (revision 3)
+++ deleted-file    (working copy)
@@ -1 +0,0 @@
-This file will be deleted.
Index: changed-file
===================================================================
--- changed-file    (revision 4)
+++ changed-file    (working copy)
@@ -1,6 +1,6 @@
 The letters in a line of text
 Could make your day much better.
 But expanded into paragraphs,
-I&#39;d tell of kangaroos and calves
+I&#39;d tell of monkeys and giraffes
 Until you were all smiles and laughs
 From my letter made of letters.

Property changes on: changed-file
___________________________________________________________________
Added: propname
## -0,0 +1 ##
+propvalue
Index: added-file
===================================================================
--- added-file    (revision 0)
+++ added-file    (working copy)
@@ -0,0 +1 @@
+This is an added file.
$
 Sometimes you might need Subversion to interpret a
        patch  in reverse where added things
        get treated as removed things, and vice-versa.  Use
        the  --reverse-diff  option for this
        purpose.  In the following example, we&#39;ll squirrel away
        a patch file which describes the changes in our working
        copy, and then use a reverse patch operation to undo those
        changes. 
$ svn status
M       foo.c
$ svn diff &gt; PATCH
$ cat PATCH
Index: foo.c
===================================================================
--- foo.c    (revision 128)
+++ foo.c    (working copy)
@@ -1003,7 +1003,7 @@
     return ERROR_ON_THE_G_STRING;
 
   /* Do something in a loop. */
-  for (i = 0; i &lt; txns-&gt;nelts; i++)
+  for (i = 0; i &lt; txns-&gt;nelts; i--)
     {
       status = do_something(i);
       if (status)
$ svn patch --reverse-diff PATCH
U         foo.c
$ svn status
$
 svn subcommands propdel svn propdel (pdel, pd) Remove a property from an item. svn propdel PROPNAME [PATH...] svn propdel PROPNAME --revprop -r REV [TARGET] Description This removes properties from files, directories, or
        revisions.  The first form removes versioned properties in
        your working copy, and the second removes unversioned
        remote properties on a repository revision
        ( TARGET  determines only which
        repository to access). Options Examples Delete a property from a file in your working
        copy: 
$ svn propdel svn:mime-type some-script
property &#39;svn:mime-type&#39; deleted from &#39;some-script&#39;.
 Delete a revision property: 
$ svn propdel --revprop -r 26 release-date 
property &#39;release-date&#39; deleted from repository revision &#39;26&#39;
 svn subcommands propedit svn propedit (pedit, pe) Edit the property of one or more items under
        version control.  See   later in this chapter. svn propedit PROPNAME TARGET... svn propedit PROPNAME --revprop -r REV [TARGET] Description Edit one or more properties using your favorite
        editor.  The first form edits versioned properties in
        your working copy, and the second edits unversioned
        remote properties on a repository revision
        ( TARGET  determines only which
        repository to access). Options Examples svn propedit  makes it easy to
        modify properties that have multiple values: 
$ svn propedit svn:keywords foo.c 

    # svn will open in your favorite text editor a temporary file
    # containing the current contents of the svn:keywords property.  You
    # can add multiple values to a property easily here by entering one
    # value per line.  When you save the temporary file and exit,
    # Subversion will re-read the temporary file and use its updated
    # contents as the new value of the property.

Set new value for property &#39;svn:keywords&#39; on &#39;foo.c&#39;
$
 svn subcommands propget svn propget (pget, pg) Print the value of a property. svn propget PROPNAME [TARGET[@REV]...] svn propget PROPNAME --revprop -r REV [URL] Description Print the value of a property on files,
        directories, or revisions.  The first form prints the
        versioned property of an item or items in your working
        copy, and the second prints unversioned remote
        properties on a repository revision.  See   for more information on
        properties. Options Examples Examine a property of a file in your working
        copy: 
$ svn propget svn:keywords foo.c
Author
Date
Rev
 The same goes for a revision property: 
$ svn propget svn:log --revprop -r 20 
Began journal.
 For a more structured display of properties, use
        the  --verbose  ( -v )
        option: 
$ svn propget svn:keywords foo.c --verbose
Properties on &#39;foo.c&#39;:
  svn:keywords
    Author
    Date
    Rev
 Examine the versioned properties inherited by a URL in
        your repository using the  --show-inherited-props
          option: 
$ svn pg svn:global-ignores --verbose --show-inherited-props ^/branches/1.x
Inherited properties on &#39;http://svn.example.com/repos/branches/1.x&#39;,
from &#39;http://svn.example.com/repos&#39;:
  svn:global-ignores
    *.diff
    *.patch
 By default,  svn propget  will append
        a trailing end-of-line sequence to the property value it
        prints.  Most of the time, this is a desirable feature
        that has a positive effect on the printed output.  But
        there are times when you might wish to capture the precise
        property value, perhaps because that value is not textual
        in nature, but of some binary format (such as a JPEG
        thumbnail stored as a property value, for example).  To
        disable pretty-printing of property values, use
        the  --strict  option. Lastly, you can get  svn propget 
        output in XML format with the  --xml 
        option: 
$ svn propget --xml svn:ignore .
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;properties&gt;
&lt;target
   path=&quot;&quot;&gt;
&lt;property
   name=&quot;svn:ignore&quot;&gt;*.o
&lt;/property&gt;
&lt;/target&gt;
&lt;/properties&gt;
 svn subcommands proplist svn proplist (plist, pl) List all properties. svn proplist [TARGET[@REV]...] svn proplist --revprop -r REV [TARGET] Description List all properties on files, directories, or
        revisions.  The first form lists versioned properties in
        your working copy, and the second lists unversioned remote
        properties on a repository revision
        ( TARGET  determines only which
        repository to access). Options Examples You can use  proplist  to see the properties on an
        item in your working copy: 
$ svn proplist foo.c
Properties on &#39;foo.c&#39;:
  svn:mime-type
  svn:keywords
  owner
 But with the  --verbose 
        ( -v ) flag,  svn
        proplist  is extremely handy as it also shows you
        the values for the properties: 
$ svn proplist -v foo.c
Properties on &#39;foo.c&#39;:
  svn:mime-type
    text/plain
  svn:keywords
    Author Date Rev
  owner
    sally
 List all the versioned properties inherited by a file in
        your working copy using the  --show-inherited-props
          option: 
$ svn proplist --show-inherited-props foo.c
Inherited properties on &#39;foo.c&#39;,
from &#39;http://svn.example.com/repos&#39;:
  svn:auto-props
  svn:global-ignores
Inherited properties on &#39;foo.c&#39;,
from &#39;/home/theob/svn/working-copies/baz-wc&#39;:
  svn:auto-props
 Lastly, you can get  svn proplist 
        output in XML format with the  --xml 
        option: 
$ svn proplist --xml 
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;properties&gt;
&lt;target
   path=&quot;.&quot;&gt;
&lt;property
   name=&quot;svn:ignore&quot;/&gt;
&lt;/target&gt;
&lt;/properties&gt;
 svn subcommands propset svn propset (pset, ps) Set  PROPNAME 
        to  PROPVAL  on files, directories,
        or revisions. svn propset PROPNAME [PROPVAL | -F VALFILE] PATH... svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET] Description Set  PROPNAME  to
         PROPVAL  on files, directories,
        or revisions.  The first example creates a versioned, local
        property change in the working copy, and the second
        creates an unversioned, remote property change on a
        repository revision
        ( TARGET  determines only which
        repository to access). Subversion has a number of  special 
          properties that affect its behavior.  See   for details. Options Examples Set the MIME type for a file: 
$ svn propset svn:mime-type image/jpeg foo.jpg 
property &#39;svn:mime-type&#39; set on &#39;foo.jpg&#39;
 On a Unix system, if you want a file to have the
        executable permission set: 
$ svn propset svn:executable ON somescript
property &#39;svn:executable&#39; set on &#39;somescript&#39;
 Perhaps you have an internal policy to set certain
        properties for the benefit of your coworkers: 
$ svn propset owner sally foo.c
property &#39;owner&#39; set on &#39;foo.c&#39;
 If you made a mistake in a log message for a
        particular revision and want to change it, use
         --revprop  and set  svn:log 
        to the new log message: 
$ svn propset --revprop -r 25 svn:log &quot;Journaled about trip to New York.&quot;
property &#39;svn:log&#39; set on repository revision &#39;25&#39;
 Or, if you don&#39;t have a working copy, you can
        provide a URL: 
$ svn propset --revprop -r 26 svn:log &quot;Document nap.&quot; \
              http://svn.red-bean.com/repos
property &#39;svn:log&#39; set on repository revision &#39;25&#39;
 Lastly, you can tell  propset  to take its input from
        a file.  You could even use this to set the contents of a
        property to something binary: 
$ svn propset owner-pic -F sally.jpg moo.c 
property &#39;owner-pic&#39; set on &#39;moo.c&#39;
 By default, you cannot modify revision properties
          in a Subversion repository.  Your repository
          administrator must explicitly enable revision property
          modifications by creating a hook named
           pre-revprop-change .  See
            for more
          information on hook scripts. svn subcommands relocate svn relocate Relocate the working copy to point to a
        different repository root URL. svn relocate FROM-PREFIX TO-PREFIX [PATH...] svn relocate TO-URL [PATH] Description Sometimes an administrator might change the location
        (or apparent location, from the client&#39;s perspective) of a
        repository.  The content of the repository doesn&#39;t change,
        but the repository&#39;s root URL does.  The hostname may
        change because the repository is now being served from a
        different computer.  Or, perhaps the URL scheme changes
        because the repository is now being served via SSL
        (using  https:// ) instead of over plain
        HTTP.  There are many different reasons for these types of
        repository relocations.  But ideally, a  change of
        address  for a repository shouldn&#39;t suddently cause
        all the working copies which point to that repository to
        become forever unusable.  And fortunately, that&#39;s not the
        case.  Rather than force users to check out a new working
        copy when a repository is relocated, Subversion provides
        the  svn relocate  command, which 
         rewrites  the working copy&#39;s administrative
        metadata to refer to the new repository location. The first  svn relocate  syntax
        allows you to update one or more working copies by what
        essentially amounts to a find-and-replace within the
        repository root URLs recorded in those working copies.
        Subversion will replace the initial substring
         FROM-PREFIX  with the
        string  TO-PREFIX  in those URLs.
        These initial URL substrings can be as long or as short as
        is necessary to differentiate between them.  Obviously, to
        use this syntax form, you need to know both the current
        root URL of the repository to which the working copy is
        pointing, and the new URL of that repository.
        (You can use  svn info  to determine
        the former.) The second syntax does not require that you know the
        current repository root URL with which the working copy is
        associated at all only the new repository URL
        ( TO-URL ) to which it should be
        pointing.  In this syntax form, only one working copy may
        be relocated at a time. Users often get confused about the difference
          between  svn switch  and  svn
          relocate .  Here&#39;s the rule of thumb: If the working copy needs to reflect a new
              directory  within  the
              repository, use  svn
              switch . If the working copy still reflects the
              same repository directory, but the location of the
              repository itself has changed, use  svn
              relocate . Options Examples Let&#39;s start with a working copy that reflects a local
        repository URL: 
$ svn info | grep URL:
URL: file:///var/svn/repos/trunk
$
 One day the administrator decides to rename the
        on-disk repository directory.  We missed the memo, so we
        see an error the next time we try to update our working
        copy. 
$ svn up
Updating &#39;.&#39;:
svn: E180001: Unable to connect to a repository at URL &#39;file:///var/svn/repos/trunk&#39;
 After cornering the administrator over by the vending
        machines, we learn about the repository being moved and
        are told the new URL.  Rather than checkout a new working
        copy, though, we simply ask Subversion to rewrite the
        working copy metadata to point to the new repository
        location. 
$ svn relocate file:///var/svn/new-repos/trunk
$
 Subversion doesn&#39;t tell us much about what it did, but
        hey error-free operation is really all we need,
        right?  Our working copy is functional for online
        operations again. 
$ svn up
Updating &#39;.&#39;:
A    lib/new.c
M    src/code.h
M    src/headers.h
 
 Once again, this type of relocation
          affects  working copy metadata only .
          It will not change your versioned or unversioned file
          contents, perform any version control operations (such
          as commits or updates), and so on. A few months later, we&#39;re told that the company is
        moving development to separate machines and that we&#39;ll be
        using HTTP to access the repository.  So we relocate our
        working copy again. 
$ svn relocate http://svn.company.com/repos/trunk
$
 Now, each time we perform a relocation of this sort,
        Subversion contacts the repository at its new URL,
        of course to verify a few things. First, it wants to compare the UUID of the repository
        against what is stored in the working copy.  If these UUIDs
        don&#39;t match, the working copy relocation is disallowed.
        Maybe this isn&#39;t the same repository (just in a new
        location) after all? Secondly, Subversion wants to ensure that the updated
        working copy metadata jives with respect to the directory
        location  inside  the repository.
        Subversion won&#39;t let you accidentally relocate a working
        copy of a branch in your repository to the URL of a
        different branch in the same repository.  (That&#39;s
        what  svn switch , described in
         , is for.) Also, Subversion will not allow you to relocate a
        subtree of the working copy.  If you&#39;re going to relocate
        the working copy at all, you must relocate the whole
        thing.  This is to protect the integrity of the working
        copy metadata and behavior as a whole.  (And really, you&#39;d
        be hard pressed to come up with a compelling reason to
        relocate only a piece of your working copy anyway.) Let&#39;s look at one final relocation opportunity.  After
        using HTTP access for some time, the company moves to
        SSL-only access.  Now, the only change to the repository
        URL is that the scheme goes from
        being  http://  to
        being  https:// .  There are two
        different ways that we could make our working copy reflect
        ths change.  The first is to do exactly as we&#39;ve done
        before and relocate to the new repository URL. 
$ svn relocate http://svn.company.com/repos/trunk
$
 But we have another option here, too.  We could simply
        ask Subversion to swap out the changed prefixes of the
        URL. 
$ svn relocate http https
$
 Either approach leaves us a working copy whose
        metadata has been updated to point to the right repository
        location. By default,  svn relocate  will
        traverse any external working copies nested within your
        working copy and attempt relocation of those working
        copies, too.  Use the  --ignore-externals 
        option to disable this behavior. svn subcommands resolve svn resolve Resolve conflicts on working copy files or
        directories. svn resolve [PATH...] Description Resolve  conflicted  state on working
        copy files or directories.  This routine does not
        semantically resolve conflict markers; however, it
        replaces the conflicted item with the version specified
        (interactively or via the  --accept 
        argument) and then removes conflict-related artifact
        files.  This allows  PATH  to be
        committed again that is, it tells Subversion that
        the conflicts have been  resolved. See   for an
        in-depth look at resolving conflicts. Options Examples Here&#39;s an example where, after a postponed conflict
        resolution during update,  svn resolve 
        replaces the all conflicts in
        file  foo.c  with your edits: 
$ svn update
Updating &#39;.&#39;:
Conflict discovered in &#39;foo.c&#39;.
Select: (p) postpone, (df) diff-full, (e) edit,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: p
C    foo.c
Updated to revision 5.
Summary of conflicts:
  Text conflicts: 1
$ svn resolve --accept mine-full foo.c
Resolved conflicted state of &#39;foo.c&#39;
$
 svn subcommands resolved svn resolved Deprecated .
        Remove  conflicted  state on working copy
        files or directories. svn resolved PATH... Description This command has been deprecated in favor of
        running  svn resolve --accept
        working  PATH .  See
          in the preceding
        section for details. Remove  conflicted  state on working copy
        files or directories.  This routine does not semantically
        resolve conflict markers; it merely removes
        conflict-related artifact files and allows
         PATH  to be committed again;
        that is, it tells Subversion that the conflicts have been
         resolved.   See   for an in-depth look at
        resolving conflicts. Options Examples If you get a conflict on an update, your working
        copy will sprout three new files: 
$ svn update
Updating &#39;.&#39;:
C    foo.c
Updated to revision 31.
Summary of conflicts:
  Text conflicts: 1
$ ls foo.c*
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
$
 Once you&#39;ve resolved the conflict and
         foo.c  is ready to be committed, run
         svn resolved  to let your working copy
        know you&#39;ve taken care of everything. You  can  just remove the
          conflict files and commit, but  svn
          resolved  fixes up some bookkeeping data
          in the working copy administrative area in addition
          to removing the conflict files, so we recommend that
          you use this command. svn subcommands revert svn revert Undo all local edits. svn revert PATH... Description Reverts any local changes to a file or directory and
        resolves any conflicted states.   svn
        revert  will revert not only the contents of an
        item in your working copy, but also any property
        changes.  Finally, you can use it to undo any scheduling
        operations that you may have performed (e.g., files scheduled
        for addition or deletion can be
         unscheduled ). Options Examples Discard changes to a file: 
$ svn revert foo.c
Reverted foo.c
 If you want to revert a whole directory of files,
        use the  --depth=infinity  option: 
$ svn revert --depth=infinity .
Reverted newdir/afile
Reverted foo.c
Reverted bar.txt
 Lastly, you can undo any scheduling
        operations: 
$ svn add mistake.txt whoops
A         mistake.txt
A         whoops
A         whoops/oopsie.c

$ svn revert mistake.txt whoops
Reverted mistake.txt
Reverted whoops

$ svn status
?       mistake.txt
?       whoops
 svn revert  is inherently
          dangerous, since its entire purpose is to throw away
          data namely, your uncommitted changes.  Once
          you&#39;ve reverted, Subversion provides  no
          way  to get back those uncommitted
          changes. If you provide no targets to  svn
          revert , it will do nothing.  To protect you
          from accidentally losing changes in your working
          copy,  svn revert  requires you to
          explicitly provide at least one target. svn subcommands status svn status (stat, st) Print the status of working copy files and directories. svn status [PATH...] Description Print the status of working copy files and
        directories.  With no arguments, it prints only locally
        modified items (no repository access).  With
         --show-updates  ( -u ), it
        adds working revision and server out-of-date information.
        With  --verbose  ( -v ), it
        prints full revision information on every item.
        With  --quiet  ( -q ), it
        prints only summary information about locally modified
        items. The first seven columns in the output are each one
        character wide, and each column gives you information
        about a different aspect of each working copy item. The first column indicates that an item
        was added, deleted, or otherwise changed: &#39; &#39; No modifications. &#39;A&#39; Item is scheduled for addition. &#39;D&#39; Item is scheduled for deletion. &#39;M&#39; Item has been modified. &#39;R&#39; Item has been replaced in your working copy.
            This means the file was scheduled for deletion, and
            then a new file with the same name was scheduled for
            addition in its place. &#39;C&#39; The contents (as opposed to the properties) of
              the item conflict with updates received from the
              repository. &#39;X&#39; Item is present because of an externals definition. &#39;I&#39; Item is being ignored (e.g., with the 
               svn:ignore  property). &#39;?&#39; Item is not under version control. &#39;!&#39; Item is missing (e.g., you moved or deleted it
              without using  svn ).  This also
              indicates that a directory is incomplete (a checkout
              or update was interrupted). &#39;~&#39; Item is versioned as one kind of object (file,
              directory, link), but has been replaced by a different
              kind of object. The second column tells the status of a file&#39;s or
        directory&#39;s properties: &#39; &#39; No modifications. &#39;M&#39; Properties for this item have been
              modified. &#39;C&#39; Properties for this item are in conflict with
              property updates received from the
              repository. The third column is populated only if the
        working copy directory is locked (see
         ): &#39; &#39; Item is not locked. &#39;L&#39; Item is locked. The fourth column is populated only if the item is
        scheduled for addition-with-history: &#39; &#39; No history scheduled with commit. &#39;+&#39; History scheduled with commit. The fifth column is populated only if the item is
        switched relative to its parent (see  ): &#39; &#39; Item is a child of its parent directory. &#39;S&#39; Item is switched. The sixth column is populated with lock information: &#39; &#39; When  --show-updates 
              ( -u ) is used, this means the file is not
              locked.  If  --show-updates 
              ( -u ) is  not 
              used, this merely means that the file is not locked
              in this working copy. &#39;K&#39; File is locked in this working copy. &#39;O&#39; File is locked either by another user or in
            another working copy.  This appears only when
             --show-updates 
            ( -u ) is used. &#39;T&#39; File was locked in this working copy, but the
            lock has been  stolen  and is invalid.
            The file is currently locked in the repository.  This
            appears only when  --show-updates 
            ( -u ) is used. &#39;B&#39; File was locked in this working copy, but the
              lock has been  broken  and is invalid.
              The file is no longer locked.  This appears only
              when  --show-updates 
              ( -u ) is used. The seventh column is populated only if the item is
        the victim of a tree conflict: &#39; &#39; Item is not the victim of a tree conflict. &#39;C&#39; Item is the victim of a tree conflict. The eighth column is always blank. The out-of-date information appears in the ninth
        column (only if you pass the
         --show-updates  ( -u )
        option): &#39; &#39; The item in your working copy is up to date. &#39;*&#39; A newer revision of the item exists on the
              server. The remaining fields are variable width and delimited
        by spaces.  The working revision is the next field if
        the  --show-updates  ( -u )
        or  --verbose  ( -v ) option
        is passed. If the  --verbose 
        ( -v ) option is passed, the last committed
        revision and last committed author are displayed
        next. The working copy path is always the final field, so
        it can include spaces. Options Examples This is the easiest way to find out what changes you
        have made to your working copy: 
$ svn status wc
 M      wc/bar.c
A  +    wc/qax.c
 If you want to find out what files in your working
        copy are out of date, pass
        the  --show-updates  ( -u )
        option (this will  not  make any
        changes to your working copy).  Here you can see that
         wc/foo.c  has changed in the
        repository since we last updated our working
        copy: 
$ svn status -u wc
 M            965    wc/bar.c
        *     965    wc/foo.c
A  +          965    wc/qax.c
Status against revision:    981
 --show-updates 
          ( -u )  only  places
          an asterisk next to items that are out of date (i.e.,
          items that will be updated from the repository if you
          later use  svn update ).
           --show-updates  ( -u )
          does  not  cause the status listing
          to reflect the repository&#39;s version of the item
          (although you can see the revision number in the
          repository by passing the  --verbose 
          ( -v ) option). The most information you can get out of
        the status subcommand is as follows: 
$ svn status -u -v wc
 M            965       938 sally        wc/bar.c
        *     965       922 harry        wc/foo.c
A  +          965       687 harry        wc/qax.c
              965       687 harry        wc/zig.c
Status against revision:   981
 Lastly, you can get  svn status 
        output in XML format with the  --xml 
        option: 
$ svn status --xml wc
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;status&gt;
&lt;target
   path=&quot;wc&quot;&gt;
&lt;entry
   path=&quot;qax.c&quot;&gt;
&lt;wc-status
   props=&quot;none&quot;
   item=&quot;added&quot;
   revision=&quot;0&quot;&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;entry
   path=&quot;bar.c&quot;&gt;
&lt;wc-status
   props=&quot;normal&quot;
   item=&quot;modified&quot;
   revision=&quot;965&quot;&gt;
&lt;commit
   revision=&quot;965&quot;&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-28T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;/target&gt;
&lt;/status&gt;
 For many more examples of  svn status ,
        see  . svn subcommands switch svn switch (sw) Update working copy to a different URL. svn switch URL[@PEGREV] [PATH] switch --relocate FROM TO [PATH...] Description The first variant of this subcommand (without the
         --relocate  option) updates your working
        copy to point to a new URL.  This is the Subversion way to
        make a working copy begin tracking a new branch.  If
        specified,  PEGREV  determines in
        which revision the target is first looked up.  See
          for an in-depth
        look at switching. Beginning with Subversion 1.7, the  svn
          switch  command will demand by default that the
          URL to which you are switching your working copy shares
          a common ancestry with item that the working copy
          currently reflects.  You can override this behavior by
          specifying the  --ignore-ancestry 
          option. If  --force  is used, unversioned
        obstructing paths in the working copy do not automatically
        cause a failure if the switch attempts to add the same
        path.  If the obstructing path is the same type (file or
        directory) as the corresponding path in the repository, it
        becomes versioned but its contents are left untouched in
        the working copy.  This means that an obstructing
        directory&#39;s unversioned children may also obstruct and
        become versioned.  For files, any content differences
        between the obstruction and the repository are treated
        like a local modification to the working copy.  All
        properties from the repository are applied to the
        obstructing path. As with most subcommands, you can limit the scope of
        the switch operation to a particular tree depth using the
         --depth  option.  Alternatively, you can
        use the  --set-depth  option to set a new
         sticky  working copy depth on the switch
        target. The  --relocate  option is deprecated
        as of Subversion 1.7.  Use  svn relocate 
        (described in  )
        to perform working copy relocation instead. Options Examples If you&#39;re currently inside the directory
         vendors , which was branched to
         vendors-with-fix , and you&#39;d like to
        switch your working copy to that branch: 
$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .
U    myproj/foo.txt
U    myproj/bar.txt
U    myproj/baz.c
U    myproj/qux.c
Updated to revision 31.
 To switch back, just provide the URL to the
        location in the repository from which you originally
        checked out your working copy: 
$ svn switch http://svn.red-bean.com/repos/trunk/vendors .
U    myproj/foo.txt
U    myproj/bar.txt
U    myproj/baz.c
U    myproj/qux.c
Updated to revision 31.
 You  can  switch just part of
          your working copy to a branch if you don&#39;t want to
          switch your entire working copy, but this is not
          generally recommended.  It&#39;s too easy to forget that
          you&#39;ve done this and wind up accidentally making and
          committing changes both to the switched and unswitched
          portions of your tree. svn subcommands unlock svn unlock Unlock working copy paths or URLs. svn unlock TARGET... Description Unlock each  TARGET .  If any
         TARGET  is locked by
        another user or no valid lock token exists in the working
        copy, print a warning and continue unlocking the rest of
        the  TARGET s.  Use
         --force  to break a lock belonging to
        another user or working copy. Options Examples Unlock two files in your working copy: 
$ svn unlock tree.jpg house.jpg
&#39;tree.jpg&#39; unlocked.
&#39;house.jpg&#39; unlocked.
 Unlock a file in your working copy that is currently
        locked by another user: 
$ svn unlock tree.jpg
svn: E195013: &#39;tree.jpg&#39; is not locked in this working copy
$ svn unlock --force tree.jpg
&#39;tree.jpg&#39; unlocked.
 Unlock a file without a working copy: 
$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg
&#39;tree.jpg unlocked.
 For further details, see  . svn subcommands update svn update (up) Update your working copy. svn update [PATH...] Description svn update  brings changes from the
        repository into your working copy.  If no revision is
        given, it brings your working copy up to date with the
         HEAD  revision.  Otherwise, it
        synchronizes the working copy to the revision given by the
         --revision  ( -r ) option.
        As part of the synchronization,  svn
        update  also removes any stale locks (see
         ) found in the working
        copy. For each updated item, it prints a line that starts
        with a character reporting the action taken.  These
        characters have the following meaning: A Added B Broken lock (third column only) D Deleted U Updated C Conflicted G Merged E Existed A character in the first column signifies an update to
        the actual file, whereas updates to the file&#39;s properties
        are shown in the second column.  Lock information is
        printed in the third column. As with most subcommands, you can limit the scope of
        the update operation to a particular tree depth using the
         --depth  option.  Alternatively, you can
        use the  --set-depth  option to set a new
         sticky  working copy depth on the update
        target. Options Examples Pick up repository changes that have happened since
        your last update: 
$ svn update
Updating &#39;.&#39;:
A    newdir/toggle.c
A    newdir/disclose.c
A    newdir/launch.c
D    newdir/README
Updated to revision 32.
 You can also  update  your working copy
        to an older revision (Subversion doesn&#39;t have the concept
        of  sticky  files like CVS does; see  ): 
$ svn update -r30
Updating &#39;.&#39;:
A    newdir/README
D    newdir/toggle.c
D    newdir/disclose.c
D    newdir/launch.c
U    foo.c
Updated to revision 30.
 If you want to examine an older revision of a
          single file, you may want to use  svn
          cat  instead it won&#39;t change your working
          copy. svn update  is also the primary
        mechanism used to configure sparse working copies.  When
        used with the  --set-depth , the update
        operation will omit or reenlist individual working copy
        members by modifying their recorded ambient depth to the
        depth you specify (fetching information from the
        repository as necessary).  See
          for more about
        sparse directories. You can update multiple targets with a single
        invocation, and Subversion will not only gracefully skip
        any unversioned targets you provide it, but as of
        Subversion 1.7 will also include a post-update summary of
        all the updates it performed: 
$ cd my-projects
$ svn update *
Updating &#39;calc&#39;:
U    button.c
U    integer.c
Updated to revision 394.
Skipped &#39;tempfile.tmp&#39;
Updating &#39;paint&#39;:
A    palettes.c
U    brushes.c
Updated to revision 60.
Updating &#39;ziptastic&#39;:
At revision 43.
Summary of updates:
  Updated &#39;calc&#39; to r394.
  Updated &#39;paint&#39; to r60.
  Updated &#39;ziptastic&#39; to r43.
Summary of conflicts:
  Skipped paths: 1
$
 svn subcommands upgrade svn upgrade Upgrade the metadata storage format for a
        working copy. svn upgrade [PATH...] Description As new versions of Subversion are released, the format
        used for the working copy metadata changes to accomodate
        new features or fix bugs.  Older versions of Subversion
        would automatically upgrade working copies to the new
        format the first time the working copy was used by the new
        version of the software.  Beginning with Subversion 1.7,
        working copy upgrades must be explicitly performed at the
        user&#39;s request.   svn upgrade  is the
        subcommand used to trigger that upgrade process. Options Examples If you attempt to use Subversion 1.7 on a working copy
        created with an older version of Subversion, you will see
        an error: 
$ svn status
svn: E155036: Please see the &#39;svn upgrade&#39; command
svn: E155036: Working copy &#39;/home/sally/project&#39; is too old (format 10, create
d by Subversion 1.6)
$
 Use the  svn upgrade  command to
        upgrade the working copy to the most recent metadata
        format supported by your version of Subversion. 
$ svn upgrade
Upgraded &#39;.&#39;
Upgraded &#39;A&#39;
Upgraded &#39;A/B&#39;
Upgraded &#39;A/B/E&#39;
Upgraded &#39;A/B/F&#39;
Upgraded &#39;A/C&#39;
Upgraded &#39;A/D&#39;
Upgraded &#39;A/D/G&#39;
Upgraded &#39;A/D/H&#39;
$ svn status
D       A/B/E/alpha
M       A/D/gamma
A       A/newfile
$
 Notice that  svn upgrade  preserved
        the local modifications present in the working copy at the
        time of the upgrade, which were introduced by the version
        of Subversion previously used to manipulate this working
        copy. As was the case with automatically upgraded working
          copies in the past, explicitly upgraded working copies
          will be unusable by older versions of Subversion,
          too. svnadmin Reference Subversion Repository Administration svnadmin  is the administrative tool for
      monitoring and repairing your Subversion repository.  For
      detailed information on repository administration, see the maintenance section for  . Since  svnadmin  works via direct repository access
      (and thus can only be used on the machine that holds the
      repository), it refers to the repository with a path, not a URL. Options in  svnadmin  are global, just
      as they are in  svn : svnadmin Options --bdb-log-keep (Berkeley DB-specific.) Disable automatic log removal
            of database logfiles.  Having these logfiles around
            can be convenient if you need to restore from a
            catastrophic repository failure. --bdb-txn-nosync (Berkeley DB-specific.) Disables fsync when
            committing database transactions.  Used with the
             svnadmin create  command to create a
            Berkeley DB-backed repository with
             DB_TXN_NOSYNC  enabled (which improves
            speed but has some risks associated with it). --bypass-hooks Bypass the repository hook system. --bypass-prop-validation When loading a dump file, disable the logic which
            validates property values. --clean-logs Remove unused Berkeley DB logs. --compatible-version ARG Use repository format compatible with Subversion version
             ARG . --config-dir DIR Instructs Subversion to read configuration
            information from the specified directory instead of the
            default location ( .subversion  in
            the user&#39;s home directory). --deltas When creating a repository dump file, specify
            changes in versioned properties and file contents as
            deltas against their previous state. --file  ( -F )  FILENAME Uses the contents of the named file for the
            specified subcommand. --fs-type ARG When creating a repository,
            use  ARG  as the requested
            filesyste type.   ARG  may be
            either  bdb 
            or  fsfs . --force-uuid By default, when loading data into a repository that
            already contains revisions,  svnadmin 
            will ignore the UUID from the dump stream.  This option
            will cause the repository&#39;s UUID to be set to the UUID
            from the stream. --ignore-uuid By default, when loading data into an empty repository,
             svnadmin  will set the repository&#39;s UUID
            to the UUID from the dump stream.  This option will cause
            the UUID from the stream to be ignored. --incremental Dump a revision only as a diff against the
            previous revision, instead of the usual
            fulltext. --memory-cache-size  ( -M )  ARG Configures the size (in Megabytes) of the extra
            in-memory cache used to minimize redundant operations.
            The default value is  16 .  (This cache
            is used for FSFS-backed repositories only.) --parent-dir DIR When loading a dump file, root paths at
             DIR  instead of
             / . --pre-1.4-compatible Deprecated .  See option
             --compatible-version .  When creating a new
            repository, use a format that is compatible with versions of
            Subversion earlier than Subversion 1.4. --pre-1.5-compatible Deprecated .  See option
             --compatible-version .  When creating a new
            repository, use a format that is compatible with versions of
            Subversion earlier than Subversion 1.5. --pre-1.6-compatible Deprecated .  See option
             --compatible-version .  When creating a new
            repository, use a format that is compatible with versions of
            Subversion earlier than Subversion 1.6. --revision  ( -r )  ARG Specify a particular revision to operate
            on. --quiet  ( -q ) Do not show normal progress show only
            errors. --use-post-commit-hook When loading a dump file, runs the repository&#39;s
             post-commit  hook after finalizing each newly loaded
            revision. --use-post-revprop-change-hook When changing a revision property, runs the
            repository&#39;s  post-revprop-change  hook after changing the
            revision property. --use-pre-commit-hook When loading a dump file, runs the repository&#39;s
             pre-commit  hook before finalizing each newly loaded
            revision.  If the hook fails, aborts the commit and
            terminates the load process. --use-pre-revprop-change-hook When changing a revision property, runs the
            repository&#39;s  pre-revprop-change  hook before changing the
            revision property.  If the hook fails, aborts the
            modification and terminates. --wait For operations which require exclusive repository
            access, wait until the requisite repository lock has
            been obtained instead of immediately erroring out when
            it cannot be. svnadmin subcommands crashtest svnadmin crashtest Simulate a process that crashes. svnadmin crashtest REPOS_PATH Description Open the repository at  REPOS_PATH , then abort, thus
          simulating a process that crashes while holding an open
          repository handle.  This is used for testing automatic
          repository recovery (a new feature in Berkeley DB 4.4).
          It&#39;s unlikely that you&#39;ll need to run this
          command. Options None Examples 
$ svnadmin crashtest /var/svn/repos
Aborted
 Exciting, isn&#39;t it? svnadmin subcommands create svnadmin create Create a new, empty repository. svnadmin create REPOS_PATH Description Create a new, empty repository at the path provided.
          If the provided directory does not exist, it will be
          created for
          you. Remember,  svnadmin 
          works only with local  paths , not
           URLs .   As of
          Subversion 1.2,  svnadmin  creates new
          repositories with the
           FSFS  filesystem backend by
          default. While  svnadmin create  will create
          the base directory for a new repository, it will not
          create intermediate directories.  For example, if you
          have an empty directory named
           /var/svn , creating
           /var/svn/repos  will work, while
          attempting to create
           /var/svn/subdirectory/repos  will
          fail with an error.  Also, keep in mind that, depending
          on where on your system you are creating your
          repository, you might need to run  svnadmin
          create  as a user with elevated privileges
          (such as the  root  user). Options Examples Creating a new repository is this easy: 
$ cd /var/svn
$ svnadmin create repos
$
 In Subversion 1.0, a Berkeley DB repository is always
        created.  In Subversion 1.1, a Berkeley DB repository is
        the default repository type, but an FSFS repository can be
        created using the  --fs-type 
        option: 
$ cd /var/svn
$ svnadmin create repos --fs-type fsfs
$
 svnadmin subcommands deltify svnadmin deltify Deltify changed paths in a revision range. svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH Description svnadmin deltify  exists in
        current versions of Subversion only for historical reasons.
        This command is deprecated and no longer needed. It dates from a time when Subversion offered
        administrators greater control over compression strategies
        in the repository.  This turned out to be a lot of
        complexity for  very  little gain, and
        this  feature  was deprecated. Options svnadmin subcommands dump svnadmin dump Dump the contents of the filesystem to  stdout . svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental] [--deltas] Description Dump the contents of the filesystem to  stdout  in a
         dump file  portable format, sending feedback
        to  stderr .  Dump revisions
         LOWER  rev through
         UPPER  rev.  If no revisions are
        given, dump all revision trees.  If only
         LOWER  is given, dump that one
        revision tree.  See  
        for a practical use. By default, the Subversion dump stream contains a
        single revision (the first revision in the requested
        revision range) in which every file and directory in the
        repository in that revision is presented as though that whole
        tree was added at once, followed by other revisions (the
        remainder of the revisions in the requested range), which
        contain only the files and directories that were modified
        in those revisions.  For a modified file, the complete
        full-text representation of its contents, as well as all of
        its properties, are presented in the dump file; for a
        directory, all of its properties are presented. Two useful options modify the dump file
        generator&#39;s behavior.  The first is the
         --incremental  option, which simply causes
        that first revision in the dump stream to contain only
        the files and directories modified in that revision,
        instead of being presented as the addition of a new tree,
        and in exactly the same way that every other revision in
        the dump file is presented.  This is useful for generating
        a relatively small dump file to be loaded into another
        repository that already has the files and directories
        that exist in the original repository. The second useful option is  --deltas .
        This option causes  svnadmin dump  to,
        instead of emitting full-text representations of file
        contents and property lists, emit only deltas of those
        items against their previous versions.  This reduces (in
        some cases, drastically) the size of the dump file that
         svnadmin dump  creates.  There are, however,
        disadvantages to using this option deltified
        dump files are more CPU-intensive to create and tend
        not to compress as well as their nondeltified counterparts
        when using third-party tools such as  gzip 
        and  bzip2 . Beginning with Subversion 1.8,
           svndumpfilter  can operate on deltified
          dump streams.  Prior to this release,
           svndumpfilter  would not work with dump
          streams created using  --deltas 
          option. Options Examples Dump your whole repository: 
$ svnadmin dump /var/svn/repos &gt; full.dump
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
 
 Incrementally dump a single transaction from your
        repository: 
$ svnadmin dump /var/svn/repos -r 21 --incremental &gt; incr.dump
* Dumped revision 21.
 svnadmin subcommands freeze svnadmin freeze Prevent commits to the repository while running an arbitary program. svnadmin freeze REPOS_PATH PROGRAM [ARG...] svnadmin freeze --file FILENAME PROGRAM [ARG...] Description This subcommand prevents concurrent commits to the repository
         REPOS_PATH  (i.e. it freezes the
        repository) while running  PROGRAM  with
         ARG  arguments.  Clients trying to
        commit concurrently will wait until the repository becomes
        available again.  The subcommand is intended for backup purposes so
        that third-party backup tools such as  rsync  can
        be safely used on a live repository. If  --file  option is used, then all repositories
        listed in  FILENAME  will froze.  The
        file format is a list of  REPOS_PATH 
        separated by newlines.  Repositories freeze in the
        same order as they are listed in the file. Options Examples Freeze the repository and run  rsync  to
        make its backup: 
$ svnadmin freeze /var/svn/repos -- rsync -av /var/svn/repos /backup/repos
 svnadmin subcommands help svnadmin help (h, ?) Help! svnadmin help [SUBCOMMAND...] Description This subcommand is useful when you&#39;re trapped on a
        desert island with neither a Net connection nor a copy of
        this book. svnadmin subcommands hotcopy svnadmin hotcopy Make a hot copy of a repository. svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH Description This subcommand makes a  hot  backup
        of your repository, including all hooks, configuration
        files, and, of course, database files.  You can run this command at any
        time and make a safe copy of the repository, regardless of
        whether other processes are using the repository. Prior to Subversion 1.8,  svnadmin hotcopy  always
        made a full hot copy of the source repository.  Beginning with
        Subversion 1.8 it supports incremental copy to the existing
        destination copy of the same source repository.  By passing the
         --incremental  option to
         svnadmin hotcopy , you can instruct Subversion to
        copy only new revisions and revisions which have changed in size or had
        timestamp modifications.  The UUID of the hotcopy destination
        repository must match the UUID of the hotcopy source repository.
        Incremental hotcopy mode is supported for FSFS repositories
        only. If you pass the  --clean-logs  option,
         svnadmin  will perform a hot copy of your
        repository, and then remove unused Berkeley DB logs from
        the original repository. Options As described in  , hot-copied
          Berkeley DB repositories are  not 
          portable across operating systems, nor will they work on
          machines with a different  endianness  than
          the machine where they were created. svnadmin subcommands list-dblogs svnadmin list-dblogs Ask Berkeley DB which logfiles exist for a
        given Subversion repository (applies only to repositories
        using the  bdb  backend). svnadmin list-dblogs REPOS_PATH Description Berkeley DB creates logs of all changes to the
        repository, which allow it to recover in the face of
        catastrophe.  Unless you enable
         DB_LOG_AUTOREMOVE , the logfiles
        accumulate, although most are no longer used and can be
        deleted to reclaim disk space.  See   for more
        information. svnadmin subcommands list-unused-dblogs svnadmin list-unused-dblogs Ask Berkeley DB which logfiles can be safely
      deleted (applies only to repositories using the
       bdb  backend). svnadmin list-unused-dblogs REPOS_PATH Description Berkeley DB creates logs of all changes to the
        repository, which allow it to recover in the face of
        catastrophe.  Unless you enable
         DB_LOG_AUTOREMOVE , the logfiles
        accumulate, although most are no longer used and can be
        deleted to reclaim disk space.  See   for more
        information. Examples Remove all unused logfiles from the repository: 
$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033

$ svnadmin list-unused-dblogs /var/svn/repos | xargs rm
## disk space reclaimed!
 svnadmin subcommands load svnadmin load Read a
        repository dump stream from
         stdin . svnadmin load REPOS_PATH [-r LOWER[:UPPER]] Description Read a repository dump stream from
         stdin , committing new revisions
        into the repository&#39;s filesystem.  Progress
        feedback is sent to  stdout .  If
        no revisions are given, read and commit all revisions.  But
        if  --revision  is provided, read and commit
        revisions  LOWER  rev through
         UPPER  rev only.  If only
         LOWER  is given, load that one
        revision. Prior to Subversion 1.8,  svnadmin load 
        was limited to reading all revisions that the dump stream
        contains, but now  svnadmin load  accepts
         --revision  option that acts as a filter for
        dump stream revisions.  This allows you to incrementally load
        only a range of revisions from a single dump stream making
        some repository maintenance and reorganization tasks much
        easier. Options Examples This shows the beginning of loading a repository from
        a backup file (made, of course, with  svnadmin
        dump ): 
$ svnadmin load /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
 
 Or if you want to load into a subdirectory: 
$ svnadmin load --parent-dir new/subdir/for/project \
                /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
 
 Newer versions of Subversion have grown more strict
        regarding the format of the values of Subversion&#39;s own
        built-in properties.  Of course, properties created with
        older versions of Subversion wouldn&#39;t have benefitted from
        that strictness, and as such might be improperly
        formatted.  Dump streams carry property values as-is, so
        using Subversion 1.7 to load dump streams created from
        repositories with ill-formatted property values will, by
        default, trigger a validation error.  There are several
        workaround for this problem.  First, you can manually
        repair the problematic property values in the source
        repository and recreate the dump stream.  Or, you can
        manually tweak the dump stream itself to fix those
        property values.  Finally, if you&#39;d rather not deal with
        the problem right now, use the
         --bypass-prop-validation  option
        with  svnadmin load . svnadmin subcommands lock svnadmin lock Lock path in the repository directly. svnadmin lock REPOS_PATH PATH-IN-REPOS USERNAME FILE
        [TOKEN] Description Lock  PATH-IN-REPOS  in the
        repository, assigning ownership of the lock
        to  USERNAME  and using the contents
        of  FILE  as comments associated with
        the created lock.  If provided,
        use  TOKEN  as lock token. Options svnadmin subcommands lslocks svnadmin lslocks Print descriptions of all locks. svnadmin lslocks REPOS_PATH [PATH-IN-REPOS] Description Print descriptions of all locks in
        repository  REPOS_PATH 
        underneath the
        path  PATH-IN-REPOS .
        If  PATH-IN-REPOS  is not
        provided, it defaults to the root directory of the
        repository. Options None Examples This lists the one locked file in the repository at
         /var/svn/repos : 
$ svnadmin lslocks /var/svn/repos
Path: /tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
 svnadmin subcommands lstxns svnadmin lstxns Print the names of all uncommitted transactions. svnadmin lstxns REPOS_PATH Description Print the names of all uncommitted transactions.  See
         
        for information on how uncommitted transactions are
        created and what you should do with them. Examples List all outstanding transactions in a
        repository: 
$ svnadmin lstxns /var/svn/repos/ 
1w
1x
 svnadmin subcommands pack svnadmin pack Possibly compact the repository into a more
      efficient storage model. svnadmin pack REPOS_PATH Description See
        for more information. Options None svnadmin subcommands recover svnadmin recover Bring a repository database back into a
      consistent state (applies only to repositories using the
       bdb  backend).  In addition, if
       repos/conf/passwd  does not exist, it
      will create a default passwordfile . svnadmin recover REPOS_PATH Description Run this command if you get an error indicating that
        your repository needs to be recovered. Options Examples Recover a hung repository: 
$ svnadmin recover /var/svn/repos/ 
Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
 Recovering the database requires an exclusive lock on
        the repository. (This is a  database lock ;
        see the sidebar  .)
        If another process is accessing the repository,
        then  svnadmin recover  will error: 
$ svnadmin recover /var/svn/repos
svn: E165000: Failed to get exclusive repository access; perhaps another proce
ss such as httpd, svnserve or svn has it open?
$
 The  --wait  option, however, will
        cause  svnadmin recover  to wait
        indefinitely for other processes to disconnect: 
$ svnadmin recover /var/svn/repos --wait
Waiting on repository lock; perhaps another process has it open?

### time goes by 

Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
 svnadmin subcommands rmlocks svnadmin rmlocks Unconditionally remove one or more locks from a
      repository. svnadmin rmlocks REPOS_PATH LOCKED_PATH... Description Remove one or more locks from each  LOCKED_PATH . Options None Examples This deletes the locks on
         tree.jpg  and
         house.jpg  in the repository at
         /var/svn/repos : 
$ svnadmin rmlocks /var/svn/repos tree.jpg house.jpg
Removed lock on &#39;/tree.jpg.
Removed lock on &#39;/house.jpg.
 svnadmin subcommands rmtxns svnadmin rmtxns Delete transactions from a repository. svnadmin rmtxns REPOS_PATH TXN_NAME... Description Delete outstanding transactions from a repository.
        This is covered in detail in  . Options Examples Remove named transactions: 
$ svnadmin rmtxns /var/svn/repos/ 1w 1x
 Fortunately, the output of  lstxns 
        works great as the input for  rmtxns : 
$ svnadmin rmtxns /var/svn/repos/  `svnadmin lstxns /var/svn/repos/`
 This removes all uncommitted transactions from
        your repository. svnadmin subcommands setlog svnadmin setlog Set the log message on a revision. svnadmin setlog REPOS_PATH -r REVISION FILE Description Set the log message on
        revision  REVISION  to the
        contents of  FILE . This is similar to using  svn propset 
        with the  --revprop  option to set the  svn:log  property
        on a revision, except that you can also use the option
         --bypass-hooks  to avoid running any pre-
        or post-commit hooks, which is useful if the modification
        of revision properties has not been enabled in
        the  pre-revprop-change  hook. Revision properties are not under version control,
          so this command will permanently overwrite the previous
          log message. Options Examples Set the log message for revision 19 to the contents of
        the file  msg : 
$ svnadmin setlog /var/svn/repos/ -r 19 msg
 svnadmin subcommands setrevprop svnadmin setrevprop Set a property on a revision. svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE Description Set the property  NAME  on
          revision  REVISION  to the
          contents of  FILE .  Use
           --use-pre-revprop-change-hook 
          or  --use-post-revprop-change-hook  to
          trigger the revision property-related hooks (e.g., if
          you want an email notification sent from your  post-revprop-change-hook ). Options Examples The following sets the revision
      property  repository-photo  to the contents
      of the file  sandwich.png : 
$ svnadmin setrevprop /var/svn/repos -r 0 repository-photo sandwich.png
 As you can see,  svnadmin setrevprop 
        has no output upon success. svnadmin subcommands setuuid svnadmin setuuid Reset the repository UUID. svnadmin setuuid REPOS_PATH [NEW_UUID] Description Reset the repository UUID for the repository located
        at  REPOS_PATH .
        If  NEW_UUID  is provided, use
        that as the new repository UUID; otherwise, generate a
        brand-new UUID for the repository. Options None Examples If you&#39;ve  svnsync ed  /var/svn/repos 
        to  /var/svn/repos-new  and intend to use  repos-new  as your
        canonical repository, you may want to change the UUID for
         repos-new  to the UUID of  repos  so that your users don&#39;t
        have to check out a new working copy to accommodate the
        change: 
$ svnadmin setuuid /var/svn/repos-new 2109a8dd-854f-0410-ad31-d604008985ab
 As you can see,  svnadmin setuuid 
        has no output upon success. svnadmin subcommands unlock svnadmin unlock Unlock path in the repository directly. svnadmin unlock REPOS_PATH LOCKED_PATH USERNAME
        TOKEN Description Unlock  LOCKED_PATH  in the
        repository (as  USERNAME ) after
        verifying that the token associated with the lock
        matches  TOKEN . Options svnadmin subcommands upgrade svnadmin upgrade Upgrade a repository to the latest supported
        schema version. svnadmin upgrade REPOS_PATH Description Upgrade the repository located
        at  REPOS_PATH  to the latest
        supported schema version. This functionality is provided as a convenience for
        repository administrators who wish to make use of new
        Subversion functionality without having to undertake a
        potentially costly full repository dump and load
        operation.  As such, the upgrade performs only the minimum
        amount of work needed to accomplish this while still
        maintaining the integrity of the repository.  While a dump
        and subsequent load guarantee the most optimized
        repository state,  svnadmin upgrade  does
        not. You should  always  back up your
          repository before upgrading. Options None Examples Upgrade the repository at
        path  /var/repos/svn : 
$ svnadmin upgrade /var/repos/svn
Repository lock acquired.
Please wait; upgrading the repository may take some time...

Upgrade completed.
 svnadmin subcommands verify svnadmin verify Verify the data stored in the repository. svnadmin verify REPOS_PATH Description Run this command if you wish to verify the integrity
        of your repository.  This basically iterates through all
        revisions in the repository by internally dumping all
        revisions and discarding the output it&#39;s a good idea
        to run this on a regular basis to guard against latent
        hard disk failures and  bitrot.   If this
        command fails which it will do at the first sign of
        a problem that means your repository has at
        least one corrupted revision, and you should restore the
        corrupted revision from a backup (you did make a backup,
        didn&#39;t you?). Options Examples Verify a hung repository: 
$ svnadmin verify /var/svn/repos/ 
* Verified revision 1729.
 svndumpfilter Reference Subversion History Filtering svndumpfilter  is a command-line utility
      for removing history from a Subversion dump file by either
      excluding or including paths beginning with one or more named
      prefixes.  For details, see
       . Options in  svndumpfilter  are global, just
      as they are in  svn  and
       svnadmin : svndumpfilter Options --drop-empty-revs If filtering causes any revision to be empty (i.e.,
            causes no change to the repository), removes these
            revisions from the final dump file. --pattern Treat the path prefixes provided to the filtering
            commands as file glob patterns rather than explicit path
            substrings. --renumber-revs Renumbers revisions that remain after
            filtering. --skip-missing-merge-sources Skips merge sources that have been removed as part of
            the filtering.  Without this
            option,  svndumpfilter  will exit with
            an error if the merge source for a retained path is
            removed by filtering. --preserve-revprops If all nodes in a revision are removed by filtering
            and  --drop-empty-revs  is not passed,
            the default behavior of  svndumpfilter 
            is to remove all revision properties except for the date
            and the log message (which will merely indicate that the
            revision is empty).  Passing this option will preserve
            existing revision properties (which may or may not make
            sense since the related content is no longer present in
            the dump file). --targets FILENAME Instructs  svndumpfilter  to read
            additional path prefixes one per line from
            the file located at  FILENAME .
            This is especially useful for complex filtering
            operations which require more prefixes than the
            operating system allows to be specified on a single
            command line. --quiet Does not display filtering statistics. svndumpfilter subcommands exclude svndumpfilter exclude Filter out nodes with given prefixes from the dump stream. svndumpfilter exclude PATH_PREFIX... Description This can be used to exclude nodes that begin with one or
        more  PATH_PREFIX es from a
        filtered dump file. Options Examples If we have a dump file from a repository with a number
        of different picnic-related directories in it, but we want
        to keep everything  except 
        the  sandwiches  part of the
        repository, we&#39;ll exclude only that path: 
$ svndumpfilter exclude sandwiches &lt; dumpfile &gt; filtered-dumpfile
Excluding prefixes:
   &#39;/sandwiches&#39;

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 1 node(s):
   &#39;/sandwiches&#39;
$
 Beginning in Subversion 1.7,
         svndumpfilter  can optionally treat
        the  PATH_PREFIX s not merely as
        explicit substrings, but as file patterns instead.  So,
        for example, if you wished to filter out paths which ended
        with  .OLD , you would do the
        following: 
$ svndumpfilter exclude --pattern &quot;*.OLD&quot; &lt; dumpfile &gt; filtered-dumpfile
Excluding prefix patterns:
   &#39;/*.OLD&#39;

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 3 node(s):
   &#39;/condiments/salt.OLD&#39;
   &#39;/condiments/pepper.OLD&#39;
   &#39;/toppings/cheese.OLD&#39;
$
 svndumpfilter subcommands include svndumpfilter include Filter out nodes without given prefixes from
        dump stream. svndumpfilter include PATH_PREFIX... Description Can be used to include nodes that begin with one or
        more  PATH_PREFIX es in a
        filtered dump file (thus excluding all other paths). Options Example If we have a dump file from a repository with a number of
        different picnic-related directories in it, but want to
        keep only the  sandwiches  part of the
        repository, we&#39;ll include only that path: 
$ svndumpfilter include sandwiches &lt; dumpfile &gt; filtered-dumpfile
Including prefixes:
   &#39;/sandwiches&#39;

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 12 node(s):
   &#39;/condiments&#39;
   &#39;/condiments/pepper&#39;
   &#39;/condiments/pepper.OLD&#39;
   &#39;/condiments/salt&#39;
   &#39;/condiments/salt.OLD&#39;
   &#39;/drinks&#39;
   &#39;/snacks&#39;
   &#39;/supplies&#39;
   &#39;/toppings&#39;
   &#39;/toppings/cheese&#39;
   &#39;/toppings/cheese.OLD&#39;
   &#39;/toppings/lettuce&#39;
$
 Beginning in Subversion 1.7,
         svndumpfilter  can optionally treat
        the  PATH_PREFIX s not merely as
        explicit substrings, but as file patterns instead.  So,
        for example, if you wished to include only paths which ended
        with  ks , you would do the
        following: 
$ svndumpfilter include --pattern &quot;*ks&quot; &lt; dumpfile &gt; filtered-dumpfile
Including prefix patterns:
   &#39;/*ks&#39;

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 11 node(s):
   &#39;/condiments&#39;
   &#39;/condiments/pepper&#39;
   &#39;/condiments/pepper.OLD&#39;
   &#39;/condiments/salt&#39;
   &#39;/condiments/salt.OLD&#39;
   &#39;/sandwiches&#39;
   &#39;/supplies&#39;
   &#39;/toppings&#39;
   &#39;/toppings/cheese&#39;
   &#39;/toppings/cheese.OLD&#39;
   &#39;/toppings/lettuce&#39;
$
 svndumpfilter subcommands help svndumpfilter help Help! svndumpfilter help [SUBCOMMAND...] Description Displays the help message
        for  svndumpfilter .  Unlike other help
        commands documented in this chapter, there is no witty
        commentary for this help command.  The authors of this
        book deeply regret the omission. Options None svnlook Reference Subversion Repository Examination svnlook  is a command-line utility for
      examining different aspects of a Subversion repository.  It
      does not make any changes to the repository it&#39;s just
      used for  peeking. 
       svnlook  is typically used by the
      repository hooks, but a repository administrator might find it
      useful for diagnostic purposes. Since  svnlook  works via direct repository access
      (and thus can be used only on the machine that holds the
      repository), it refers to the repository with a path, not a URL. If no revision or transaction is specified,
       svnlook  defaults to the youngest (most
      recent) revision of the repository. Options in  svnlook  are global, just
      as they are in  svn  and
       svnadmin ; however, most options apply
      to only one subcommand since the functionality of
       svnlook  is (intentionally) limited in
      scope: svnlook Options --copy-info Causes  svnlook changed  to show
            detailed copy source information. --diff-copy-from Print differences for copied items against the copy
            source. --extensions  ( -x )  ARG Specifies customizations which Subversion should
            make when performing difference calculations.  Valid
            extensions include: --ignore-space-change  ( -b ) Ignore changes in the amount of white space. --ignore-all-space  ( -w ) Ignore all white space. --ignore-eol-style Ignore changes in EOL (end-of-line) style. --show-c-function  ( -p ) Show C function names in the diff output. --unified  ( -u ) Show three lines of unified diff context. The default value is  -u . Note that when Subversion is configured to invoke an
            external diff command, the value of
            the  --extension  ( -x )
            option isn&#39;t restricted to the previously mentioned
            options, but may be  any  additional
            arguments which Subversion should pass to that command.
            If you wish to pass multiple arguments, you must enclose
            all of them in quotes. --full-paths Causes  svnlook tree  to display
            full paths instead of hierarchical, indented path
            components. --limit  ( -l )  ARG Limit output to a maximum number of
             ARG  items. --no-diff-deleted Prevents  svnlook diff  from printing
            differences for deleted files.  The default behavior
            when a file is deleted in a transaction/revision is
            to print the same differences that you would see if
            you had left the file but removed all the content. --no-diff-added Prevents  svnlook diff  from printing
          differences for added files.  The default behavior when
          you add a file is to print the same differences that you
          would see if you had added the entire contents of an
          existing (empty) file. --non-recursive  ( -N ) Operate on a single directory only. --revision  ( -r ) Specifies a particular revision number that you wish
            to examine. --revprop Operates on a revision property instead of a
            property specific to a file or directory.  This option
            requires that you also pass a revision with the
             --revision  ( -r )
            option. --show-inherited-props Works with  svnlook propget  and
             svnlook proplist  to display the versioned
            properties inherited by a path. --transaction  ( -t ) Specifies a particular transaction ID that you wish to
            examine. --show-ids Shows the filesystem node revision IDs for each path
            in the filesystem tree. --verbose  ( -v ) Be verbose.  When used with  svnlook
            proplist , for example, this causes Subversion
            to display not just the list of properties, but their
            values also. --xml svnlook subcommands author svnlook author Print the author. svnlook author REPOS_PATH Description Print the author of a revision or transaction in
        the repository. Options Examples svnlook author  is handy, but not
      very exciting: 
$ svnlook author -r 40 /var/svn/repos 
sally
 svnlook subcommands cat svnlook cat Print the contents of a file. svnlook cat REPOS_PATH PATH_IN_REPOS Description Print the contents of a file. Options Examples This shows the contents of a file in transaction
         ax8 , located
        at  /trunk/README : 
$ svnlook cat -t ax8 /var/svn/repos /trunk/README

               Subversion, a version control system.
               =====================================

$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $

Contents:

     I. A FEW POINTERS
    II. DOCUMENTATION
   III. PARTICIPATING IN THE SUBVERSION COMMUNITY
 
 svnlook subcommands changed svnlook changed Print the paths that were changed. svnlook changed REPOS_PATH Description Print the paths that were changed in a particular
        revision or transaction, as well as  svn
        update-style  status letters in the first two
        columns: &#39;A &#39; Item added to repository &#39;D &#39; Item deleted from repository &#39;U &#39; File contents changed &#39;_U&#39; Properties of item changed; note the leading underscore &#39;UU&#39; File contents and properties changed Files and directories can be distinguished, as
        directory paths are displayed with a
        trailing  / 
        character. Options Examples This shows a list of all the changed files and
        directories in revision 39 of a test repository.  Note
        that the first changed item is a directory, as evidenced
        by the trailing  / : 
$ svnlook changed -r 39 /var/svn/repos
A   trunk/vendors/deli/
A   trunk/vendors/deli/chips.txt
A   trunk/vendors/deli/sandwich.txt
A   trunk/vendors/deli/pickle.txt
U   trunk/vendors/baker/bagel.txt
_U  trunk/vendors/baker/croissant.txt
UU  trunk/vendors/baker/pretzel.txt
D   trunk/vendors/baker/baguette.txt
 Here&#39;s an example that shows a revision in which a
        file was renamed: 
$ svnlook changed -r 64 /var/svn/repos
A   trunk/vendors/baker/toast.txt
D   trunk/vendors/baker/bread.txt
 Unfortunately, nothing in the preceding output reveals
        the connection between the deleted and added files.  Use
        the  --copy-info  option to make this
        relationship more apparent: 
$ svnlook changed -r 64 --copy-info /var/svn/repos
A + trunk/vendors/baker/toast.txt
    (from trunk/vendors/baker/bread.txt:r63)
D   trunk/vendors/baker/bread.txt
 svnlook subcommands date svnlook date Print the datestamp. svnlook date REPOS_PATH Description Print the datestamp of a revision or transaction in
        a repository. Options Examples This shows the date of revision 40 of a test
        repository: 
$ svnlook date -r 40 /var/svn/repos/
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
 svnlook subcommands diff svnlook diff Print differences of changed files and properties. svnlook diff REPOS_PATH Description Print GNU-style differences of changed files and
        properties in a repository. Options Examples This shows a newly added (empty) file, a modified
        binary file, and a renamed (that is, copied and deleted)
        file with modifications: 
$ svnlook diff -r 40 /var/svn/repos
Copied: trunk/relish.txt (from rev 39, trunk/vendors/deli/pickle.txt)
===================================================================
--- trunk/relish.txt                            (rev 0)
+++ trunk/relish.txt    2013-01-29 20:39:17 UTC (rev 40)
@@ -0,0 +1 @@
+Pickle relish is mostly made from cucumbers.

Deleted: trunk/vendors/deli/pickle.txt
===================================================================
--- trunk/vendors/deli/pickle.txt                            (rev 39)
+++ trunk/vendors/deli/pickle.txt    2013-01-29 20:39:17 UTC (rev 49)
@@ -1 +0,0 @@
-Pickles are mostly made from cucumbers.

Modified: trunk/vendors/deli/logo.jpg
===================================================================
(Binary files differ)

Added: trunk/vendors/deli/soda.txt
===================================================================
$
 By default,  svnlook diff  will treat
        copied files very much like any other added file,
        displaying in their entirety the contents of the new file
        and merely using a different label to draw the copy/add
        distinction.  However, you can use the
         --diff-copy-from  option to cause
         svnlook diff  to consider a copied
        file as worthy of mention only if it differs from the file
        from which it was copied, and to actually describe those
        differences. 
$ svnlook diff -r 40 /var/svn/repos --diff-copy-from
Copied: trunk/relish.txt (from rev 39, trunk/vendors/deli/pickle.txt)
===================================================================
--- trunk/vendors/deli/pickle.txt    2013-01-29 20:39:17 UTC (rev 39)
+++ trunk/relish.txt    2013-01-29 20:47:40 UTC (rev 3)
@@ -1 +1 @@
-Pickles are mostly made from cucumbers.
+Pickle relish is mostly made from cucumbers.

Deleted: trunk/vendors/deli/pickle.txt
===================================================================
--- trunk/vendors/deli/pickle.txt    (rev 39)
+++ trunk/vendors/deli/pickle.txt    2013-01-29 20:39:17 UTC (rev 40)
@@ -1 +0,0 @@
-Pickles are mostly made from cucumbers.

Modified: trunk/vendors/deli/logo.jpg
===================================================================
(Binary files differ)

Added: trunk/vendors/deli/soda.txt
==============================================================================
$
 Use the  --no-diff-deleted  option to
        silence output regarding deleted files. 
$ svnlook diff -r 40 /var/svn/repos --no-diff-deleted
Copied: trunk/relish.txt (from rev 39, trunk/vendors/deli/pickle.txt)
===================================================================
--- trunk/relish.txt                            (rev 0)
+++ trunk/relish.txt    2013-01-29 20:39:17 UTC (rev 40)
@@ -0,0 +1 @@
+Pickle relish is mostly made from cucumbers.

Modified: trunk/vendors/deli/logo.jpg
===================================================================
(Binary files differ)

Added: trunk/vendors/deli/soda.txt
==============================================================================
$
 Note that in each of the previous examples, when a
        file has a nontextual  svn:mime-type 
        property, the differences are not explicitly shown. svnlook subcommands dirs-changed svnlook dirs-changed Print the directories that were themselves changed. svnlook dirs-changed REPOS_PATH Description Print the directories that were themselves changed
        (property edits) or whose file children were
        changed. Options Examples This shows the directories that changed in
        revision 40 in our sample repository: 
$ svnlook dirs-changed -r 40 /var/svn/repos
trunk/vendors/deli/
 svnlook subcommands filesize svnlook filesize Print the size (in bytes) of a versioned
        file. svnlook filesize REPOS_PATH
        PATH_IN_REPOS Description Print the file size (in bytes) of the file located
        at  PATH_IN_REPOS  in the HEAD
        revision of the repository identified
        by  REPOS_PATH  as a base-10
        integer followed by an end-of-line character.  Use
        the  --revision  ( -r )
        and  --transaction  ( -t )
        options to specify a version of the file other than HEAD
        whose file size you wish to display. Options Examples The following demonstrates how to display the size of
        the  trunk/vendors/deli/soda.txt  file
        as it appeared in revision 40 of our sample
        repository: 
$ svnlook filesize -r 40 /var/svn/repos trunk/vendors/deli/soda.txt
23
$
 svnlook subcommands help svnlook help (h, ?) Help! Also svnlook -h and svnlook -?. Description Displays the help message
        for  svnlook .  This command, like its
        brother,  svn help , is also your friend,
        even though you never call it anymore and forgot to invite
        it to your last party. Options None svnlook subcommands history svnlook history Print information about the history of a path in
        the repository (or the root directory if no path is
        supplied). svnlook history REPOS_PATH [PATH_IN_REPOS] Description Print information about the history of a path in
        the repository (or the root directory if no path is
        supplied). Options Examples This shows the history output for the path
         /branches/bookstore  as of revision 13 in our
        sample repository: 
$ svnlook history -r 13 /var/svn/repos /branches/bookstore --show-ids
REVISION   PATH &lt;ID&gt;
--------   ---------
      13   /branches/bookstore &lt;1.1.r13/390&gt;
      12   /branches/bookstore &lt;1.1.r12/413&gt;
      11   /branches/bookstore &lt;1.1.r11/0&gt;
       9   /trunk &lt;1.0.r9/551&gt;
       8   /trunk &lt;1.0.r8/131357096&gt;
       7   /trunk &lt;1.0.r7/294&gt;
       6   /trunk &lt;1.0.r6/353&gt;
       5   /trunk &lt;1.0.r5/349&gt;
       4   /trunk &lt;1.0.r4/332&gt;
       3   /trunk &lt;1.0.r3/335&gt;
       2   /trunk &lt;1.0.r2/295&gt;
       1   /trunk &lt;1.0.r1/532&gt;
 svnlook subcommands info svnlook info Print the author, datestamp, log message size,
        and log message. svnlook info REPOS_PATH Description Print the author, datestamp, log message size (in bytes),
        and log message, followed by a newline character. Options Examples This shows the info output for revision 40 in our
        sample repository: 
$ svnlook info -r 40 /var/svn/repos
sally
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
16
Rearrange lunch.
 svnlook subcommands lock svnlook lock If a lock exists on a path in the repository,
        describe it. svnlook lock REPOS_PATH PATH_IN_REPOS Description Print all information available for the lock at
         PATH_IN_REPOS .  If
         PATH_IN_REPOS  is not locked,
        print nothing. Options None Examples This describes the lock on the file
         tree.jpg : 
$ svnlook lock /var/svn/repos tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
 svnlook subcommands log svnlook log Print the log message, followed by a newline 
        character. svnlook log REPOS_PATH Description Print the log message. Options Examples This shows the log output for revision 40 in our sample
        repository: 
$ svnlook log /var/svn/repos/
Rearrange lunch.
 svnlook subcommands propget svnlook propget (pget, pg) Print the raw value of a property on a path in
        the repository. svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS] Description List the value of a property on a path in the
        repository. Options Examples This shows the value of the  seasonings  property
        on the file  /trunk/sandwich  in the
         HEAD  revision: 
$ svnlook pg /var/svn/repos seasonings /trunk/sandwich
mustard
 This shows the inherited values of the  
        svn:auto-props  property on the directory
         /trunk  in revision 14: 
$ svnlook pg repos svn:auto-props trunk --show-inherited-props -v -r14
Inherited properties on &#39;/trunk&#39;,
from &#39;/&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native
 svnlook subcommands proplist svnlook proplist (plist, pl) Print the names and values of versioned file and
        directory properties. svnlook proplist REPOS_PATH [PATH_IN_REPOS] Description List the properties of a path in the repository.  With
         --verbose  ( -v ), show the
        property values too. Options Examples This shows the names of properties set on the file
         /trunk/README  in the
         HEAD  revision: 
$ svnlook proplist /var/svn/repos /trunk/README
  original-author
  svn:mime-type
 This is the same command as in the preceding example,
        but this time showing the property values as well: 
$ svnlook -v proplist /var/svn/repos /trunk/README
  original-author : harry
  svn:mime-type : text/plain
 This shows the properties inherited by a directory:
         
$ svnlook pl /var/svn/repos branches --show-inherited-props -v
Inherited properties on &#39;/branches&#39;,
from &#39;/&#39;:
  svn:auto-props
    *.py = svn:eol-style=native
    *.c = svn:eol-style=native
    *.h = svn:eol-style=native

  svn:global-ignores
    *.diff
    *.patch

Properties on &#39;/branches&#39;:

 svnlook subcommands tree svnlook tree Print the tree. svnlook tree REPOS_PATH [PATH_IN_REPOS] Description Print the tree, starting at
         PATH_IN_REPOS  (if supplied; at
        the root of the tree otherwise), optionally showing node
        revision IDs. Options Example This shows the tree output for revision 13 in our
        sample repository: 
$ svnlook tree -r 13 /var/svn/repos
/
 trunk/
  button.c
  Makefile
  integer.c
 branches/
  bookstore/
   button.c
   Makefile
   integer.c
 
 Use the  --show-ids  option to include
        node revision IDs (unique internal identifiers for
        specific nodes in Subversion&#39;s versioned filesystem
        implementation): 
$ svnlook tree -r 13 /var/svn/repos --show-ids
/ &lt;0.0.r13/811&gt;
 trunk/ &lt;1.0.r9/551&gt;
  button.c &lt;2.0.r9/238&gt;
  Makefile &lt;3.0.r7/41&gt;
  integer.c &lt;4.0.r6/98&gt;
 branches/ &lt;5.0.r13/593&gt;
  bookstore/ &lt;1.1.r13/390&gt;
   button.c &lt;2.1.r12/85&gt;
   Makefile &lt;3.0.r7/41&gt;
   integer.c &lt;4.1.r13/109&gt;
 
 For output which lends itself more readily to being
        parsed by scripts, use the  --full-paths 
        option, which causes  svnlook  to print
        the full repository path of each tree item and to not use
        indentation to indicate hierarchy: 
$ svnlook tree -r 13 /var/svn/repos --show-ids --full-paths
/ &lt;0.0.r13/811&gt;
trunk/ &lt;1.0.r9/551&gt;
trunk/button.c &lt;2.0.r9/238&gt;
trunk/Makefile &lt;3.0.r7/41&gt;
trunk/integer.c &lt;4.0.r6/98&gt;
branches/ &lt;5.0.r13/593&gt;
branches/bookstore/ &lt;1.1.r13/390&gt;
branches/bookstore/button.c &lt;2.1.r12/85&gt;
branches/bookstore/Makefile &lt;3.0.r7/41&gt;
branches/bookstore/integer.c &lt;4.1.r13/109&gt;
 
 svnlook subcommands uuid svnlook uuid Print the repository&#39;s
       UUID . svnlook uuid REPOS_PATH Description Print the  UUID  for the repository.
        The  UUID  is the repository&#39;s
         u niversal  u nique
         id entifier.  The Subversion client
        uses this identifier to differentiate between one
        repository and another. Options None Examples 
$ svnlook uuid /var/svn/repos
e7fe1b91-8cd5-0310-98dd-2f12e793c5e8
 svnlook subcommands youngest svnlook youngest Print the youngest revision number. svnlook youngest REPOS_PATH Description Print the youngest revision number of a repository. Options None Examples This shows the youngest revision of our sample
      repository: 
$ svnlook youngest /var/svn/repos/ 
42
 svnmucc Reference Subversion Multiple URL Command Client The Subversion Multiple URL Command Client
      ( svnmucc ) is a tool that can make arbitrary
      changes to the repository without the use of a working copy.  As
      regards remote commit capabilities, the functionality provided
      by this tool is similar to, but far exceeds, that which is
      offered by the Subversion command-line client itself.  For
      example,  svnmucc  is not limited to performing
      only a single type of change in a given commit.  It is also able
      to perform working-copy-less file content and versioned property
      modifications, which is functionality not currently offered
      by  svn . This reference describes the  svnmucc  tool,
      and the various remote modification actions you can perform
      using it. svnmucc svnmucc Perform one or more Subversion repository
        URL-based ACTIONs, committing the result as a (single) new
        revision. svnmucc ACTION... Description svnmucc  is a program for modifying
        Subversion-versioned data without the use of a working copy.
        It allows operations to be performed directly against the
        repository URLs of the files and directories that the user
        wishes to change.  Each invocation of  svnmucc 
        attempts one or more  ACTION s,
        atomically committing the results of those combined
         ACTION s as a single new
        revision. Actions svnmucc  supports the following
        actions (and related arguments), which may be combined into
        ordered sequences on the command line: cp  REV 
             SRC-URL  
             DST-URL Copy the file or directory located
              at  SRC-URL  in
              revision  REV 
              to  DST-URL . mkdir  URL Create a new directory at  URL .
              The parent directory of  URL 
              must already exist (or have been created by a
              prior  svnmucc  action), as this
              command does not offer the ability to automatically
              create any missing intermediate parent
              directories. mv  SRC-URL  
             DST-URL Move the file or directory located
              at  SRC-URL  to
               DST-URL . rm  URL Delete the file or directory located
              at  URL . put  SRC-FILE 
             URL Add a new file or modify an existing
              one located at  URL ,
              copying the contents of the local file
               SRC-FILE  as the new contents
              of the created or modified file.  As a special
              consideration,  SRC-FILE  may
              be  -  to instruct
               svnmucc  to read from standard input
              rather than a local filesystem file. propset  NAME 
             VALUE 
             URL Set the value of the
              property  NAME  on the
              target  URL 
              to  VALUE . propsetf  NAME 
             FILE 
             URL Set the value of the
              property  NAME  on the
              target  URL 
              to the contents of the file
               FILE . propdel  NAME 
             URL Delete the property  NAME 
              from the target  URL . Options Options specified on the  svnmucc 
        command line are global to all actions performed by that
        command line.  The following is a list of the options
        supported by this tool: --config-dir DIR Read configuration information from the specified
              directory instead of the default location
              ( .subversion  in the user&#39;s home
              directory). --config-option CONFSPEC Set, for the duration of the command, the value
              of a runtime configuration option.
               CONFSPEC  is a
              string which specifies the configuration option
              namespace, name and value that you&#39;d like to assign,
              formatted as
               FILE : SECTION : OPTION =[ VALUE ].
              In this syntax,  FILE 
              and  SECTION  are the runtime
              configuration file (either  config 
              or  servers ) and the section
              thereof, respectively, which contain the option whose
              value you wish to
              change.   OPTION  is, of
              course, the option itself,
              and  VALUE  the value (if
              any) you wish to assign to the option.  For example,
              to temporarily disable the use of the automatic
              property setting feature,
              use  --config-option=config:miscellany:enable-auto-props=no .
              You can use this option multiple times to change
              multiple option values simultaneously. --extra-args  ( -X )
             ARGFILE Read additional would-be command-line arguments
              from  ARGFILE , one argument
              per line.  As a special consideration,
               ARGFILE  may be
               -  to indicate that additional
              arguments should be read instead from standard
              input. --file  ( -F )
             MSGFILE Use the contents of the  MSGFILE 
               as the log message for the commit. --help  ( -h ,
             -? ) Show program usage information and exit. --message  ( -m )
             MSG Use  MSG  as the log
               message for the commit. --no-auth-cache Prevent caching of authentication information
              (e.g., username and password) in the Subversion
              runtime configuration directories. --non-interactive Disable all interactive prompting (e.g., requests
              for authentication credentials). --revision  ( -r )
             REV Use revision  REV  as the
              baseline revision for all changes made via
              the  svnmucc  actions.  This is an
              important option which users should habituate to using
              whenever modifying existing versioned items to avoid
              inadvertently undoing contemporary changes made by
              fellow team members. --root-url  ( -U )
             ROOT-URL Use  ROOT-URL  as a base
              URL to which all other URL targets are relative.  This
              URL need not be the repository&#39;s root URL (such
              as might be reported by  svn info ).
              It can be any URL common to the various targets which
              are specified in the  svnmucc 
              actions. --password  ( -p )
             PASSWD Use  PASSWD  as the
              password when authenticating against a Subversion
              server.  If not provided, or if incorrect, Subversion
              will prompt you for this information as needed. --username NAME Use  USERNAME  as the
              username when authenticating against a Subversion
              server.  If not provided, or if incorrect, Subversion
              will prompt you for this information as needed. --version Display the program&#39;s version information and
              exit. --with-revprop NAME = VALUE Set the value of the revision property
               NAME  to
               VALUE  on the committed
              revision. Examples To (safely) modify a file&#39;s contents without using a
        working copy, use  svn cat  to fetch the
        current contents of the file, and  svnmucc
        put  to commit the edited contents thereof. 
$ # Calculate some convenience variables.
$ export FILEURL=http://svn.example.com/projects/sandbox/README
$ export BASEREV=`svn info ${FILEURL} | \
                  grep &#39;^Last Changed Rev&#39; | cut -d &#39; &#39; -f 2`
$ # Get a copy of the file&#39;s current contents.
$ svn cat ${FILEURL}@${BASEREV} &gt; /tmp/README.tmpfile
$ # Edit the (copied) file.
$ vi /tmp/README.tmpfile
$ # Commit the new content for our file.
$ svnmucc -r ${BASEREV} put README.tmpfile ${FILEURL} \
          -m &quot;Tweak the README file.&quot;
r24 committed by harry at 2013-01-21T16:21:23.100133Z
# Cleanup after ourselves.
$ rm /tmp/README.tmpfile
 Apply a similar approach to change a file or directory
        property.  Simply use  svn propget 
        and  svnmucc propsetf  instead
        of  svn cat  and  svnmucc
        put , respectively. 
$ # Calculate some convenience variables.
$ export PROJURL=http://svn.example.com/projects/sandbox
$ export BASEREV=`svn info ${PROJURL} | \
                  grep &#39;^Last Changed Rev&#39; | cut -d &#39; &#39; -f 2`
$ # Get a copy of the directory&#39;s &quot;license&quot; property value.
$ svn -r ${BASEREV} propget license ${PROJURL} &gt; /tmp/prop.tmpfile
$ # Tweak the property.
$ vi /tmp/prop.tmpfile
$ # Commit the new property value.
$ svnmucc -r ${BASEREV} propsetf prop.tmpfile ${PROJURL} \
          -m &quot;Tweak the project directory &#39;license&#39; property.&quot;
r25 committed by harry at 2013-01-21T16:24:11.375936Z
# Cleanup after ourselves.
$ rm /tmp/prop.tmpfile
 Let&#39;s look now at some multi-operation examples. To implement a  moving tag , where a single
        tag name is recycled to point to different snapshots (for
        example, the current latest stable version) of a codebase,
        use  svnmucc rm  and  svnmucc
        cp : 
$ svnmucc -U http://svn.example.com/projects/doohickey \
          rm tags/latest-stable \
          cp HEAD trunk tags/latest-stable \
          -m &quot;Slide the &#39;latest-stable&#39; tag forward.&quot;
r134 committed by harry at 2013-01-12T11:02:16.142536Z
$ 
 In the previous example, we slyly introduced the use of
        the  --root-url (-U)  option.  Use this
        option to specify a base URL to which all other operand URLs
        are treated as relative (and save yourself some
        typing). The following shows an example of using
         svnmucc  to, in a single revision, create
        a new tag of your project which includes a newly created
        descriptive file and which lacks a directory which shouldn&#39;t
        be included in, say, a release tarball. 
$ echo &quot;This is the 1.2.0 release.&quot; | \
       svnmucc -U http://svn.example.com/projects/doohickey \
               -m &quot;Tag the 1.2.0 release.&quot; \
               -- \
               cp HEAD trunk tags/1.2.0 \
               rm tags/1.2.0/developer-notes \
               put - tags/1.2.0/README.tag
r164 committed by cmpilato at 2013-01-22T05:26:15.563327Z
$ svn log -c 164 -v http://svn.example.com/projects/doohickey
------------------------------------------------------------------------
r164 | cmpilato | 2013-01-22 00:26:15 -0500 (Tue, 22 Jan 2013) | 1 line
Changed paths:
   A /tags/1.2.0 (from /trunk:163)
   A /tags/1.2.0/README.tag
   D /tags/1.2.0/developer-notes

Tag the 1.2.0 release.
$ 
 The previous example demonstrates not only how to do
        several different things in a single  svnmucc 
        invocation, but also the use of standard input as the source
        of new file contents.  Note the presence of  -- 
        to indicate that no more options follow on the command line.
        This is required so that the bare  -  used
        in the  svnmucc put  action won&#39;t be
        flagged as a malformed option indicator. svnrdump Reference Remote Subversion Repository Data Migration svnrdump  joined the Subversion tool chain
      in the Subversion 1.7 release.  It is best described as a
      network-aware version of the  svnadmin dump 
      and  svnadmin load  commands, paired together
      and released as a separate standalone program.  We discuss the
      process of dumping and loading repository data using
      both  svnadmin 
      and  svnrdump  in
       . Options in  svnrdump  are global, just
      as they are in  svn  and
       svnadmin : svnrdump Options --config-dir DIR Instructs Subversion to read configuration
            information from the specified directory instead of the
            default location ( .subversion  in
            the user&#39;s home directory). --config-option FILE : SECTION : OPTION =[ VALUE ] Sets, for the duration of the command, the value of
            a runtime configuration
            option.   FILE 
            and  SECTION  are the runtime
            configuration file (either  config 
            or  servers ) and the section thereof,
            respectively, which contain the option whose value you
            wish to change.   OPTION  is,
            of course, the option itself,
            and  VALUE  the value (if any)
            you wish to assign to the option.  For example, to
            temporarily disable the use of the automatic property
            setting feature,
            use  --config-option=servers:global:http-library=serf .
            You can use this option multiple times to change
            multiple option values simultaneously. --incremental Dump a revision or revision range only as a diff
            against the previous revision, instead of the default,
            which is begin a dumped revision range with a complete
            expansion of all contents of the repository as of that
            revision. --no-auth-cache Prevents caching of authentication information
            (e.g., username and password) in the Subversion
            runtime configuration directories. --non-interactive In the case of an authentication failure or
            insufficient credentials, prevents prompting for
            credentials (e.g., username or password).  This is useful
            if you&#39;re running Subversion inside an automated
            script and it&#39;s more appropriate to have Subversion fail
            than to prompt for more information. --password PASSWD Specifies the password to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. --quiet  ( -q ) Requests that the client print only essential
            information while performing an operation. --revision  ( -r )  ARG Used by  svnsync copy-revprops  to
            specify a particular revision or revision range on which
            to operate. --trust-server-cert Used with  --non-interactive  to accept
            any unknown SSL server certificates without prompting. --username NAME Specifies the username to use when authenticating
            against a Subversion server.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. svnrdump subcommands dump svnrdump dump svnrdump dump SOURCE_URL Description Dump that is, generate a repository dump stream
        of revisions of the repository item located
        at  SOURCE_URL , printing the
        information to standard output.  By default, the entire
        history will be included in the dump stream, but the scope
        of the operation can be limited via the use of
        the  --revision  ( -r )
        option. Options Examples Generate a dump stream of the full history of a remote
        repository (assuming that the user as who this runs has
        authorization to read all paths in the repository). 
$ svnrdump dump http://svn.example.com/repos/calc &gt; full.dump
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
 
 Incrementally dump a single revision from that same
        repository: 
$ svnrdump dump http://svn.example.com/repos/calc \
           -r 21 --incremental &gt; inc.dump
* Dumped revision 21.
$
 svnrdump subcommands help svnrdump help Help! svnrdump help Description Use this to get help.  Well, certain kinds of help.
        Need white lab coat and straightjackets kind of help?
        There&#39;s a whole different protocol for that sort of
        thing. Options None svnrdump subcommands load svnrdump load svnrdump load DEST_URL Description Read from standard input revision information
        described in a Subversion repository dump stream, and load
        that information into the repository located
        at  DEST_URL . Options Examples Dump the contents of a local repository, and
        use  svnrdump load  to transfer that
        revision information into an existing remote
        repository: 
$ svnadmin dump -q /var/svn/repos/new-project | \
      svnrdump load http://svn.example.com/repos/new-project
* Loaded revision 0
* Loaded revision 1.
* Loaded revision 2.
 
 To operate properly  svnrdump load 
          requires that the target repository have revision
          property modification enabled via the pre-revprop-change
          hook.  For details about that hook, see
           . svnserve Reference Custom Subversion Server svnserve svnserve Serve Subversion repositories via Subversion&#39;s
        custom network protocol svnserve [-d | -i | -t | -X] OPTIONS... Description svnserve  allows access to Subversion
        repositories using Subversion&#39;s custom network
        protocol. You can run  svnserve  as a standalone
        server process (for clients that are using the
         svn://  access method); you can have a
        daemon such as  inetd 
        or  xinetd  launch it for you on demand (also
        for  svn:// ), or you can have
         sshd  launch it on demand for the
         svn+ssh://  access method. Unless the  --config-file  option was specified on
        the command line, once the client has selected a repository by
        transmitting its URL,  svnserve  reads a file named
         conf/svnserve.conf  in the repository
        directory to determine repository-specific settings such as
        what authentication database to use and what authorization
        policies to apply.  See
          for details of the
         svnserve.conf  file. Options Unlike the previous commands we&#39;ve
        described,  svnserve  has no
        subcommands it is controlled exclusively by
        options. --cache-fulltexts ARG Toggles support for fulltext file content caching (in
              FSFS repositories only). --cache-txdeltas ARG Toggles support for file content delta caching (in
              FSFS repositories only). --compression LEVEL Specifies the level of compression used for wire
              transmissions as an integer beween 0 and 9, inclusive.
              A value of  9  offers the best
              compression,  5  is the default value,
              and  0  disables compression
              altogether. --config-file FILENAME When specified,  svnserve  reads
               FILENAME  once at program startup and
              caches the  svnserve  configuration.  The
              password and authorization configurations referenced from filename
              will be loaded on each connection.   svnserve 
              will not read any per‐repository
               conf/svnserve.conf  files when this option is
              used.  See the   for
              details of the file format for this option. --daemon  ( -d ) Causes  svnserve  to run in daemon
              mode.   svnserve  backgrounds itself
              and accepts and serves TCP/IP connections on
              the  svn  port (3690, by
              default). --foreground When used together with  -d ,
              causes  svnserve  to stay in the
              foreground.  This is mainly useful for debugging. --inetd  ( -i ) Causes  svnserve  to use the
               stdin  and  stdout  file descriptors, as is appropriate for a
              daemon running out of  inetd . --help  ( -h ) Displays a usage summary and exits. --listen-host HOST Causes  svnserve  to listen on the
              interface specified by  HOST ,
              which may be either a hostname or an IP address. --listen-once  ( -X ) Causes  svnserve  to accept one
              connection on the  svn  port, serve it,
              and exit.  This option is mainly useful for
              debugging. --listen-port PORT Causes  svnserve  to listen on
               PORT  when run in daemon mode.
              (FreeBSD daemons listen only on tcp6 by default this
              option tells them to also listen on tcp4.) --log-file FILENAME Instructs  svnserve  to create (if
              necessary) and use the file located
              at  FILENAME  for Subversion
              operational log output of the same sort
              that  mod_dav_svn  generates.  See
               
              for details. --memory-cache-size  ( -M )  ARG Configures the size (in Megabytes) of the extra
              in-memory cache used to minimize redundant operations.
              The default value is  16 .  (This cache
              is used for FSFS-backed repositories only.) --pid-file FILENAME Causes  svnserve  to write its
              process ID to  FILENAME , which
              must be writable by the user under
              which  svnserve  is running. --prefer-ipv6  ( -6 When resolving the listen hostname, prever an IPv6
              answer over an IPv4 one.  IPv4 is preferred by
              default. --quiet Disables progress notifications.  Error output will
              still be printed. --root  ( -r )  ROOT Sets the virtual root for repositories served by
               svnserve .  The pathname in URLs
              provided by the client will be interpreted relative to
              this root and will not be allowed to escape this
              root. --threads  ( -T ) When running in daemon mode, causes
               svnserve  to spawn a thread instead of
              a process for each connection (e.g., for when running on
              Windows).  The  svnserve  process still
              backgrounds itself at startup time. --tunnel  ( -t ) Causes  svnserve  to run in tunnel
              mode, which is just like the  inetd 
              mode of operation (both modes serve one connection over
               stdin / stdout , and then exit), except that the connection
              is considered to be preauthenticated with the username
              of the current UID.  This flag is automatically passed
              for you by the client when running over a tunnel agent
              such as  ssh .  That means there&#39;s
              rarely any need for  you  to pass
              this option to  svnserve .  So, if you
              find yourself
              typing  svnserve --tunnel  on the
              command line and wondering what to do next, see
               . --tunnel-user NAME Used in conjunction with the  --tunnel 
              option, tells  svnserve  to assume that
               NAME  is the authenticated
              user, rather than the UID of the  svnserve 
              process.  This is useful for users wishing to share a single
              system account over SSH, but to maintain separate commit
              identities. --version Displays version information and a list of repository
            backend modules available, and then exits. svnsync Reference Subversion Repository Mirroring svnsync  is the Subversion remote
      repository mirroring tool.  Put simply, it allows you to replay
      the revisions of one repository into another one. In any mirroring scenario, there are two repositories: the
      source repository, and the mirror (or  sink )
      repository.  The source repository is the repository from which
       svnsync  pulls revisions.  The mirror
      repository is the destination for the revisions pulled from the
      source repository.  Each of the repositories may be local or
      remote they are only ever addressed by their URLs. The  svnsync  process requires only read
      access to the source repository; it never attempts to modify it.
      But obviously,  svnsync  requires both read and
      write access to the mirror repository. svnsync  is very sensitive to changes
        made in the mirror repository that weren&#39;t made as part of a
        mirroring operation.  To prevent this from happening, it&#39;s
        best if the  svnsync  process is the only
        process permitted to modify the mirror repository. Options in  svnsync  are global, just
      as they are in  svn  and
       svnadmin : svnsync Options --allow-non-empty Disables the verification (which  svnsync
            initialize  performs by default) that the
            repository being initialized is empty of history
            version. --config-dir DIR Instructs Subversion to read configuration
            information from the specified directory instead of the
            default location ( .subversion  in
            the user&#39;s home directory). --config-option CONFSPEC Sets, for the duration of the command, the value of
            a runtime configuration
            option.   CONFSPEC  is a string
            which specifies the configuration option namespace, name
            and value that you&#39;d like to assign, formatted as
             FILE : SECTION : OPTION =[ VALUE ].
            In this syntax,  FILE 
            and  SECTION  are the runtime
            configuration file (either  config 
            or  servers ) and the section thereof,
            respectively, which contain the option whose value you
            wish to change.   OPTION  is,
            of course, the option itself,
            and  VALUE  the value (if any)
            you wish to assign to the option.  For example, to
            temporarily disable the use of the automatic property
            setting feature,
            use  --config-option=servers:global:http-library=serf .
            You can use this option multiple times to change
            multiple option values simultaneously. --disable-locking Causes  svnsync  to bypass its own
            exclusive access mechanisms and operate on the
            assumption that its exclusive access to the mirror
            repository is being guaranteed through some other,
            out-of-band mechanism. --no-auth-cache Prevents caching of authentication information
            (e.g., username and password) in the Subversion
            runtime configuration directories. --non-interactive In the case of an authentication failure or
            insufficient credentials, prevents prompting for
            credentials (e.g., username or password).  This is useful
            if you&#39;re running Subversion inside an automated
            script and it&#39;s more appropriate to have Subversion fail
            than to prompt for more information. --quiet  ( -q ) Requests that the client print only essential
            information while performing an operation. --revision  ( -r )  ARG Used by  svnsync copy-revprops  to
            specify a particular revision or revision range on which
            to operate. --source-password PASSWD Specifies the password for the Subversion server
            from which you are syncing.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. --source-prop-encoding  ARG Instructs  svnsync  to assume that
            translatable Subversion revision properties found in the
            source repository are stored using the character
            encoding  ARG  and to transcode
            those into UTF-8 when copying them into the mirror
            repository. --source-username NAME Specifies the username for the Subversion server
            from which you are syncing.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. --steal-lock Causes  svnsync  to steal, as
            necessary, the lock which it uses on the mirror
            repository to ensure exclusive repository access.  (This
            option should only be used when a lock exists in the
            mirror repository and is known to be stale that
            is, when you are certain that there are no
            other  svnsync  processes accessing
            that repository.) --sync-password PASSWD Specifies the password for the Subversion server to
            which you are syncing.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. --sync-username NAME Specifies the username for the Subversion server to
            which you are syncing.  If not provided, or if
            incorrect, Subversion will prompt you for this
            information as needed. --trust-server-cert Used with  --non-interactive  to accept
            any unknown SSL server certificates without prompting. svnsync subcommands copy-revprops svnsync copy-revprops Copy all revision properties for a particular
        revision (or range of revisions) from the source
        repository to the mirror repository. svnsync copy-revprops DEST_URL
        [SOURCE_URL] svnsync copy-revprops DEST_URL
        REV[:REV2] Description Because Subversion revision properties can be changed
        at any time, it&#39;s possible that the properties for some
        revision might be changed after that revision has already
        been synchronized to another repository.  Because the
         svnsync synchronize  command operates
        only on the range of revisions that have not yet been
        synchronized, it won&#39;t notice a revision property change
        outside that range.  Left as is, this causes a deviation
        in the values of that revision&#39;s properties between the
        source and mirror repositories.   svnsync
        copy-revprops  is the answer to this problem.
        Use it to resynchronize the revision properties for a
        particular revision or range of revisions. When  SOURCE_URL  is
        provided,  svnsync  will use it as the
        repository URL which the destination repository is
        mirroring. Generally,  SOURCE_URL 
        will be exactly the same source URL as was used with
        the  svnsync initialize  command when the
        mirror was first set up.  You may choose, however, to
        omit  SOURCE_URL , in which
        case  svnsync  will consult the mirror
        repository&#39;s records to determine the source URL which
        should be used. We strongly recommend that you specify the source
          URL on the command-line, especially when untrusted users
          have write access to the revision 0 properties
          which  svnsync  uses to coordinate its
          efforts. Options Examples Resynchronize the revision properties associated with
        a single revision (r6): 
$ svnsync copy-revprops -r 6 file:///var/svn/repos-mirror \
                             http://svn.example.com/repos
Copied properties for revision 6.
$
 svnsync subcommands help svnsync help Help! svnsync help Description This subcommand is useful when you&#39;re trapped in a
        foreign prison with neither a Net connection nor a copy of
        this book, but you do have a local Wi-Fi network running
        and you&#39;d like to sync a copy of your repository over to
        the backup server that Ira The Knife is running over in
        cell block D. Options None svnsync subcommands info svnsync info Print information about the synchronization
        of a destination repository. svnsync info DEST_URL Description Print the synchronization source URL, source repository
        UUID and the last revision merged from the source to the
        destination repository at  DEST_URL . Options Examples Print the synchronization information of a mirror
        repository: 
$ svnsync info file:///var/svn/repos-mirror
Source URL: http://svn.example.com/repos
Source Repository UUID: e7fe1b91-8cd5-0310-98dd-2f12e793c5e8
Last Merged Revision: 47
$
 svnsync subcommands initialize svnsync initialize (init) Initialize a mirror repository for
        synchronization from the source repository. svnsync initialize MIRROR_URL
        SOURCE_URL Description svnsync initialize  verifies that a
        repository meets the basic requirements of a new mirror
        repository and records the initial administrative
        information that associates the mirror repository with the
        source repository (specified
        by  SOURCE_URL ).  This is the
        first  svnsync  operation you run on a
        would-be mirror repository. Ordinarily,  SOURCE_URL  is
        the URL of the root directory of the Subversion repository
        you wish to mirror.  Subversion 1.5 and newer allow you to
        use  svnsync  for partial repository
        mirroring, though   simply specify the URL of the
        source repository subdirectory you wish to mirror
        as  SOURCE_URL . By default, the aforementioned basic requirements of a
        mirror are that it allows revision property modifications
        and that it contains no version history.  However, as of
        Subversion 1.7, you may now optionally disable the
        verification that the target repository is empty using
        the  --allow-non-empty  option.  While the
        use of this option should not become habitual (as it
        bypasses a valuable safeguard mechanism), it does aid in
        one very common use-case: initializing a copy of a
        repository as a mirror of the original.  This is
        especially handy when setting up new mirrors of
        repositories which contain a large amount of version
        history.  Rather than initialize a brand new repository as
        a mirror and then syncronize all of the history into it,
        administrators will find it  significantly 
        faster to first make a copy of the mature repository
        (perhaps using  svnadmin hotcopy ) and
        then use  svnsync initialize
        --allow-non-empty  to initialize that copy as a
        mirror which is now already up-to-date with the
        original. Options Examples Fail to initialize a mirror repository due to
        inability to modify revision properties: 
$ svnsync initialize file:///var/svn/repos-mirror \
                     http://svn.example.com/repos
svnsync: Repository has not been enabled to accept revision propchanges;
ask the administrator to create a pre-revprop-change hook
$
 Initialize a repository as a mirror, having already
        created a  pre-revprop-change  hook that
        permits all revision property changes: 
$ svnsync initialize file:///var/svn/repos-mirror \
                     http://svn.example.com/repos
Copied properties for revision 0.
$
 svnsync subcommands synchronize svnsync synchronize (sync) Transfer all pending revisions from the source
        repository to the mirror repository. svnsync synchronize DEST_URL
        [SOURCE_URL] Description The  svnsync synchronize  command
        does all the heavy lifting of a repository mirroring
        operation.  After consulting with the mirror repository to
        see which revisions have already been copied into it, it
        then begins to copy any not-yet-mirrored revisions from
        the source repository. svnsync synchronize  can be
        gracefully canceled and restarted. When  SOURCE_URL  is
        provided,  svnsync  will use it as the
        repository URL which the destination repository is
        mirroring. Generally,  SOURCE_URL 
        will be exactly the same source URL as was used with
        the  svnsync initialize  command when the
        mirror was first set up.  You may choose, however, to
        omit  SOURCE_URL , in which
        case  svnsync  will consult the mirror
        repository&#39;s records to determine the source URL which
        should be used. We strongly recommend that you specify the source
          URL on the command-line, especially when untrusted users
          have write access to the revision 0 properties
          which  svnsync  uses to coordinate its
          efforts. Options Examples Copy unsynchronized revisions from the source
        repository to the mirror repository: 
$ svnsync synchronize file:///var/svn/repos-mirror \
                      http://svn.example.com/repos
Committed revision 1.
Copied properties for revision 1.
Committed revision 2.
Copied properties for revision 2.
Committed revision 3.
Copied properties for revision 3.
 
Committed revision 45.
Copied properties for revision 45.
Committed revision 46.
Copied properties for revision 46.
Committed revision 47.
Copied properties for revision 47.
$
 svnversion Reference Subversion Working Copy Version Info svnversion svnversion Summarize the local revision(s) of a working 
        copy. svnversion [OPTIONS] [WC_PATH [TRAIL_URL]] Description svnversion  is a program for
        summarizing the revision mixture of a working copy.  The
        resultant revision number, or revision range, is written to
        standard output. It&#39;s common to use this output in your build process
        when defining the version number of your program. TRAIL_URL , if present, is the
        trailing portion of the URL used to determine whether
         WC_PATH  itself is switched
        (detection of switches within
         WC_PATH  does not rely on
         TRAIL_URL ). When  WC_PATH  is not defined,
        the current directory will be used as the working copy path.
         TRAIL_URL  cannot be defined if
         WC_PATH  is not explicitly
        given. Options Like  svnserve ,
         svnversion  has no subcommands only
        options: --no-newline  ( -n ) Omits the usual trailing newline from the output. --committed  ( -c ) Uses the last-changed revisions rather than the
            current (i.e., highest locally available) revisions. --help  ( -h ) Prints a help summary. --quiet  ( -q ) Requests that the program print only essential
              information while performing an operation. --version Prints the version of  svnversion 
            and exit with no error. Examples If the working copy is all at the same revision (e.g.,
        immediately after an update), then that revision is
        printed out: 
$ svnversion
4168
 You can add  TRAIL_URL  to make
        sure the working copy is not switched from what you
        expect.  Note that the  WC_PATH 
        is required in this command: 
$ svnversion . /var/svn/trunk
4168
 For a mixed-revision working copy, the range of
        revisions present is printed: 
$ svnversion
4123:4168
 If the working copy contains modifications, a trailing
        &#39; M &#39; is added: 
$ svnversion
4168M
 If the working copy is switched, a trailing
        &#39; S &#39; is added: 
$ svnversion
4168S
 svnversion  will also inform you if
        the target working copy is sparsely populated (see
         ) by attaching the
        &#39; P &#39; code to its output: 
$ svnversion
4168P
 Thus, here is a mixed-revision, sparsely populated and
        switched working copy containing some local
        modifications: 
$ svnversion
4123:4168MSP


</plainxml>
