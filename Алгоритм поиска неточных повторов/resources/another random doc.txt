=====================================================================
						DOCUMENTATION
---------------------------------------------------------------------
	Contents:
		I. 		Overview
		II. 	Source Code Discussion
		III. 	Classes Discussion
		
	I.	 Overview
		The goal of this assignment was to develop a strong 
		understanding of an indexable priority queue. In order to 
		achieve this goal, I have been tasked with designing a 
		program involving cars.
		
		This program will be a terminal menu-based program with the 
		following requirements:
		1. User can add a car
		2. User can update a specific car
		3. User can remove a specific car from consideration
		4. User can retrieve the lowest priced car
		5. User can retrieve the lowest mileage car
		6. User can do #4 by make and model
		7. User can do #5 by make and model
		
		To facilitate these requirements, a PQ-based data structure 
		will be implemented that stores these Car objects according to 
		the	relative priorities of price and mileage. These will be	
		stored in a MinHeap. Since I need to allow the user to update 
		cars stored in the structure, an indirection table will be used 
		to allow the PQ to be indexable. I have chosen to use Java's
		HashMap to do the indirection.
		
	II.	 Source Code
		A. Car.java
			1. Function
				This class allows for the creation of Objects that represent 
				a car. Here, I define a car as any general vehicle.
				
			2. Design Comments
				In designing this class, I used Java's Pattern and Matcher
				classes to effectively check if a VIN was valid according
				to the specified rules. Everything else was pretty
				straightforward.
			
		B. PriorityQueue.java
			1. Function
				This class enables Cars to be stored according to the
				lowest price and the lowest mileage.
			2. Design Comments
				I initially wanted to make a single PQ to store the cars
				based on a joint priority. As I jumped into writing the
				class, I began to realize that this could make for some 
				really inefficient searches. I also noticed the difficulty
				I would face in actually implementing my initial plan
				After reflecting on the problem statement, I decided it
				would be best to use two priority queues.
				
				Since I am using two indexable priority queues, I will now b
				using 4*n space (2 PQ and 2 HashMaps). However, 4 is 
				multiplicative constant. This means my memory usage in the 
				worst case if O(n). It is also important to note that if a 
				Car is added to the PriorityQueue object, the two PQs point 
				to that object in memory (i.e. I do not create copies of each
				Car). This is makes sense because to the user they are contained
				in one data structure.
				
				My choice of an array-based min heap is due to the fact that
				inserts and removes are O(lg n) in the worst case. Therefore, n
				inserts and n removes take place in n*lg n + n*lg n time or
				O(n*lg n). This is much more efficient than inserting and removing
				from sorted and unsorted arrays. It was also useful because finding
				the object with a certain minimum value is O(1).
				
				I will discuss the choice of search algorithms, the sinking and
				swimming of values, and the handling of updates when I address
				the methods later.
				
				My choice of using Java's HashMap class to serve as my indirection
				data structure was primarily due to its ability to better handle 
				dynamic resizing than my original attempt at a HashTable. Its
				performance is predictable which was somewhat of an issue with my
				HashTable. Java's HashMap operations that I use are all constant
				time operations or O(1) according to what I was able to find about
				the time complexity of put, get, containsKey, replace, etc. for Java's
				HashMap. If the hash codes for each String are not properly hashed
				by Java, then it will degrade to an O(n) run-time.
				
				Note: My Big-O results are based on amortized costs as I allow for
				dynamic resizing.
				
			
		C. CarTracker.java
			1. Function
				Serves as the client program
			2. Design Comments
				I took a liberty with the add car portion of the program. If an invalid
				or already used VIN was used, the user is prompted to enter a VIN until
				a valid one is given.

	III. Classes
		A. Car
			1. Data Fields
				a. VIN: 17 character Vehicle ID Number
				b. make: Manufacturer Name
				c. model: Brand name of car
				d. price: The price of the car in dollars
				e. mileage: The mileage on the car
				f. color: The color of the car
			2. Constructors
				a. Car(String, String, String, double, double, String)
			3. Setters
				a. setVIN(String): Sets the VIN
				b. setMake(String): Sets the make
				c. setModel(String): Sets the model
				d. setPrice(double): Sets the price
				e. setMileage(double): Sets the mileage
				f. setColor(String): Sets the color
			4. Getters
				a. getVIN(): Returns the VIN
				b. getMake(): Returns the make
				c. getModel(): Returns the model
				d. getPrice(): Returns the price
				e. getMileage(): Returns the mileage
				f. getColor(): Returns the color
			5. Misc. Methods
				a. toString(): Returns a String representation of
				               a Car Object
							   
		B. PriorityQueue			
			1. Data Fields
				a. final INITIAL_SIZE: 16
				b. final MAX_SIZE: 33554432
				c. pqPrice: MinHeap based on car price
				d. pqMileage: MinHeap based on car mileage
				e. indexPrice: HashMap<String, Integer> for pqPrice
				f. indexMileage: HashMap<String, Integer> for pqMileage
				g. size: The number of Car objects in the PriorityQueue
			2. Constructors
				a. No argument Constructors
					1) Constructs a PQ of size 16
					2) Size initialized to 0
				b. Initial Size Constructors
					1) Constructs a PQ according to a specified size
					2) Size initialized to 0
			3. Public Methods
				a. insert: Inserts a Car into the PQ
					1) Add to leaf, swim up, and increment size
					   This allows adds to run in O(lg n) time
					2) Check if the addition made the PQ full
					   and resize if full which is O(n) time.
					3) Amortized run-time is O(n*lg n) for n inserts.
				b. remove
					1) Exchange Car to be removed and last leaf
					2) Set last leaf to null, decrement size
					3) Swim the Car object that previously was
					   in the last leaf and then sink it.
					   This swim and then sink is necessary because 
					   the children of a parent node in a heap have no
					   relationship to one another (i.e. left child is
					   not necessarily lower priority than the right 
					   child). This takes 2*lg n work or O(lg n) time.
					4) Shrink the PQ if it is only a quarter full which
					   is O(n) work.
					5) The amortized cost of n removes is O(n*lg n).
				c. getMinPrice
					1) Returns the minimum priced car in O(1) time.
				d. getMinMileage
					1) Returns the car with minimum mileage in O(1) time.
				e. getMinPriceMM
					1) Worst case run-time to return the car with the
					   the lowest price by make and model is O(n)
					2) On average, it will still be O(n) but it has an
					   optimization that leads to early termination.
				f. getMinMileageMM
					1) Worst case run-time to return the car with the
					   the lowest mileage by make and model is O(n)
					2) On average, it will still be O(n)but it has an
					   optimization that leads to early termination.
				g. updatePrice
					1) Since updating the price could potentially
					   affect a Car's priority swim and sink methods
					   are called.
					2) An update takes O(lg n) time and n updates take
					   O(n*lg n) time.
				h. updateMileage
					1) Since updating the mileage could potentially
					   affect a Car's priority swim and sink methods
					   are called.
					2) An update takes O(lg n) time and n updates take
					   O(n*lg n) time.
				i. updateColor
					1) O(1) work to update the color of a Car
				j. fetch
					1) Fetches a Car object from the PQ in O(1) time
				k. size
					1) Returns the size of the PQ in O(1) time
				l. isEmpty
					1) Returns whether or not the PQ is empty in O(1) time
				m. main
					1) I included this to test my program before I tested
					   the client. The output would only be helpful to me.
			4. Private Methods
				I included several private helper functions to aid in the 
				readability of my code as well as to make debugging a bit
				easier. Many of these methods are constant time operations
				dealing with booleans and swaps. However, there are several
				non-trivial private methods. The four methods involving sink
				and swim operations in the two PQs run in O(lg n) time. The
				private search methods that help with getting minimum 
				attributes of Cars by make and model run in O(n) time since
				in the worst case a Car of a make and model being looked up
				is a leaf.
				
		C.  CarTracker			
			1. Data Fields
				a. kb: Scanner object for keyboard input
			2. Program Structure and Sample I/O
				The program is set up with a main menu with several options.
				The update portion of the program operates a sub menu. The
				two parts of the problem dealing with make and model searches
				will allow a user to keep searching by make and model until
				the user decides to return to the main menu. 
				
			Main Menu:
			
				===========================================
				=				Welcome					  =
				===========================================
				-------------------------------------------
								Main Menu
				1. Add a Car
				2. Update a Car
				3. Remove a Car
				4. Lowest Price Car
				5. Lowest Mileage Car
				6. Lowest Price Car by Make and Model
				7. Lowest Mileage Car by Make and Model
				0. Exit
				Please enter:
			
			User enters 1:
				-------------------------------------------
								Add Car
				Enter VIN: (User Input)
				Enter Make: (User Input)
				Enter Model: (User Input)
				Enter Price: (User Input with parsing)
				Enter Mileage: (User Input with parsing)
				Enter Color: (User Input)
				
			User enters 2:
				-------------------------------------------
							   Update Car
				Please enter the VIN of the car you wish to update: (User Input)
				Displays Car info
				
				1. Change price
				2. Change mileage
				3. Change color
				0. Main Menu
			
			The rest of the program works as is expected of a typical menu-based
			program. Options 6 and 7 give the user the choice to look up by make
			and model until they no longer wish to do look ups.
				