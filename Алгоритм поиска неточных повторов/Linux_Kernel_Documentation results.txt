========================= CLASS #0 =============================
0: <?xml version="1.0" encoding="utf-8" ?> <plainxml>The 802.11 subsystems &amp;ndash; for kernel developers Explaining wireless 802.11 networking in the Linux kernel 2007-2009Johannes BergJohannesBergjohannes@sipsolutions.net This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
30: Key handlingKey handling basics MORE TBDTBDReceive processingTBDTransmit processingTBDStation info handlingProgramming information STA information lifetime rules Aggregation STA SynchronisationTBDLocking, lots of RCUThe 802.11 subsystems &amp;ndash; for kernel developers Explaining wireless 802.11 networking in the Linux kernel 2007-2009Johannes BergJohannesBergjohannes@sipsolutions.net This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
1150: &lt;!-- vim:syntax=sgml:sw=4 --&gt;Linux generic IRQ handlingThomasGleixnertglx@linutronix.deIngoMolnarmingo@elte.hu2005-2010Thomas Gleixner2005-2006Ingo Molnar This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
2385: --&gt;1.0.02009-09-06mccInitial revisionRemote Controller API &amp;sub-remote_controllers; &amp;sub-media-controller; &amp;sub-gen-errors; &amp;sub-fdl-appendix; MTD NAND Driver Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
2692: SCSI Interfaces GuideJamesBottomleyJames.Bottomley@hansenpartnership.comRobLandleyrob@landley.net2007Linux Foundation This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2.
2748: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
*****************************************************************
========================= CLASS #1 =============================
1: This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
31: This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
61: This document is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
64: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
168: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
230: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
902: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
968: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1151: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1219: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1243: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1482: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2263: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2386: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2603: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2607: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2618: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2663: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2693: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2749: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2753: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
3008: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
3233: This document is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
4136: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
4210: This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*****************************************************************
========================= CLASS #2 =============================
2: See the GNU General Public License for more details.
32: See the GNU General Public License for more details.
62: See the GNU General Public License for more details.
65: See the GNU General Public License for more details.
169: See the GNU General Public License for more details.
231: See the GNU General Public License for more details.
903: See the GNU General Public License for more details.
969: See the GNU General Public License for more details.
1152: See the GNU General Public License for more details.
1220: See the GNU General Public License for more details.
1244: See the GNU General Public License for more details.
1483: See the GNU General Public License for more details.
2264: See the GNU General Public License for more details.
2387: See the GNU General Public License for more details.
2604: See the GNU General Public License for more details.
2608: See the GNU General Public License for more details.
2619: See the GNU General Public License for more details.
2664: See the GNU General Public License for more details.
2750: See the GNU General Public License for more details.
2754: See the GNU General Public License for more details.
3009: See the GNU General Public License for more details.
3234: See the GNU General Public License for more details.
4137: See the GNU General Public License for more details.
4211: See the GNU General Public License for more details.
*****************************************************************
========================= CLASS #3 =============================
3: You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
33: You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
66: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
170: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
232: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
904: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
970: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
1153: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
1221: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
1245: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
1484: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2265: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2388: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2605: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2609: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2620: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2665: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2694: For more details see the file COPYING in the source distribution of Linux.
2751: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
2755: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
3010: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
4138: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
4212: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the file COPYING in the source distribution of Linux.
*****************************************************************
========================= CLASS #4 =============================
4: These books attempt to give a description of the various subsystems that play a role in 802.11 wireless networking in Linux.
34: These books attempt to give a description of the various subsystems that play a role in 802.11 wireless networking in Linux.
*****************************************************************
========================= CLASS #5 =============================
5: Since these books are for kernel developers they attempts to document the structures and functions used in the kernel as well as giving a higher-level overview.
35: Since these books are for kernel developers they attempts to document the structures and functions used in the kernel as well as giving a higher-level overview.
*****************************************************************
========================= CLASS #6 =============================
6: The reader is expected to be familiar with the 802.11 standard as published by the IEEE in 802.11-2007 (or possibly later versions).
36: The reader is expected to be familiar with the 802.11 standard as published by the IEEE in 802.11-2007 (or possibly later versions).
*****************************************************************
========================= CLASS #7 =============================
7: References to this standard will be given as &quot;802.11-2007 8.1.5&quot;.
37: References to this standard will be given as &quot;802.11-2007 8.1.5&quot;.
*****************************************************************
========================= CLASS #8 =============================
8: The cfg80211 subsystem Device registration Actions and configuration Scanning and BSS list handling Utility functions Data path helpers Regulatory enforcement infrastructure RFkill integration Test mode The mac80211 subsystem &lt;!-- Generally, this document shall be ordered by increasing complexity.
38: The cfg80211 subsystem Device registration Actions and configuration Scanning and BSS list handling Utility functions Data path helpers Regulatory enforcement infrastructure RFkill integration Test mode The mac80211 subsystem &lt;!-- Generally, this document shall be ordered by increasing complexity.
*****************************************************************
========================= CLASS #9 =============================
9: It is important to note that readers should be able to read only the first few sections to get a working driver and only advanced usage should require reading the full document.
39: It is important to note that readers should be able to read only the first few sections to get a working driver and only advanced usage should require reading the full document.
*****************************************************************
========================= CLASS #10 =============================
10: --&gt;The basic mac80211 driver interface You should read and understand the information contained within this part of the book while implementing a driver.
40: --&gt;The basic mac80211 driver interface You should read and understand the information contained within this part of the book while implementing a driver.
*****************************************************************
========================= CLASS #11 =============================
11: In some chapters, advanced usage is noted, that may be skipped at first.
41: In some chapters, advanced usage is noted, that may be skipped at first.
*****************************************************************
========================= CLASS #12 =============================
12: This part of the book only covers station and monitor mode functionality, additional information required to implement the other modes is covered in the second part of the book.
42: This part of the book only covers station and monitor mode functionality, additional information required to implement the other modes is covered in the second part of the book.
*****************************************************************
========================= CLASS #13 =============================
13: Basic hardware handlingTBD This chapter shall contain information on getting a hw struct allocated and registered with mac80211.
43: Basic hardware handlingTBD This chapter shall contain information on getting a hw struct allocated and registered with mac80211.
*****************************************************************
========================= CLASS #14 =============================
14: Since it is required to allocate rates/modes before registering a hw struct, this chapter shall also contain information on setting up the rate/mode structs.
44: Since it is required to allocate rates/modes before registering a hw struct, this chapter shall also contain information on setting up the rate/mode structs.
*****************************************************************
========================= CLASS #15 =============================
15: Additionally, some discussion about the callbacks and the general programming model should be in here, including the definition of ieee80211_ops which will be referred to a lot.
45: Additionally, some discussion about the callbacks and the general programming model should be in here, including the definition of ieee80211_ops which will be referred to a lot.
*****************************************************************
========================= CLASS #16 =============================
16: Finally, a discussion of hardware capabilities should be done with references to other parts of the book.
46: Finally, a discussion of hardware capabilities should be done with references to other parts of the book.
*****************************************************************
========================= CLASS #17 =============================
17: &lt;!-- intentionally multiple !F lines to get proper order --&gt; PHY configurationTBD This chapter should describe PHY handling including start/stop callbacks and the various structures used.
47: &lt;!-- intentionally multiple !F lines to get proper order --&gt; PHY configurationTBD This chapter should describe PHY handling including start/stop callbacks and the various structures used.
*****************************************************************
========================= CLASS #18 =============================
18: Virtual interfacesTBD This chapter should describe virtual interface basics that are relevant to the driver (VLANs, MGMT etc are not.)
48: Virtual interfacesTBD This chapter should describe virtual interface basics that are relevant to the driver (VLANs, MGMT etc are not.)
*****************************************************************
========================= CLASS #19 =============================
19: It should explain the use of the add_iface/remove_iface callbacks as well as the interface configuration callbacks.
49: It should explain the use of the add_iface/remove_iface callbacks as well as the interface configuration callbacks.
*****************************************************************
========================= CLASS #20 =============================
20: Things related to AP mode should be discussed there.
50: Things related to AP mode should be discussed there.
*****************************************************************
========================= CLASS #21 =============================
21: Things related to supporting multiple interfaces should be in the appropriate chapter, a BIG FAT note should be here about this though and the recommendation to allow only a single interface in STA mode at first!
51: Things related to supporting multiple interfaces should be in the appropriate chapter, a BIG FAT note should be here about this though and the recommendation to allow only a single interface in STA mode at first!
*****************************************************************
========================= CLASS #22 =============================
22: Receive and transmit processingwhat should be hereTBD This should describe the receive and transmit paths in mac80211/the drivers as well as transmit status handling.
52: Receive and transmit processingwhat should be hereTBD This should describe the receive and transmit paths in mac80211/the drivers as well as transmit status handling.
*****************************************************************
========================= CLASS #23 =============================
23: Frame format Packet alignment Calling into mac80211 from interrupts functions/definitions Frame filtering The mac80211 workqueue Advanced driver interface Information contained within this part of the book is of interest only for advanced interaction of mac80211 with drivers to exploit more hardware capabilities and improve performance.
53: Frame format Packet alignment Calling into mac80211 from interrupts functions/definitions Frame filtering The mac80211 workqueue Advanced driver interface Information contained within this part of the book is of interest only for advanced interaction of mac80211 with drivers to exploit more hardware capabilities and improve performance.
*****************************************************************
========================= CLASS #24 =============================
24: LED support Mac80211 supports various ways of blinking LEDs.
54: LED support Mac80211 supports various ways of blinking LEDs.
*****************************************************************
========================= CLASS #25 =============================
25: Wherever possible, device LEDs should be exposed as LED class devices and hooked up to the appropriate trigger, which will then be triggered appropriately by mac80211.
55: Wherever possible, device LEDs should be exposed as LED class devices and hooked up to the appropriate trigger, which will then be triggered appropriately by mac80211.
*****************************************************************
========================= CLASS #26 =============================
26: Hardware crypto acceleration &lt;!-- intentionally multiple !F lines to get proper order --&gt; Powersave support Beacon filter support Multiple queues and QoS supportTBD Access point mode supportTBDSome parts of the if_conf should be discussed here instead Insert notes about VLAN interfaces with hw crypto here or in the hw crypto chapter.
56: Hardware crypto acceleration &lt;!-- intentionally multiple !F lines to get proper order --&gt; Powersave support Beacon filter support Multiple queues and QoS supportTBD Access point mode supportTBDSome parts of the if_conf should be discussed here instead Insert notes about VLAN interfaces with hw crypto here or in the hw crypto chapter.
*****************************************************************
========================= CLASS #27 =============================
27: support for powersaving clients Supporting multiple virtual interfacesTBD Note: WDS with identical MAC address should almost always be OK Insert notes about having multiple virtual interfaces with different MAC addresses here, note which configurations are supported by mac80211, add notes about supporting hw crypto with it.
57: support for powersaving clients Supporting multiple virtual interfacesTBD Note: WDS with identical MAC address should almost always be OK Insert notes about having multiple virtual interfaces with different MAC addresses here, note which configurations are supported by mac80211, add notes about supporting hw crypto with it.
*****************************************************************
========================= CLASS #28 =============================
28: Station handlingTODO Hardware scan offloadTBD AggregationTX A-MPDU aggregation RX A-MPDU aggregation Spatial Multiplexing Powersave (SMPS) Rate control interfaceTBD This part of the book describes the rate control algorithm interface and how it relates to mac80211 and drivers.
58: Station handlingTODO Hardware scan offloadTBD AggregationTX A-MPDU aggregation RX A-MPDU aggregation Spatial Multiplexing Powersave (SMPS) Rate control interfaceTBD This part of the book describes the rate control algorithm interface and how it relates to mac80211 and drivers.
*****************************************************************
========================= CLASS #29 =============================
29: Rate Control APITBD InternalsTBD This part of the book describes mac80211 internals.
59: Rate Control APITBD InternalsTBD This part of the book describes mac80211 internals.
*****************************************************************
========================= CLASS #30 =============================
60: Key handlingKey handling basics MORE TBDTBDReceive processingTBDTransmit processingTBDStation info handlingProgramming information STA information lifetime rules Aggregation SynchronisationTBDLocking, lots of RCU&lt;!-- ****************************************************** --&gt;&lt;!-- Header --&gt;&lt;!-- ****************************************************** --&gt;The ALSA Driver API This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
167: Linux Device Drivers This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
229: Bus-Independent Device AccessesMatthewWilcoxmatthew@wil.cxAlanCoxalan@lxorguk.ukuu.org.uk2001Matthew Wilcox This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
901: Linux Filesystems API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
967: USB Gadget API for Linux20 August 200420 August 2004 This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
1218: Credits The following people have contributed to this document: Thomas Gleixnertglx@linutronix.deIngo Molnarmingo@elte.hu The Linux Kernel API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
1242: Unreliable Guide To Hacking The Linux KernelRustyRussellrusty@rustcorp.com.au2005Rusty Russell This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
1481: Unreliable Guide To LockingRustyRussellrusty@rustcorp.com.au2003Rusty Russell This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
2602: The following people have contributed to this document: Thomas Gleixnertglx@linutronix.de Linux Networking and Network Devices APIs This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
2662: This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
2752: Memory ManagementSH-4Store Queue API SH-5TLB Interfaces Machine Specific Interfacesmach-dreamcast mach-x3proto BussesSuperHyway Maple The Linux Kernel Tracepoint APIJasonBaronjbaron@redhat.comWilliamCohenwcohen@redhat.com This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
3007: Linutronix homepage.The Linux-USB Host Side API This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
3231: USBDEVFS_SUBMITURBTBS &lt;!-- vim:syntax=sgml:sw=4 --&gt;&lt;!-- ****************************************************** --&gt;&lt;!-- Header --&gt;&lt;!-- ****************************************************** --&gt;Writing an ALSA DriverTakashiIwaitiwai@suse.deOct 15, 20070.3.7 This document describes how to write an ALSA (Advanced Linux Sound Architecture) driver.
3232: Copyright (c) 2002-2005 Takashi Iwai tiwai@suse.de This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
3235: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA &lt;!-- ****************************************************** --&gt;&lt;!-- Preface --&gt;&lt;!-- ****************************************************** --&gt;Preface This document describes how to write an ALSA (Advanced Linux Sound Architecture) driver.
3245: &lt;!-- ****************************************************** --&gt;&lt;!-- File Tree Structure --&gt;&lt;!-- ****************************************************** --&gt;File Tree StructureGeneral The ALSA drivers are provided in two ways.
3331: &lt;!-- ****************************************************** --&gt;&lt;!-- Management of Cards and Components --&gt;&lt;!-- ****************************************************** --&gt;Management of Cards and ComponentsCard Instance For each soundcard, a card record must be allocated.
3905: &lt;!-- ****************************************************** --&gt;&lt;!-- Miscellaneous Devices --&gt;&lt;!-- ****************************************************** --&gt;Miscellaneous DevicesFM OPL3 The FM OPL3 is still used in many chips (mainly for backward compatibility).
4132: &lt;!-- ****************************************************** --&gt;&lt;!-- Acknowledgments --&gt;&lt;!-- ****************************************************** --&gt;Acknowledgments I would like to thank Phil Kerr for his help for improvement and corrections of this document.
4135: Writing USB Device DriversGregKroah-Hartmangreg@kroah.com2001-2002Greg Kroah-Hartman This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
*****************************************************************
========================= CLASS #31 =============================
63: You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Management of Cards and DevicesCard Management Device Components Module requests and Device File Entries Memory Management Helpers PCM APIPCM Core PCM Format Helpers PCM Memory Management Control/Mixer APIGeneral Control Interface AC97 Codec API Virtual Master Control API MIDI APIRaw MIDI API MPU401-UART API Proc Info APIProc Info Interface Miscellaneous FunctionsHardware-Dependent Devices API Jack Abstraction Layer API ISA DMA Helpers Other Helper Macros Debug objects life timeThomasGleixnertglx@linutronix.de2008Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
2262: Reed-Solomon Library Programming InterfaceThomasGleixnertglx@linutronix.de2004Thomas Gleixner This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.
*****************************************************************
========================= CLASS #41 =============================
76: Debug functionsDebug object function reference debug_object_init This function is called whenever the initialization function of a real object is called.
88: debug_object_init_on_stack This function is called whenever the initialization function of a real object which resides on the stack is called.
99: debug_object_activate This function is called whenever the activation function of a real object is called.
110: debug_object_deactivate This function is called whenever the deactivation function of a real object is called.
*****************************************************************
========================= CLASS #42 =============================
77: When the real object is already tracked by debugobjects it is checked, whether the object can be initialized.
89: When the real object is already tracked by debugobjects it is checked, whether the object can be initialized.
100: When the real object is already tracked by debugobjects it is checked, whether the object can be activated.
111: When the real object is tracked by debugobjects it is checked, whether the object can be deactivated.
116: When the real object is tracked by debugobjects it is checked, whether the object can be destroyed.
124: When the real object is tracked by debugobjects it is checked, whether the object can be freed.
135: When the real object is already tracked by debugobjects it is ignored.
*****************************************************************
========================= CLASS #43 =============================
78: Initializing is not allowed for active and destroyed objects.
90: Initializing is not allowed for active and destroyed objects.
101: Activating is not allowed for active and destroyed objects.
117: Destruction is not allowed for active and destroyed objects.
125: Free is not allowed for active objects.
*****************************************************************
========================= CLASS #44 =============================
79: When debugobjects detects an error, then it calls the fixup_init function of the object type description structure if provided by the caller.
91: When debugobjects detects an error, then it calls the fixup_init function of the object type description structure if provided by the caller.
102: When debugobjects detects an error, then it calls the fixup_activate function of the object type description structure if provided by the caller.
118: When debugobjects detects an error, then it calls the fixup_destroy function of the object type description structure if provided by the caller.
126: When debugobjects detects an error, then it calls the fixup_free function of the object type description structure if provided by the caller.
*****************************************************************
========================= CLASS #45 =============================
80: The fixup function can correct the problem before the real initialization of the object happens.
92: The fixup function can correct the problem before the real initialization of the object happens.
103: The fixup function can correct the problem before the real activation of the object happens.
119: The fixup function can correct the problem before the real destruction of the object happens.
127: The fixup function can correct the problem before the real free of the object happens.
*****************************************************************
========================= CLASS #46 =============================
82: it can deactivate an active object in order to prevent damage to the subsystem.
94: it can deactivate an active object in order to prevent damage to the subsystem.
105: it can deactivate an active object in order to prevent damage to the subsystem.
121: it can deactivate an active object in order to prevent damage to the subsystem.
129: it can deactivate an active object in order to prevent damage to the subsystem.
*****************************************************************
========================= CLASS #47 =============================
83: When the real object is not yet tracked by debugobjects, debugobjects allocates a tracker object for the real object and sets the tracker object state to ODEBUG_STATE_INIT.
95: When the real object is not yet tracked by debugobjects debugobjects allocates a tracker object for the real object and sets the tracker object state to ODEBUG_STATE_INIT.
106: When the real object is not yet tracked by debugobjects then the fixup_activate function is called if available.
*****************************************************************
========================= CLASS #48 =============================
84: It verifies that the object is not on the callers stack.
96: It verifies that the object is on the callers stack.
*****************************************************************
========================= CLASS #56 =============================
109: When the activation is legitimate, then the state of the associated tracker object is set to ODEBUG_STATE_ACTIVE.
113: When the deactivation is legitimate, then the state of the associated tracker object is set to ODEBUG_STATE_INACTIVE.
122: When the destruction is legitimate, then the state of the associated tracker object is set to ODEBUG_STATE_DESTROYED.
*****************************************************************
========================= CLASS #66 =============================
136: Fixup functionsDebug object type description structure fixup_init This function is called from the debug code whenever a problem in debug_object_init is detected.
141: fixup_activate This function is called from the debug code whenever a problem in debug_object_activate is detected.
150: fixup_destroy This function is called from the debug code whenever a problem in debug_object_destroy is detected.
153: fixup_free This function is called from the debug code whenever a problem in debug_object_free is detected.
157: fixup_assert_init This function is called from the debug code whenever a problem in debug_object_assert_init is detected.
*****************************************************************
========================= CLASS #68 =============================
138: Called from debug_object_init when the object state is: ODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
142: Called from debug_object_activate when the object state is: ODEBUG_STATE_NOTAVAILABLEODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
151: Called from debug_object_destroy when the object state is: ODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
155: Called from debug_object_free() or debug_check_no_obj_freed() when the object state is: ODEBUG_STATE_ACTIVE The function returns 1 when the fixup was successful, otherwise 0.
159: The function returns 1 when the fixup was successful, otherwise 0.
*****************************************************************
========================= CLASS #69 =============================
139: The return value is used to update the statistics.
143: The return value is used to update the statistics.
152: The return value is used to update the statistics.
156: The return value is used to update the statistics.
160: The return value is used to update the statistics.
*****************************************************************
========================= CLASS #70 =============================
140: Note, that the function needs to call the debug_object_init() function again, after the damage has been repaired in order to keep the state consistent.
144: Note that the function needs to call the debug_object_activate() function again after the damage has been repaired in order to keep the state consistent.
*****************************************************************
========================= CLASS #71 =============================
145: The activation of statically initialized objects is a special case.
162: The handling of statically initialized objects is a special case.
*****************************************************************
========================= CLASS #73 =============================
147: The fixup function needs to check whether this is a legitimate case of a statically initialized object or not.
163: The fixup function should check if this is a legitimate case of a statically initialized object or not.
*****************************************************************
========================= CLASS #75 =============================
149: In this case the function should return 0 because this is not a real fixup.
165: Then the function should return 0 because this is not a real fixup.
*****************************************************************
========================= CLASS #80 =============================
166: Known Bugs And Assumptions None (knock on wood).
234: Known Bugs And Assumptions None.
1177: Known Bugs And Assumptions None (knock on wood).
2269: Known Bugs And Assumptions None.
2391: Known Bugs And Assumptions None.
*****************************************************************
========================= CLASS #91 =============================
181: This defines the properties of a card that are created when a mode is set and can&#39;t be changed otherwise.
1332: GFP_ATOMIC Don&#39;t sleep.
*****************************************************************
========================= CLASS #110 =============================
200: The programming interface is structured around two kinds of driver, and two kinds of device.
216: The programming interface is structured around two kinds of driver, and two kinds of device.
*****************************************************************
========================= CLASS #134 =============================
225: Controllers that support I2C can also support most SMBus operations, but SMBus controllers don&#39;t support all the protocol options that an I2C controller will.
1340: Run, don&#39;t walk.
*****************************************************************
========================= CLASS #143 =============================
239: This document does not cover how to receive such an address, but assumes you are starting with one.
3026: This document does not cover gadget drivers.
*****************************************************************
========================= CLASS #169 =============================
265: static inline void qla1280_disable_intrs(struct scsi_qla_host *ha) { struct device_reg *reg; reg = ha-&amp;gt;iobase; /* disable risc and host interrupts */ WRT_REG_WORD(&amp;amp;reg-&amp;gt;ictrl, 0); /* * The following read will ensure that the above write * has been received by the device before we return from this * function.
3776: count &amp;gt; 1.
*****************************************************************
========================= CLASS #175 =============================
271: The following pseudocode illustrates what might occur if write ordering isn&#39;t guaranteed via mmiowb or one of the readX functions.
4255: This isn&#39;t always the case.
*****************************************************************
========================= CLASS #176 =============================
272: CPU A: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU A: ... CPU A: writel(newval, ring_ptr); CPU A: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) ... CPU B: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU B: writel(newval2, ring_ptr); CPU B: ... CPU B: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) In the case above, newval2 could be written to ring_ptr before newval.
273: Fixing it is easy though: CPU A: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU A: ... CPU A: writel(newval, ring_ptr); CPU A: mmiowb(); /* ensure no other writes beat us to the device */ CPU A: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) ... CPU B: spin_lock_irqsave(&amp;amp;dev_lock, flags) CPU B: writel(newval2, ring_ptr); CPU B: ... CPU B: mmiowb(); CPU B: spin_unlock_irqrestore(&amp;amp;dev_lock, flags) See tg3.c for a real world example of how to use mmiowb PCI ordering rules also guarantee that PIO read responses arrive after any outstanding DMA writes from that bus, since for some devices the result of a readb call may signal to the driver that a DMA transaction is complete.
*****************************************************************
========================= CLASS #193 =============================
290: Public Functions Provided Linux DRM Developer&#39;s GuideJesseBarnesInitial versionIntel Corporationjesse.barnes@intel.comLaurentPinchartDriver internalsIdeas on board SPRLlaurent.pinchart@ideasonboard.com2008-20092012Intel CorporationLaurent Pinchart The contents of this file may be used under the terms of the GNU General Public License version 2 (the &quot;GPL&quot;) as distributed in the kernel source COPYING file.
1928: Alternatively, the contents of this file may be used under the terms of the GNU General Public License version 2 (the &quot;GPL&quot;) as distributed in the kernel source COPYING file, in which case the provisions of the GPL are applicable instead of the above.
*****************************************************************
========================= CLASS #224 =============================
324: The information is printed to the kernel log at initialization time and passed to userspace through the DRM_IOCTL_VERSION ioctl.
333: The DRM core prints it to the kernel log at initialization time and passes it to userspace through the DRM_IOCTL_VERSION ioctl.
*****************************************************************
========================= CLASS #247 =============================
348: This stat counter system is deprecated and should not be used.
846: These functions are deprecated and should not be used.
*****************************************************************
========================= CLASS #255 =============================
356: The operation is optional and must make sure that the interrupt will not get fired by clearing all pending interrupt flags or disabling the interrupt.
580: The operation is optional.
*****************************************************************
========================= CLASS #338 =============================
439: That operation is mandatory for GEM-enabled drivers and must free the GEM object and all associated resources.
725: This operation is mandatory.
727: This operation is mandatory.
745: This operation is mandatory.
*****************************************************************
========================= CLASS #452 =============================
553: The instance is allocated and zeroed by the driver, possibly as part of a larger structure, and registered with a call to drm_crtc_init with a pointer to CRTC functions.
604: The instance is allocated and zeroed by the driver, possibly as part of a larger structure.
*****************************************************************
========================= CLASS #456 =============================
557: This operation is called with the mode config lock held.
561: This operation is called with the mode config mutex held.
*****************************************************************
========================= CLASS #472 =============================
574: This can be performed with spin_lock_irqsave(&amp;amp;dev-&amp;gt;event_lock, flags); ... drm_send_vblank_event(dev, pipe, event); spin_unlock_irqrestore(&amp;amp;dev-&amp;gt;event_lock, flags); FIXME: Could drivers that don&#39;t need to wait for rendering to complete just add the event to dev-&amp;gt;vblank_event_list and let the DRM core handle everything, as for &quot;normal&quot; vertical blanking events?
1968: Most drivers don&#39;t need to define this.
4106: You don&#39;t need to give the lowlevel selections again.
*****************************************************************
========================= CLASS #475 =============================
577: Miscellaneousvoid (*set_property)(struct drm_crtc *crtc, struct drm_property *property, uint64_t value); Set the value of the given CRTC property to value.
614: void (*set_property)(struct drm_plane *plane, struct drm_property *property, uint64_t value); Set the value of the given plane property to value.
655: Miscellaneousvoid (*set_property)(struct drm_connector *connector, struct drm_property *property, uint64_t value); Set the value of the given connector property to value.
*****************************************************************
========================= CLASS #476 =============================
578: See for more information about properties.
615: See for more information about properties.
656: See for more information about properties.
2202: See for more information.
*****************************************************************
========================= CLASS #478 =============================
581: void (*destroy)(struct drm_crtc *crtc); Destroy the CRTC when not needed anymore.
598: void (*destroy)(struct drm_plane *plane); Destroy the plane when not needed anymore.
657: void (*destroy)(struct drm_connector *connector); Destroy the connector when not needed anymore.
*****************************************************************
========================= CLASS #479 =============================
583: Planes (struct drm_plane) A plane represents an image source that can be blended with or overlayed on top of a CRTC during the scanout process.
585: The result is then blended with or overlayed on top of a CRTC.
*****************************************************************
========================= CLASS #510 =============================
621: interlace_allowed Whether the connector can handle interlaced modes.
622: doublescan_allowed Whether the connector can handle doublescan.
*****************************************************************
========================= CLASS #515 =============================
627: DRM_CONNECTOR_POLL_CONNECT Periodically poll the connector for connection.
628: DRM_CONNECTOR_POLL_DISCONNECT Periodically poll the connector for disconnection.
*****************************************************************
========================= CLASS #575 =============================
692: CRTC Helper Operationsbool (*mode_fixup)(struct drm_crtc *crtc, const struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Let CRTCs adjust the requested mode or reject it completely.
712: Encoder Helper Operationsbool (*mode_fixup)(struct drm_encoder *encoder, const struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Let encoders adjust the requested mode or reject it completely.
*****************************************************************
========================= CLASS #576 =============================
693: This operation returns true if the mode is accepted (possibly after being adjusted) or false if it is rejected.
713: This operation returns true if the mode is accepted (possibly after being adjusted) or false if it is rejected.
*****************************************************************
========================= CLASS #586 =============================
703: void (*prepare)(struct drm_crtc *crtc); Prepare the CRTC for mode setting.
715: void (*prepare)(struct drm_encoder *encoder); Prepare the encoder for mode setting.
*****************************************************************
========================= CLASS #587 =============================
704: This operation is called after validating the requested mode.
716: This operation is called after validating the requested mode.
*****************************************************************
========================= CLASS #588 =============================
705: Drivers use it to perform device-specific operations required before setting the new mode.
717: Drivers use it to perform device-specific operations required before setting the new mode.
*****************************************************************
========================= CLASS #589 =============================
706: int (*mode_set)(struct drm_crtc *crtc, struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode, int x, int y, struct drm_framebuffer *old_fb); Set a new mode, position and frame buffer.
718: void (*mode_set)(struct drm_encoder *encoder, struct drm_display_mode *mode, struct drm_display_mode *adjusted_mode); Set a new mode.
*****************************************************************
========================= CLASS #590 =============================
707: Depending on the device requirements, the mode can be stored internally by the driver and applied in the commit operation, or programmed to the hardware immediately.
719: Depending on the device requirements, the mode can be stored internally by the driver and applied in the commit operation, or programmed to the hardware immediately.
*****************************************************************
========================= CLASS #592 =============================
709: void (*commit)(struct drm_crtc *crtc); Commit a mode.
720: void (*commit)(struct drm_encoder *encoder); Commit a mode.
*****************************************************************
========================= CLASS #593 =============================
710: This operation is called after setting the new mode.
721: This operation is called after setting the new mode.
*****************************************************************
========================= CLASS #594 =============================
711: Upon return the device must use the new mode and be fully operational.
722: Upon return the device must use the new mode and be fully operational.
*****************************************************************
========================= CLASS #634 =============================
765: struct drm_property *drm_property_create_range(struct drm_device *dev, int flags, const char *name, uint64_t min, uint64_t max);Create a range property with the given minimum and maximum values.struct drm_property *drm_property_create_enum(struct drm_device *dev, int flags, const char *name, const struct drm_prop_enum_list *props, int num_values);Create an enumerated property.
766: The props argument points to an array of num_values value-name pairs.struct drm_property *drm_property_create_bitmask(struct drm_device *dev, int flags, const char *name, const struct drm_prop_enum_list *props, int num_values);Create a bitmask property.
767: The props argument points to an array of num_values value-name pairs.
*****************************************************************
========================= CLASS #658 =============================
791: To increment the use count, drivers call drm_vblank_get.
793: To decrement the use count drivers call drm_vblank_put.
*****************************************************************
========================= CLASS #693 =============================
828: .mmap = drm_gem_mmap, No other file operation is supported by the DRM API.
845: is supported by the core.
*****************************************************************
========================= CLASS #720 =============================
857: - crtc and connector .save and .restore operations are only used internally in drivers, should they be removed from the core?
858: - encoder mid-layer .save and .restore operations are only used internally in drivers, should they be removed from the core?
859: - encoder mid-layer .detect operation is only used internally in drivers, should it be removed from the core?
*****************************************************************
========================= CLASS #764 =============================
907: There are two calls to do this dependent on how you decide to allocate the physical media on which the journal resides.
3028: There are two.
*****************************************************************
========================= CLASS #863 =============================
1013: OTG-capable systems will also need to include a standard Linux-USB host side stack, with usbcore, one or more Host Controller Drivers (HCDs), USB Device Drivers to support the OTG &quot;Targeted Peripheral List&quot;, and so forth.
1139: Also on the host side, a driver must support the OTG &quot;Targeted Peripheral List&quot;.
*****************************************************************
========================= CLASS #954 =============================
1104: Support for other controllers is expected to be developed and contributed over time, as this driver framework evolves.
1126: Support for other kinds of gadget is expected to be developed and contributed over time, as this driver framework evolves.
*****************************************************************
========================= CLASS #988 =============================
1140: That&#39;s just a whitelist, used to reject peripherals not supported with a given Linux OTG host.
2939: That&#39;s what uio_pdrv_genirq does.
3447: EXPORT_NO_SYMBOLS; That&#39;s all!
*****************************************************************
========================= CLASS #1030 =============================
1187: The following control flow is implemented (simplified excerpt): desc-&amp;gt;irq_data.chip-&amp;gt;irq_mask_ack(); handle_irq_event(desc-&amp;gt;action); desc-&amp;gt;irq_data.chip-&amp;gt;irq_unmask(); Default Fast EOI IRQ flow handler handle_fasteoi_irq provides a generic implementation for interrupts, which only need an EOI at the end of the handler.
1188: The following control flow is implemented (simplified excerpt): handle_irq_event(desc-&amp;gt;action); desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi(); Default Edge IRQ flow handler handle_edge_irq provides a generic implementation for edge-triggered interrupts.
1189: The following control flow is implemented (simplified excerpt): if (desc-&amp;gt;status &amp;amp; running) { desc-&amp;gt;irq_data.chip-&amp;gt;irq_mask_ack(); desc-&amp;gt;status |= pending | masked; return; } desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack(); desc-&amp;gt;status |= running; do { if (desc-&amp;gt;status &amp;amp; masked) desc-&amp;gt;irq_data.chip-&amp;gt;irq_unmask(); desc-&amp;gt;status &amp;amp;= ~pending; handle_irq_event(desc-&amp;gt;action); } while (status &amp;amp; pending); desc-&amp;gt;status &amp;amp;= ~running; Default simple IRQ flow handler handle_simple_irq provides a generic implementation for simple interrupts.
1191: The following control flow is implemented (simplified excerpt): handle_irq_event(desc-&amp;gt;action); Default per CPU flow handler handle_percpu_irq provides a generic implementation for per CPU interrupts.
1193: The following control flow is implemented (simplified excerpt): if (desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack) desc-&amp;gt;irq_data.chip-&amp;gt;irq_ack(); handle_irq_event(desc-&amp;gt;action); if (desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi) desc-&amp;gt;irq_data.chip-&amp;gt;irq_eoi(); EOI Edge IRQ flow handler handle_edge_eoi_irq provides an abnomination of the edge handler which is solely used to tame a badly wreckaged irq controller on powerpc/cell.
*****************************************************************
========================= CLASS #1054 =============================
1215: Structures This chapter contains the autogenerated documentation of the structures which are used in the generic IRQ layer.
2616: Functions Internals This chapter contains the autogenerated documentation of the RapidIO subsystem.
*****************************************************************
========================= CLASS #1055 =============================
1216: Public Functions Provided This chapter contains the autogenerated documentation of the kernel API functions which are exported.
1217: Internal Functions Provided This chapter contains the autogenerated documentation of the internal functions.
2307: Public Functions Provided This chapter contains the autogenerated documentation of the Reed-Solomon functions which are exported.
2593: Public Functions Provided This chapter contains the autogenerated documentation of the NAND kernel API functions which are exported.
2596: Internal Functions Provided This chapter contains the autogenerated documentation of the NAND driver internal functions.
*****************************************************************
========================= CLASS #1077 =============================
1247: Introduction Welcome, gentle reader, to Rusty&#39;s Remarkably Unreliable Guide to Linux Kernel Hacking.
1485: Introduction Welcome, to Rusty&#39;s Remarkably Unreliable Guide to Kernel Locking issues.
*****************************************************************
========================= CLASS #1097 =============================
1267: You can tell you are in a hardware interrupt, because in_irq() returns true.
1748: in_irq() returns true in a hardware interrupt handler.
*****************************************************************
========================= CLASS #1098 =============================
1268: Beware that this will return a false positive if interrupts are disabled (see below).
1279: Beware that this will return a false positive if a bh lock (see below) is held.
*****************************************************************
========================= CLASS #1112 =============================
1283: If you really want to do this, you would have to explicitly save/restore the full FPU state (and avoid context switches).
1441: If you really want to do this, forget about exceptions at least.
*****************************************************************
========================= CLASS #1116 =============================
1287: The Linux kernel is portable Let&#39;s keep it that way.
4073: Let&#39;s set them up.
*****************************************************************
========================= CLASS #1121 =============================
1292: ioctls: Not writing a new system call A system call generally looks like this asmlinkage long sys_mycall(int arg) { return 0; } First, in most cases you don&#39;t want to create a new system call.
1336: If you don&#39;t know what that is you don&#39;t need it.
*****************************************************************
========================= CLASS #1134 =============================
1305: Recipes for Deadlock You cannot call any routines which may sleep, unless: You are in user context.
3637: You cannot call functions which may sleep.
*****************************************************************
========================= CLASS #1137 =============================
1308: Note that some functions may sleep implicitly: common ones are the user space access functions (*_user) and memory allocation functions without GFP_ATOMIC.
1327: The functions may sleep implicitly.
*****************************************************************
========================= CLASS #1335 =============================
1519: There is also a mutex_lock(), which should be avoided, because it will not return if a signal is received.
3537: There is also a field fifo_size.
*****************************************************************
========================= CLASS #1343 =============================
1527: spin_unlock_bh() does the reverse.
1550: spin_unlock_irq() does the reverse.
2072: ata_qc_complete() does the following.
*****************************************************************
========================= CLASS #1347 =============================
1531: This works perfectly for UP as well: the spin lock vanishes, and this macro simply becomes local_bh_disable() (include/linux/interrupt.h), which protects you from the softirq being run.
1553: This works perfectly for UP as well: the spin lock vanishes, and this macro simply becomes local_irq_disable() (include/asm/smp.h), which protects you from the softirq/tasklet/BH being run.
*****************************************************************
========================= CLASS #1348 =============================
1532: Locking Between User Context and Tasklets This is exactly the same as above, because tasklets are actually run from a softirq.
1533: Locking Between User Context and Timers This, too, is exactly the same as above, because timers are actually run from a softirq.
*****************************************************************
========================= CLASS #1392 =============================
1579: Here&#39;s the code: #include &amp;lt;linux/list.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;linux/string.h&amp;gt; #include &amp;lt;linux/mutex.h&amp;gt; #include &amp;lt;asm/errno.h&amp;gt; struct object { struct list_head list; int id; char name[32]; int popularity; }; /* Protects the cache, cache_num, and the objects within it */ static DEFINE_MUTEX(cache_lock); static LIST_HEAD(cache); static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 /* Must be holding cache_lock */ static struct object *__cache_find(int id) { struct object *i; list_for_each_entry(i, &amp;amp;cache, list) if (i-&amp;gt;id == id) { i-&amp;gt;popularity++; return i; } return NULL; } /* Must be holding cache_lock */ static void __cache_delete(struct object *obj) { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); kfree(obj); cache_num--; } /* Must be holding cache_lock */ static void __cache_add(struct object *obj) { list_add(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); if (++cache_num &amp;gt; MAX_CACHE_SIZE) { struct object *i, *outcast = NULL; list_for_each_entry(i, &amp;amp;cache, list) { if (!outcast || i-&amp;gt;popularity &amp;lt; outcast-&amp;gt;popularity) outcast = i; } __cache_delete(outcast); } } int cache_add(int id, const char *name) { struct object *obj; if ((obj = kmalloc(sizeof(*obj), GFP_KERNEL)) == NULL) return -ENOMEM; strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; mutex_lock(&amp;amp;cache_lock); __cache_add(obj); mutex_unlock(&amp;amp;cache_lock); return 0; } void cache_delete(int id) { mutex_lock(&amp;amp;cache_lock); __cache_delete(__cache_find(id)); mutex_unlock(&amp;amp;cache_lock); } int cache_find(int id, char *name) { struct object *obj; int ret = -ENOENT; mutex_lock(&amp;amp;cache_lock); obj = __cache_find(id); if (obj) { ret = 0; strcpy(name, obj-&amp;gt;name); } mutex_unlock(&amp;amp;cache_lock); return ret; } Note that we always make sure we have the cache_lock when we add, delete, or look up the cache: both the cache infrastructure itself and the contents of the objects are protected by the lock.
1586: --- cache.c.usercontext 2003-12-09 13:58:54.000000000 +1100 +++ cache.c.interrupt 2003-12-09 14:07:49.000000000 +1100 @@ -12,7 +12,7 @@ int popularity; }; -static DEFINE_MUTEX(cache_lock); +static DEFINE_SPINLOCK(cache_lock); static LIST_HEAD(cache); static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 @@ -55,6 +55,7 @@ int cache_add(int id, const char *name) { struct object *obj; + unsigned long flags; if ((obj = kmalloc(sizeof(*obj), GFP_KERNEL)) == NULL) return -ENOMEM; @@ -63,30 +64,33 @@ obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; - mutex_lock(&amp;amp;cache_lock); + spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return 0; } void cache_delete(int id) { - mutex_lock(&amp;amp;cache_lock); + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_delete(__cache_find(id)); - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); } int cache_find(int id, char *name) { struct object *obj; int ret = -ENOENT; + unsigned long flags; - mutex_lock(&amp;amp;cache_lock); + spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); if (obj) { ret = 0; strcpy(name, obj-&amp;gt;name); } - mutex_unlock(&amp;amp;cache_lock); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return ret; } Note that the spin_lock_irqsave will turn off interrupts if they are on, otherwise does nothing (if we are already in an interrupt handler), hence these functions are safe to call from any context.
1598: Here is the code: --- cache.c.interrupt 2003-12-09 14:25:43.000000000 +1100 +++ cache.c.refcnt 2003-12-09 14:33:05.000000000 +1100 @@ -7,6 +7,7 @@ struct object { struct list_head list; + unsigned int refcnt; int id; char name[32]; int popularity; @@ -17,6 +18,35 @@ static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 +static void __object_put(struct object *obj) +{ + if (--obj-&amp;gt;refcnt == 0) + kfree(obj); +} + +static void __object_get(struct object *obj) +{ + obj-&amp;gt;refcnt++; +} + +void object_put(struct object *obj) +{ + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); + __object_put(obj); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); +} + +void object_get(struct object *obj) +{ + unsigned long flags; + + spin_lock_irqsave(&amp;amp;cache_lock, flags); + __object_get(obj); + spin_unlock_irqrestore(&amp;amp;cache_lock, flags); +} + /* Must be holding cache_lock */ static struct object *__cache_find(int id) { @@ -35,6 +65,7 @@ { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); + __object_put(obj); cache_num--; } @@ -63,6 +94,7 @@ strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; + obj-&amp;gt;refcnt = 1; /* The cache holds a reference */ spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); @@ -79,18 +111,15 @@ spin_unlock_irqrestore(&amp;amp;cache_lock, flags); } -int cache_find(int id, char *name) +struct object *cache_find(int id) { struct object *obj; - int ret = -ENOENT; unsigned long flags; spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); - if (obj) { - ret = 0; - strcpy(name, obj-&amp;gt;name); - } + if (obj) + __object_get(obj); spin_unlock_irqrestore(&amp;amp;cache_lock, flags); - return ret; + return obj; } We encapsulate the reference counting in the standard &#39;get&#39; and &#39;put&#39; functions.
1607: --- cache.c.refcnt 2003-12-09 15:00:35.000000000 +1100 +++ cache.c.refcnt-atomic 2003-12-11 15:49:42.000000000 +1100 @@ -7,7 +7,7 @@ struct object { struct list_head list; - unsigned int refcnt; + atomic_t refcnt; int id; char name[32]; int popularity; @@ -18,33 +18,15 @@ static unsigned int cache_num = 0; #define MAX_CACHE_SIZE 10 -static void __object_put(struct object *obj) -{ - if (--obj-&amp;gt;refcnt == 0) - kfree(obj); -} - -static void __object_get(struct object *obj) -{ - obj-&amp;gt;refcnt++; -} - void object_put(struct object *obj) { - unsigned long flags; - - spin_lock_irqsave(&amp;amp;cache_lock, flags); - __object_put(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + if (atomic_dec_and_test(&amp;amp;obj-&amp;gt;refcnt)) + kfree(obj); } void object_get(struct object *obj) { - unsigned long flags; - - spin_lock_irqsave(&amp;amp;cache_lock, flags); - __object_get(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + atomic_inc(&amp;amp;obj-&amp;gt;refcnt); } /* Must be holding cache_lock */ @@ -65,7 +47,7 @@ { BUG_ON(!obj); list_del(&amp;amp;obj-&amp;gt;list); - __object_put(obj); + object_put(obj); cache_num--; } @@ -94,7 +76,7 @@ strlcpy(obj-&amp;gt;name, name, sizeof(obj-&amp;gt;name)); obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; - obj-&amp;gt;refcnt = 1; /* The cache holds a reference */ + atomic_set(&amp;amp;obj-&amp;gt;refcnt, 1); /* The cache holds a reference */ spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); @@ -119,7 +101,7 @@ spin_lock_irqsave(&amp;amp;cache_lock, flags); obj = __cache_find(id); if (obj) - __object_get(obj); + object_get(obj); spin_unlock_irqrestore(&amp;amp;cache_lock, flags); return obj; } Protecting The Objects Themselves In these examples, we assumed that the objects (except the reference counts) never changed once they are created.
1619: */ int id; + + spinlock_t lock; /* Protects the name */ char name[32]; - int popularity; }; static DEFINE_SPINLOCK(cache_lock); @@ -77,6 +84,7 @@ obj-&amp;gt;id = id; obj-&amp;gt;popularity = 0; atomic_set(&amp;amp;obj-&amp;gt;refcnt, 1); /* The cache holds a reference */ + spin_lock_init(&amp;amp;obj-&amp;gt;lock); spin_lock_irqsave(&amp;amp;cache_lock, flags); __cache_add(obj); Note that I decide that the popularity count should be protected by the cache_lock rather than the per-object lock: this is because it (like the struct list_head inside the object) is logically part of the infrastructure.
1699: --- cache.c.perobjectlock 2003-12-11 17:15:03.000000000 +1100 +++ cache.c.rcupdate 2003-12-11 17:55:14.000000000 +1100 @@ -1,15 +1,18 @@ #include &amp;lt;linux/list.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;linux/string.h&amp;gt; +#include &amp;lt;linux/rcupdate.h&amp;gt; #include &amp;lt;linux/mutex.h&amp;gt; #include &amp;lt;asm/errno.h&amp;gt; struct object { - /* These two protected by cache_lock.
1701: */ @@ -40,7 +43,7 @@ { struct object *i; - list_for_each_entry(i, &amp;amp;cache, list) { + list_for_each_entry_rcu(i, &amp;amp;cache, list) { if (i-&amp;gt;id == id) { i-&amp;gt;popularity++; return i; @@ -49,19 +52,25 @@ return NULL; } +/* Final discard done once we know no readers are looking.
1702: */ +static void cache_delete_rcu(void *arg) +{ + object_put(arg); +} + /* Must be holding cache_lock */ static void __cache_delete(struct object *obj) { BUG_ON(!obj); - list_del(&amp;amp;obj-&amp;gt;list); - object_put(obj); + list_del_rcu(&amp;amp;obj-&amp;gt;list); cache_num--; + call_rcu(&amp;amp;obj-&amp;gt;rcu, cache_delete_rcu); } /* Must be holding cache_lock */ static void __cache_add(struct object *obj) { - list_add(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); + list_add_rcu(&amp;amp;obj-&amp;gt;list, &amp;amp;cache); if (++cache_num &amp;gt; MAX_CACHE_SIZE) { struct object *i, *outcast = NULL; list_for_each_entry(i, &amp;amp;cache, list) { @@ -104,12 +114,11 @@ struct object *cache_find(int id) { struct object *obj; - unsigned long flags; - spin_lock_irqsave(&amp;amp;cache_lock, flags); + rcu_read_lock(); obj = __cache_find(id); if (obj) object_get(obj); - spin_unlock_irqrestore(&amp;amp;cache_lock, flags); + rcu_read_unlock(); return obj; } Note that the reader will alter the popularity member in __cache_find(), and now it doesn&#39;t hold a lock.
*****************************************************************
========================= CLASS #1624 =============================
1819: kgdboc argumentsUsage: kgdboc=[kms][[,]kbd][[,]serial_device][,baud]The order listed above must be observed if you use any of the optional configurations together.
1821: The order listed above must be observed if you use any of the optional configurations together.
*****************************************************************
========================= CLASS #1752 =============================
1949: dev-&amp;gt;pio_mode and dev-&amp;gt;dma_mode are guaranteed to be valid when -&amp;gt;set_piomode() and when -&amp;gt;set_dmamode() is called.
2021: -&amp;gt;port_stop() is called after -&amp;gt;host_stop().
2024: -&amp;gt;host_stop() is called after all -&amp;gt;port_stop() calls have completed.
*****************************************************************
========================= CLASS #1764 =============================
1961: Most drivers for taskfile-based hardware use ata_sff_exec_command() for this hook.
1966: Most drivers for taskfile-based hardware use ata_sff_check_status() for this hook.
1971: Most drivers for taskfile-based hardware use ata_sff_dev_select() for this hook.
*****************************************************************
========================= CLASS #1766 =============================
1963: This hook may be specified as NULL, in which case libata will assume that atapi dma can be supported.
2026: This hook may be specified as NULL, in which case it is not called.
*****************************************************************
========================= CLASS #1780 =============================
1980: Most legacy IDE drivers use ata_bmdma_setup() for the bmdma_setup() hook.
1982: Most legacy IDE drivers use ata_bmdma_start() for the bmdma_start() hook.
*****************************************************************
========================= CLASS #1803 =============================
2004: The primary responsibility of an implementation is to call ata_do_eh() or ata_bmdma_drive_eh() with a set of EH hooks as arguments: &#39;prereset&#39; hook (may be NULL) is called during an EH reset, before any other actions are taken.
2005: &#39;postreset&#39; hook (may be NULL) is called after the EH reset is performed.
*****************************************************************
========================= CLASS #1835 =============================
2040: qc-&amp;gt;complete_fn() callback is the asynchronous path used by normal SCSI translated commands and qc-&amp;gt;waiting is the synchronous (issuer sleeps in process context) path used by internal commands.
2048: qc-&amp;gt;complete_fn() callback is used for completion notification.
2075: qc-&amp;gt;complete_fn() callback is invoked.
2079: ap-&amp;gt;active_tag and qc-&amp;gt;tag are poisoned.
*****************************************************************
========================= CLASS #1928 =============================
2137: Examples ATA_STATUS doesn&#39;t contain !BSY &amp;amp;&amp;amp; DRDY &amp;amp;&amp;amp; !DRQ while trying to issue a command.
2138: !BSY &amp;amp;&amp;amp; !DRQ during PIO data transfer.
*****************************************************************
========================= CLASS #1930 =============================
2140: !BSY &amp;amp;&amp;amp; ERR after CDB transfer starts but before the last byte of CDB is transferred.
2152: !BSY &amp;amp;&amp;amp; ERR(==CHK) &amp;amp;&amp;amp; !ABRT after the last byte of CDB is transferred indicates CHECK CONDITION and doesn&#39;t fall in this category.
2153: !BSY &amp;amp;&amp;amp; ERR(==CHK) &amp;amp;&amp;amp; ABRT after the last byte of CDB is transferred *probably* indicates CHECK CONDITION and doesn&#39;t fall in this category.
*****************************************************************
========================= CLASS #1943 =============================
2155: CRC error during data transfer This is indicated by ICRC bit in the ERROR register and means that corruption occurred during data transfer.
2163: Media errors This is indicated by UNC bit in the ERROR register.
*****************************************************************
========================= CLASS #1953 =============================
2166: Media changed / media change requested error &amp;lt;&amp;lt;TODO: fill here&amp;gt;&amp;gt; Address error This is indicated by IDNF bit in the ERROR register.
2217: Hotplug and power management exceptions &amp;lt;&amp;lt;TODO: fill here&amp;gt;&amp;gt; EH recovery actions This section discusses several important recovery actions.
*****************************************************************
========================= CLASS #1990 =============================
2205: This type of errors must be logged as it indicates something is very wrong with the system.
2209: This type of errors must be logged.
*****************************************************************
========================= CLASS #1991 =============================
2206: Resetting host controller is recommended.
2210: Resetting host controller is recommended.
*****************************************************************
========================= CLASS #2061 =============================
2284: The databytes are expanded to the given symbol size on the fly.
2294: The databytes are expanded to the given symbol size on the fly.
*****************************************************************
========================= CLASS #2062 =============================
2285: There is no support for encoding continuous bitstreams with a symbol size != 8 at the moment.
2295: There is no support for decoding continuous bitstreams with a symbolsize != 8 at the moment.
*****************************************************************
========================= CLASS #2063 =============================
2286: If it is necessary it should be not a big deal to implement such functionality.
2296: If it is necessary it should be not a big deal to implement such functionality.
*****************************************************************
========================= CLASS #2064 =============================
2287: /* Parity buffer.
2303: /* Parity buffer.
*****************************************************************
========================= CLASS #2072 =============================
2298: Size = number of roots */ uint16_t par[6]; uint8_t data[512]; int numerr; /* Receive data */ ..... /* Receive parity */ ..... /* Decode 512 byte in data8.
2300: Size = number of roots */ uint16_t par[6], syn[6]; uint8_t data[512]; int numerr; /* Receive data */ ..... /* Receive parity */ ..... /* Get syndrome from hardware decoder */ ..... /* Decode 512 byte in data8.
2304: Size = number of roots */ uint16_t par[6], syn[6], corr[8]; uint8_t data[512]; int numerr, errpos[8]; /* Receive data */ ..... /* Receive parity */ ..... /* Get syndrome from hardware decoder */ ..... /* Decode 512 byte in data8.
*****************************************************************
========================= CLASS #2073 =============================
2299: */ numerr = decode_rs8 (rs_decoder, data8, par, 512, NULL, 0, NULL, 0, NULL); Decoding with syndrome given by hardware decoder, direct data correction /* Parity buffer.
2301: */ numerr = decode_rs8 (rs_decoder, data8, par, 512, syn, 0, NULL, 0, NULL); Decoding with syndrome given by hardware decoder, no direct data correction.
*****************************************************************
========================= CLASS #2080 =============================
2311: Thanks a lot.
2601: Thanks a lot.
*****************************************************************
========================= CLASS #2157 =============================
2393: Each function and struct member has a short description which is marked with an [XXX] identifier.
2591: Each struct member has a short description which is marked with an [XXX] identifier.
2594: Each function has a short description which is marked with an [XXX] identifier.
2597: Each function has a short description which is marked with an [XXX] identifier.
*****************************************************************
========================= CLASS #2159 =============================
2395: Function identifiers [XXX] The functions are marked with [XXX] identifiers in the short comment.
2406: Struct member identifiers [XXX] The struct members are marked with [XXX] identifiers in the comment.
*****************************************************************
========================= CLASS #2160 =============================
2396: The identifiers explain the usage and scope of the functions.
2407: The identifiers explain the usage and scope of the members.
*****************************************************************
========================= CLASS #2162 =============================
2398: They are not replacable and provide functionality which is complete hardware independent.
2400: [GENERIC] Generic functions are not replacable and provide functionality which is complete hardware independent.
*****************************************************************
========================= CLASS #2167 =============================
2404: The board driver can set the functions which should be replaced by board dependent functions before calling nand_scan().
2411: The board driver can set the functions which should be replaced by board dependent functions before calling nand_scan().
*****************************************************************
========================= CLASS #2168 =============================
2405: If the function pointer is NULL on entry to nand_scan() then the pointer is set to the default function which is suitable for the detected chip type.
2412: If the function pointer is NULL on entry to nand_scan() then the pointer is set to the default function which is suitable for the detected chip type.
*****************************************************************
========================= CLASS #2186 =============================
2427: static void board_hwcontrol(struct mtd_info *mtd, int cmd) { struct nand_chip *this = (struct nand_chip *) mtd-&amp;gt;priv; switch(cmd){ case NAND_CTL_SETCLE: this-&amp;gt;IO_ADDR_W |= CLE_ADRR_BIT; break; case NAND_CTL_CLRCLE: this-&amp;gt;IO_ADDR_W &amp;amp;= ~CLE_ADRR_BIT; break; case NAND_CTL_SETALE: this-&amp;gt;IO_ADDR_W |= ALE_ADRR_BIT; break; case NAND_CTL_CLRALE: this-&amp;gt;IO_ADDR_W &amp;amp;= ~ALE_ADRR_BIT; break; } } Device ready function If the hardware interface has the ready busy pin of the NAND chip connected to a GPIO or other accessible I/O pin, this function is used to read back the state of the pin.
2449: static void board_select_chip (struct mtd_info *mtd, int chip) { struct nand_chip *this = (struct nand_chip *) mtd-&amp;gt;priv; /* Deselect all chips */ this-&amp;gt;IO_ADDR_R &amp;amp;= ~BOARD_NAND_ADDR_MASK; this-&amp;gt;IO_ADDR_W &amp;amp;= ~BOARD_NAND_ADDR_MASK; switch (chip) { case 0: this-&amp;gt;IO_ADDR_R |= BOARD_NAND_ADDR_CHIP0; this-&amp;gt;IO_ADDR_W |= BOARD_NAND_ADDR_CHIP0; break; .... case n: this-&amp;gt;IO_ADDR_R |= BOARD_NAND_ADDR_CHIPn; this-&amp;gt;IO_ADDR_W |= BOARD_NAND_ADDR_CHIPn; break; } } Hardware ECC supportFunctions and constants The nand driver supports three different types of hardware ECC.
*****************************************************************
========================= CLASS #2208 =============================
2450: NAND_ECC_HW3_256 Hardware ECC generator providing 3 bytes ECC per 256 byte.
2451: NAND_ECC_HW3_512 Hardware ECC generator providing 3 bytes ECC per 512 byte.
2452: NAND_ECC_HW6_512 Hardware ECC generator providing 6 bytes ECC per 512 byte.
2453: NAND_ECC_HW8_512 Hardware ECC generator providing 6 bytes ECC per 512 byte.
*****************************************************************
========================= CLASS #2292 =============================
2538: This is not recommended and available for testing and diagnosis only.
2584: Usage is not recommended !
*****************************************************************
========================= CLASS #2307 =============================
2553: If the spare area buffer is NULL then only the ECC placement is done according to the given scheme in the nand_oobinfo structure.
2557: If the spare area buffer is NULL then only the ECC placement is done according to the default builtin scheme.
*****************************************************************
========================= CLASS #2312 =============================
2559: This applies only to the first page in a block.
2561: This applies only to the first page in a block.
2563: This applies only to the first page in a block.
*****************************************************************
========================= CLASS #2313 =============================
2560: In the remaining pages this byte is reserved0x06Autoplace 20x07Autoplace 3512 byte pagesizeOffsetContentComment0x00ECC byte 0Error correction code byte 0 of the lower 256 Byte data in this page0x01ECC byte 1Error correction code byte 1 of the lower 256 Bytes of data in this page0x02ECC byte 2Error correction code byte 2 of the lower 256 Bytes of data in this page0x03ECC byte 3Error correction code byte 0 of the upper 256 Bytes of data in this page0x04reservedreserved0x05Bad block markerIf any bit in this byte is zero, then this block is bad.
2562: In the remaining pages this byte is reserved0x06ECC byte 4Error correction code byte 1 of the upper 256 Bytes of data in this page0x07ECC byte 5Error correction code byte 2 of the upper 256 Bytes of data in this page0x08 - 0x0FAutoplace 0 - 72048 byte pagesizeOffsetContentComment0x00Bad block markerIf any bit in this byte is zero, then this block is bad.
2564: In the remaining pages this byte is reserved0x01ReservedReserved0x02-0x27Autoplace 0 - 370x28ECC byte 0Error correction code byte 0 of the first 256 Byte data in this page0x29ECC byte 1Error correction code byte 1 of the first 256 Bytes of data in this page0x2AECC byte 2Error correction code byte 2 of the first 256 Bytes data in this page0x2BECC byte 3Error correction code byte 0 of the second 256 Bytes of data in this page0x2CECC byte 4Error correction code byte 1 of the second 256 Bytes of data in this page0x2DECC byte 5Error correction code byte 2 of the second 256 Bytes of data in this page0x2EECC byte 6Error correction code byte 0 of the third 256 Bytes of data in this page0x2FECC byte 7Error correction code byte 1 of the third 256 Bytes of data in this page0x30ECC byte 8Error correction code byte 2 of the third 256 Bytes of data in this page0x31ECC byte 9Error correction code byte 0 of the fourth 256 Bytes of data in this page0x32ECC byte 10Error correction code byte 1 of the fourth 256 Bytes of data in this page0x33ECC byte 11Error correction code byte 2 of the fourth 256 Bytes of data in this page0x34ECC byte 12Error correction code byte 0 of the fifth 256 Bytes of data in this page0x35ECC byte 13Error correction code byte 1 of the fifth 256 Bytes of data in this page0x36ECC byte 14Error correction code byte 2 of the fifth 256 Bytes of data in this page0x37ECC byte 15Error correction code byte 0 of the sixt 256 Bytes of data in this page0x38ECC byte 16Error correction code byte 1 of the sixt 256 Bytes of data in this page0x39ECC byte 17Error correction code byte 2 of the sixt 256 Bytes of data in this page0x3AECC byte 18Error correction code byte 0 of the seventh 256 Bytes of data in this page0x3BECC byte 19Error correction code byte 1 of the seventh 256 Bytes of data in this page0x3CECC byte 20Error correction code byte 2 of the seventh 256 Bytes of data in this page0x3DECC byte 21Error correction code byte 0 of the eighth 256 Bytes of data in this page0x3EECC byte 22Error correction code byte 1 of the eighth 256 Bytes of data in this page0x3FECC byte 23Error correction code byte 2 of the eighth 256 Bytes of data in this pageFilesystem support The NAND driver provides all neccecary functions for a filesystem via the MTD interface.
*****************************************************************
========================= CLASS #2326 =============================
2577: They are ored together to describe the chip functionality.
2580: They are ored together to describe the functionality.
*****************************************************************
========================= CLASS #2336 =============================
2592: See the chapter &quot;Documentation hints&quot; for an explanation.
2595: See the chapter &quot;Documentation hints&quot; for an explanation.
2598: See the chapter &quot;Documentation hints&quot; for an explanation.
*****************************************************************
========================= CLASS #2381 =============================
2655: This is done at driver registration time as part of the machine constraints.
2658: This is done at driver registration time by providing a struct regulation_constraints.
*****************************************************************
========================= CLASS #2499 =============================
2791: You can also use select() on /dev/uioX to wait for an interrupt.
2987: You can also use select() on /dev/uioX.
*****************************************************************
========================= CLASS #2535 =============================
2827: Drivers can set this to make it easier for userspace to find the correct mapping.
2844: Drivers can set it to make it easier for userspace to find a certain port region.
*****************************************************************
========================= CLASS #2542 =============================
2834: To map the memory of mapping N, you have to use N times the page size as your offset: offset = N * getpagesize(); Sometimes there is hardware with memory-like regions that can not be mapped with the technique described here, but there are still ways to access them from userspace.
2975: To map the memory of mapping N, you have to use N times the page size as your offset: offset = N * getpagesize(); N starts from zero, so if you&#39;ve got only one memory range to map, set offset = 0.
*****************************************************************
========================= CLASS #2565 =============================
2858: See the description below for details.
2861: See the description below for details.
*****************************************************************
========================= CLASS #2577 =============================
2871: int (*open)(struct uio_info *info, struct inode *inode) : Optional.
2874: int (*release)(struct uio_info *info, struct inode *inode) : Optional.
*****************************************************************
========================= CLASS #2585 =============================
2880: For each region, you have to set up a struct uio_mem in the mem[] array.
2902: For each region, you have to set up a struct uio_port in the port[] array.
*****************************************************************
========================= CLASS #2586 =============================
2881: Here&#39;s a description of the fields of struct uio_mem: const char *name: Optional.
2903: Here&#39;s a description of the fields of struct uio_port: char *porttype: Required.
*****************************************************************
========================= CLASS #2588 =============================
2883: int memtype: Required if the mapping is used.
2888: phys_addr_t addr: Required if the mapping is used.
*****************************************************************
========================= CLASS #2596 =============================
2892: If size is zero, the mapping is considered unused.
2909: If size is zero, the region is considered unused.
*****************************************************************
========================= CLASS #2597 =============================
2893: Note that you must initialize size with zero for all unused mappings.
2910: Note that you must initialize size with zero for all unused regions.
*****************************************************************
========================= CLASS #2601 =============================
2897: Please do not touch the map element of struct uio_mem!
2911: Please do not touch the portio element of struct uio_port!
*****************************************************************
========================= CLASS #2602 =============================
2898: It is used by the UIO framework to set up sysfs files for this mapping.
2912: It is used internally by the UIO framework to set up sysfs files for this region.
*****************************************************************
========================= CLASS #2603 =============================
2899: Simply leave it alone.
2913: Simply leave it alone.
*****************************************************************
========================= CLASS #2630 =============================
2933: You now have to set the .name element of struct platform_device to &quot;uio_pdrv&quot; to use the generic UIO platform device driver.
2943: You will set the .name element of struct platform_device to &quot;uio_pdrv_genirq&quot; to use this driver.
2954: Set the .name element of struct platform_device to &quot;uio_dmem_genirq&quot; to use this driver.
*****************************************************************
========================= CLASS #2693 =============================
3001: Example code using uio_pci_generic Here is some sample userspace driver code using uio_pci_generic: #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;errno.h&amp;gt; int main() { int uiofd; int configfd; int err; int i; unsigned icount; unsigned char command_high; uiofd = open(&quot;/dev/uio0&quot;, O_RDONLY); if (uiofd &amp;lt; 0) { perror(&quot;uio open:&quot;); return errno; } configfd = open(&quot;/sys/class/uio/uio0/device/config&quot;, O_RDWR); if (configfd &amp;lt; 0) { perror(&quot;config open:&quot;); return errno; } /* Read and cache command value */ err = pread(configfd, &amp;amp;command_high, 1, 5); if (err != 1) { perror(&quot;command config read:&quot;); return errno; } command_high &amp;amp;= ~0x4; for(i = 0;; ++i) { /* Print out a message, for debugging.
3005: */ err = pwrite(configfd, &amp;amp;command_high, 1, 5); if (err != 1) { perror(&quot;config write:&quot;); break; } /* Wait for next interrupt.
3006: */ err = read(uiofd, &amp;amp;icount, 4); if (err != 4) { perror(&quot;uio read:&quot;); break; } } return errno; } Further information OSADL homepage.
*****************************************************************
========================= CLASS #2783 =============================
3099: (Default: 0)busmode=MMMControls the file mode used for the /proc/bus/usb/BBB directories.
3102: (Default: 0)devmode=MMMControls the file mode used for the /proc/bus/usb/BBB/DDD files.
*****************************************************************
========================= CLASS #2787 =============================
3104: (Default: 0)listgid=NNNNNControls the GID used for the /proc/bus/usb/devices and drivers files.
3105: (Default: 0)listmode=MMMControls the file mode used for the /proc/bus/usb/devices and drivers files.
*****************************************************************
========================= CLASS #2836 =============================
3154: The ioctl parameter is an integer holding the number of the interface (bInterfaceNumber from descriptor).
3173: The ioctl parameter is an integer holding the number of the interface (bInterfaceNumber from descriptor); File modification time is not updated by this request.
3200: The ioctl parameter is ignored.
3202: File modification time is not updated by this request.
3210: The parameter is an integer holding the number of a configuration (bConfigurationValue from descriptor).
3211: File modification time is not updated by this request.
3227: USBDEVFS_DISCARDURBTBS File modification time is not updated by this request.
3228: USBDEVFS_DISCSIGNALTBS File modification time is not updated by this request.
3229: USBDEVFS_REAPURBTBS File modification time is not updated by this request.
3230: USBDEVFS_REAPURBNDELAYTBS File modification time is not updated by this request.
*****************************************************************
========================= CLASS #2841 =============================
3159: The ioctl parameter points to a structure like this: struct usbdevfs_connectinfo { unsigned int devnum; unsigned char slow; }; File modification time is not updated by this request.
3205: The ioctl parameter is a pointer to a structure like this: struct usbdevfs_setinterface { unsigned int interface; unsigned int altsetting; }; File modification time is not updated by this request.
*****************************************************************
========================= CLASS #2848 =============================
3166: * &#39;request&#39; becomes the driver-&amp;gt;ioctl() &#39;code&#39; parameter.
3167: * the size of &#39;param&#39; is encoded in &#39;request&#39;, and that data * is copied to or from the driver-&amp;gt;ioctl() &#39;buf&#39; parameter.
*****************************************************************
========================= CLASS #2865 =============================
3185: The ioctl parameter is a pointer to this structure: struct usbdevfs_bulktransfer { unsigned int ep; unsigned int len; unsigned int timeout; /* in milliseconds */ void *data; }; The &quot;ep&quot; value identifies a bulk endpoint number (1 to 15, as identified in an endpoint descriptor), masked with USB_DIR_IN when referring to an endpoint which sends data to the host from the device.
3189: The ioctl parameter is an integer endpoint number (1 to 15, as identified in an endpoint descriptor), masked with USB_DIR_IN when referring to an endpoint which sends data to the host from the device.
*****************************************************************
========================= CLASS #2880 =============================
3203: Avoid using this call until some usbcore bugs get fixed, since it does not fully synchronize device, interface, and driver (not just usbfs) state.
3212: Avoid using this call until some usbcore bugs get fixed, since it does not fully synchronize device, interface, and driver (not just usbfs) state.
*****************************************************************
========================= CLASS #2918 =============================
3255: ALSA File Tree Structure sound /core /oss /seq /oss /instr /ioctl32 /include /drivers /mpu401 /opl3 /i2c /l3 /synth /emux /pci /(cards) /isa /(cards) /arm /ppc /sparc /usb /pcmcia /(cards) /oss core directory This directory contains the middle layer which is the heart of ALSA drivers.
3285: usb directory This directory contains the USB-audio driver.
*****************************************************************
========================= CLASS #2943 =============================
3280: pci directory This directory and its sub-directories hold the top-level card modules for PCI soundcards and the code specific to the PCI BUS.
3283: isa directory This directory and its sub-directories hold the top-level card modules for ISA soundcards.
*****************************************************************
========================= CLASS #2951 =============================
3290: In the ALSA driver tarball, this directory is empty, of course :) &lt;!-- ****************************************************** --&gt;&lt;!-- Basic Flow for PCI Drivers --&gt;&lt;!-- ****************************************************** --&gt;Basic Flow for PCI DriversOutline The minimum flow for PCI soundcards is as follows: define the PCI ID table (see the section PCI Entries ).create probe() callback.create remove() callback.create a pci_driver structure containing the three pointers above.create an init() function just calling the pci_register_driver() to register the pci_driver table defined above.create an exit() function to call the pci_unregister_driver() function.
4113: &lt;!-- ****************************************************** --&gt;&lt;!-- Useful Functions --&gt;&lt;!-- ****************************************************** --&gt;Useful Functionssnd_printk() and friends ALSA provides a verbose version of the printk() function.
*****************************************************************
========================= CLASS #2955 =============================
3294: Basic Flow for PCI Drivers - Example #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; /* module parameters (see &quot;Module Parameters&quot;) */ /* SNDRV_CARDS: maximum number of cards supported by this module */ static int index[SNDRV_CARDS] = SNDRV_DEFAULT_IDX; static char *id[SNDRV_CARDS] = SNDRV_DEFAULT_STR; static bool enable[SNDRV_CARDS] = SNDRV_DEFAULT_ENABLE_PNP; /* definition of the chip-specific record */ struct mychip { struct snd_card *card; /* the rest of the implementation will be in section * &quot;PCI Resource Management&quot; */ }; /* chip-specific destructor * (see &quot;PCI Resource Management&quot;) */ static int snd_mychip_free(struct mychip *chip) { .... /* will be implemented later... */ } /* component-destructor * (see &quot;Management of Cards and Components&quot;) */ static int snd_mychip_dev_free(struct snd_device *device) { return snd_mychip_free(device-&amp;gt;device_data); } /* chip-specific constructor * (see &quot;Management of Cards and Components&quot;) */ static int snd_mychip_create(struct snd_card *card, struct pci_dev *pci, struct mychip **rchip) { struct mychip *chip; int err; static struct snd_device_ops ops = { .dev_free = snd_mychip_dev_free, }; *rchip = NULL; /* check PCI availability here * (see &quot;PCI Resource Management&quot;) */ .... /* allocate a chip-specific data with zero filled */ chip = kzalloc(sizeof(*chip), GFP_KERNEL); if (chip == NULL) return -ENOMEM; chip-&amp;gt;card = card; /* rest of initialization here; will be implemented * later, see &quot;PCI Resource Management&quot; */ .... err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &amp;amp;ops); if (err &amp;lt; 0) { snd_mychip_free(chip); return err; } snd_card_set_dev(card, &amp;amp;pci-&amp;gt;dev); *rchip = chip; return 0; } /* constructor -- see &quot;Constructor&quot; sub-section */ static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { static int dev; struct snd_card *card; struct mychip *chip; int err; /* (1) */ if (dev &amp;gt;= SNDRV_CARDS) return -ENODEV; if (!enable[dev]) { dev++; return -ENOENT; } /* (2) */ err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); if (err &amp;lt; 0) return err; /* (3) */ err = snd_mychip_create(card, pci, &amp;amp;chip); if (err &amp;lt; 0) { snd_card_free(card); return err; } /* (4) */ strcpy(card-&amp;gt;driver, &quot;My Chip&quot;); strcpy(card-&amp;gt;shortname, &quot;My Own Chip 123&quot;); sprintf(card-&amp;gt;longname, &quot;%s at 0x%lx irq %i&quot;, card-&amp;gt;shortname, chip-&amp;gt;ioport, chip-&amp;gt;irq); /* (5) */ .... /* implemented later */ /* (6) */ err = snd_card_register(card); if (err &amp;lt; 0) { snd_card_free(card); return err; } /* (7) */ pci_set_drvdata(pci, card); dev++; return 0; } /* destructor -- see the &quot;Destructor&quot; sub-section */ static void snd_mychip_remove(struct pci_dev *pci) { snd_card_free(pci_get_drvdata(pci)); pci_set_drvdata(pci, NULL); } Constructor The real constructor of PCI drivers is the probe callback.
3298: static int dev; .... if (dev &amp;gt;= SNDRV_CARDS) return -ENODEV; if (!enable[dev]) { dev++; return -ENOENT; } where enable[dev] is the module option.
3302: 2) Create a card instance struct snd_card *card; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); The details will be explained in the section Management of Cards and Components.
3304: struct mychip *chip; .... err = snd_mychip_create(card, pci, &amp;amp;chip); if (err &amp;lt; 0) { snd_card_free(card); return err; } The details will be explained in the section PCI Resource Management.
3306: strcpy(card-&amp;gt;driver, &quot;My Chip&quot;); strcpy(card-&amp;gt;shortname, &quot;My Own Chip 123&quot;); sprintf(card-&amp;gt;longname, &quot;%s at 0x%lx irq %i&quot;, card-&amp;gt;shortname, chip-&amp;gt;ioport, chip-&amp;gt;irq); The driver field holds the minimal ID string of the chip.
3317: err = snd_card_register(card); if (err &amp;lt; 0) { snd_card_free(card); return err; } Will be explained in the section Management of Cards and Components, too.
3319: pci_set_drvdata(pci, card); dev++; return 0; In the above, the card record is stored.
3323: It would be typically like the following: static void snd_mychip_remove(struct pci_dev *pci) { snd_card_free(pci_get_drvdata(pci)); pci_set_drvdata(pci, NULL); } The above code assumes that the card pointer is set to the PCI driver data.
3325: #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/pci.h&amp;gt; #include &amp;lt;linux/slab.h&amp;gt; #include &amp;lt;sound/core.h&amp;gt; #include &amp;lt;sound/initval.h&amp;gt; where the last one is necessary only when module options are defined in the source file.
3330: They have to be included after &amp;lt;sound/core.h&amp;gt;.
3363: err = snd_card_create(index[dev], id[dev], THIS_MODULE, sizeof(struct mychip), &amp;amp;card); struct mychip is the type of the chip record.
3369: struct snd_card *card; struct mychip *chip; err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); ..... chip = kzalloc(sizeof(*chip), GFP_KERNEL); The chip record should have the field to hold the card pointer at least, struct mychip { struct snd_card *card; .... }; Then, set the card pointer in the returned chip instance.
3371: static int snd_mychip_dev_free(struct snd_device *device) { return snd_mychip_free(device-&amp;gt;device_data); } where snd_mychip_free() is the real destructor.
3724: The details will be explained in the Access Flags subsection.
4075: static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { .... struct snd_card *card; struct mychip *chip; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, 0, &amp;amp;card); .... chip = kzalloc(sizeof(*chip), GFP_KERNEL); .... card-&amp;gt;private_data = chip; .... } When you created the chip data with snd_card_create(), it&#39;s anyway accessible via private_data field.
4076: static int snd_mychip_probe(struct pci_dev *pci, const struct pci_device_id *pci_id) { .... struct snd_card *card; struct mychip *chip; int err; .... err = snd_card_create(index[dev], id[dev], THIS_MODULE, sizeof(struct mychip), &amp;amp;card); .... chip = card-&amp;gt;private_data; .... } If you need a space to save the registers, allocate the buffer for it here, too, since it would be fatal if you cannot allocate a memory in the suspend phase.
*****************************************************************
========================= CLASS #3013 =============================
3364: In return, the allocated record can be accessed as struct mychip *chip = card-&amp;gt;private_data; With this method, you don&#39;t have to allocate twice.
3421: You don&#39;t have to stop PCMs, etc.
3574: Don&#39;t mix this with pcm-&amp;gt;private_data.
3752: In this case, you don&#39;t have to define the put callback.
*****************************************************************
========================= CLASS #3028 =============================
3382: PCI Resource Management Example struct mychip { struct snd_card *card; struct pci_dev *pci; unsigned long port; int irq; }; static int snd_mychip_free(struct mychip *chip) { /* disable hardware here if any */ .... /* (not implemented in this document) */ /* release the irq */ if (chip-&amp;gt;irq &amp;gt;= 0) free_irq(chip-&amp;gt;irq, chip); /* release the I/O ports &amp;amp; memory */ pci_release_regions(chip-&amp;gt;pci); /* disable the PCI entry */ pci_disable_device(chip-&amp;gt;pci); /* release the data */ kfree(chip); return 0; } /* chip-specific constructor */ static int snd_mychip_create(struct snd_card *card, struct pci_dev *pci, struct mychip **rchip) { struct mychip *chip; int err; static struct snd_device_ops ops = { .dev_free = snd_mychip_dev_free, }; *rchip = NULL; /* initialize the PCI entry */ err = pci_enable_device(pci); if (err &amp;lt; 0) return err; /* check PCI availability (28bit DMA) */ if (pci_set_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0 || pci_set_consistent_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0) { printk(KERN_ERR &quot;error to set 28bit mask DMA\n&quot;); pci_disable_device(pci); return -ENXIO; } chip = kzalloc(sizeof(*chip), GFP_KERNEL); if (chip == NULL) { pci_disable_device(pci); return -ENOMEM; } /* initialize the stuff */ chip-&amp;gt;card = card; chip-&amp;gt;pci = pci; chip-&amp;gt;irq = -1; /* (1) PCI resource allocation */ err = pci_request_regions(pci, &quot;My Chip&quot;); if (err &amp;lt; 0) { kfree(chip); pci_disable_device(pci); return err; } chip-&amp;gt;port = pci_resource_start(pci, 0); if (request_irq(pci-&amp;gt;irq, snd_mychip_interrupt, IRQF_SHARED, KBUILD_MODNAME, chip)) { printk(KERN_ERR &quot;cannot grab irq %d\n&quot;, pci-&amp;gt;irq); snd_mychip_free(chip); return -EBUSY; } chip-&amp;gt;irq = pci-&amp;gt;irq; /* (2) initialization of the chip hardware */ .... /* (not implemented in this document) */ err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &amp;amp;ops); if (err &amp;lt; 0) { snd_mychip_free(chip); return err; } snd_card_set_dev(card, &amp;amp;pci-&amp;gt;dev); *rchip = chip; return 0; } /* PCI IDs */ static struct pci_device_id snd_mychip_ids[] = { { PCI_VENDOR_ID_FOO, PCI_DEVICE_ID_BAR, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, .... { 0, } }; MODULE_DEVICE_TABLE(pci, snd_mychip_ids); /* pci_driver definition */ static struct pci_driver driver = { .name = KBUILD_MODNAME, .id_table = snd_mychip_ids, .probe = snd_mychip_probe, .remove = snd_mychip_remove, }; /* module initialization */ static int __init alsa_card_mychip_init(void) { return pci_register_driver(&amp;amp;driver); } /* module clean up */ static void __exit alsa_card_mychip_exit(void) { pci_unregister_driver(&amp;amp;driver); } module_init(alsa_card_mychip_init) module_exit(alsa_card_mychip_exit) EXPORT_NO_SYMBOLS; /* for old kernels only */ Some Hafta&#39;s The allocation of PCI resources is done in the probe() function, and usually an extra xxx_create() function is written for this purpose.
3386: Suppose the 28bit mask, and the code to be added would be like: err = pci_enable_device(pci); if (err &amp;lt; 0) return err; if (pci_set_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0 || pci_set_consistent_dma_mask(pci, DMA_BIT_MASK(28)) &amp;lt; 0) { printk(KERN_ERR &quot;error to set 28bit mask DMA\n&quot;); pci_disable_device(pci); return -ENXIO; } Resource Allocation The allocation of I/O ports and irqs is done via standard kernel functions.
3395: The allocation of an I/O port is done like this: err = pci_request_regions(pci, &quot;My Chip&quot;); if (err &amp;lt; 0) { kfree(chip); pci_disable_device(pci); return err; } chip-&amp;gt;port = pci_resource_start(pci, 0); &lt;!-- obsolete --&gt; It will reserve the I/O port region of 8 bytes of the given PCI device.
3399: The allocation of an interrupt source is done like this: if (request_irq(pci-&amp;gt;irq, snd_mychip_interrupt, IRQF_SHARED, KBUILD_MODNAME, chip)) { printk(KERN_ERR &quot;cannot grab irq %d\n&quot;, pci-&amp;gt;irq); snd_mychip_free(chip); return -EBUSY; } chip-&amp;gt;irq = pci-&amp;gt;irq; where snd_mychip_interrupt() is the interrupt handler defined later.
3410: For the interrupt, do like this: if (chip-&amp;gt;irq &amp;gt;= 0) free_irq(chip-&amp;gt;irq, chip); Since the irq number can start from 0, you should initialize chip-&amp;gt;irq with a negative value (e.g.
3434: For example, static struct pci_device_id snd_mychip_ids[] = { { PCI_VENDOR_ID_FOO, PCI_DEVICE_ID_BAR, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, .... { 0, } }; MODULE_DEVICE_TABLE(pci, snd_mychip_ids); The first and second fields of the pci_device_id structure are the vendor and device IDs.
3444: And at last, the module entries: static int __init alsa_card_mychip_init(void) { return pci_register_driver(&amp;amp;driver); } static void __exit alsa_card_mychip_exit(void) { pci_unregister_driver(&amp;amp;driver); } module_init(alsa_card_mychip_init) module_exit(alsa_card_mychip_exit) Note that these module entries are tagged with __init and __exit prefixes.
*****************************************************************
========================= CLASS #3086 =============================
3448: &lt;!-- ****************************************************** --&gt;&lt;!-- PCM Interface --&gt;&lt;!-- ****************************************************** --&gt;PCM InterfaceGeneral The PCM middle layer of ALSA is quite powerful and it is only necessary for each driver to implement the low-level functions to access its hardware.
3702: &lt;!-- ****************************************************** --&gt;&lt;!-- Control Interface --&gt;&lt;!-- ****************************************************** --&gt;Control InterfaceGeneral The control interface is used widely for many switches, sliders, etc.
3840: &lt;!-- ****************************************************** --&gt;&lt;!-- MIDI (MPU401-UART) Interface --&gt;&lt;!-- ****************************************************** --&gt;MIDI (MPU401-UART) InterfaceGeneral Many soundcards have built-in MIDI (MPU401-UART) interfaces.
*****************************************************************
========================= CLASS #3087 =============================
3449: For accessing to the PCM layer, you need to include &amp;lt;sound/pcm.h&amp;gt; first.
3490: The definition of runtime instance is found in &amp;lt;sound/pcm.h&amp;gt;.
3628: Which action is specified in the second argument, SNDRV_PCM_TRIGGER_XXX in &amp;lt;sound/pcm.h&amp;gt;.
4006: The API is provided in &amp;lt;sound/pcm.h&amp;gt;.
4024: The API is found in &amp;lt;sound/info.h&amp;gt;.
*****************************************************************
========================= CLASS #3101 =============================
3463: PCM Example Code #include &amp;lt;sound/pcm.h&amp;gt; .... /* hardware definition */ static struct snd_pcm_hardware snd_mychip_playback_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; /* hardware definition */ static struct snd_pcm_hardware snd_mychip_capture_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; /* open callback */ static int snd_mychip_playback_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_playback_hw; /* more hardware-initialization will be done here */ .... return 0; } /* close callback */ static int snd_mychip_playback_close(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); /* the hardware-specific codes will be here */ .... return 0; } /* open callback */ static int snd_mychip_capture_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_capture_hw; /* more hardware-initialization will be done here */ .... return 0; } /* close callback */ static int snd_mychip_capture_close(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); /* the hardware-specific codes will be here */ .... return 0; } /* hw_params callback */ static int snd_mychip_pcm_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *hw_params) { return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(hw_params)); } /* hw_free callback */ static int snd_mychip_pcm_hw_free(struct snd_pcm_substream *substream) { return snd_pcm_lib_free_pages(substream); } /* prepare callback */ static int snd_mychip_pcm_prepare(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; /* set up the hardware with the current configuration * for example... */ mychip_set_sample_format(chip, runtime-&amp;gt;format); mychip_set_sample_rate(chip, runtime-&amp;gt;rate); mychip_set_channels(chip, runtime-&amp;gt;channels); mychip_set_dma_setup(chip, runtime-&amp;gt;dma_addr, chip-&amp;gt;buffer_size, chip-&amp;gt;period_size); return 0; } /* trigger callback */ static int snd_mychip_pcm_trigger(struct snd_pcm_substream *substream, int cmd) { switch (cmd) { case SNDRV_PCM_TRIGGER_START: /* do something to start the PCM engine */ .... break; case SNDRV_PCM_TRIGGER_STOP: /* do something to stop the PCM engine */ .... break; default: return -EINVAL; } } /* pointer callback */ static snd_pcm_uframes_t snd_mychip_pcm_pointer(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); unsigned int current_ptr; /* get the current hardware pointer */ current_ptr = mychip_get_hw_pointer(chip); return current_ptr; } /* operators */ static struct snd_pcm_ops snd_mychip_playback_ops = { .open = snd_mychip_playback_open, .close = snd_mychip_playback_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; /* operators */ static struct snd_pcm_ops snd_mychip_capture_ops = { .open = snd_mychip_capture_open, .close = snd_mychip_capture_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; /* * definitions of capture are omitted here... */ /* create a pcm device */ static int snd_mychip_new_pcm(struct mychip *chip) { struct snd_pcm *pcm; int err; err = snd_pcm_new(chip-&amp;gt;card, &quot;My Chip&quot;, 0, 1, 1, &amp;amp;pcm); if (err &amp;lt; 0) return err; pcm-&amp;gt;private_data = chip; strcpy(pcm-&amp;gt;name, &quot;My Chip&quot;); chip-&amp;gt;pcm = pcm; /* set operators */ snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &amp;amp;snd_mychip_playback_ops); snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &amp;amp;snd_mychip_capture_ops); /* pre-allocation of buffers */ /* NOTE: this may fail */ snd_pcm_lib_preallocate_pages_for_all(pcm, SNDRV_DMA_TYPE_DEV, snd_dma_pci_data(chip-&amp;gt;pci), 64*1024, 64*1024); return 0; } Constructor A pcm instance is allocated by the snd_pcm_new() function.
3464: It would be better to create a constructor for pcm, namely, static int snd_mychip_new_pcm(struct mychip *chip) { struct snd_pcm *pcm; int err; err = snd_pcm_new(chip-&amp;gt;card, &quot;My Chip&quot;, 0, 1, 1, &amp;amp;pcm); if (err &amp;lt; 0) return err; pcm-&amp;gt;private_data = chip; strcpy(pcm-&amp;gt;name, &quot;My Chip&quot;); chip-&amp;gt;pcm = pcm; .... return 0; } The snd_pcm_new() function takes four arguments.
3476: snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &amp;amp;snd_mychip_playback_ops); snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &amp;amp;snd_mychip_capture_ops); The operators are defined typically like this: static struct snd_pcm_ops snd_mychip_playback_ops = { .open = snd_mychip_pcm_open, .close = snd_mychip_pcm_close, .ioctl = snd_pcm_lib_ioctl, .hw_params = snd_mychip_pcm_hw_params, .hw_free = snd_mychip_pcm_hw_free, .prepare = snd_mychip_pcm_prepare, .trigger = snd_mychip_pcm_trigger, .pointer = snd_mychip_pcm_pointer, }; All the callbacks are described in the Operators subsection.
3488: This pointer is accessible via substream-&amp;gt;runtime.
3500: For example, if the maximum number of channels is 1 only on some chip models, you can still use the same hardware descriptor and change the channels_max later: struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; ... runtime-&amp;gt;hw = snd_mychip_playback_hw; /* common definition */ if (chip-&amp;gt;model == VERY_OLD_ONE) runtime-&amp;gt;hw.channels_max = 1; Typically, you&#39;ll have a hardware descriptor as below: static struct snd_pcm_hardware snd_mychip_playback_hw = { .info = (SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER | SNDRV_PCM_INFO_MMAP_VALID), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_48000, .rate_min = 8000, .rate_max = 48000, .channels_min = 2, .channels_max = 2, .buffer_bytes_max = 32768, .period_bytes_min = 4096, .period_bytes_max = 32768, .periods_min = 1, .periods_max = 1024, }; The info field contains the type and capabilities of this pcm.
3583: int xxx() { struct mychip *chip = snd_pcm_substream_chip(substream); .... } The macro reads substream-&amp;gt;private_data, which is a copy of pcm-&amp;gt;private_data.
3588: Typically, this is done by like this: static int snd_xxx_open(struct snd_pcm_substream *substream) { struct mychip *chip = snd_pcm_substream_chip(substream); struct snd_pcm_runtime *runtime = substream-&amp;gt;runtime; runtime-&amp;gt;hw = snd_mychip_playback_hw; return 0; } where snd_mychip_playback_hw is the pre-defined hardware description.
3630: switch (cmd) { case SNDRV_PCM_TRIGGER_START: /* do something to start the PCM engine */ break; case SNDRV_PCM_TRIGGER_STOP: /* do something to stop the PCM engine */ break; default: return -EINVAL; } When the pcm supports the pause operation (given in the info field of the hardware table), the PAUSE_PUSH and PAUSE_RELEASE commands must be handled here, too.
*****************************************************************
========================= CLASS #3114 =============================
3479: Buffer management details will be described in the later section Buffer and Memory Management.
3516: This will be described in the later section.
3651: The detailed will be described in the later section Buffer and Memory Management.
3659: Some examples will be explained in the later section Buffer and Memory Management, too.
*****************************************************************
========================= CLASS #3116 =============================
3481: The available values are defined as SNDRV_PCM_INFO_XXX in &amp;lt;sound/asound.h&amp;gt;, which is used for the hardware definition (described later).
3501: The bit flags are defined in &amp;lt;sound/asound.h&amp;gt; as SNDRV_PCM_INFO_XXX.
3708: The control API is defined in &amp;lt;sound/control.h&amp;gt;.
3804: The AC97 codec API is defined in &amp;lt;sound/ac97_codec.h&amp;gt;.
3842: The MPU401-UART API is defined in &amp;lt;sound/mpu401.h&amp;gt;.
3877: The rawmidi API is defined in &amp;lt;sound/rawmidi.h&amp;gt;.
3907: The OPL3 API is defined in &amp;lt;sound/opl3.h&amp;gt;.
3930: The hwdep API is defined in &amp;lt;sound/hwdep.h&amp;gt;.
*****************************************************************
========================= CLASS #3144 =============================
3513: See Power Management section for details.
3635: See the Power Management section for details.
*****************************************************************
========================= CLASS #3213 =============================
3586: open callback static int snd_xxx_open(struct snd_pcm_substream *substream); This is called when a pcm substream is opened.
3592: close callback static int snd_xxx_close(struct snd_pcm_substream *substream); Obviously, this is called when a pcm substream is closed.
3889: close callback static int snd_xxx_close(struct snd_rawmidi_substream *substream); Guess what.
3961: This is called pre-allocation.
*****************************************************************
========================= CLASS #3233 =============================
3608: This is important, because the trigger callback is atomic (non-schedulable).
3655: This callback is atomic.
*****************************************************************
========================= CLASS #3274 =============================
3656: page callback This callback is optional too.
3903: This callback is optional.
*****************************************************************
========================= CLASS #3287 =============================
3670: Typical code would be like: Interrupt Handler Case #1 static irqreturn_t snd_mychip_interrupt(int irq, void *dev_id) { struct mychip *chip = dev_id; spin_lock(&amp;amp;chip-&amp;gt;lock); .... if (pcm_irq_invoked(chip)) { /* call updater, unlock before it */ spin_unlock(&amp;amp;chip-&amp;gt;lock); snd_pcm_period_elapsed(chip-&amp;gt;substream); spin_lock(&amp;amp;chip-&amp;gt;lock); /* acknowledge the interrupt if necessary */ } .... spin_unlock(&amp;amp;chip-&amp;gt;lock); return IRQ_HANDLED; } High frequency timer interrupts This happens when the hardware doesn&#39;t generate interrupts at the period boundary but issues timer interrupts at a fixed timer rate (e.g.
3674: Typical code would be like the following.
3676: */ if (chip-&amp;gt;size &amp;gt;= runtime-&amp;gt;period_size) { /* reset the accumulator */ chip-&amp;gt;size %= runtime-&amp;gt;period_size; /* call updater */ spin_unlock(&amp;amp;chip-&amp;gt;lock); snd_pcm_period_elapsed(substream); spin_lock(&amp;amp;chip-&amp;gt;lock); } /* acknowledge the interrupt if necessary */ } .... spin_unlock(&amp;amp;chip-&amp;gt;lock); return IRQ_HANDLED; } On calling snd_pcm_period_elapsed() In both cases, even if more than one period are elapsed, you don&#39;t have to call snd_pcm_period_elapsed() many times.
*****************************************************************
========================= CLASS #3402 =============================
3792: Metadata To provide information about the dB values of a mixer control, use on of the DECLARE_TLV_xxx macros from &amp;lt;sound/tlv.h&amp;gt; to define a variable containing this information, set thetlv.p field to point to this variable, and include the SNDRV_CTL_ELEM_ACCESS_TLV_READ flag in the access field; like this: static DECLARE_TLV_DB_SCALE(db_scale_my_control, -4050, 150, 0); static struct snd_kcontrol_new my_control = { ... .access = SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_TLV_READ, ... .tlv.p = db_scale_my_control, }; The DECLARE_TLV_DB_SCALE macro defines information about a mixer control where each step in the control&#39;s value changes the dB value by a constant dB amount.
3797: The DECLARE_TLV_DB_LINEAR macro defines information about a mixer control where the control&#39;s value affects the output linearly.
*****************************************************************
========================= CLASS #3403 =============================
3793: The first parameter is the name of the variable to be defined.
3798: The first parameter is the name of the variable to be defined.
*****************************************************************
========================= CLASS #3404 =============================
3794: The second parameter is the minimum value, in units of 0.01 dB.
3799: The second parameter is the minimum value, in units of 0.01 dB.
*****************************************************************
========================= CLASS #3405 =============================
3795: The third parameter is the step size, in units of 0.01 dB.
3800: The third parameter is the maximum value, in units of 0.01 dB.
*****************************************************************
========================= CLASS #3410 =============================
3805: Full Code ExampleExample of AC97 Interface struct mychip { .... struct snd_ac97 *ac97; .... }; static unsigned short snd_mychip_ac97_read(struct snd_ac97 *ac97, unsigned short reg) { struct mychip *chip = ac97-&amp;gt;private_data; .... /* read a register value here from the codec */ return the_register_value; } static void snd_mychip_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val) { struct mychip *chip = ac97-&amp;gt;private_data; .... /* write the given register value to the codec */ } static int snd_mychip_ac97(struct mychip *chip) { struct snd_ac97_bus *bus; struct snd_ac97_template ac97; int err; static struct snd_ac97_bus_ops ops = { .write = snd_mychip_ac97_write, .read = snd_mychip_ac97_read, }; err = snd_ac97_bus(chip-&amp;gt;card, 0, &amp;amp;ops, NULL, &amp;amp;bus); if (err &amp;lt; 0) return err; memset(&amp;amp;ac97, 0, sizeof(ac97)); ac97.private_data = chip; return snd_ac97_mixer(bus, &amp;amp;ac97, &amp;amp;chip-&amp;gt;ac97); } Constructor To create an ac97 instance, first call snd_ac97_bus with an ac97_bus_ops_t record with callback functions.
3806: struct snd_ac97_bus *bus; static struct snd_ac97_bus_ops ops = { .write = snd_mychip_ac97_write, .read = snd_mychip_ac97_read, }; snd_ac97_bus(card, 0, &amp;amp;ops, NULL, &amp;amp;pbus); The bus record is shared among all belonging ac97 instances.
3808: struct snd_ac97_template ac97; int err; memset(&amp;amp;ac97, 0, sizeof(ac97)); ac97.private_data = chip; snd_ac97_mixer(bus, &amp;amp;ac97, &amp;amp;chip-&amp;gt;ac97); where chip-&amp;gt;ac97 is a pointer to a newly created ac97_t instance.
3815: static unsigned short snd_mychip_ac97_read(struct snd_ac97 *ac97, unsigned short reg) { struct mychip *chip = ac97-&amp;gt;private_data; .... return the_register_value; } Here, the chip can be cast from ac97-&amp;gt;private_data.
3817: static void snd_mychip_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val) These callbacks are non-atomic like the control API callbacks.
*****************************************************************
========================= CLASS #3445 =============================
3846: struct snd_rawmidi *rmidi; snd_mpu401_uart_new(card, 0, MPU401_HW_MPU401, port, info_flags, irq, &amp;amp;rmidi); The first argument is the card pointer, and the second is the index of this component.
3879: The third argument is the index of this component.
*****************************************************************
========================= CLASS #3446 =============================
3847: You can create up to 8 rawmidi devices.
3880: You can create up to 8 rawmidi devices.
*****************************************************************
========================= CLASS #3647 =============================
4060: Retrieve the card and the chip data.Call snd_power_change_state() with SNDRV_CTL_POWER_D3hot to change the power status.Call snd_pcm_suspend_all() to suspend the running PCM streams.If AC97 codecs are used, call snd_ac97_suspend() for each codec.Save the register values if necessary.Stop the hardware if necessary.Disable the PCI device by calling pci_disable_device().
4063: Retrieve the card and the chip data.Set up PCI.
*****************************************************************
========================= CLASS #3649 =============================
4062: A typical code would be like: static int mychip_suspend(struct pci_dev *pci, pm_message_t state) { /* (1) */ struct snd_card *card = pci_get_drvdata(pci); struct mychip *chip = card-&amp;gt;private_data; /* (2) */ snd_power_change_state(card, SNDRV_CTL_POWER_D3hot); /* (3) */ snd_pcm_suspend_all(chip-&amp;gt;pcm); /* (4) */ snd_ac97_suspend(chip-&amp;gt;ac97); /* (5) */ snd_mychip_save_registers(chip); /* (6) */ snd_mychip_stop_hardware(chip); /* (7) */ pci_disable_device(pci); pci_save_state(pci); return 0; } The scheme of the real resume job is as follows.
4068: A typical code would be like: static int mychip_resume(struct pci_dev *pci) { /* (1) */ struct snd_card *card = pci_get_drvdata(pci); struct mychip *chip = card-&amp;gt;private_data; /* (2) */ pci_restore_state(pci); pci_enable_device(pci); pci_set_master(pci); /* (3) */ snd_mychip_reinit_chip(chip); /* (4) */ snd_mychip_restore_registers(chip); /* (5) */ snd_ac97_resume(chip-&amp;gt;ac97); /* (6) */ snd_mychip_restart_chip(chip); /* (7) */ snd_power_change_state(card, SNDRV_CTL_POWER_D0); return 0; } As shown in the above, it&#39;s better to save registers after suspending the PCM operations via snd_pcm_suspend_all() or snd_pcm_suspend().
*****************************************************************
========================= CLASS #3689 =============================
4108: Run cvscompile script to re-generate the configure script and build the whole stuff again.
4112: Run cvscompile script to re-generate the configure script and build the whole stuff again.
*****************************************************************
========================= CLASS #3833 =============================
4263: If the checks fail to pass the function returns a non zero error code.
4321: This returns a non zero error code on failure.
*****************************************************************
========================= CLASS #3884 =============================
4314: This mode is activated by calling the z8530_sync_dma_open function.
4320: This is activated by calling the z8530_sync_txdma_open .
*****************************************************************
